
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=0 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Mon Oct  7 13:35:04 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					debug=0

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					zTemp3: 		.word ?
>000c					zTemp4:			.word ?
>000e					zLTemp1:		.dword ?					; temporary longs
>0012					idDataAddr:		.word ? 					; data address.
>0014					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 de a1	jsr $a1de			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 50 a0	lda $a050,x			lda 	BootMessage,x
.a00b	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 50 a0	lda $a050,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	20 f9 a3	jsr $a3f9			jsr 	ResetForRun
.a017	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer
.a01a					WarmStart:
.a01a	8a		txa				txa
.a01b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a01d	9a		txs				txs
.a01e	aa		tax				tax
.a01f	a9 07		lda #$07			lda 	#COL_WHITE
.a021	20 09 a2	jsr $a209			jsr 	ExternColour
.a024	20 1d a2	jsr $a21d			jsr 	ExternInput 				; input text
.a027	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a029	85 00		sta $00				sta 	codePtr
.a02b	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a02d	85 01		sta $01				sta 	codePtr+1
.a02f	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a031	85 06		sta $06				sta 	zTemp1 						; with line number 0 by being
.a033	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a035	85 07		sta $07				sta 	zTemp1+1
.a037	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a03a	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a03d	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a040	20 72 a7	jsr $a772			jsr 	Tokenise
.a043	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a045	85 00		sta $00				sta 	codePtr
.a047	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a049	85 01		sta $01				sta 	codePtr+1
.a04b	a0 03		ldy #$03			ldy 	#3
.a04d	4c 5b a2	jmp $a25b			jmp 	Execute 					; and run it
.a050					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a050	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$31,$20,$44,$41,$54,$45,$3a,$30,$37,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$00
>a058	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a068	2a 2a 2a 2a 0d 0d 42 55 49 4c 44 3a 31 20 44 41
>a078	54 45 3a 30 37 2d 4f 43 54 2d 32 30 31 39 0d 0d
>a088	00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a089					KeywordText:
>a089	01 21					.byte $01,$21                          ; $10 !
>a08b	01 26					.byte $01,$26                          ; $11 &
>a08d	01 2a					.byte $01,$2a                          ; $12 *
>a08f	01 2b					.byte $01,$2b                          ; $13 +
>a091	02 2b 2b				.byte $02,$2b,$2b                      ; $14 ++
>a094	01 2d					.byte $01,$2d                          ; $15 -
>a096	02 2d 2d				.byte $02,$2d,$2d                      ; $16 --
>a099	01 2e					.byte $01,$2e                          ; $17 .
>a09b	01 2f					.byte $01,$2f                          ; $18 /
>a09d	01 3b					.byte $01,$3b                          ; $19 ;
>a09f	01 3c					.byte $01,$3c                          ; $1a <
>a0a1	02 3c 3c				.byte $02,$3c,$3c                      ; $1b <<
>a0a4	02 3c 3d				.byte $02,$3c,$3d                      ; $1c <=
>a0a7	02 3c 3e				.byte $02,$3c,$3e                      ; $1d <>
>a0aa	01 3d					.byte $01,$3d                          ; $1e =
>a0ac	01 3e					.byte $01,$3e                          ; $1f >
>a0ae	02 3e 3d				.byte $02,$3e,$3d                      ; $20 >=
>a0b1	02 3e 3e				.byte $02,$3e,$3e                      ; $21 >>
>a0b4	01 40					.byte $01,$40                          ; $22 @
>a0b6	03 41 42 53				.byte $03,$41,$42,$53                  ; $23 ABS
>a0ba	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $24 ALLOC
>a0c0	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $25 AND
>a0c4	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $26 ASSERT
>a0cb	02 43 21				.byte $02,$43,$21                      ; $27 C!
>a0ce	02 43 40				.byte $02,$43,$40                      ; $28 C@
>a0d1	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $29 CLR
>a0d5	03 44 45 46				.byte $03,$44,$45,$46                  ; $2a DEF
>a0d9	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2b DROP
>a0de	03 44 55 50				.byte $03,$44,$55,$50                  ; $2c DUP
>a0e2	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2d ELSE
>a0e7	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2e END
>a0eb	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2f ENDIF
>a0f1	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $30 FOR
>a0f5	02 49 46				.byte $02,$49,$46                      ; $31 IF
>a0f8	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $32 INDEX
>a0fe	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $33 LIST
>a103	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a107	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a10e	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a112	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a117	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a11b	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a11f	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a123	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a126	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a12b	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3d REPEAT
>a132	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $3e RUN
>a136	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $3f SHL
>a13a	03 53 48 52				.byte $03,$53,$48,$52                  ; $40 SHR
>a13e	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $41 STOP
>a143	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $42 SWAP
>a148	03 53 59 53				.byte $03,$53,$59,$53                  ; $43 SYS
>a14c	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $44 UNTIL
>a152	02 57 21				.byte $02,$57,$21                      ; $45 W!
>a155	02 57 40				.byte $02,$57,$40                      ; $46 W@
>a158	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $47 XOR
>a15c	02 5b 5d				.byte $02,$5b,$5d                      ; $48 []
>a15f	01 5e					.byte $01,$5e                          ; $49 ^
>a161	01 2b					.byte $01,$2b                          ; $4a {+}
>a163	01 2d					.byte $01,$2d                          ; $4b {-}
>a165	00					.byte $00
.a166					KeywordVectorTable:
>a166	8d aa					.word Mem_DPoke                        ; $10 !
>a168	e6 a4					.word SyntaxError                      ; $11 &
>a16a	ab ab					.word MulInteger32                     ; $12 *
>a16c	b4 aa					.word Stack_Add                        ; $13 +
>a16e	b4 a9					.word Unary_Increment                  ; $14 ++
>a170	db aa					.word Stack_Sub                        ; $15 -
>a172	c7 a9					.word Unary_Decrement                  ; $16 --
>a174	b2 ad					.word System_ShowStack                 ; $17 .
>a176	f4 ab					.word DivInteger32                     ; $18 /
>a178	e6 a4					.word SyntaxError                      ; $19 ;
>a17a	db ac					.word Comp_Less                        ; $1a <
>a17c	e9 a9					.word Unary_Shl                        ; $1b <<
>a17e	06 ad					.word Comp_LessEqual                   ; $1c <=
>a180	a4 ac					.word Comp_NotEqual                    ; $1d <>
>a182	a1 ac					.word Comp_Equal                       ; $1e =
>a184	09 ad					.word Comp_Greater                     ; $1f >
>a186	de ac					.word Comp_GreaterEqual                ; $20 >=
>a188	f6 a9					.word Unary_Shr                        ; $21 >>
>a18a	3b aa					.word Mem_DPeek                        ; $22 @
>a18c	6b a9					.word Unary_Absolute                   ; $23 ABS
>a18e	e6 a4					.word SyntaxError                      ; $24 ALLOC
>a190	02 ab					.word Stack_And                        ; $25 AND
>a192	45 ad					.word System_Assert                    ; $26 ASSERT
>a194	60 aa					.word Mem_Poke                         ; $27 C!
>a196	03 aa					.word Mem_Peek                         ; $28 C@
>a198	dd a8					.word Stack_Empty                      ; $29 CLR
>a19a	e6 a4					.word SyntaxError                      ; $2a DEF
>a19c	e0 a8					.word Stack_Drop                       ; $2b DROP
>a19e	e2 a8					.word Stack_Dup                        ; $2c DUP
>a1a0	e6 a4					.word SyntaxError                      ; $2d ELSE
>a1a2	3a ad					.word System_END                       ; $2e END
>a1a4	e6 a4					.word SyntaxError                      ; $2f ENDIF
>a1a6	9e ae					.word Command_For                      ; $30 FOR
>a1a8	e6 a4					.word SyntaxError                      ; $31 IF
>a1aa	3a af					.word Command_Index                    ; $32 INDEX
>a1ac	54 a6					.word Cmd_List                         ; $33 LIST
>a1ae	89 ac					.word ModInteger32                     ; $34 MOD
>a1b0	71 a9					.word Unary_Negate                     ; $35 NEGATE
>a1b2	5f ad					.word System_New                       ; $36 NEW
>a1b4	f5 ae					.word Command_Next                     ; $37 NEXT
>a1b6	fc a8					.word Stack_Nip                        ; $38 NIP
>a1b8	93 a9					.word Unary_Not                        ; $39 NOT
>a1ba	66 ad					.word System_Old                       ; $3a OLD
>a1bc	4e ab					.word Stack_Or                         ; $3b OR
>a1be	16 a9					.word Stack_Over                       ; $3c OVER
>a1c0	60 af					.word Command_Repeat                   ; $3d REPEAT
>a1c2	31 ad					.word System_RUN                       ; $3e RUN
>a1c4	74 ab					.word Stack_Shl                        ; $3f SHL
>a1c6	77 ab					.word Stack_Shr                        ; $40 SHR
>a1c8	3d ad					.word System_STOP                      ; $41 STOP
>a1ca	30 a9					.word Stack_Swap                       ; $42 SWAP
>a1cc	8a ad					.word System_Sys                       ; $43 SYS
>a1ce	6a af					.word Command_Until                    ; $44 UNTIL
>a1d0	72 aa					.word Mem_WPoke                        ; $45 W!
>a1d2	1c aa					.word Mem_WPeek                        ; $46 W@
>a1d4	28 ab					.word Stack_Xor                        ; $47 XOR
>a1d6	e6 a4					.word SyntaxError                      ; $48 []
>a1d8	3b ae					.word WriteVariable                    ; $49 ^
>a1da	e6 a4					.word SyntaxError                      ; $4a {+}
>a1dc	e6 a4					.word SyntaxError                      ; $4b {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_AMPERSAND = $11              ; $11 &
=$12					KWD_ASTERISK = $12               ; $12 *
=$13					KWD_PLUS = $13                   ; $13 +
=$14					KWD_PLUSPLUS = $14               ; $14 ++
=$15					KWD_MINUS = $15                  ; $15 -
=$16					KWD_MINUSMINUS = $16             ; $16 --
=$17					KWD_DOT = $17                    ; $17 .
=$18					KWD_SLASH = $18                  ; $18 /
=$19					KWD_SEMICOLON = $19              ; $19 ;
=$1a					KWD_LESS = $1a                   ; $1a <
=$1b					KWD_LESSLESS = $1b               ; $1b <<
=$1c					KWD_LESSEQUAL = $1c              ; $1c <=
=$1d					KWD_LESSGREATER = $1d            ; $1d <>
=$1e					KWD_EQUAL = $1e                  ; $1e =
=$1f					KWD_GREATER = $1f                ; $1f >
=$20					KWD_GREATEREQUAL = $20           ; $20 >=
=$21					KWD_GREATERGREATER = $21         ; $21 >>
=$22					KWD_AT = $22                     ; $22 @
=$23					KWD_ABS = $23                    ; $23 ABS
=$24					KWD_ALLOC = $24                  ; $24 ALLOC
=$25					KWD_AND = $25                    ; $25 AND
=$26					KWD_ASSERT = $26                 ; $26 ASSERT
=$27					KWD_CPLING = $27                 ; $27 C!
=$28					KWD_CAT = $28                    ; $28 C@
=$29					KWD_CLR = $29                    ; $29 CLR
=$2a					KWD_DEF = $2a                    ; $2a DEF
=$2b					KWD_DROP = $2b                   ; $2b DROP
=$2c					KWD_DUP = $2c                    ; $2c DUP
=$2d					KWD_ELSE = $2d                   ; $2d ELSE
=$2e					KWD_END = $2e                    ; $2e END
=$2f					KWD_ENDIF = $2f                  ; $2f ENDIF
=$30					KWD_FOR = $30                    ; $30 FOR
=$31					KWD_IF = $31                     ; $31 IF
=$32					KWD_INDEX = $32                  ; $32 INDEX
=$33					KWD_LIST = $33                   ; $33 LIST
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_REPEAT = $3d                 ; $3d REPEAT
=$3e					KWD_RUN = $3e                    ; $3e RUN
=$3f					KWD_SHL = $3f                    ; $3f SHL
=$40					KWD_SHR = $40                    ; $40 SHR
=$41					KWD_STOP = $41                   ; $41 STOP
=$42					KWD_SWAP = $42                   ; $42 SWAP
=$43					KWD_SYS = $43                    ; $43 SYS
=$44					KWD_UNTIL = $44                  ; $44 UNTIL
=$45					KWD_WPLING = $45                 ; $45 W!
=$46					KWD_WAT = $46                    ; $46 W@
=$47					KWD_XOR = $47                    ; $47 XOR
=$48					KWD_LSQPARENRSQPAREN = $48       ; $48 []
=$49					KWD_HAT = $49                    ; $49 ^
=$4a					KWD_CONSTANT_PLUS = $4a          ; $4a {+}
=$4b					KWD_CONSTANT_MINUS = $4b         ; $4b {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a1de					ExternInitialise:
.a1de	a9 07		lda #$07			lda 	#$07 						; set colour
.a1e0	8d 86 02	sta $0286			sta 	646
.a1e3	a9 0e		lda #$0e			lda 	#14							; lower case
.a1e5	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1e8	a9 93		lda #$93			lda 	#147 						; clear screen
.a1ea	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1ed	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a1ef	4c 09 a2	jmp $a209			jmp 	ExternColour
.a1f2					ExternCheckBreak:
.a1f2	da		phx				phx 								; make sure we keep XY
.a1f3	5a		phy				phy
.a1f4	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a1f7	f0 03		beq $a1fc			beq		_ECBExit 					; stopped
.a1f9	7a		ply				ply 								; restore and exit.
.a1fa	fa		plx				plx
.a1fb	60		rts				rts
.a1fc					_ECBExit:
.a1fc	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a1ff					ExternPrint:
.a1ff	48		pha				pha
.a200	da		phx				phx
.a201	5a		phy				phy
.a202	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a205	7a		ply				ply
.a206	fa		plx				plx
.a207	68		pla				pla
.a208	60		rts				rts
.a209					ExternColour:
.a209	48		pha				pha
.a20a	da		phx				phx
.a20b	aa		tax				tax
.a20c	bd 15 a2	lda $a215,x			lda 	_ECTable,x
.a20f	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a212	fa		plx				plx
.a213	68		pla				pla
.a214	60		rts				rts
.a215					_ECTable:
>a215	90						.byte 	144
>a216	1c						.byte 	28
>a217	1e						.byte 	30
>a218	9e						.byte 	158
>a219	1f						.byte 	31
>a21a	9c						.byte 	156
>a21b	9f						.byte 	159
>a21c	05						.byte 	5
.a21d					ExternInput:
.a21d	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a21f	85 04		sta $04				sta 	zTemp0
.a221	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a223	85 05		sta $05				sta 	zTemp0+1
.a225	a9 07		lda #$07			lda 	#COL_WHITE
.a227	20 09 a2	jsr $a209			jsr 	ExternColour
.a22a	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a22d	c9 0d		cmp #$0d			cmp 	#13
.a22f	f0 0a		beq $a23b			beq 	_EIExit
.a231	92 04		sta ($04)			sta 	(zTemp0)
.a233	e6 04		inc $04				inc 	zTemp0
.a235	d0 f3		bne $a22a			bne 	_EIRead
.a237	e6 05		inc $05				inc 	zTemp0+1
.a239	80 ef		bra $a22a			bra 	_EIRead
.a23b	a9 00		lda #$00	_EIExit:lda 	#0
.a23d	92 04		sta ($04)			sta 	(zTemp0)
.a23f	a9 0d		lda #$0d			lda 	#13
.a241	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a244	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a245					EXNextLine:
.a245	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a247	f0 0f		beq $a258			beq 	_EXNLWarmStart
.a249	18		clc				clc 								; advance code pointer to next line
.a24a	65 00		adc $00				adc 	codePtr
.a24c	85 00		sta $00				sta 	codePtr
.a24e	90 02		bcc $a252			bcc 	_EXNLNoBump
.a250	e6 01		inc $01				inc 	codePtr+1
.a252					_EXNLNoBump:
.a252	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a254	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a256	d0 03		bne $a25b			bne 	Execute 					; not end of program
.a258					_EXNLWarmStart:
.a258	4c 3a ad	jmp $ad3a			jmp 	System_END
.a25b					Execute:
.a25b	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a25e	d0 03		bne $a263			bne 	_EXNoBreak
.a260	20 f2 a1	jsr $a1f2			jsr 	ExternCheckBreak
.a263					_EXNoBreak:
.a263	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a265	f0 de		beq $a245			beq 	EXNextLine 					; reached end of the line.
.a267	c8		iny				iny 								; advance pointer.
.a268	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a26a	90 27		bcc $a293			bcc 	EXStringComment
.a26c	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a26e	90 0d		bcc $a27d			bcc 	EXTokenExecute
.a270	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a272	90 03		bcc $a277			bcc 	EXPushConstant
.a274	4c e0 ad	jmp $ade0			jmp 	Identifier 					; it's an identifier C0-FF
.a277					EXPushConstant:
.a277	88		dey				dey
.a278	20 c2 a2	jsr $a2c2			jsr 	ExtractIntegerToTOS 		; extract integer
.a27b	80 de		bra $a25b			bra 	Execute
.a27d					EXTokenExecute:
.a27d	0a		asl a				asl 	a 							; double token, also clears carry
.a27e	da		phx				phx 								; save X, put token x 2 in X
.a27f	aa		tax				tax
.a280	bd 46 a1	lda $a146,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a283	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a285	bd 47 a1	lda $a147,x			lda 	KeywordVectorTable-$20+1,x
.a288	85 05		sta $05				sta 	zTemp0+1
.a28a	fa		plx				plx 								; restore X
.a28b	20 90 a2	jsr $a290			jsr 	_EXTCall 					; call the routine
.a28e	80 cb		bra $a25b			bra 	Execute
.a290					_EXTCall:
.a290	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a293					EXStringComment:
.a293	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a295	f0 15		beq $a2ac			beq 	EXStringSkip 				; (comment), so just skip it.
.a297	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a298	98		tya				tya
.a299	38		sec				sec
.a29a	65 00		adc $00				adc 	codePtr
.a29c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a29f	a5 01		lda $01				lda 	codePtr+1
.a2a1	69 00		adc #$00			adc 	#0
.a2a3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a2a6	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a2a9	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2ac					EXStringSkip:
.a2ac	98		tya				tya 								; the current position in A
.a2ad	18		clc				clc
.a2ae	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a2b0	a8		tay				tay 			 					; and make that the current position.
.a2b1	88		dey				dey 								; back one because of the initial skip
.a2b2	80 a7		bra $a25b			bra 	Execute
.a2b4					EXShiftTOSRight:
.a2b4	4a		lsr a				lsr 	a
.a2b5	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a2b8	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a2bb	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a2be	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a2c1	60		rts				rts
.a2c2					ExtractIntegerToTOS:
.a2c2	b1 00		lda ($00),y			lda 	(codePtr),y
.a2c4	c8		iny				iny
.a2c5	e8		inx				inx 								; make stack space
.a2c6	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a2c8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2cb	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a2ce	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a2d1	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2d4					_EXConstantLoop:
.a2d4	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a2d6	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a2d8	c9 80		cmp #$80			cmp 	#$80
.a2da	d0 2d		bne $a309			bne		_EXDone 					; no then exit
.a2dc	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a2df	48		pha				pha
.a2e0	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a2e3	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a2e6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a2e9	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a2ec	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a2ef	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a2f2	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a2f5	68		pla				pla
.a2f6	20 b4 a2	jsr $a2b4			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a2f9	20 b4 a2	jsr $a2b4			jsr 	EXShiftTOSRight				; which will be x64
.a2fc	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a2fe	c8		iny				iny
.a2ff	29 3f		and #$3f			and 	#$3F
.a301	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a304	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a307	80 cb		bra $a2d4			bra 	_EXConstantLoop
.a309	b1 00		lda ($00),y	_EXDone:lda 	(codePtr),y
.a30b	c8		iny				iny 								; skip over unary constant + -
.a30c	c9 4b		cmp #$4b			cmp 	#KWD_CONSTANT_MINUS
.a30e	d0 03		bne $a313			bne 	_EXPositive
.a310	4c 71 a9	jmp $a971			jmp 	Unary_Negate
.a313					_EXPositive:
.a313	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a314					IdentifierSearch:
.a314	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a316	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a318	90 12		bcc $a32c			bcc 	_ISSlow
.a31a	c9 fa		cmp #$fa			cmp 	#$F9+1
.a31c	b0 0e		bcs $a32c			bcs 	_ISSlow
.a31e	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a320	0a		asl a				asl 	a
.a321	0a		asl a				asl		a
.a322	85 12		sta $12				sta 	idDataAddr					; set up addres
.a324	a9 10		lda #$10			lda 	#AZVariables >> 8
.a326	85 13		sta $13				sta 	idDataAddr+1
.a328	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a32a	38		sec				sec 								; return with CS.
.a32b	60		rts				rts
.a32c					_ISSlow:
.a32c	20 e0 a3	jsr $a3e0			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a32f	98		tya				tya 								; set (zTemp1) to point to the
.a330	18		clc				clc 	 							; identifier to be searched.
.a331	65 00		adc $00				adc 	codePtr
.a333	85 06		sta $06				sta 	zTemp1
.a335	a5 01		lda $01				lda 	codePtr+1
.a337	69 00		adc #$00			adc 	#0
.a339	85 07		sta $07				sta 	zTemp1+1
.a33b	5a		phy				phy 								; save Y
.a33c	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a33e	48		pha				pha
.a33f	a0 01		ldy #$01			ldy 	#1
.a341	b1 04		lda ($04),y			lda 	(zTemp0),y
.a343	85 05		sta $05				sta 	zTemp0+1
.a345	68		pla				pla
.a346	85 04		sta $04				sta 	zTemp0
.a348	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a34a	f0 2c		beq $a378			beq 	_ISFail
.a34c	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a34e	b1 04		lda ($04),y			lda 	(zTemp0),y
.a350	85 08		sta $08				sta 	zTemp2
.a352	c8		iny				iny
.a353	b1 04		lda ($04),y			lda 	(zTemp0),y
.a355	85 09		sta $09				sta 	zTemp2+1
.a357	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a359					_ISCompare:
.a359	b1 06		lda ($06),y			lda 	(zTemp1),y
.a35b	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a35d	d0 dd		bne $a33c			bne		_ISLoop 					; different ?
.a35f	c8		iny				iny
.a360	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a362	90 f5		bcc $a359			bcc 	_ISCompare
.a364	18		clc				clc 								; set up the data pointer
.a365	a5 04		lda $04				lda 	zTemp0
.a367	69 02		adc #$02			adc 	#2
.a369	85 12		sta $12				sta 	idDataAddr
.a36b	a5 05		lda $05				lda 	zTemp0+1
.a36d	69 00		adc #$00			adc		#0
.a36f	85 13		sta $13				sta 	idDataAddr+1
.a371	a0 09		ldy #$09			ldy 	#9 							; get the type
.a373	b1 04		lda ($04),y			lda 	(zTemp0),y
.a375	7a		ply				ply
.a376	38		sec				sec
.a377	60		rts				rts
.a378					_ISFail:
.a378	7a		ply				ply
.a379	18		clc				clc
.a37a	60		rts				rts
.a37b					IdentifierCreate:
.a37b	5a		phy				phy 								; save Y
.a37c	48		pha				pha 								; save type on stack
.a37d	20 e0 a3	jsr $a3e0			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a380	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a383	85 06		sta $06				sta 	zTemp1
.a385	ad 89 10	lda $1089			lda 	VarMemory+1
.a388	85 07		sta $07				sta 	zTemp1+1
.a38a	5a		phy				phy 								; save Y (code offset)
.a38b	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a38d	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a38f	91 06		sta ($06),y			sta 	(zTemp1),y
.a391	c8		iny				iny
.a392	b1 04		lda ($04),y			lda 	(zTemp0),y
.a394	91 06		sta ($06),y			sta 	(zTemp1),y
.a396	c8		iny				iny
.a397					_IDCErase:
.a397	a9 00		lda #$00			lda 	#0
.a399	91 06		sta ($06),y			sta 	(zTemp1),y
.a39b	c8		iny				iny
.a39c	c0 06		cpy #$06			cpy 	#6
.a39e	d0 f7		bne $a397			bne 	_IDCErase
.a3a0	68		pla				pla 								; original Y
.a3a1	18		clc				clc
.a3a2	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a3a4	91 06		sta ($06),y			sta 	(zTemp1),y
.a3a6	c8		iny				iny
.a3a7	a5 01		lda $01				lda 	codePtr+1
.a3a9	69 00		adc #$00			adc 	#0
.a3ab	91 06		sta ($06),y			sta 	(zTemp1),y
.a3ad	c8		iny				iny
.a3ae	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a3b0	91 06		sta ($06),y			sta 	(zTemp1),y
.a3b2	68		pla				pla 								; restore type
.a3b3	c8		iny				iny
.a3b4	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a3b6	c8		iny				iny
.a3b7	98		tya				tya									; add offset to VarMemory
.a3b8	18		clc				clc
.a3b9	6d 88 10	adc $1088			adc 	VarMemory
.a3bc	8d 88 10	sta $1088			sta 	VarMemory
.a3bf	ad 89 10	lda $1089			lda 	VarMemory+1
.a3c2	69 00		adc #$00			adc 	#0
.a3c4	8d 89 10	sta $1089			sta 	VarMemory+1
.a3c7	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a3c9	92 04		sta ($04)			sta 	(zTemp0)
.a3cb	a0 01		ldy #$01			ldy 	#1
.a3cd	a5 07		lda $07				lda 	zTemp1+1
.a3cf	91 04		sta ($04),y			sta 	(zTemp0),y
.a3d1	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a3d3	18		clc				clc
.a3d4	69 02		adc #$02			adc 	#2
.a3d6	85 12		sta $12				sta 	idDataAddr
.a3d8	a5 07		lda $07				lda 	zTemp1+1
.a3da	69 00		adc #$00			adc 	#0
.a3dc	85 13		sta $13				sta 	idDataAddr+1
.a3de	7a		ply				ply 								; restore Y and exit
.a3df	60		rts				rts
.a3e0					IdentifierSetUpHashPtr:
.a3e0	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a3e2	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a3e4	0a		asl a				asl 	a 							; convert to an offset, clc
.a3e5	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a3e7	85 04		sta $04				sta 	zTemp0
.a3e9	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a3eb	85 05		sta $05				sta 	zTemp0+1
.a3ed	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a3ee					ResetCodePointer:
.a3ee	48		pha				pha
.a3ef	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a3f1	85 01		sta $01				sta 	codePtr+1
.a3f3	64 00		stz $00				stz 	codePtr
.a3f5	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a3f7	68		pla				pla
.a3f8	60		rts				rts
.a3f9					ResetForRun:
.a3f9	48		pha				pha
.a3fa	5a		phy				phy
.a3fb	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a3fd					_RRErase:
.a3fd	9e 68 10	stz $1068,x			stz		HashTable,x
.a400	e8		inx				inx
.a401	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a403	d0 f8		bne $a3fd			bne 	_RRErase
.a405	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer 			; code Pointer to start of program
.a408					_RRFindEnd:
.a408	b2 00		lda ($00)			lda 	(codePtr)					; at end ?
.a40a	f0 0b		beq $a417			beq 	_RRFoundEnd
.a40c	18		clc				clc 								; no, add offset to pointer.
.a40d	65 00		adc $00				adc 	codePtr
.a40f	85 00		sta $00				sta 	codePtr
.a411	90 f5		bcc $a408			bcc 	_RRFindEnd
.a413	e6 01		inc $01				inc 	codePtr+1
.a415	80 f1		bra $a408			bra 	_RRFindEnd
.a417					_RRFoundEnd:
.a417	18		clc				clc 								; add 1 to this, as it points to the last
.a418	a5 00		lda $00				lda 	codePtr 					; offset, and store in Variable Memory pointer
.a41a	69 01		adc #$01			adc 	#1
.a41c	8d 88 10	sta $1088			sta 	VarMemory
.a41f	a5 01		lda $01				lda 	codePtr+1
.a421	69 00		adc #$00			adc 	#0
.a423	8d 89 10	sta $1089			sta 	VarMemory+1
.a426	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a428	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a42b	9c 8a 10	stz $108a			stz 	AllocMemory
.a42e	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a430	85 02		sta $02				sta 	StructSP
.a432	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a434	85 03		sta $03				sta 	StructSP+1
.a436	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a438	92 02		sta ($02)			sta 	(StructSP)
.a43a	20 42 a4	jsr $a442			jsr 	ProcedureScan
.a43d	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a43f	7a		ply				ply
.a440	68		pla				pla
.a441	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a442					ProcedureScan:
.a442	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer 			; reset the code pointer.
.a445	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a447	f0 33		beq $a47c			beq 	_PSExit
.a449	a0 03		ldy #$03			ldy 	#3 							; start of line
.a44b	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a44d	c9 2a		cmp #$2a			cmp 	#KWD_DEF 					; first thing is DEF ?
.a44f	d0 1e		bne $a46f			bne 	_PSNext
.a451	c8		iny				iny 								; skip over def first, any following spaces
.a452	b1 00		lda ($00),y			lda 	(codePtr),y
.a454	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a456	20 7b a3	jsr $a37b			jsr 	IdentifierCreate
.a459					_PSSkipIdentifier:
.a459	b1 00		lda ($00),y			lda 	(codePtr),y
.a45b	c8		iny				iny
.a45c	c9 c0		cmp #$c0			cmp 	#$C0
.a45e	b0 f9		bcs $a459			bcs 	_PSSkipIdentifier
.a460	88		dey				dey 								; undo last, points at first non ID
.a461	98		tya				tya  								; save the address in the data slot.
.a462	18		clc				clc 								; changing Y doesn't matter.
.a463	65 00		adc $00				adc 	codePtr
.a465	92 12		sta ($12)			sta 	(idDataAddr)
.a467	a5 01		lda $01				lda 	codePtr+1
.a469	69 00		adc #$00			adc 	#0
.a46b	a0 01		ldy #$01			ldy 	#1
.a46d	91 12		sta ($12),y			sta 	(idDataAddr),y
.a46f					_PSNext:
.a46f	18		clc				clc 								; go to next
.a470	b2 00		lda ($00)			lda 	(codePtr)
.a472	65 00		adc $00				adc 	codePtr
.a474	85 00		sta $00				sta 	codeptr
.a476	90 cd		bcc $a445			bcc 	_PSMain
.a478	e6 01		inc $01				inc 	codePtr+1
.a47a	80 c9		bra $a445			bra 	_PSMain
.a47c					_PSExit:
.a47c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/indexing.asm

.a47d					IndexCheck:
.a47d	b1 00		lda ($00),y			lda 	(codePtr),y 				; check next character
.a47f	c9 48		cmp #$48			cmp 	#KWD_LSQPARENRSQPAREN 		; left/right square bracket ?
.a481	f0 12		beq $a495			beq 	_ICArrayAccess
.a483	29 c0		and #$c0			and 	#$C0 						; constant (e.g. 10xx xxxx)
.a485	c9 80		cmp #$80			cmp 	#$80
.a487	b0 01		bcs $a48a			bcs 	_ICSubscript
.a489					_ICExit:
.a489	60		rts				rts
.a48a					_ICSubscript:
.a48a	b1 00		lda ($00),y			lda 	(codePtr),y
.a48c	c8		iny				iny 								; skip over subscript
.a48d	29 3f		and #$3f			and 	#$3F 						; lower 6 bits only.
.a48f	85 06		sta $06				sta 	zTemp1 						; save in zTemp1
.a491	64 07		stz $07				stz 	zTemp1+1
.a493	80 0c		bra $a4a1			bra 	_ICAddSubscript 			; double and add to value.
.a495					_ICArrayAccess:
.a495	c8		iny				iny 								; point to next
.a496	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.a499	85 07		sta $07				sta 	zTemp1+1 					; no point in the rest !
.a49b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a49e	85 06		sta $06				sta 	zTemp1
.a4a0	ca		dex				dex
.a4a1					_ICAddSubscript:
.a4a1	06 06		asl $06				asl 	zTemp1 						; subscript x 4
.a4a3	26 07		rol $07				rol 	zTemp1+1
.a4a5	06 06		asl $06				asl 	zTemp1
.a4a7	26 07		rol $07				rol 	zTemp1+1
.a4a9	5a		phy				phy
.a4aa	b2 12		lda ($12)			lda 	(idDataAddr)				; check indirecting through 0
.a4ac	a0 01		ldy #$01			ldy 	#1
.a4ae	11 12		ora ($12),y			ora 	(idDataAddr),y 				; probably means uninitialised
.a4b0	c8		iny				iny
.a4b1	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4b3	c8		iny				iny
.a4b4	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4b6	f0 17		beq $a4cf			beq 	_ICZero
.a4b8	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.a4b9	b2 12		lda ($12)			lda 	(idDataAddr)
.a4bb	65 06		adc $06				adc 	zTemp1
.a4bd	48		pha				pha
.a4be	a0 01		ldy #$01			ldy 	#1
.a4c0	b1 12		lda ($12),y			lda 	(idDataAddr),y
.a4c2	65 07		adc $07				adc 	zTemp1+1
.a4c4	85 13		sta $13				sta 	idDataAddr+1 				; write it out
.a4c6	68		pla				pla
.a4c7	85 12		sta $12				sta 	idDataAddr
.a4c9	64 14		stz $14				stz 	idDataAddr+2 				; extend to 32 bits
.a4cb	64 15		stz $15				stz 	idDataAddr+3
.a4cd	7a		ply				ply
.a4ce	60		rts				rts
.a4cf					_ICZero:
.a4cf	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4d2	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>a4da	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a4e6					SyntaxError:
.a4e6	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4e9	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a4f1	52 52 4f 52 00
.a4f6					ErrorHandler:
.a4f6	68		pla				pla 								; pop message address
.a4f7	85 04		sta $04				sta 	zTemp0
.a4f9	68		pla				pla
.a4fa	85 05		sta $05				sta 	zTemp0+1
.a4fc	a9 05		lda #$05			lda 	#CTH_ERROR
.a4fe	20 09 a2	jsr $a209			jsr 	ExternColour
.a501	a0 01		ldy #$01			ldy 	#1 							; print it
.a503					_ErrorPrint:
.a503	b1 04		lda ($04),y			lda 	(zTemp0),y
.a505	20 ff a1	jsr $a1ff			jsr		ExternPrint
.a508	c8		iny				iny
.a509	b1 04		lda ($04),y			lda 	(zTemp0),y
.a50b	d0 f6		bne $a503			bne 	_ErrorPrint
.a50d	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a50f	b1 00		lda ($00),y			lda		(codePtr),y
.a511	c8		iny				iny
.a512	12 00		ora ($00)			ora 	(codePtr)
.a514	f0 1c		beq $a532			beq 	_ErrorNoLine 				; if so, skip
.a516	a9 20		lda #$20			lda 	#32
.a518	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a51b	a9 40		lda #$40			lda 	#'@'
.a51d	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a520	a9 20		lda #$20			lda 	#32
.a522	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a525	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a527	b1 00		lda ($00),y			lda 	(codePtr),y
.a529	48		pha				pha
.a52a	c8		iny				iny
.a52b	b1 00		lda ($00),y			lda 	(codePtr),y
.a52d	a8		tay				tay
.a52e	68		pla				pla
.a52f	20 3a a5	jsr $a53a			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a532					_ErrorNoLine:
.a532	a9 0d		lda #$0d			lda 	#13							; new line
.a534	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a537	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a53a					ErrorPrint16:
.a53a	da		phx				phx
.a53b	e8		inx				inx 								; space on stack
.a53c	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a53f	98		tya				tya
.a540	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a543	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a546	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a549	20 5f a5	jsr $a55f			jsr 	IntegerToString 			; convert to string.
.a54c	fa		plx				plx
.a54d					ErrorPrintIntegerBuffer:
.a54d	da		phx				phx
.a54e	a2 00		ldx #$00			ldx 	#0
.a550					_EP16Loop:
.a550	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a553	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a556	e8		inx				inx
.a557	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a55a	d0 f4		bne $a550			bne 	_EP16Loop
.a55c	8a		txa				txa
.a55d	fa		plx				plx
.a55e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a55f					IntegerToString:
.a55f	48		pha				pha
.a560	5a		phy				phy
.a561	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a564	10 08		bpl $a56e			bpl 		_ITSNotMinus
.a566	a9 2d		lda #$2d			lda 		#"-"
.a568	20 00 a6	jsr $a600			jsr 		ITSOutputCharacter
.a56b	20 71 a9	jsr $a971			jsr 		Unary_Negate
.a56e					_ITSNotMinus:
.a56e	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a571	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a574	8a		txa				txa 								; use Y for the integer index.
.a575	a8		tay				tay
.a576	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a578					_ITSNextSubtractor:
.a578	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a57a	8d 21 08	sta $0821			sta 		NumConvCount
.a57d					_ITSSubtract:
.a57d	38		sec				sec
.a57e	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a581	fd dc a5	sbc $a5dc,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a584	48		pha				pha
.a585	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a588	fd dd a5	sbc $a5dd,x			sbc 		_ITSSubtractors+1,x
.a58b	48		pha				pha
.a58c	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a58f	fd de a5	sbc $a5de,x			sbc 		_ITSSubtractors+2,x
.a592	48		pha				pha
.a593	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a596	fd df a5	sbc $a5df,x			sbc 		_ITSSubtractors+3,x
.a599	90 14		bcc $a5af			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a59b	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a59e	68		pla				pla
.a59f	99 00 0e	sta $0e00,y			sta 		stack2,y
.a5a2	68		pla				pla
.a5a3	99 00 0d	sta $0d00,y			sta 		stack1,y
.a5a6	68		pla				pla
.a5a7	99 00 0c	sta $0c00,y			sta 		stack0,y
.a5aa	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a5ad	80 ce		bra $a57d			bra 		_ITSSubtract 			; go round again.
.a5af					_ITSCantSubtract:
.a5af	68		pla				pla 								; throw away interim answers
.a5b0	68		pla				pla 								; (the subtraction that failed)
.a5b1	68		pla				pla
.a5b2	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a5b5	c9 30		cmp #$30			cmp 		#"0"
.a5b7	d0 05		bne $a5be			bne 		_ITSOutputDigit
.a5b9	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a5bc	f0 09		beq $a5c7			beq	 		_ITSGoNextSubtractor
.a5be					_ITSOutputDigit:
.a5be	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a5c1	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a5c4	20 00 a6	jsr $a600			jsr 		ITSOutputCharacter 		; output it.
.a5c7					_ITSGoNextSubtractor:
.a5c7	e8		inx				inx 								; next dword in subtractor table.
.a5c8	e8		inx				inx
.a5c9	e8		inx				inx
.a5ca	e8		inx				inx
.a5cb	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a5cd	d0 a9		bne $a578			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a5cf	98		tya				tya 								; X is back as the mantissa index
.a5d0	aa		tax				tax
.a5d1	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a5d4	09 30		ora #$30			ora 		#"0"
.a5d6	20 00 a6	jsr $a600			jsr 		ITSOutputCharacter
.a5d9	7a		ply				ply 								; and exit
.a5da	68		pla				pla
.a5db	60		rts				rts
.a5dc					_ITSSubtractors:
>a5dc	00 ca 9a 3b					.dword 		1000000000
>a5e0	00 e1 f5 05					.dword 		100000000
>a5e4	80 96 98 00					.dword 		10000000
>a5e8	40 42 0f 00					.dword 		1000000
>a5ec	a0 86 01 00					.dword 		100000
>a5f0	10 27 00 00					.dword 		10000
>a5f4	e8 03 00 00					.dword 		1000
>a5f8	64 00 00 00					.dword 		100
>a5fc	0a 00 00 00					.dword 		10
.a600					_ITSSubtractorsEnd:
.a600					ITSOutputCharacter:
.a600	48		pha				pha
.a601	da		phx				phx
.a602	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a605	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a608	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a60b	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a60e	fa		plx				plx
.a60f	68		pla				pla
.a610	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a611					IntFromString:
.a611	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a613	e8		inx				inx 								; space on stack
.a614	20 47 a6	jsr $a647			jsr 	IFSClearTOS
.a617					_IFSLoop:
.a617	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get next
.a619	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a61b	90 24		bcc $a641			bcc 	_IFSExit
.a61d	c9 3a		cmp #$3a			cmp 	#"9"+1
.a61f	b0 20		bcs $a641			bcs 	_IFSExit
.a621	20 e2 a8	jsr $a8e2			jsr 	Stack_Dup 					; duplicate tos
.a624	20 e9 a9	jsr $a9e9			jsr 	Unary_Shl	 				; x 2
.a627	20 e9 a9	jsr $a9e9			jsr 	Unary_Shl 					; x 4
.a62a	20 b4 aa	jsr $aab4			jsr 	Stack_Add 					; x 5
.a62d	20 e9 a9	jsr $a9e9			jsr 	Unary_Shl 					; x 10
.a630	e8		inx				inx  								; create space next up
.a631	20 47 a6	jsr $a647			jsr 	IFSClearTOS
.a634	b1 04		lda ($04),y			lda 	(zTemp0),y 					; add digit
.a636	29 0f		and #$0f			and 	#15
.a638	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a63b	20 b4 aa	jsr $aab4			jsr 	Stack_Add 					; add to tos
.a63e	c8		iny				iny
.a63f	80 d6		bra $a617			bra 	_IFSLoop
.a641					_IFSExit:
.a641	98		tya				tya
.a642	38		sec				sec
.a643	f0 01		beq $a646			beq 	_IFSSkipFail
.a645	18		clc				clc
.a646					_IFSSkipFail:
.a646	60		rts				rts
.a647					IFSClearTOS:
.a647	9e 00 0c	stz $0c00,x			stz		stack0,x
.a64a	9e 00 0d	stz $0d00,x			stz		stack1,x
.a64d	9e 00 0e	stz $0e00,x			stz		stack2,x
.a650	9e 00 0f	stz $0f00,x			stz		stack3,x
.a653	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/list.asm

.a654					Cmd_List:
.a654	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer 			; back to the beginning
.a657	64 08		stz $08				stz 	zTemp2						; clear the lowest-number
.a659	64 09		stz $09				stz 	zTemp2+1
.a65b	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.a65d	f0 0b		beq $a66a			beq 	_CLINone
.a65f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.a662	85 08		sta $08				sta 	zTemp2
.a664	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a667	95 09		sta $09,x			sta 	zTemp2+1,x
.a669	ca		dex				dex 								; and pop the tos
.a66a					_CLINone:
.a66a	a9 10		lda #$10			lda 	#16 						; list this many lines
.a66c	85 06		sta $06				sta 	zTemp1
.a66e					_CLILoop
.a66e	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a670	f0 24		beq $a696			beq 	_CLIEnd
.a672	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a674	38		sec				sec
.a675	b1 00		lda ($00),y			lda 	(codePtr),y
.a677	e5 08		sbc $08				sbc 	zTemp2
.a679	c8		iny				iny
.a67a	b1 00		lda ($00),y			lda 	(codePtr),y
.a67c	e5 09		sbc $09				sbc 	zTemp2+1
.a67e	90 09		bcc $a689			bcc 	_CLISkip
.a680	da		phx				phx
.a681	20 99 a6	jsr $a699			jsr 	ListCurrent 				; list the line.
.a684	fa		plx				plx
.a685	c6 06		dec $06				dec 	zTemp1 						; done all lines
.a687	f0 0d		beq $a696			beq 	_CLIEnd
.a689					_CLISkip:
.a689	18		clc				clc
.a68a	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a68c	65 00		adc $00				adc 	codePtr
.a68e	85 00		sta $00				sta 	codePtr
.a690	90 dc		bcc $a66e			bcc 	_CLILoop
.a692	e6 01		inc $01				inc 	codePtr+1
.a694	80 d8		bra $a66e			bra 	_CLILoop
.a696					_CLIEnd:
.a696	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a699					ListCurrent:
.a699	a9 06		lda #$06			lda 	#CTH_NUMBER
.a69b	20 09 a2	jsr $a209			jsr 	ExternColour 				; set colour
.a69e	a0 01		ldy #$01			ldy 	#1							; print line#
.a6a0	b1 00		lda ($00),y			lda 	(codePtr),y
.a6a2	48		pha				pha
.a6a3	c8		iny				iny
.a6a4	b1 00		lda ($00),y			lda 	(codePtr),y
.a6a6	a8		tay				tay
.a6a7	68		pla				pla
.a6a8	20 3a a5	jsr $a53a			jsr 	ErrorPrint16
.a6ab	a8		tay				tay
.a6ac					_LCPadOut:
.a6ac	a9 20		lda #$20			lda 	#' '
.a6ae	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a6b1	c8		iny				iny
.a6b2	c0 05		cpy #$05			cpy 	#5
.a6b4	d0 f6		bne $a6ac			bne 	_LCPadOut
.a6b6	a0 03		ldy #$03			ldy 	#3 							; start here
.a6b8					_LCLoop:
.a6b8	a9 20		lda #$20			lda 	#' '						; space
.a6ba	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a6bd					_LCLoopNoSpace:
.a6bd	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first
.a6bf	30 3e		bmi $a6ff			bmi 	_LCIdentConst 				; identifier or constant
.a6c1	d0 05		bne $a6c8			bne 	_LCStringToken
.a6c3	a9 0d		lda #$0d			lda 	#13
.a6c5	4c ff a1	jmp $a1ff			jmp 	ExternPrint
.a6c8					_LCStringToken:
.a6c8	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.a6ca	90 0c		bcc $a6d8			bcc		_LCString
.a6cc	20 40 a7	jsr $a740			jsr 	ListPrintToken
.a6cf	b1 00		lda ($00),y			lda 	(codePtr),y 				; no space if ^
.a6d1	c8		iny				iny 								; advance pointer
.a6d2	c9 49		cmp #$49			cmp 	#KWD_HAT
.a6d4	f0 e7		beq $a6bd			beq 	_LCLoopNoSpace
.a6d6	80 e0		bra $a6b8			bra 	_LCLoop 					; go round again.
.a6d8					_LCString:
.a6d8	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.a6d9	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.a6db	a2 22		ldx #$22			ldx 	#'"'
.a6dd	b0 04		bcs $a6e3			bcs 	_LCSSkip
.a6df	a9 07		lda #$07			lda 	#CTH_COMMENT
.a6e1	a2 27		ldx #$27			ldx 	#"'"
.a6e3					_LCSSkip:
.a6e3	20 09 a2	jsr $a209			jsr 	ExternColour 				; set colour
.a6e6	8a		txa				txa
.a6e7	48		pha				pha 								; save end quote on stack.
.a6e8	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a6eb	c8		iny				iny 								; skip type size
.a6ec	c8		iny				iny
.a6ed					_LCSPrint:
.a6ed	b1 00		lda ($00),y			lda 	(codePtr),y
.a6ef	c8		iny				iny
.a6f0	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.a6f2	f0 05		beq $a6f9			beq 	_LCSExit
.a6f4	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a6f7	80 f4		bra $a6ed			bra 	_LCSPrint
.a6f9					_LCSExit:
.a6f9	68		pla				pla
.a6fa	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a6fd	80 b9		bra $a6b8			bra 	_LCLoop
.a6ff					_LCIdentConst:
.a6ff	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.a701	90 1e		bcc $a721			bcc 	_LCConstant
.a703	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.a705	20 09 a2	jsr $a209			jsr 	ExternColour
.a708					_LCCIdLoop:
.a708	b1 00		lda ($00),y			lda 	(codePtr),y 				; read
.a70a	c8		iny				iny
.a70b	29 1f		and #$1f			and 	#$1F 						; convert
.a70d	18		clc				clc
.a70e	69 41		adc #$41			adc 	#'A'
.a710	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.a712	d0 02		bne $a716			bne 	_LCCNotDot
.a714	a9 2e		lda #$2e			lda 	#'.'
.a716					_LCCNotDot:
.a716	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a719	b1 00		lda ($00),y			lda 	(codePtr),y 				; another
.a71b	c9 c0		cmp #$c0			cmp 	#$C0
.a71d	b0 e9		bcs $a708			bcs 	_LCCIdLoop
.a71f	80 97		bra $a6b8			bra 	_LCLoop
.a721					_LCConstant:
.a721	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.a723	20 09 a2	jsr $a209			jsr 	ExternColour
.a726	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.a728	20 c2 a2	jsr $a2c2			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.a72b	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.a72e	48		pha				pha
.a72f	20 5f a5	jsr $a55f			jsr 	IntegerToString 			; this could corrupt stack if full :)
.a732	20 4d a5	jsr $a54d			jsr 	ErrorPrintIntegerBuffer
.a735	68		pla				pla 								; sign back
.a736	10 80		bpl $a6b8			bpl 	_LCLoop
.a738	a9 2d		lda #$2d			lda 	#"-"
.a73a	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a73d	4c b8 a6	jmp $a6b8			jmp 	_LCLoop
.a740					ListPrintToken:
.a740	5a		phy				phy
.a741	48		pha				pha 								; token colour
.a742	a9 02		lda #$02			lda 	#CTH_TOKEN
.a744	20 09 a2	jsr $a209			jsr 	ExternColour
.a747	fa		plx				plx
.a748	a9 89		lda #$89			lda 	#KeywordText & $FF
.a74a	85 04		sta $04				sta 	zTemp0
.a74c	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a74e	85 05		sta $05				sta 	zTemp0+1
.a750					_LPTLoop:
.a750	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.a752	f0 0e		beq $a762			beq 	_LPTFound
.a754	ca		dex				dex
.a755	b2 04		lda ($04)			lda 	(zTemp0)
.a757	38		sec				sec									; add 1, it's length+name
.a758	65 04		adc $04				adc 	zTemp0
.a75a	85 04		sta $04				sta 	zTemp0
.a75c	90 f2		bcc $a750			bcc 	_LPTLoop
.a75e	e6 05		inc $05				inc 	zTemp0+1
.a760	80 ee		bra $a750			bra 	_LPTLoop
.a762					_LPTFound:
.a762	a0 01		ldy #$01			ldy 	#1 							; start here.
.a764					_LPTShow:
.a764	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get character
.a766	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.a768	90 06		bcc $a770			bcc 	_LPTExit
.a76a	c8		iny				iny
.a76b	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.a76e	80 f4		bra $a764			bra 	_LPTShow
.a770					_LPTExit:
.a770	7a		ply				ply
.a771	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a772					Tokenise:
.a772	da		phx				phx
.a773	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a775					_TKSkip:
.a775	c8		iny				iny
.a776					_TKMainLoop:
.a776	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and check end.
.a778	f0 06		beq $a780			beq 	_TKExit
.a77a	c9 20		cmp #$20			cmp 	#" "
.a77c	f0 f7		beq $a775			beq 	_TKSkip
.a77e	80 04		bra $a784			bra 	_TKNotEnd
.a780	92 06		sta ($06)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a782	fa		plx				plx
.a783	60		rts				rts
.a784					_TKNotEnd:
.a784	c9 22		cmp #$22			cmp 	#'"'
.a786	f0 04		beq $a78c			beq 	_TKIsQuote
.a788	c9 27		cmp #$27			cmp 	#"'"
.a78a	d0 05		bne $a791			bne 	_TKNotQuote
.a78c					_TKIsQuote:
.a78c	20 aa a8	jsr $a8aa			jsr		TOKQuotedString
.a78f	80 e5		bra $a776			bra 	_TKMainLoop
.a791					_TKNotQuote:
.a791	98		tya				tya 								; current pos -> zTemp0
.a792	18		clc				clc
.a793	65 00		adc $00				adc 	codePtr
.a795	85 04		sta $04				sta 	zTemp0
.a797	85 00		sta $00				sta 	codePtr
.a799	a5 01		lda $01				lda 	codePtr+1
.a79b	69 00		adc #$00			adc 	#0
.a79d	85 05		sta $05				sta 	zTemp0+1
.a79f	85 01		sta $01				sta 	codePtr+1
.a7a1	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7a3	b1 00		lda ($00),y			lda 	(codePtr),y
.a7a5	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7a7	90 23		bcc $a7cc			bcc 	_TKNotNumber
.a7a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7ab	b0 1f		bcs $a7cc			bcs 	_TKNotNumber
.a7ad	e8		inx				inx
.a7ae	20 11 a6	jsr $a611			jsr 	IntFromString 				; convert to integer
.a7b1	48		pha				pha
.a7b2	20 82 a8	jsr $a882			jsr 	TokWriteConstant 			; do constant recursively.
.a7b5	7a		ply				ply
.a7b6	ca		dex				dex
.a7b7	b1 00		lda ($00),y			lda 	(codePtr),y
.a7b9	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7bb	d0 08		bne $a7c5			bne 	_TKIsPositive
.a7bd	c8		iny				iny									; skip it
.a7be	a9 4b		lda #$4b			lda 	#KWD_CONSTANT_MINUS
.a7c0	20 79 a8	jsr $a879			jsr 	TokWriteToken 				; write token out
.a7c3	80 b1		bra $a776			bra 	_TKMainLoop 				; loop back.
.a7c5					_TKIsPositive:
.a7c5	a9 4a		lda #$4a			lda 	#KWD_CONSTANT_PLUS
.a7c7	20 79 a8	jsr $a879			jsr 	TokWriteToken 				; write token out
.a7ca	80 aa		bra $a776			bra 	_TKMainLoop 				; loop back.
.a7cc					_TKNotNumber:
.a7cc	a9 89		lda #$89			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7ce	85 08		sta $08				sta 	zTemp2
.a7d0	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a7d2	85 09		sta $09				sta 	zTemp2+1
.a7d4	64 0a		stz $0a				stz 	zTemp3 						; clear 'best'
.a7d6	a9 10		lda #$10			lda 	#$10
.a7d8	85 0b		sta $0b				sta 	zTemp3+1 					; set current token
.a7da					_TKSearch:
.a7da	a0 00		ldy #$00			ldy 	#0
.a7dc					_TKCompare:
.a7dc	b1 00		lda ($00),y			lda 	(codePtr),y 	 			; get char from buffer
.a7de	c8		iny				iny
.a7df	d1 08		cmp ($08),y			cmp 	(zTemp2),y 					; does it match.
.a7e1	d0 07		bne $a7ea			bne 	_TKNext
.a7e3	98		tya				tya
.a7e4	d2 08		cmp ($08)			cmp 	(zTemp2) 					; Y = length
.a7e6	d0 f4		bne $a7dc			bne 	_TKCompare 					; found a match.
.a7e8	80 13		bra $a7fd			bra 	_TKFound
.a7ea	b2 08		lda ($08)	_TKNext:lda 	(zTemp2)					; get length
.a7ec	38		sec				sec 								; add length+1 to current
.a7ed	65 08		adc $08				adc 	zTemp2
.a7ef	85 08		sta $08				sta 	zTemp2
.a7f1	90 02		bcc $a7f5			bcc 	_TKNNC
.a7f3	e6 09		inc $09				inc 	zTemp2+1
.a7f5	e6 0b		inc $0b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a7f7	b2 08		lda ($08)			lda 	(zTemp2) 					; reached then end
.a7f9	d0 df		bne $a7da			bne 	_TKSearch 					; go try again.
.a7fb	80 0f		bra $a80c			bra 	_TKComplete
.a7fd					_TKFound:
.a7fd	98		tya				tya
.a7fe	c5 0a		cmp $0a				cmp 	zTemp3 						; check best
.a800	90 e8		bcc $a7ea			bcc 	_TKNext 					; if < best try next
.a802	f0 e6		beq $a7ea			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a804	85 0a		sta $0a				sta 	zTemp3 						; update best
.a806	a5 0b		lda $0b				lda 	zTemp3+1 					; save current token.
.a808	85 0c		sta $0c				sta 	zTemp4
.a80a	80 de		bra $a7ea			bra 	_TKNext
.a80c					_TKComplete:
.a80c	a5 0a		lda $0a				lda 	zTemp3 						; get "best score"
.a80e	f0 18		beq $a828			beq		_TKTokenFail 				; if zero no match occurred
.a810	a4 0a		ldy $0a				ldy 	zTemp3 						; length in Y
.a812	b2 00		lda ($00)			lda 	(codePtr) 					; look at first character
.a814	20 69 a8	jsr $a869			jsr 	TOKIsIdentifier 			; identifier character
.a817	90 07		bcc $a820			bcc 	_TKOutput 					; if not, then token is okay
.a819	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at character after
.a81b	20 69 a8	jsr $a869			jsr 	TOKIsIdentifier 			; is that an identifier
.a81e	b0 08		bcs $a828			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a820					_TKOutput:
.a820	a5 0c		lda $0c				lda 	zTemp4 						; output actual token
.a822	20 79 a8	jsr $a879			jsr 	TOKWriteToken
.a825	4c 76 a7	jmp $a776			jmp 	_TKMainLoop					; go round again
.a828					_TKTokenFail:
.a828	a0 00		ldy #$00			ldy 	#0
.a82a	b2 00		lda ($00)			lda 	(codePtr) 					; is the first an identifier ?
.a82c	20 69 a8	jsr $a869			jsr 	TOKIsIdentifier
.a82f	b0 13		bcs $a844			bcs 	_TKCopyIdent 				; if yes copy it
.a831	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a834	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a83c	4f 4b 45 4e 49 53 45 00
.a844					_TKCopyIdent:
.a844	c8		iny				iny 								; get next
.a845	b1 00		lda ($00),y			lda 	(codePtr),y
.a847	20 69 a8	jsr $a869			jsr 	TOKIsIdentifier 			; if identifier
.a84a	08		php				php 								; save CS on stack
.a84b	88		dey				dey 								; back to character
.a84c	b1 00		lda ($00),y			lda 	(codePtr),y 				; get it
.a84e	c8		iny				iny
.a84f	c9 2e		cmp #$2e			cmp 	#"."
.a851	d0 02		bne $a855			bne 	_TKNotDot
.a853	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a855					_TKNotDot:
.a855	38		sec				sec
.a856	e9 41		sbc #$41			sbc		#'A'
.a858	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a85a	28		plp				plp 								; CS if next is identifier
.a85b	08		php				php
.a85c	b0 02		bcs $a860			bcs 	_TKNotLast					; CC if next is not identifier
.a85e	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a860					_TKNotLast:
.a860	20 79 a8	jsr $a879			jsr 	TOKWriteToken 				; write out
.a863	28		plp				plp 								; get test result
.a864	b0 de		bcs $a844			bcs 	_TKCopyIdent 				; get the next identifier.
.a866	4c 76 a7	jmp $a776			jmp 	_TKMainLoop
.a869					TOKIsIdentifier:
.a869	c9 2e		cmp #$2e			cmp 	#"."
.a86b	f0 08		beq $a875			beq 	_TIIYes
.a86d	c9 41		cmp #$41			cmp 	#"A"
.a86f	90 06		bcc $a877			bcc 	_TIINo
.a871	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a873	b0 02		bcs $a877			bcs 	_TIINo
.a875					_TIIYes:
.a875	38		sec				sec
.a876	60		rts				rts
.a877					_TIINo:
.a877	18		clc				clc
.a878	60		rts				rts
.a879					TokWriteToken:
.a879	92 06		sta ($06)			sta 	(zTemp1)
.a87b	e6 06		inc $06				inc 	zTemp1
.a87d	d0 02		bne $a881			bne 	_TWTExit
.a87f	e6 07		inc $07				inc 	zTemp1+1
.a881					_TWTExit:
.a881	60		rts				rts
.a882					TokWriteConstant:
.a882	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a885	29 3f		and #$3f			and		#63
.a887	48		pha				pha 								; save on stack
.a888	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a88b	29 c0		and #$c0			and 	#$C0
.a88d	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a890	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a893	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a896	f0 0d		beq $a8a5			beq 	_TWCNoCall 					; no, don't call.
.a898	5a		phy				phy
.a899	a0 06		ldy #$06			ldy 	#6
.a89b					_TWCShift:
.a89b	20 f6 a9	jsr $a9f6			jsr 	Unary_Shr
.a89e	88		dey				dey
.a89f	d0 fa		bne $a89b			bne 	_TWCShift
.a8a1	7a		ply				ply
.a8a2	20 82 a8	jsr $a882			jsr 	TokWriteConstant
.a8a5					_TWCNoCall:
.a8a5	68		pla				pla
.a8a6	09 80		ora #$80			ora 	#$80						; make digit token
.a8a8	80 cf		bra $a879			bra 	TokWriteToken 				; and write it out.
.a8aa					TokQuotedString:
.a8aa	85 08		sta $08				sta 	zTemp2 						; save quote
.a8ac	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8ae	f0 02		beq $a8b2			beq 	_TQDouble
.a8b0	a9 01		lda #$01			lda 	#1
.a8b2					_TQDouble:
.a8b2	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8b3	20 79 a8	jsr $a879			jsr 	TOKWriteToken 				; write out
.a8b6	a5 06		lda $06				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8b8	85 0a		sta $0a				sta 	zTemp3
.a8ba	a5 07		lda $07				lda 	zTemp1+1
.a8bc	85 0b		sta $0b				sta 	zTemp3+1
.a8be	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8c0	20 79 a8	jsr $a879			jsr 	TOKWriteToken
.a8c3					_TQLoop:
.a8c3	c8		iny				iny 								; next character
.a8c4	b1 00		lda ($00),y			lda 	(codePtr),y
.a8c6	f0 0f		beq $a8d7			beq 	_TQExit 					; if zero exit
.a8c8	c5 08		cmp $08				cmp 	zTemp2 						; matching quote
.a8ca	f0 0a		beq $a8d6			beq 	_TQSkipExit 				; skip it and exit
.a8cc	20 79 a8	jsr $a879			jsr 	TOKWriteToken 				; write out
.a8cf	b2 0a		lda ($0a)			lda 	(zTemp3)					; inc char count
.a8d1	1a		inc a				inc 	a
.a8d2	92 0a		sta ($0a)			sta 	(zTemp3)
.a8d4	80 ed		bra $a8c3			bra 	_TQLoop						; go round
.a8d6					_TQSkipExit:
.a8d6	c8		iny				iny
.a8d7					_TQExit:
.a8d7	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8d9	20 79 a8	jsr $a879			jsr 	TOKWriteToken
.a8dc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a8dd					Stack_Empty:
.a8dd	a2 00		ldx #$00			ldx 	#0
.a8df	60		rts				rts
.a8e0					Stack_Drop:
.a8e0	ca		dex				dex
.a8e1	60		rts				rts
.a8e2					Stack_Dup:
.a8e2	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.a8e5	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a8e8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a8eb	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a8ee	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a8f1	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a8f4	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a8f7	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a8fa	e8		inx				inx 								; bump stack pointer
.a8fb	60		rts				rts
.a8fc					Stack_Nip:
.a8fc	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.a8ff	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a902	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a905	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a908	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a90b	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a90e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a911	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a914	ca		dex				dex 								; drop tos
.a915	60		rts				rts
.a916					Stack_Over:
.a916	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.a919	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a91c	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a91f	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a922	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a925	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a928	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a92b	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a92e	e8		inx				inx 							; bump stack pointer
.a92f	60		rts				rts
.a930					Stack_Swap:
.a930	5a		phy				phy
.a931	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a934	a8		tay				tay
.a935	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.a938	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a93b	98		tya				tya
.a93c	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a93f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a942	a8		tay				tay
.a943	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a946	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a949	98		tya				tya
.a94a	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a94d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a950	a8		tay				tay
.a951	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a954	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a957	98		tya				tya
.a958	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a95b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a95e	a8		tay				tay
.a95f	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a962	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a965	98		tya				tya
.a966	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a969	7a		ply				ply
.a96a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.a96b					Unary_Absolute:
.a96b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a96e	30 01		bmi $a971			bmi 	Unary_Negate
.a970	60		rts				rts
.a971					Unary_Negate:
.a971	38		sec				sec
.a972	a9 00		lda #$00			lda		#0
.a974	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a977	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a97a	a9 00		lda #$00			lda		#0
.a97c	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a97f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a982	a9 00		lda #$00			lda		#0
.a984	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a987	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a98a	a9 00		lda #$00			lda		#0
.a98c	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a98f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a992	60		rts				rts
.a993					Unary_Not:
.a993	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a996	49 ff		eor #$ff			eor 	#$FF
.a998	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a99b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a99e	49 ff		eor #$ff			eor 	#$FF
.a9a0	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a9a3	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a9a6	49 ff		eor #$ff			eor 	#$FF
.a9a8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9ab	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a9ae	49 ff		eor #$ff			eor 	#$FF
.a9b0	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a9b3	60		rts				rts
.a9b4					Unary_Increment:
.a9b4	fe 00 0c	inc $0c00,x			inc 	stack0,x
.a9b7	d0 0d		bne $a9c6			bne 	_UIExit
.a9b9	fe 00 0d	inc $0d00,x			inc 	stack1,x
.a9bc	d0 08		bne $a9c6			bne 	_UIExit
.a9be	fe 00 0e	inc $0e00,x			inc 	stack2,x
.a9c1	d0 03		bne $a9c6			bne 	_UIExit
.a9c3	fe 00 0f	inc $0f00,x			inc 	stack3,x
.a9c6					_UIExit:
.a9c6	60		rts				rts
.a9c7					Unary_Decrement:
.a9c7	38		sec				sec
.a9c8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a9cb	e9 01		sbc #$01			sbc 	#1
.a9cd	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a9d0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a9d3	e9 00		sbc #$00			sbc 	#0
.a9d5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a9d8	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a9db	e9 00		sbc #$00			sbc 	#0
.a9dd	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9e0	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a9e3	e9 00		sbc #$00			sbc 	#0
.a9e5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a9e8	60		rts				rts
.a9e9					Unary_Shl:
.a9e9	1e 00 0c	asl $0c00,x			asl 	stack0,x
.a9ec	3e 00 0d	rol $0d00,x			rol 	stack1,x
.a9ef	3e 00 0e	rol $0e00,x			rol 	stack2,x
.a9f2	3e 00 0f	rol $0f00,x			rol 	stack3,x
.a9f5	60		rts				rts
.a9f6					Unary_Shr:
.a9f6	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.a9f9	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a9fc	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a9ff	7e 00 0c	ror $0c00,x			ror 	stack0,x
.aa02	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.aa03					Mem_Peek:
.aa03	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa06	85 04		sta $04				sta 	zTemp0
.aa08	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa0b	85 05		sta $05				sta 	zTemp0+1
.aa0d	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa0f	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa12	9e 00 0d	stz $0d00,x			stz 	stack1,x
.aa15	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aa18	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aa1b	60		rts				rts
.aa1c					Mem_WPeek:
.aa1c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa1f	85 04		sta $04				sta 	zTemp0
.aa21	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa24	85 05		sta $05				sta 	zTemp0+1
.aa26	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa28	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa2b	5a		phy				phy 								; read msb
.aa2c	a0 01		ldy #$01			ldy 	#1
.aa2e	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa30	7a		ply				ply
.aa31	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.aa34	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aa37	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aa3a	60		rts				rts
.aa3b					Mem_DPeek:
.aa3b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa3e	85 04		sta $04				sta 	zTemp0
.aa40	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa43	85 05		sta $05				sta 	zTemp0+1
.aa45	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa47	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa4a	5a		phy				phy 								; read msb
.aa4b	a0 01		ldy #$01			ldy 	#1
.aa4d	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa4f	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.aa52	c8		iny				iny
.aa53	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa55	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa58	c8		iny				iny
.aa59	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa5b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa5e	7a		ply				ply
.aa5f	60		rts				rts
.aa60					Mem_Poke:
.aa60	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa63	85 04		sta $04				sta 	zTemp0
.aa65	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa68	85 05		sta $05				sta 	zTemp0+1
.aa6a	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aa6d	92 04		sta ($04)			sta 	(zTemp0)
.aa6f	ca		dex				dex
.aa70	ca		dex				dex
.aa71	60		rts				rts
.aa72					Mem_WPoke:
.aa72	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa75	85 04		sta $04				sta 	zTemp0
.aa77	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa7a	85 05		sta $05				sta 	zTemp0+1
.aa7c	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aa7f	92 04		sta ($04)			sta 	(zTemp0)
.aa81	5a		phy				phy
.aa82	a0 01		ldy #$01			ldy 	#1
.aa84	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.aa87	91 04		sta ($04),y			sta 	(zTemp0),y
.aa89	7a		ply				ply
.aa8a	ca		dex				dex
.aa8b	ca		dex				dex
.aa8c	60		rts				rts
.aa8d					Mem_DPoke:
.aa8d	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa90	85 04		sta $04				sta 	zTemp0
.aa92	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa95	85 05		sta $05				sta 	zTemp0+1
.aa97	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.aa9a	92 04		sta ($04)			sta 	(zTemp0)
.aa9c	5a		phy				phy
.aa9d	a0 01		ldy #$01			ldy 	#1
.aa9f	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aaa2	91 04		sta ($04),y			sta 	(zTemp0),y
.aaa4	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aaa7	c8		iny				iny
.aaa8	91 04		sta ($04),y			sta 	(zTemp0),y
.aaaa	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aaad	c8		iny				iny
.aaae	91 04		sta ($04),y			sta 	(zTemp0),y
.aab0	7a		ply				ply
.aab1	ca		dex				dex
.aab2	ca		dex				dex
.aab3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.aab4					Stack_Add:
.aab4	ca		dex				dex
.aab5					Stack_Add_No_Dex:
.aab5	18		clc				clc
.aab6	bd 00 0c	lda $0c00,x			lda		stack0,x
.aab9	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.aabc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aabf	bd 00 0d	lda $0d00,x			lda		stack1,x
.aac2	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.aac5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aac8	bd 00 0e	lda $0e00,x			lda		stack2,x
.aacb	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.aace	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aad1	bd 00 0f	lda $0f00,x			lda		stack3,x
.aad4	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.aad7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aada	60		rts				rts
.aadb					Stack_Sub:
.aadb	ca		dex				dex
.aadc	38		sec				sec
.aadd	bd 00 0c	lda $0c00,x			lda		stack0,x
.aae0	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.aae3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aae6	bd 00 0d	lda $0d00,x			lda		stack1,x
.aae9	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.aaec	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaef	bd 00 0e	lda $0e00,x			lda		stack2,x
.aaf2	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.aaf5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaf8	bd 00 0f	lda $0f00,x			lda		stack3,x
.aafb	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.aafe	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab01	60		rts				rts
.ab02					Stack_And:
.ab02	ca		dex				dex
.ab03	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab06	3d 01 0c	and $0c01,x			and		stack0+1,x
.ab09	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab0c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab0f	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ab12	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab15	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab18	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ab1b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab1e	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab21	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ab24	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab27	60		rts				rts
.ab28					Stack_Xor:
.ab28	ca		dex				dex
.ab29	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab2c	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ab2f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab32	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab35	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ab38	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab3b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab3e	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ab41	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab44	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab47	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ab4a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab4d	60		rts				rts
.ab4e					Stack_Or:
.ab4e	ca		dex				dex
.ab4f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab52	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ab55	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab58	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab5b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ab5e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab61	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab64	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ab67	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab6a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab6d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ab70	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab73	60		rts				rts
.ab74					Stack_Shl:
.ab74	38		sec				sec
.ab75	80 01		bra $ab78			bra 	StackShift
.ab77					Stack_Shr:
.ab77	18		clc				clc
.ab78					StackShift:
.ab78	08		php				php
.ab79	ca		dex				dex
.ab7a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.ab7d	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.ab7f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ab82	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ab85	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ab88	d0 13		bne $ab9d			bne 	_SSZero
.ab8a					_SSLoop:
.ab8a	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.ab8d	30 1a		bmi $aba9			bmi 	_SSDone 					; completed ?
.ab8f	28		plp				plp 								; restore flag
.ab90	08		php				php
.ab91	b0 05		bcs $ab98			bcs 	_SSLeft 					; do either shift.
.ab93	20 f6 a9	jsr $a9f6			jsr 	Unary_Shr
.ab96	80 f2		bra $ab8a			bra 	_SSLoop
.ab98					_SSLeft:
.ab98	20 e9 a9	jsr $a9e9			jsr 	Unary_Shl
.ab9b	80 ed		bra $ab8a			bra 	_SSLoop
.ab9d					_SSZero:
.ab9d	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.aba0	9e 00 0d	stz $0d00,x			stz 	stack1,x
.aba3	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aba6	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aba9					_SSDone:
.aba9	28		plp				plp 								; throw flag.
.abaa	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.abab					MulInteger32:
.abab	ca		dex				dex
.abac	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.abaf	85 0e		sta $0e				sta 	zLTemp1
.abb1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abb4	85 0f		sta $0f				sta 	zLTemp1+1
.abb6	bd 00 0e	lda $0e00,x			lda 	stack2,x
.abb9	85 10		sta $10				sta 	zLTemp1+2
.abbb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.abbe	85 11		sta $11				sta 	zLTemp1+3
.abc0	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.abc3	9e 00 0d	stz $0d00,x			stz 	stack1,x
.abc6	9e 00 0e	stz $0e00,x			stz 	stack2,x
.abc9	9e 00 0f	stz $0f00,x			stz 	stack3,x
.abcc					_BFMMultiply:
.abcc	a5 0e		lda $0e				lda 	zLTemp1 					; get LSBit of 8-11
.abce	29 01		and #$01			and 	#1
.abd0	f0 03		beq $abd5			beq 	_BFMNoAdd
.abd2	20 b5 aa	jsr $aab5			jsr 	Stack_Add_No_Dex 			; co-opt this code
.abd5					_BFMNoAdd:
.abd5	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.abd8	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.abdb	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.abde	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.abe1	46 11		lsr $11				lsr 	zLTemp1+3 					; shift +8 right
.abe3	66 10		ror $10				ror 	zLTemp1+2
.abe5	66 0f		ror $0f				ror 	zLTemp1+1
.abe7	66 0e		ror $0e				ror 	zLTemp1
.abe9	a5 0e		lda $0e				lda 	zLTemp1 					; continue if +8 is nonzero
.abeb	05 0f		ora $0f				ora 	zLTemp1+1
.abed	05 10		ora $10				ora 	zLTemp1+2
.abef	05 11		ora $11				ora 	zLTemp1+3
.abf1	d0 d9		bne $abcc			bne 	_BFMMultiply
.abf3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.abf4					DivInteger32:
.abf4	ca		dex				dex
.abf5	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.abf8	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.abfb	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.abfe	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac01	d0 14		bne $ac17			bne 	_BFDOkay
.ac03	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ac06	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ac0e	20 42 59 20 5a 45 52 4f 00
.ac17					_BFDOkay:
.ac17	64 0e		stz $0e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ac19	64 0f		stz $0f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ac1b	64 10		stz $10				stz 	zLTemp1+2
.ac1d	64 11		stz $11				stz 	zLTemp1+3
.ac1f	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ac22	20 7d ac	jsr $ac7d			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ac25	e8		inx				inx
.ac26	20 7d ac	jsr $ac7d			jsr 	CheckIntegerNegate
.ac29	ca		dex				dex
.ac2a	5a		phy				phy 								; Y is the counter
.ac2b	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ac2d					_BFDLoop:
.ac2d	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ac30	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ac33	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ac36	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ac39	26 0e		rol $0e				rol 	zLTemp1
.ac3b	26 0f		rol $0f				rol 	zLTemp1+1
.ac3d	26 10		rol $10				rol 	zLTemp1+2
.ac3f	26 11		rol $11				rol 	zLTemp1+3
.ac41	38		sec				sec
.ac42	a5 0e		lda $0e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ac44	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac47	48		pha				pha
.ac48	a5 0f		lda $0f				lda 	zLTemp1+1
.ac4a	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac4d	48		pha				pha
.ac4e	a5 10		lda $10				lda 	zLTemp1+2
.ac50	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac53	48		pha				pha
.ac54	a5 11		lda $11				lda 	zLTemp1+3
.ac56	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac59	90 15		bcc $ac70			bcc 	_BFDNoAdd
.ac5b	85 11		sta $11				sta 	zLTemp1+3 					; update A
.ac5d	68		pla				pla
.ac5e	85 10		sta $10				sta 	zLTemp1+2
.ac60	68		pla				pla
.ac61	85 0f		sta $0f				sta 	zLTemp1+1
.ac63	68		pla				pla
.ac64	85 0e		sta $0e				sta 	zLTemp1+0
.ac66	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ac69	09 01		ora #$01			ora 	#1
.ac6b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac6e	80 03		bra $ac73			bra 	_BFDNext
.ac70					_BFDNoAdd:
.ac70	68		pla				pla 								; Throw away the intermediate calculations
.ac71	68		pla				pla
.ac72	68		pla				pla
.ac73					_BFDNext:
.ac73	88		dey				dey
.ac74	d0 b7		bne $ac2d			bne 	_BFDLoop
.ac76	7a		ply				ply 								; restore Y
.ac77	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ac7a	b0 07		bcs $ac83			bcs		IntegerNegateAlways 		; negate the result
.ac7c	60		rts				rts
.ac7d					CheckIntegerNegate:
.ac7d	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ac80	30 01		bmi $ac83			bmi 	IntegerNegateAlways 		; if so negate it
.ac82	60		rts				rts
.ac83					IntegerNegateAlways:
.ac83	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.ac86	4c 71 a9	jmp $a971			jmp 	Unary_Negate
.ac89					ModInteger32:
.ac89	20 f4 ab	jsr $abf4			jsr 	DivInteger32
.ac8c	a5 0e		lda $0e				lda 	zLTemp1
.ac8e	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac91	a5 0f		lda $0f				lda 	zLTemp1+1
.ac93	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac96	a5 10		lda $10				lda 	zLTemp1+2
.ac98	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac9b	a5 11		lda $11				lda 	zLTemp1+3
.ac9d	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aca0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.aca1					Comp_Equal:
.aca1	38		sec				sec
.aca2	80 01		bra $aca5			bra 	Comp_CheckEqual
.aca4					Comp_NotEqual:
.aca4	18		clc				clc
.aca5					Comp_CheckEqual:
.aca5	08		php				php
.aca6	ca		dex				dex
.aca7	bd 00 0c	lda $0c00,x			lda		stack0,x
.acaa	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.acad	d0 16		bne $acc5			bne 	_CCENonZero
.acaf	bd 00 0d	lda $0d00,x			lda		stack1,x
.acb2	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.acb5	d0 0e		bne $acc5			bne 	_CCENonZero
.acb7	bd 00 0e	lda $0e00,x			lda		stack2,x
.acba	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.acbd	d0 06		bne $acc5			bne 	_CCENonZero
.acbf	bd 00 0f	lda $0f00,x			lda		stack3,x
.acc2	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.acc5					_CCENonZero:
.acc5	f0 02		beq $acc9			beq 	_CCENotSet
.acc7	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.acc9					_CCENotSet:
.acc9					CompCheckFlip:
.acc9	28		plp				plp 								; if carry set, we want $FF if equal
.acca	90 02		bcc $acce			bcc 	CompReturn
.accc	49 ff		eor #$ff			eor 	#$FF
.acce					CompReturn:
.acce	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.acd1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acd4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acd7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acda	60		rts				rts
.acdb					Comp_Less:
.acdb	18		clc				clc
.acdc	80 01		bra $acdf			bra 	Comp_LessCont
.acde					Comp_GreaterEqual:
.acde	38		sec				sec
.acdf					Comp_LessCont:
.acdf	08		php				php
.ace0	ca		dex				dex
.ace1	38		sec				sec
.ace2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ace5	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ace8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aceb	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.acee	bd 00 0e	lda $0e00,x			lda 	stack2,x
.acf1	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.acf4	bd 00 0f	lda $0f00,x			lda 	stack3,x
.acf7	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.acfa	50 02		bvc $acfe			bvc 	_CLNoFlip 					; unsigned -> signed
.acfc	49 80		eor #$80			eor 	#$80
.acfe					_CLNoFlip:
.acfe	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ad00	f0 c7		beq $acc9			beq 	CompCheckFlip
.ad02	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ad04	80 c3		bra $acc9			bra 	CompCheckFlip
.ad06					Comp_LessEqual:
.ad06	38		sec				sec
.ad07	80 01		bra $ad0a			bra 	Comp_LessEqualCont
.ad09					Comp_Greater:
.ad09	18		clc				clc
.ad0a					Comp_LessEqualCont:
.ad0a	08		php				php
.ad0b	ca		dex				dex
.ad0c	38		sec				sec
.ad0d	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ad10	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ad13	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ad16	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ad19	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ad1c	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ad1f	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ad22	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ad25	50 02		bvc $ad29			bvc 	_CLENoFlip 					; unsigned -> signed
.ad27	49 80		eor #$80			eor 	#$80
.ad29					_CLENoFlip:
.ad29	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ad2b	f0 9c		beq $acc9			beq 	CompCheckFlip
.ad2d	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ad2f	80 98		bra $acc9			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.ad31					System_RUN:
.ad31	20 f9 a3	jsr $a3f9			jsr		ResetForRun 				; clear vars, stacks etc.
.ad34	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer 			; point to first thing to do.
.ad37	4c 5b a2	jmp $a25b			jmp 	Execute						; and run
.ad3a					System_END:
.ad3a	4c 1a a0	jmp $a01a			jmp 	WarmStart
.ad3d					System_STOP:
.ad3d	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ad40	53 54 4f 50 00					.text 	"STOP",0
.ad45					System_Assert:
.ad45	ca		dex				dex
.ad46	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.ad49	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad4c	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.ad4f	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.ad52	d0 0a		bne $ad5e			bne 	_SAOkay
.ad54	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ad57	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ad5e	60		rts		_SAOkay:rts
.ad5f					System_New:
.ad5f	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.ad62	20 f9 a3	jsr $a3f9			jsr		ResetForRun 				; clear vars, stacks etc.
.ad65	60		rts				rts
.ad66					System_Old:
.ad66	20 ee a3	jsr $a3ee			jsr 	ResetCodePointer 			; start of first line.
.ad69					_SOFindZero:
.ad69	b1 00		lda ($00),y			lda 	(codePtr),y 				; look for trailing $00
.ad6b	f0 15		beq $ad82			beq 	_SOFoundEnd
.ad6d	c8		iny				iny
.ad6e	d0 f9		bne $ad69			bne 	_SOFindZero
.ad70	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ad73	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>ad7b	45 43 4f 56 45 52 00
.ad82					_SOFoundEnd:
.ad82	c8		iny				iny 								; update the offset
.ad83	8c 00 11	sty $1100			sty 	ProgramStart
.ad86	20 f9 a3	jsr $a3f9			jsr 	ResetForRun 				; redo all stacks etc.
.ad89	60		rts				rts
.ad8a					System_Sys:
.ad8a	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.ad8d	85 04		sta $04				sta 	zTemp0
.ad8f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ad92	85 05		sta $05				sta 	zTemp0+1
.ad94	ca		dex				dex
.ad95	da		phx				phx
.ad96	5a		phy				phy
.ad97	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.ad9a	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.ad9d	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.ada0	20 af ad	jsr $adaf			jsr 	_SSCall 					; effectively jsr (zTemp)
.ada3	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.ada6	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.ada9	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.adac	7a		ply				ply
.adad	fa		plx				plx
.adae	60		rts				rts
.adaf	6c 04 00	jmp ($0004)	_SSCall:jmp 	(zTemp0)
.adb2					System_ShowStack:
.adb2	da		phx				phx 								; save stack
.adb3	5a		phy				phy
.adb4	86 08		stx $08				stx 	zTemp2 						; save old TOS
.adb6	a9 5b		lda #$5b			lda 	#"["
.adb8	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.adbb	e0 00		cpx #$00			cpx 	#0 							; empty
.adbd	f0 14		beq $add3			beq 	_SSEnd
.adbf	a2 01		ldx #$01			ldx 	#1 							; start here
.adc1					_SSLoop:
.adc1	20 5f a5	jsr $a55f			jsr 	IntegerToString 			; print TOS
.adc4	20 4d a5	jsr $a54d			jsr 	ErrorPrintIntegerBuffer
.adc7	e4 08		cpx $08				cpx 	zTemp2 						; done TOS exit
.adc9	f0 08		beq $add3			beq 	_SSEnd
.adcb	e8		inx				inx	 								; advance pointer print ,
.adcc	a9 2c		lda #$2c			lda 	#','
.adce	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.add1	80 ee		bra $adc1			bra 	_SSLoop
.add3					_SSEnd:
.add3	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.add5	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.add8	a9 0d		lda #$0d			lda 	#13
.adda	20 ff a1	jsr $a1ff			jsr 	ExternPrint
.addd	7a		ply				ply
.adde	fa		plx				plx
.addf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.ade0					Identifier:
.ade0	88		dey				dey 								; wind back to identifier start
.ade1	20 14 a3	jsr $a314			jsr 	IdentifierSearch 			; try to find it.
.ade4	90 2d		bcc $ae13			bcc 	_IDUnknown 					; not known, give up.
.ade6	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ade8	d0 3d		bne $ae27			bne 	IDTypeError
.adea	c8		iny		_IDSkip:iny
.adeb	b1 00		lda ($00),y			lda 	(codePtr),y
.aded	c9 c0		cmp #$c0			cmp 	#$C0
.adef	b0 f9		bcs $adea			bcs 	_IDSkip
.adf1	20 7d a4	jsr $a47d			jsr 	IndexCheck 					; check index/subscript
.adf4	5a		phy				phy
.adf5	e8		inx				inx 								; make space on stack
.adf6	a0 00		ldy #$00			ldy 	#0 							; copy it back
.adf8	b1 12		lda ($12),y			lda 	(idDataAddr),y
.adfa	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adfd	c8		iny				iny
.adfe	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae00	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae03	c8		iny				iny
.ae04	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae06	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae09	c8		iny				iny
.ae0a	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae0c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae0f	7a		ply				ply
.ae10	4c 5b a2	jmp $a25b			jmp 	Execute
.ae13					_IDUnknown:
.ae13	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ae16	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>ae1e	56 41 52 49 41 42 4c 45 00
.ae27					IDTypeError:
.ae27	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ae2a	4d 49 53 53 49 4e 47 20				.text 	"MISSING VARIABLE",0
>ae32	56 41 52 49 41 42 4c 45 00
.ae3b					WriteVariable:
.ae3b	b1 00		lda ($00),y			lda 	(codePtr),y 				; check variable
.ae3d	c9 c0		cmp #$c0			cmp 	#$C0
.ae3f	90 e6		bcc $ae27			bcc 	IDTypeError
.ae41	20 14 a3	jsr $a314			jsr 	IdentifierSearch 			; does it exist
.ae44	90 06		bcc $ae4c			bcc 	_WVNoIdentifier
.ae46	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ae48	f0 12		beq $ae5c			beq 	_WVWriteTOS 				; if so write TOS to it.
.ae4a	80 db		bra $ae27			bra 	IDTypeError 				; not, then can't do anything.
.ae4c					_WVNoIdentifier:
.ae4c	5a		phy				phy 								; get current line number
.ae4d	a0 01		ldy #$01			ldy 	#1
.ae4f	b1 00		lda ($00),y			lda 	(codePtr),y
.ae51	c8		iny				iny
.ae52	11 00		ora ($00),y			ora 	(codePtr),y
.ae54	7a		ply				ply
.ae55	f0 2d		beq $ae84			beq 	_WVCantCreate 				; if zero (command line) no new vars
.ae57	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.ae59	20 7b a3	jsr $a37b			jsr 	IdentifierCreate 			; try to find it
.ae5c					_WVWriteTOS:
.ae5c	88		dey				dey 								; skip over identifier.
.ae5d					_WVSkipIdentifier:
.ae5d	c8		iny				iny
.ae5e	b1 00		lda ($00),y			lda 	(codePtr),y
.ae60	c9 c0		cmp #$c0			cmp 	#$C0
.ae62	b0 f9		bcs $ae5d			bcs 	_WVSkipIdentifier
.ae64	20 7d a4	jsr $a47d			jsr 	IndexCheck 					; check index/subscript
.ae67	5a		phy				phy									; copy TOS in
.ae68	a0 00		ldy #$00			ldy 	#0
.ae6a	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ae6d	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae6f	c8		iny				iny
.ae70	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae73	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae75	c8		iny				iny
.ae76	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae79	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae7b	c8		iny				iny
.ae7c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae7f	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae81	7a		ply				ply
.ae82	ca		dex				dex 								; drop
.ae83	60		rts				rts									; go back and execute again.
.ae84					_WVCantCreate:
.ae84	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>ae87	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>ae8f	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.ae9e					Command_For:
.ae9e	20 a3 af	jsr $afa3			jsr 	StructPushCurrent 			; push current on the stack.
.aea1	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.aea4	1d 00 0d	ora $0d00,x			ora 	stack1,x
.aea7	1d 00 0e	ora $0e00,x			ora 	stack2,x
.aeaa	1d 00 0f	ora $0f00,x			ora 	stack3,x
.aead	f0 34		beq $aee3			beq 	_CFZero
.aeaf	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.aeb2	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.aeb4	c6 02		dec $02				dec 	StructSP
.aeb6	92 02		sta ($02)			sta 	(StructSP)
.aeb8	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aebb	49 ff		eor #$ff			eor 	#$FF
.aebd	c6 02		dec $02				dec 	StructSP
.aebf	92 02		sta ($02)			sta 	(StructSP)
.aec1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aec4	49 ff		eor #$ff			eor 	#$FF
.aec6	c6 02		dec $02				dec 	StructSP
.aec8	92 02		sta ($02)			sta 	(StructSP)
.aeca	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aecd	49 ff		eor #$ff			eor 	#$FF
.aecf	c6 02		dec $02				dec 	StructSP
.aed1	92 02		sta ($02)			sta 	(StructSP)
.aed3	ca		dex				dex 								; pop stack value
.aed4	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.aed6	c6 02		dec $02				dec 	StructSP
.aed8	92 02		sta ($02)			sta 	(StructSP)
.aeda	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.aedc	85 14		sta $14				sta 	ForAddr
.aede	a5 03		lda $03				lda 	StructSP+1
.aee0	85 15		sta $15				sta 	ForAddr+1
.aee2	60		rts				rts
.aee3					_CFZero:
.aee3	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>aee6	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>aeee	54 20 5a 45 52 4f 00
.aef5					Command_Next:
.aef5	b2 02		lda ($02)			lda 	(StructSP)					; check it's FOR.
.aef7	c9 46		cmp #$46			cmp 	#STM_FOR
.aef9	d0 30		bne $af2b			bne 	_CNNoFor
.aefb	5a		phy				phy
.aefc	a0 00		ldy #$00			ldy 	#0
.aefe					_CNIncrement:
.aefe	c8		iny				iny
.aeff	b1 02		lda ($02),y			lda 	(StructSP),y 				; increment the index
.af01	1a		inc a				inc 	a
.af02	91 02		sta ($02),y			sta 	(StructSP),y
.af04	f0 f8		beq $aefe			beq		_CNIncrement 				; carry out.
.af06	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.af08	b1 02		lda ($02),y			lda 	(StructSP),y 				; on the last time round they
.af0a	c8		iny				iny 								; will all be $FF
.af0b	31 02		and ($02),y			and 	(StructSP),y
.af0d	c8		iny				iny
.af0e	31 02		and ($02),y			and 	(StructSP),y
.af10	c8		iny				iny
.af11	31 02		and ($02),y			and 	(StructSP),y
.af13	7a		ply				ply 								; restore Y
.af14	1a		inc a				inc 	a 							; so this will be zero last time round
.af15	d0 06		bne $af1d			bne 	_CNLoop 					; loop back if non-zero
.af17	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.af19	20 9d af	jsr $af9d			jsr 	StructPopCount
.af1c	60		rts				rts
.af1d					_CNLoop:
.af1d	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.af1f	85 14		sta $14				sta 	ForAddr
.af21	a5 03		lda $03				lda 	StructSP+1
.af23	85 15		sta $15				sta 	ForAddr+1
.af25	a0 05		ldy #$05			ldy 	#5 							; restore the position
.af27	20 bb af	jsr $afbb			jsr 	StructPopCurrent
.af2a	60		rts				rts
.af2b					_CNNoFor:
.af2b	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>af2e	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>af36	46 4f 52 00
.af3a					Command_Index:
.af3a	5a		phy				phy
.af3b	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.af3d	e8		inx				inx
.af3e	38		sec				sec
.af3f	a9 fe		lda #$fe			lda 	#$FE
.af41	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af43	9d 00 0c	sta $0c00,x			sta 	stack0,x
.af46	c8		iny				iny
.af47	a9 ff		lda #$ff			lda 	#$FF
.af49	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af4b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.af4e	c8		iny				iny
.af4f	a9 ff		lda #$ff			lda 	#$FF
.af51	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af53	9d 00 0e	sta $0e00,x			sta 	stack2,x
.af56	c8		iny				iny
.af57	a9 ff		lda #$ff			lda 	#$FF
.af59	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af5b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.af5e	7a		ply				ply
.af5f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.af60					Command_Repeat:
.af60	20 a3 af	jsr $afa3			jsr 	StructPushCurrent 			; push current on the stack.
.af63	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.af65	c6 02		dec $02				dec 	StructSP
.af67	92 02		sta ($02)			sta 	(StructSP)
.af69	60		rts				rts
.af6a					Command_Until:
.af6a	b2 02		lda ($02)			lda 	(StructSP)					; check it's REPEAT
.af6c	c9 52		cmp #$52			cmp 	#STM_REPEAT
.af6e	d0 1b		bne $af8b			bne 	_CUNoRepeat
.af70	ca		dex				dex 								; pop
.af71	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.af74	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.af77	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.af7a	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.af7d	f0 06		beq $af85			beq 	_CULoop
.af7f	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.af81	20 9d af	jsr $af9d			jsr 	StructPopCount
.af84	60		rts				rts
.af85					_CULoop:
.af85	a0 01		ldy #$01			ldy 	#1 							; restore the position
.af87	20 bb af	jsr $afbb			jsr 	StructPopCurrent
.af8a	60		rts				rts
.af8b					_CUNoRepeat:
.af8b	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>af8e	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>af96	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.af9d					StructPopCount:
.af9d	18		clc				clc
.af9e	65 02		adc $02				adc 	StructSP
.afa0	85 02		sta $02				sta 	StructSP
.afa2	60		rts				rts
.afa3					StructPushCurrent:
.afa3	a9 00		lda #$00			lda 	#0							; push bank
.afa5	c6 02		dec $02				dec 	StructSP
.afa7	92 02		sta ($02)			sta 	(StructSP)
.afa9	98		tya				tya									; y Offset
.afaa	c6 02		dec $02				dec 	StructSP
.afac	92 02		sta ($02)			sta 	(StructSP)
.afae	a5 01		lda $01				lda 	codePtr+1 					; codeptr high
.afb0	c6 02		dec $02				dec 	StructSP
.afb2	92 02		sta ($02)			sta 	(StructSP)
.afb4	a5 00		lda $00				lda 	codePtr 					; codeptr low
.afb6	c6 02		dec $02				dec 	StructSP
.afb8	92 02		sta ($02)			sta 	(StructSP)
.afba	60		rts				rts
.afbb					StructPopCurrent:
.afbb	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr low
.afbd	85 00		sta $00				sta 	codePtr
.afbf	c8		iny				iny
.afc0	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr high
.afc2	85 01		sta $01				sta 	codePtr+1
.afc4	c8		iny				iny
.afc5	b1 02		lda ($02),y			lda 	(StructSP),y				; y offset
.afc7	a8		tay				tay
.afc8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	0c 64 00 84 4a 85 4a 86			.byte $0c,$64,$00,$84,$4a,$85,$4a,$86,$4a,$87,$4a,$00,$06,$6e,$00,$33,$41,$00
>1108	4a 87 4a 00 06 6e 00 33 41 00

;******  Return to file: main.asm

>1112	00						.byte 	0

;******  End of listing
