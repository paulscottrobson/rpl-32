
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Wed Oct  9 14:27:31 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9f00					MemoryEnd = $9F00 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 76 a2	jsr $a276			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 99 a0	lda $a099,x			lda 	BootMessage,x
.a00b	20 97 a2	jsr $a297			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 99 a0	lda $a099,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 8e		ldy #$8e			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 1c a6	jsr $a61c			jsr 	ErrorPrint16
.a01d	a9 0d		lda #$0d			lda 	#13
.a01f	20 97 a2	jsr $a297			jsr 	ExternPrint
.a022	20 97 a2	jsr $a297			jsr 	ExternPrint
.a025	a9 9f		lda #$9f			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a027	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a02a	9c 8a 10	stz $108a			stz 	AllocMemory
.a02d	20 29 a5	jsr $a529			jsr 	ResetForRun
.a030	20 1e a5	jsr $a51e			jsr 	ResetCodePointer
.a033					WarmStart:
.a033	a9 06		lda #$06			lda 	#COL_CYAN
.a035	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a038	a9 4f		lda #$4f			lda 	#"O"
.a03a	20 97 a2	jsr $a297			jsr 	ExternPrint
.a03d	a9 4b		lda #$4b			lda 	#"K"
.a03f	20 97 a2	jsr $a297			jsr 	ExternPrint
.a042	a9 0d		lda #$0d			lda 	#13
.a044	20 97 a2	jsr $a297			jsr 	ExternPrint
.a047					NewCommand:
.a047	8a		txa				txa
.a048	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a04a	9a		txs				txs
.a04b	aa		tax				tax
.a04c	a9 07		lda #$07			lda 	#COL_WHITE
.a04e	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a051	20 b5 a2	jsr $a2b5			jsr 	ExternInput 				; input text
.a054	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a056	85 10		sta $10				sta 	codePtr
.a058	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a05a	85 11		sta $11				sta 	codePtr+1
.a05c	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a05e	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a060	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a062	85 17		sta $17				sta 	zTemp1+1
.a064	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a067	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a06a	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a06d	20 8c a7	jsr $a78c			jsr 	Tokenise
.a070	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a072					SkipSpaces:
.a072	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a075	c8		iny				iny
.a076	c9 20		cmp #$20			cmp 	#' '
.a078	f0 f8		beq $a072			beq 	SkipSpaces
.a07a	c9 30		cmp #$30			cmp 	#'0'
.a07c	90 0e		bcc $a08c			bcc 	ExecuteCLI
.a07e	c9 3a		cmp #$3a			cmp 	#'9'+1
.a080	b0 0a		bcs $a08c			bcs 	ExecuteCLI
.a082	ad 00 09	lda $0900			lda 	InputBuffer
.a085	c9 20		cmp #$20			cmp 	#' '
.a087	f0 03		beq $a08c			beq 	ExecuteCLI
.a089	4c fd a8	jmp $a8fd			jmp		EditProgram
.a08c					ExecuteCLI:
.a08c	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a08e	85 10		sta $10				sta 	codePtr
.a090	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a092	85 11		sta $11				sta 	codePtr+1
.a094	a0 03		ldy #$03			ldy 	#3
.a096	4c 66 a3	jmp $a366			jmp 	Execute 					; and run it
.a099					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a099	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$36,$20,$44,$41,$54,$45,$3a,$30,$39,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a1	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b1	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c1	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d1	39 0d 0d 42 55 49 4c 44 3a 36 20 44 41 54 45 3a
>a0e1	30 39 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0f1	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a100					KeywordText:
>a100	01 21					.byte $01,$21                          ; $10 !
>a102	01 2a					.byte $01,$2a                          ; $11 *
>a104	01 2b					.byte $01,$2b                          ; $12 +
>a106	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a109	01 2d					.byte $01,$2d                          ; $14 -
>a10b	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a10e	01 2e					.byte $01,$2e                          ; $16 .
>a110	01 2f					.byte $01,$2f                          ; $17 /
>a112	01 3b					.byte $01,$3b                          ; $18 ;
>a114	01 3c					.byte $01,$3c                          ; $19 <
>a116	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a119	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a11c	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a11f	01 3d					.byte $01,$3d                          ; $1d =
>a121	01 3e					.byte $01,$3e                          ; $1e >
>a123	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a126	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a129	01 40					.byte $01,$40                          ; $21 @
>a12b	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a12f	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a135	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a139	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a140	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a143	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a146	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a14a	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a14e	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a153	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a157	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a15c	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a160	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a166	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a16a	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a16d	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a173	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a178	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a17d	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a181	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a188	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a18c	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a191	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a195	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a199	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a19d	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a0	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1a5	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1ad	52
>a1ae	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1b5	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1bc	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c0	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1c5	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1c9	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1cd	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1d2	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1d7	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1db	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1e1	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1e4	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1e7	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1eb	01 5b					.byte $01,$5b                          ; $4b [
>a1ed	01 5d					.byte $01,$5d                          ; $4c ]
>a1ef	01 5e					.byte $01,$5e                          ; $4d ^
>a1f1	01 2b					.byte $01,$2b                          ; $4e {+}
>a1f3	01 2d					.byte $01,$2d                          ; $4f {-}
>a1f5	00					.byte $00
.a1f6					KeywordVectorTable:
>a1f6	b9 ab					.word Mem_DPoke                        ; $10 !
>a1f8	d7 ac					.word MulInteger32                     ; $11 *
>a1fa	e0 ab					.word Stack_Add                        ; $12 +
>a1fc	e0 aa					.word Unary_Increment                  ; $13 ++
>a1fe	07 ac					.word Stack_Sub                        ; $14 -
>a200	f3 aa					.word Unary_Decrement                  ; $15 --
>a202	76 b0					.word System_ShowStack                 ; $16 .
>a204	20 ad					.word DivInteger32                     ; $17 /
>a206	62 b1					.word ProcReturn                       ; $18 ;
>a208	07 ae					.word Comp_Less                        ; $19 <
>a20a	15 ab					.word Unary_Shl                        ; $1a <<
>a20c	32 ae					.word Comp_LessEqual                   ; $1b <=
>a20e	d0 ad					.word Comp_NotEqual                    ; $1c <>
>a210	cd ad					.word Comp_Equal                       ; $1d =
>a212	35 ae					.word Comp_Greater                     ; $1e >
>a214	0a ae					.word Comp_GreaterEqual                ; $1f >=
>a216	22 ab					.word Unary_Shr                        ; $20 >>
>a218	67 ab					.word Mem_DPeek                        ; $21 @
>a21a	97 aa					.word Unary_Absolute                   ; $22 ABS
>a21c	5d ae					.word Allocate                         ; $23 ALLOC
>a21e	2e ac					.word Stack_And                        ; $24 AND
>a220	07 b0					.word System_Assert                    ; $25 ASSERT
>a222	8c ab					.word Mem_Poke                         ; $26 C!
>a224	2f ab					.word Mem_Peek                         ; $27 C@
>a226	09 aa					.word Stack_Empty                      ; $28 CLR
>a228	b7 a5					.word SyntaxError                      ; $29 DEF
>a22a	0c aa					.word Stack_Drop                       ; $2a DROP
>a22c	0e aa					.word Stack_Dup                        ; $2b DUP
>a22e	78 b2					.word Struct_ELSE                      ; $2c ELSE
>a230	fc af					.word System_END                       ; $2d END
>a232	7d b2					.word Struct_ENDIF                     ; $2e ENDIF
>a234	99 b2					.word Command_For                      ; $2f FOR
>a236	63 b2					.word Struct_IF                        ; $30 IF
>a238	35 b3					.word Command_Index                    ; $31 INDEX
>a23a	9d ae					.word Cmd_List                         ; $32 LIST
>a23c	ae b0					.word System_Load                      ; $33 LOAD
>a23e	b5 ad					.word ModInteger32                     ; $34 MOD
>a240	9d aa					.word Unary_Negate                     ; $35 NEGATE
>a242	21 b0					.word System_New                       ; $36 NEW
>a244	f0 b2					.word Command_Next                     ; $37 NEXT
>a246	28 aa					.word Stack_Nip                        ; $38 NIP
>a248	bf aa					.word Unary_Not                        ; $39 NOT
>a24a	2a b0					.word System_Old                       ; $3a OLD
>a24c	7a ac					.word Stack_Or                         ; $3b OR
>a24e	42 aa					.word Stack_Over                       ; $3c OVER
>a250	bb af					.word Cmd_Renumber                     ; $3d RENUMBER
>a252	5b b3					.word Command_Repeat                   ; $3e REPEAT
>a254	62 b1					.word ProcReturn2                      ; $3f RETURN
>a256	f3 af					.word System_RUN                       ; $40 RUN
>a258	a4 b0					.word System_Save                      ; $41 SAVE
>a25a	a0 ac					.word Stack_Shl                        ; $42 SHL
>a25c	a3 ac					.word Stack_Shr                        ; $43 SHR
>a25e	ff af					.word System_STOP                      ; $44 STOP
>a260	5c aa					.word Stack_Swap                       ; $45 SWAP
>a262	4e b0					.word System_Sys                       ; $46 SYS
>a264	65 b3					.word Command_Until                    ; $47 UNTIL
>a266	9e ab					.word Mem_WPoke                        ; $48 W!
>a268	48 ab					.word Mem_WPeek                        ; $49 W@
>a26a	54 ac					.word Stack_Xor                        ; $4a XOR
>a26c	b7 a5					.word SyntaxError                      ; $4b [
>a26e	b7 a5					.word SyntaxError                      ; $4c ]
>a270	71 b1					.word WriteVariable                    ; $4d ^
>a272	b7 a5					.word SyntaxError                      ; $4e {+}
>a274	b7 a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a276					ExternInitialise:
.a276	a9 07		lda #$07			lda 	#$07 						; set colour
.a278	8d 86 02	sta $0286			sta 	646
.a27b	a9 0e		lda #$0e			lda 	#14							; lower case
.a27d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a280	a9 93		lda #$93			lda 	#147 						; clear screen
.a282	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a285	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a287	4c a1 a2	jmp $a2a1			jmp 	ExternColour
.a28a					ExternCheckBreak:
.a28a	da		phx				phx 								; make sure we keep XY
.a28b	5a		phy				phy
.a28c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a28f	f0 03		beq $a294			beq		_ECBExit 					; stopped
.a291	7a		ply				ply 								; restore and exit.
.a292	fa		plx				plx
.a293	60		rts				rts
.a294					_ECBExit:
.a294	4c 33 a0	jmp $a033			jmp 	WarmStart
.a297					ExternPrint:
.a297	48		pha				pha
.a298	da		phx				phx
.a299	5a		phy				phy
.a29a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a29d	7a		ply				ply
.a29e	fa		plx				plx
.a29f	68		pla				pla
.a2a0	60		rts				rts
.a2a1					ExternColour:
.a2a1	48		pha				pha
.a2a2	da		phx				phx
.a2a3	aa		tax				tax
.a2a4	bd ad a2	lda $a2ad,x			lda 	_ECTable,x
.a2a7	20 97 a2	jsr $a297			jsr 	ExternPrint
.a2aa	fa		plx				plx
.a2ab	68		pla				pla
.a2ac	60		rts				rts
.a2ad					_ECTable:
>a2ad	90						.byte 	144
>a2ae	1c						.byte 	28
>a2af	1e						.byte 	30
>a2b0	9e						.byte 	158
>a2b1	1f						.byte 	31
>a2b2	9c						.byte 	156
>a2b3	9f						.byte 	159
>a2b4	05						.byte 	5
.a2b5					ExternInput:
.a2b5	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2b7	85 14		sta $14				sta 	zTemp0
.a2b9	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2bb	85 15		sta $15				sta 	zTemp0+1
.a2bd	a9 07		lda #$07			lda 	#COL_WHITE
.a2bf	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a2c2	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2c5	c9 0d		cmp #$0d			cmp 	#13
.a2c7	f0 0a		beq $a2d3			beq 	_EIExit
.a2c9	92 14		sta ($14)			sta 	(zTemp0)
.a2cb	e6 14		inc $14				inc 	zTemp0
.a2cd	d0 f3		bne $a2c2			bne 	_EIRead
.a2cf	e6 15		inc $15				inc 	zTemp0+1
.a2d1	80 ef		bra $a2c2			bra 	_EIRead
.a2d3	a9 00		lda #$00	_EIExit:lda 	#0
.a2d5	92 14		sta ($14)			sta 	(zTemp0)
.a2d7	a9 0d		lda #$0d			lda 	#13
.a2d9	20 97 a2	jsr $a297			jsr 	ExternPrint
.a2dc	60		rts				rts
.a2dd					ExternSave:
.a2dd	da		phx				phx
.a2de	5a		phy				phy
.a2df	20 47 a3	jsr $a347			jsr 	EXGetLength 				; get length of file into A
.a2e2	a6 14		ldx $14				ldx 	zTemp0
.a2e4	a4 15		ldy $15				ldy 	zTemp0+1
.a2e6	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a2e9	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a2eb	a0 00		ldy #$00			ldy 	#0
.a2ed	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a2f0	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a2f2	85 c1		sta $c1				sta 	$C1
.a2f4	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a2f6	85 c2		sta $c2				sta 	$C2
.a2f8	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a2fb	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a2fe	a9 c1		lda #$c1			lda 	#$C1
.a300	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a303	b0 03		bcs $a308			bcs 	_ESSave
.a305	7a		ply				ply
.a306	fa		plx				plx
.a307	60		rts				rts
.a308					_ESSave:
.a308	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a30b	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a313	4c 45 44 00
.a317					ExternLoad:
.a317	da		phx				phx
.a318	5a		phy				phy
.a319	20 47 a3	jsr $a347			jsr 	EXGetLength 				; get length of file into A
.a31c	a6 14		ldx $14				ldx 	zTemp0
.a31e	a4 15		ldy $15				ldy 	zTemp0+1
.a320	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a323	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a325	a0 00		ldy #$00			ldy 	#0
.a327	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a32a	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a32c	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a32e	a9 00		lda #$00			lda 	#0 							; load command
.a330	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a333	b0 03		bcs $a338			bcs 	_ESLoad
.a335	7a		ply				ply
.a336	fa		plx				plx
.a337	60		rts				rts
.a338					_ESLoad:
.a338	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a33b	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a343	4c 45 44 00
.a347					EXGetLength:
.a347	a0 ff		ldy #$ff			ldy 	#255
.a349	c8		iny		_EXGL:	iny
.a34a	b1 14		lda ($14),y			lda 	(zTemp0),y
.a34c	d0 fb		bne $a349			bne 	_EXGL
.a34e	98		tya				tya
.a34f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a350					EXNextLine:
.a350	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a352	f0 0f		beq $a363			beq 	_EXNLWarmStart
.a354	18		clc				clc 								; advance code pointer to next line
.a355	65 10		adc $10				adc 	codePtr
.a357	85 10		sta $10				sta 	codePtr
.a359	90 02		bcc $a35d			bcc 	_EXNLNoBump
.a35b	e6 11		inc $11				inc 	codePtr+1
.a35d					_EXNLNoBump:
.a35d	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a35f	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a361	d0 03		bne $a366			bne 	Execute 					; not end of program
.a363					_EXNLWarmStart:
.a363	4c fc af	jmp $affc			jmp 	System_END
.a366	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a368	b0 1c		bcs $a386			bcs 	EXStackOverflow
.a36a	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a36d	d0 03		bne $a372			bne 	_EXNoBreak
.a36f	20 8a a2	jsr $a28a			jsr 	ExternCheckBreak
.a372					_EXNoBreak:
.a372	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a374	f0 da		beq $a350			beq 	EXNextLine 					; reached end of the line.
.a376	c8		iny				iny 								; advance pointer.
.a377	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a379	90 39		bcc $a3b4			bcc 	EXStringComment
.a37b	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a37d	90 1f		bcc $a39e			bcc 	EXTokenExecute
.a37f	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a381	90 15		bcc $a398			bcc 	EXPushConstant
.a383	4c e5 b0	jmp $b0e5			jmp 	Identifier 					; it's an identifier C0-FF
.a386					EXStackOverflow:
.a386	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a389	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a391	45 52 46 4c 4f 57 00
.a398					EXPushConstant:
.a398	88		dey				dey
.a399	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS 		; extract integer
.a39c	80 c8		bra $a366			bra 	Execute
.a39e					EXTokenExecute:
.a39e	0a		asl a				asl 	a 							; double token, also clears carry
.a39f	da		phx				phx 								; save X, put token x 2 in X
.a3a0	aa		tax				tax
.a3a1	bd d6 a1	lda $a1d6,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3a4	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3a6	bd d7 a1	lda $a1d7,x			lda 	KeywordVectorTable-$20+1,x
.a3a9	85 15		sta $15				sta 	zTemp0+1
.a3ab	fa		plx				plx 								; restore X
.a3ac	20 b1 a3	jsr $a3b1			jsr 	_EXTCall 					; call the routine
.a3af	80 b5		bra $a366			bra 	Execute
.a3b1					_EXTCall:
.a3b1	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3b4					EXStringComment:
.a3b4	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3b6	f0 15		beq $a3cd			beq 	EXStringSkip 				; (comment), so just skip it.
.a3b8	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3b9	98		tya				tya
.a3ba	38		sec				sec
.a3bb	65 10		adc $10				adc 	codePtr
.a3bd	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3c0	a5 11		lda $11				lda 	codePtr+1
.a3c2	69 00		adc #$00			adc 	#0
.a3c4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3c7	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3ca	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3cd					EXStringSkip:
.a3cd	98		tya				tya 								; the current position in A
.a3ce	18		clc				clc
.a3cf	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3d1	a8		tay				tay 			 					; and make that the current position.
.a3d2	88		dey				dey 								; back one because of the initial skip
.a3d3	80 91		bra $a366			bra 	Execute
.a3d5					EXShiftTOSRight:
.a3d5	4a		lsr a				lsr 	a
.a3d6	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3d9	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3dc	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a3df	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a3e2	60		rts				rts
.a3e3					ExtractIntegerToTOS:
.a3e3	b1 10		lda ($10),y			lda 	(codePtr),y
.a3e5	c8		iny				iny
.a3e6	e8		inx				inx 								; make stack space
.a3e7	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a3e9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3ec	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a3ef	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a3f2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3f5					_EXConstantLoop:
.a3f5	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a3f7	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a3f9	c9 80		cmp #$80			cmp 	#$80
.a3fb	d0 2d		bne $a42a			bne		_EXDone 					; no then exit
.a3fd	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a400	48		pha				pha
.a401	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a404	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a407	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a40a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a40d	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a410	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a413	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a416	68		pla				pla
.a417	20 d5 a3	jsr $a3d5			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a41a	20 d5 a3	jsr $a3d5			jsr 	EXShiftTOSRight				; which will be x64
.a41d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a41f	c8		iny				iny
.a420	29 3f		and #$3f			and 	#$3F
.a422	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a425	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a428	80 cb		bra $a3f5			bra 	_EXConstantLoop
.a42a	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a42c	c8		iny				iny 								; skip over unary constant + -
.a42d	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a42f	d0 03		bne $a434			bne 	_EXPositive
.a431	4c 9d aa	jmp $aa9d			jmp 	Unary_Negate
.a434					_EXPositive:
.a434	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a435					IdentifierSearch:
.a435	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a437	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a439	90 12		bcc $a44d			bcc 	_ISSlow
.a43b	c9 fa		cmp #$fa			cmp 	#$F9+1
.a43d	b0 0e		bcs $a44d			bcs 	_ISSlow
.a43f	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a441	0a		asl a				asl 	a
.a442	0a		asl a				asl		a
.a443	85 22		sta $22				sta 	idDataAddr					; set up addres
.a445	a9 10		lda #$10			lda 	#AZVariables >> 8
.a447	85 23		sta $23				sta 	idDataAddr+1
.a449	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a44b	38		sec				sec 								; return with CS.
.a44c	60		rts				rts
.a44d					_ISSlow:
.a44d	20 09 a5	jsr $a509			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a450	98		tya				tya 								; set (zTemp1) to point to the
.a451	18		clc				clc 	 							; identifier to be searched.
.a452	65 10		adc $10				adc 	codePtr
.a454	85 16		sta $16				sta 	zTemp1
.a456	a5 11		lda $11				lda 	codePtr+1
.a458	69 00		adc #$00			adc 	#0
.a45a	85 17		sta $17				sta 	zTemp1+1
.a45c	5a		phy				phy 								; save Y
.a45d	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a45f	48		pha				pha
.a460	a0 01		ldy #$01			ldy 	#1
.a462	b1 14		lda ($14),y			lda 	(zTemp0),y
.a464	85 15		sta $15				sta 	zTemp0+1
.a466	68		pla				pla
.a467	85 14		sta $14				sta 	zTemp0
.a469	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a46b	f0 2c		beq $a499			beq 	_ISFail
.a46d	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a46f	b1 14		lda ($14),y			lda 	(zTemp0),y
.a471	85 18		sta $18				sta 	zTemp2
.a473	c8		iny				iny
.a474	b1 14		lda ($14),y			lda 	(zTemp0),y
.a476	85 19		sta $19				sta 	zTemp2+1
.a478	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a47a					_ISCompare:
.a47a	b1 16		lda ($16),y			lda 	(zTemp1),y
.a47c	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a47e	d0 dd		bne $a45d			bne		_ISLoop 					; different ?
.a480	c8		iny				iny
.a481	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a483	90 f5		bcc $a47a			bcc 	_ISCompare
.a485	18		clc				clc 								; set up the data pointer
.a486	a5 14		lda $14				lda 	zTemp0
.a488	69 02		adc #$02			adc 	#2
.a48a	85 22		sta $22				sta 	idDataAddr
.a48c	a5 15		lda $15				lda 	zTemp0+1
.a48e	69 00		adc #$00			adc		#0
.a490	85 23		sta $23				sta 	idDataAddr+1
.a492	a0 09		ldy #$09			ldy 	#9 							; get the type
.a494	b1 14		lda ($14),y			lda 	(zTemp0),y
.a496	7a		ply				ply
.a497	38		sec				sec
.a498	60		rts				rts
.a499					_ISFail:
.a499	7a		ply				ply
.a49a	18		clc				clc
.a49b	60		rts				rts
.a49c					IdentifierCreate:
.a49c	5a		phy				phy 								; save Y
.a49d	48		pha				pha 								; save type on stack
.a49e	20 09 a5	jsr $a509			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4a1	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4a4	85 16		sta $16				sta 	zTemp1
.a4a6	ad 89 10	lda $1089			lda 	VarMemory+1
.a4a9	85 17		sta $17				sta 	zTemp1+1
.a4ab	5a		phy				phy 								; save Y (code offset)
.a4ac	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4ae	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4b0	91 16		sta ($16),y			sta 	(zTemp1),y
.a4b2	c8		iny				iny
.a4b3	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4b5	91 16		sta ($16),y			sta 	(zTemp1),y
.a4b7	c8		iny				iny
.a4b8					_IDCErase:
.a4b8	a9 00		lda #$00			lda 	#0
.a4ba	91 16		sta ($16),y			sta 	(zTemp1),y
.a4bc	c8		iny				iny
.a4bd	c0 06		cpy #$06			cpy 	#6
.a4bf	d0 f7		bne $a4b8			bne 	_IDCErase
.a4c1	68		pla				pla 								; original Y
.a4c2	18		clc				clc
.a4c3	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4c5	91 16		sta ($16),y			sta 	(zTemp1),y
.a4c7	c8		iny				iny
.a4c8	a5 11		lda $11				lda 	codePtr+1
.a4ca	69 00		adc #$00			adc 	#0
.a4cc	91 16		sta ($16),y			sta 	(zTemp1),y
.a4ce	c8		iny				iny
.a4cf	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4d1	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d3	68		pla				pla 								; restore type
.a4d4	c8		iny				iny
.a4d5	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4d7	c8		iny				iny
.a4d8	98		tya				tya									; add offset to VarMemory
.a4d9	18		clc				clc
.a4da	6d 88 10	adc $1088			adc 	VarMemory
.a4dd	8d 88 10	sta $1088			sta 	VarMemory
.a4e0	ad 89 10	lda $1089			lda 	VarMemory+1
.a4e3	69 00		adc #$00			adc 	#0
.a4e5	8d 89 10	sta $1089			sta 	VarMemory+1
.a4e8	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a4eb	f0 19		beq $a506			beq 	_IDCMemory
.a4ed	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a4ef	92 14		sta ($14)			sta 	(zTemp0)
.a4f1	a0 01		ldy #$01			ldy 	#1
.a4f3	a5 17		lda $17				lda 	zTemp1+1
.a4f5	91 14		sta ($14),y			sta 	(zTemp0),y
.a4f7	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a4f9	18		clc				clc
.a4fa	69 02		adc #$02			adc 	#2
.a4fc	85 22		sta $22				sta 	idDataAddr
.a4fe	a5 17		lda $17				lda 	zTemp1+1
.a500	69 00		adc #$00			adc 	#0
.a502	85 23		sta $23				sta 	idDataAddr+1
.a504	7a		ply				ply 								; restore Y and exit
.a505	60		rts				rts
.a506					_IDCMemory:
.a506	4c c7 a5	jmp $a5c7			jmp 	OutOfMemoryError
.a509					IdentifierSetUpHashPtr:
.a509	5a		phy				phy
.a50a					_ISPLoop:
.a50a	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the last identifier character
.a50c	c8		iny				iny
.a50d	c9 e0		cmp #$e0			cmp 	#$E0
.a50f	90 f9		bcc $a50a			bcc 	_ISPLoop
.a511	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a513	0a		asl a				asl 	a 							; convert to an offset, clc
.a514	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a516	85 14		sta $14				sta 	zTemp0
.a518	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a51a	85 15		sta $15				sta 	zTemp0+1
.a51c	7a		ply				ply
.a51d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a51e					ResetCodePointer:
.a51e	48		pha				pha
.a51f	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a521	85 11		sta $11				sta 	codePtr+1
.a523	64 10		stz $10				stz 	codePtr
.a525	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a527	68		pla				pla
.a528	60		rts				rts
.a529					ResetForRun:
.a529	48		pha				pha
.a52a	5a		phy				phy
.a52b	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a52d					_RRErase:
.a52d	bd 2b b4	lda $b42b,x			lda 	DefaultHashTable,x
.a530	9d 68 10	sta $1068,x			sta		HashTable,x
.a533	e8		inx				inx
.a534	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a536	d0 f5		bne $a52d			bne 	_RRErase
.a538	20 4f a5	jsr $a54f			jsr 	ResetVarMemory
.a53b	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a53d	85 12		sta $12				sta 	StructSP
.a53f	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a541	85 13		sta $13				sta 	StructSP+1
.a543	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a545	92 12		sta ($12)			sta 	(StructSP)
.a547	20 76 a5	jsr $a576			jsr 	ProcedureScan
.a54a	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a54c	7a		ply				ply
.a54d	68		pla				pla
.a54e	60		rts				rts
.a54f					ResetVarMemory:
.a54f	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a551	85 14		sta $14				sta 	zTemp0
.a553	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a555	85 15		sta $15				sta 	zTemp0+1
.a557					_RRFindEnd:
.a557	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a559	f0 0b		beq $a566			beq 	_RRFoundEnd
.a55b	18		clc				clc 								; no, add offset to pointer.
.a55c	65 14		adc $14				adc 	zTemp0
.a55e	85 14		sta $14				sta 	zTemp0
.a560	90 f5		bcc $a557			bcc 	_RRFindEnd
.a562	e6 15		inc $15				inc 	zTemp0+1
.a564	80 f1		bra $a557			bra 	_RRFindEnd
.a566					_RRFoundEnd:
.a566	18		clc				clc 								; add 1 to this, as it points to the last
.a567	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a569	69 01		adc #$01			adc 	#1
.a56b	8d 88 10	sta $1088			sta 	VarMemory
.a56e	a5 15		lda $15				lda 	zTemp0+1
.a570	69 00		adc #$00			adc 	#0
.a572	8d 89 10	sta $1089			sta 	VarMemory+1
.a575	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a576					ProcedureScan:
.a576	20 1e a5	jsr $a51e			jsr 	ResetCodePointer 			; reset the code pointer.
.a579	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a57b	f0 39		beq $a5b6			beq 	_PSExit
.a57d	a0 03		ldy #$03			ldy 	#3 							; start of line
.a57f	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a581	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a583	d0 24		bne $a5a9			bne 	_PSNext
.a585	c8		iny				iny 								; skip over def first
.a586	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a588	29 e0		and #$e0			and 	#$E0
.a58a	c9 c0		cmp #$c0			cmp 	#$C0
.a58c	d0 1b		bne $a5a9			bne 	_PSNext 					; otherwise ignore it.
.a58e	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a590	20 9c a4	jsr $a49c			jsr 	IdentifierCreate
.a593					_PSSkipIdentifier:
.a593	b1 10		lda ($10),y			lda 	(codePtr),y
.a595	c9 e0		cmp #$e0			cmp 	#$E0
.a597	c8		iny				iny
.a598	90 f9		bcc $a593			bcc 	_PSSkipIdentifier
.a59a	98		tya				tya  								; save the address in the data slot.
.a59b	a0 03		ldy #$03			ldy 	#3
.a59d	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a59f	a5 10		lda $10				lda 	codePtr
.a5a1	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a5a3	a5 11		lda $11				lda 	codePtr+1
.a5a5	a0 01		ldy #$01			ldy 	#1
.a5a7	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a5a9					_PSNext:
.a5a9	18		clc				clc 								; go to next
.a5aa	b2 10		lda ($10)			lda 	(codePtr)
.a5ac	65 10		adc $10				adc 	codePtr
.a5ae	85 10		sta $10				sta 	codeptr
.a5b0	90 c7		bcc $a579			bcc 	_PSMain
.a5b2	e6 11		inc $11				inc 	codePtr+1
.a5b4	80 c3		bra $a579			bra 	_PSMain
.a5b6					_PSExit:
.a5b6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5b7					SyntaxError:
.a5b7	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a5ba	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5c2	52 52 4f 52 00
.a5c7					OutOfMemoryError:
.a5c7	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a5ca	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5d2	45 4d 4f 52 59 00
.a5d8					ErrorHandler:
.a5d8	68		pla				pla 								; pop message address
.a5d9	85 14		sta $14				sta 	zTemp0
.a5db	68		pla				pla
.a5dc	85 15		sta $15				sta 	zTemp0+1
.a5de	a9 05		lda #$05			lda 	#CTH_ERROR
.a5e0	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a5e3	a0 01		ldy #$01			ldy 	#1 							; print it
.a5e5					_ErrorPrint:
.a5e5	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5e7	20 97 a2	jsr $a297			jsr		ExternPrint
.a5ea	c8		iny				iny
.a5eb	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5ed	d0 f6		bne $a5e5			bne 	_ErrorPrint
.a5ef	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a5f1	b1 10		lda ($10),y			lda		(codePtr),y
.a5f3	c8		iny				iny
.a5f4	12 10		ora ($10)			ora 	(codePtr)
.a5f6	f0 1c		beq $a614			beq 	_ErrorNoLine 				; if so, skip
.a5f8	a9 20		lda #$20			lda 	#32
.a5fa	20 97 a2	jsr $a297			jsr 	ExternPrint
.a5fd	a9 40		lda #$40			lda 	#'@'
.a5ff	20 97 a2	jsr $a297			jsr 	ExternPrint
.a602	a9 20		lda #$20			lda 	#32
.a604	20 97 a2	jsr $a297			jsr 	ExternPrint
.a607	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a609	b1 10		lda ($10),y			lda 	(codePtr),y
.a60b	48		pha				pha
.a60c	c8		iny				iny
.a60d	b1 10		lda ($10),y			lda 	(codePtr),y
.a60f	a8		tay				tay
.a610	68		pla				pla
.a611	20 1c a6	jsr $a61c			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a614					_ErrorNoLine:
.a614	a9 0d		lda #$0d			lda 	#13							; new line
.a616	20 97 a2	jsr $a297			jsr 	ExternPrint
.a619	4c 33 a0	jmp $a033			jmp 	WarmStart
.a61c					ErrorPrint16:
.a61c	da		phx				phx
.a61d	e8		inx				inx 								; space on stack
.a61e	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a621	98		tya				tya
.a622	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a625	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a628	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a62b	20 41 a6	jsr $a641			jsr 	IntegerToString 			; convert to string.
.a62e	fa		plx				plx
.a62f					ErrorPrintIntegerBuffer:
.a62f	da		phx				phx
.a630	a2 00		ldx #$00			ldx 	#0
.a632					_EP16Loop:
.a632	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a635	20 97 a2	jsr $a297			jsr 	ExternPrint
.a638	e8		inx				inx
.a639	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a63c	d0 f4		bne $a632			bne 	_EP16Loop
.a63e	8a		txa				txa
.a63f	fa		plx				plx
.a640	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a641					IntegerToString:
.a641	48		pha				pha
.a642	5a		phy				phy
.a643	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a646	48		pha				pha
.a647	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a64a	48		pha				pha
.a64b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a64e	48		pha				pha
.a64f	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a652	48		pha				pha
.a653	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a656	10 08		bpl $a660			bpl 		_ITSNotMinus
.a658	a9 2d		lda #$2d			lda 		#"-"
.a65a	20 02 a7	jsr $a702			jsr 		ITSOutputCharacter
.a65d	20 9d aa	jsr $aa9d			jsr 		Unary_Negate
.a660					_ITSNotMinus:
.a660	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a663	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a666	8a		txa				txa 								; use Y for the integer index.
.a667	a8		tay				tay
.a668	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a66a					_ITSNextSubtractor:
.a66a	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a66c	8d 21 08	sta $0821			sta 		NumConvCount
.a66f					_ITSSubtract:
.a66f	38		sec				sec
.a670	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a673	fd de a6	sbc $a6de,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a676	48		pha				pha
.a677	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a67a	fd df a6	sbc $a6df,x			sbc 		_ITSSubtractors+1,x
.a67d	48		pha				pha
.a67e	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a681	fd e0 a6	sbc $a6e0,x			sbc 		_ITSSubtractors+2,x
.a684	48		pha				pha
.a685	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a688	fd e1 a6	sbc $a6e1,x			sbc 		_ITSSubtractors+3,x
.a68b	90 14		bcc $a6a1			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a68d	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a690	68		pla				pla
.a691	99 00 0e	sta $0e00,y			sta 		stack2,y
.a694	68		pla				pla
.a695	99 00 0d	sta $0d00,y			sta 		stack1,y
.a698	68		pla				pla
.a699	99 00 0c	sta $0c00,y			sta 		stack0,y
.a69c	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a69f	80 ce		bra $a66f			bra 		_ITSSubtract 			; go round again.
.a6a1					_ITSCantSubtract:
.a6a1	68		pla				pla 								; throw away interim answers
.a6a2	68		pla				pla 								; (the subtraction that failed)
.a6a3	68		pla				pla
.a6a4	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a6a7	c9 30		cmp #$30			cmp 		#"0"
.a6a9	d0 05		bne $a6b0			bne 		_ITSOutputDigit
.a6ab	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6ae	f0 09		beq $a6b9			beq	 		_ITSGoNextSubtractor
.a6b0					_ITSOutputDigit:
.a6b0	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6b3	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6b6	20 02 a7	jsr $a702			jsr 		ITSOutputCharacter 		; output it.
.a6b9					_ITSGoNextSubtractor:
.a6b9	e8		inx				inx 								; next dword in subtractor table.
.a6ba	e8		inx				inx
.a6bb	e8		inx				inx
.a6bc	e8		inx				inx
.a6bd	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6bf	d0 a9		bne $a66a			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6c1	98		tya				tya 								; X is back as the mantissa index
.a6c2	aa		tax				tax
.a6c3	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6c6	09 30		ora #$30			ora 		#"0"
.a6c8	20 02 a7	jsr $a702			jsr 		ITSOutputCharacter
.a6cb	68		pla				pla
.a6cc	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6cf	68		pla				pla
.a6d0	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6d3	68		pla				pla
.a6d4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6d7	68		pla				pla
.a6d8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6db	7a		ply				ply 								; and exit
.a6dc	68		pla				pla
.a6dd	60		rts				rts
.a6de					_ITSSubtractors:
>a6de	00 ca 9a 3b					.dword 		1000000000
>a6e2	00 e1 f5 05					.dword 		100000000
>a6e6	80 96 98 00					.dword 		10000000
>a6ea	40 42 0f 00					.dword 		1000000
>a6ee	a0 86 01 00					.dword 		100000
>a6f2	10 27 00 00					.dword 		10000
>a6f6	e8 03 00 00					.dword 		1000
>a6fa	64 00 00 00					.dword 		100
>a6fe	0a 00 00 00					.dword 		10
.a702					_ITSSubtractorsEnd:
.a702					ITSOutputCharacter:
.a702	48		pha				pha
.a703	da		phx				phx
.a704	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a707	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a70a	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a70d	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a710	fa		plx				plx
.a711	68		pla				pla
.a712	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a713					IntFromString:
.a713	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a715	8c 25 08	sty $0825			sty 	IFSHexFlag
.a718	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a71a	c9 26		cmp #$26			cmp 	#"&"
.a71c	d0 04		bne $a722			bne 	_IFSNotHex
.a71e	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a721	c8		iny				iny 								; skip
.a722					_IFSNotHex:
.a722	e8		inx				inx 								; space on stack
.a723	20 7f a7	jsr $a77f			jsr 	IFSClearTOS
.a726					_IFSLoop:
.a726	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a729	f0 0a		beq $a735			beq 	_IFSDecOnly
.a72b	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a72d	c9 41		cmp #$41			cmp 	#"A"
.a72f	90 04		bcc $a735			bcc 	_IFSDecOnly
.a731	c9 47		cmp #$47			cmp 	#"F"+1
.a733	90 0a		bcc $a73f			bcc 	_IFSOkDigit
.a735					_IFSDecOnly:
.a735	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a737	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a739	90 3e		bcc $a779			bcc 	_IFSExit
.a73b	c9 3a		cmp #$3a			cmp 	#"9"+1
.a73d	b0 3a		bcs $a779			bcs 	_IFSExit
.a73f					_IFSOkDigit:
.a73f	ad 25 08	lda $0825			lda 	IFSHexFlag
.a742	d0 11		bne $a755			bne 	_IFSHexShift
.a744	20 0e aa	jsr $aa0e			jsr 	Stack_Dup 					; duplicate tos
.a747	20 15 ab	jsr $ab15			jsr 	Unary_Shl	 				; x 2
.a74a	20 15 ab	jsr $ab15			jsr 	Unary_Shl 					; x 4
.a74d	20 e0 ab	jsr $abe0			jsr 	Stack_Add 					; x 5
.a750	20 15 ab	jsr $ab15			jsr 	Unary_Shl 					; x 10
.a753	80 0c		bra $a761			bra 	_IFSAddIn
.a755					_IFSHexShift:
.a755	20 15 ab	jsr $ab15			jsr 	Unary_Shl	 				; x 2
.a758	20 15 ab	jsr $ab15			jsr 	Unary_Shl	 				; x 4
.a75b	20 15 ab	jsr $ab15			jsr 	Unary_Shl	 				; x 8
.a75e	20 15 ab	jsr $ab15			jsr 	Unary_Shl	 				; x 16
.a761					_IFSAddIn:
.a761	e8		inx				inx  								; create space next up
.a762	20 7f a7	jsr $a77f			jsr 	IFSClearTOS
.a765	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a767	c9 41		cmp #$41			cmp 	#"A"
.a769	90 03		bcc $a76e			bcc 	_IFSDec
.a76b	38		sec				sec 								; hex fixup.
.a76c	e9 07		sbc #$07			sbc 	#7
.a76e					_IFSDec:
.a76e	29 0f		and #$0f			and 	#15
.a770	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a773	20 e0 ab	jsr $abe0			jsr 	Stack_Add 					; add to tos
.a776	c8		iny				iny
.a777	80 ad		bra $a726			bra 	_IFSLoop
.a779					_IFSExit:
.a779	98		tya				tya
.a77a	38		sec				sec
.a77b	f0 01		beq $a77e			beq 	_IFSSkipFail
.a77d	18		clc				clc
.a77e					_IFSSkipFail:
.a77e	60		rts				rts
.a77f					IFSClearTOS:
.a77f	9e 00 0c	stz $0c00,x			stz		stack0,x
.a782	9e 00 0d	stz $0d00,x			stz		stack1,x
.a785	9e 00 0e	stz $0e00,x			stz		stack2,x
.a788	9e 00 0f	stz $0f00,x			stz		stack3,x
.a78b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a78c					Tokenise:
.a78c	da		phx				phx
.a78d	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a78f					_TKSkip:
.a78f	c8		iny				iny
.a790					_TKMainLoop:
.a790	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a792	f0 06		beq $a79a			beq 	_TKExit
.a794	c9 20		cmp #$20			cmp 	#" "
.a796	f0 f7		beq $a78f			beq 	_TKSkip
.a798	80 04		bra $a79e			bra 	_TKNotEnd
.a79a	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a79c	fa		plx				plx
.a79d	60		rts				rts
.a79e					_TKNotEnd:
.a79e	c9 22		cmp #$22			cmp 	#'"'
.a7a0	f0 04		beq $a7a6			beq 	_TKIsQuote
.a7a2	c9 27		cmp #$27			cmp 	#"'"
.a7a4	d0 05		bne $a7ab			bne 	_TKNotQuote
.a7a6					_TKIsQuote:
.a7a6	20 ca a8	jsr $a8ca			jsr		TOKQuotedString
.a7a9	80 e5		bra $a790			bra 	_TKMainLoop
.a7ab					_TKNotQuote:
.a7ab	98		tya				tya 								; current pos -> zTemp0
.a7ac	18		clc				clc
.a7ad	65 10		adc $10				adc 	codePtr
.a7af	85 14		sta $14				sta 	zTemp0
.a7b1	85 10		sta $10				sta 	codePtr
.a7b3	a5 11		lda $11				lda 	codePtr+1
.a7b5	69 00		adc #$00			adc 	#0
.a7b7	85 15		sta $15				sta 	zTemp0+1
.a7b9	85 11		sta $11				sta 	codePtr+1
.a7bb	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7bd	b1 10		lda ($10),y			lda 	(codePtr),y
.a7bf	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7c1	f0 08		beq $a7cb			beq 	_TKIsNumber
.a7c3	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7c5	90 23		bcc $a7ea			bcc 	_TKNotNumber
.a7c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7c9	b0 1f		bcs $a7ea			bcs 	_TKNotNumber
.a7cb					_TKIsNumber:
.a7cb	e8		inx				inx
.a7cc	20 13 a7	jsr $a713			jsr 	IntFromString 				; convert to integer
.a7cf	48		pha				pha
.a7d0	20 a2 a8	jsr $a8a2			jsr 	TokWriteConstant 			; do constant recursively.
.a7d3	7a		ply				ply
.a7d4	ca		dex				dex
.a7d5	b1 10		lda ($10),y			lda 	(codePtr),y
.a7d7	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7d9	d0 08		bne $a7e3			bne 	_TKIsPositive
.a7db	c8		iny				iny									; skip it
.a7dc	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7de	20 99 a8	jsr $a899			jsr 	TokWriteToken 				; write token out
.a7e1	80 ad		bra $a790			bra 	_TKMainLoop 				; loop back.
.a7e3					_TKIsPositive:
.a7e3	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a7e5	20 99 a8	jsr $a899			jsr 	TokWriteToken 				; write token out
.a7e8	80 a6		bra $a790			bra 	_TKMainLoop 				; loop back.
.a7ea					_TKNotNumber:
.a7ea	a9 00		lda #$00			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7ec	85 18		sta $18				sta 	zTemp2
.a7ee	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a7f0	85 19		sta $19				sta 	zTemp2+1
.a7f2	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a7f4	a9 10		lda #$10			lda 	#$10
.a7f6	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a7f8					_TKSearch:
.a7f8	a0 00		ldy #$00			ldy 	#0
.a7fa					_TKCompare:
.a7fa	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a7fc	c8		iny				iny
.a7fd	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a7ff	d0 07		bne $a808			bne 	_TKNext
.a801	98		tya				tya
.a802	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a804	d0 f4		bne $a7fa			bne 	_TKCompare 					; found a match.
.a806	80 13		bra $a81b			bra 	_TKFound
.a808	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a80a	38		sec				sec 								; add length+1 to current
.a80b	65 18		adc $18				adc 	zTemp2
.a80d	85 18		sta $18				sta 	zTemp2
.a80f	90 02		bcc $a813			bcc 	_TKNNC
.a811	e6 19		inc $19				inc 	zTemp2+1
.a813	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a815	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a817	d0 df		bne $a7f8			bne 	_TKSearch 					; go try again.
.a819	80 0f		bra $a82a			bra 	_TKComplete
.a81b					_TKFound:
.a81b	98		tya				tya
.a81c	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a81e	90 e8		bcc $a808			bcc 	_TKNext 					; if < best try next
.a820	f0 e6		beq $a808			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a822	85 1a		sta $1a				sta 	zTemp3 						; update best
.a824	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a826	85 1c		sta $1c				sta 	zTemp4
.a828	80 de		bra $a808			bra 	_TKNext
.a82a					_TKComplete:
.a82a	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a82c	f0 1a		beq $a848			beq		_TKTokenFail 				; if zero no match occurred
.a82e	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a830	88		dey				dey
.a831	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at last character
.a833	c8		iny				iny
.a834	20 89 a8	jsr $a889			jsr 	TOKIsIdentifier 			; identifier character
.a837	90 07		bcc $a840			bcc 	_TKOutput 					; if not, then token is okay
.a839	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a83b	20 89 a8	jsr $a889			jsr 	TOKIsIdentifier 			; is that an identifier
.a83e	b0 08		bcs $a848			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a840					_TKOutput:
.a840	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a842	20 99 a8	jsr $a899			jsr 	TOKWriteToken
.a845	4c 90 a7	jmp $a790			jmp 	_TKMainLoop					; go round again
.a848					_TKTokenFail:
.a848	a0 00		ldy #$00			ldy 	#0
.a84a	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a84c	20 89 a8	jsr $a889			jsr 	TOKIsIdentifier
.a84f	b0 13		bcs $a864			bcs 	_TKCopyIdent 				; if yes copy it
.a851	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>a854	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a85c	4f 4b 45 4e 49 53 45 00
.a864					_TKCopyIdent:
.a864	c8		iny				iny 								; get next
.a865	b1 10		lda ($10),y			lda 	(codePtr),y
.a867	20 89 a8	jsr $a889			jsr 	TOKIsIdentifier 			; if identifier
.a86a	08		php				php 								; save CS on stack
.a86b	88		dey				dey 								; back to character
.a86c	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a86e	c8		iny				iny
.a86f	c9 2e		cmp #$2e			cmp 	#"."
.a871	d0 02		bne $a875			bne 	_TKNotDot
.a873	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a875					_TKNotDot:
.a875	38		sec				sec
.a876	e9 41		sbc #$41			sbc		#'A'
.a878	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a87a	28		plp				plp 								; CS if next is identifier
.a87b	08		php				php
.a87c	b0 02		bcs $a880			bcs 	_TKNotLast					; CC if next is not identifier
.a87e	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a880					_TKNotLast:
.a880	20 99 a8	jsr $a899			jsr 	TOKWriteToken 				; write out
.a883	28		plp				plp 								; get test result
.a884	b0 de		bcs $a864			bcs 	_TKCopyIdent 				; get the next identifier.
.a886	4c 90 a7	jmp $a790			jmp 	_TKMainLoop
.a889					TOKIsIdentifier:
.a889	c9 2e		cmp #$2e			cmp 	#"."
.a88b	f0 08		beq $a895			beq 	_TIIYes
.a88d	c9 41		cmp #$41			cmp 	#"A"
.a88f	90 06		bcc $a897			bcc 	_TIINo
.a891	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a893	b0 02		bcs $a897			bcs 	_TIINo
.a895					_TIIYes:
.a895	38		sec				sec
.a896	60		rts				rts
.a897					_TIINo:
.a897	18		clc				clc
.a898	60		rts				rts
.a899					TokWriteToken:
.a899	92 16		sta ($16)			sta 	(zTemp1)
.a89b	e6 16		inc $16				inc 	zTemp1
.a89d	d0 02		bne $a8a1			bne 	_TWTExit
.a89f	e6 17		inc $17				inc 	zTemp1+1
.a8a1					_TWTExit:
.a8a1	60		rts				rts
.a8a2					TokWriteConstant:
.a8a2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8a5	29 3f		and #$3f			and		#63
.a8a7	48		pha				pha 								; save on stack
.a8a8	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8ab	29 c0		and #$c0			and 	#$C0
.a8ad	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8b0	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8b3	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8b6	f0 0d		beq $a8c5			beq 	_TWCNoCall 					; no, don't call.
.a8b8	5a		phy				phy
.a8b9	a0 06		ldy #$06			ldy 	#6
.a8bb					_TWCShift:
.a8bb	20 22 ab	jsr $ab22			jsr 	Unary_Shr
.a8be	88		dey				dey
.a8bf	d0 fa		bne $a8bb			bne 	_TWCShift
.a8c1	7a		ply				ply
.a8c2	20 a2 a8	jsr $a8a2			jsr 	TokWriteConstant
.a8c5					_TWCNoCall:
.a8c5	68		pla				pla
.a8c6	09 80		ora #$80			ora 	#$80						; make digit token
.a8c8	80 cf		bra $a899			bra 	TokWriteToken 				; and write it out.
.a8ca					TokQuotedString:
.a8ca	85 18		sta $18				sta 	zTemp2 						; save quote
.a8cc	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8ce	f0 02		beq $a8d2			beq 	_TQDouble
.a8d0	a9 01		lda #$01			lda 	#1
.a8d2					_TQDouble:
.a8d2	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8d3	20 99 a8	jsr $a899			jsr 	TOKWriteToken 				; write out
.a8d6	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8d8	85 1a		sta $1a				sta 	zTemp3
.a8da	a5 17		lda $17				lda 	zTemp1+1
.a8dc	85 1b		sta $1b				sta 	zTemp3+1
.a8de	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8e0	20 99 a8	jsr $a899			jsr 	TOKWriteToken
.a8e3					_TQLoop:
.a8e3	c8		iny				iny 								; next character
.a8e4	b1 10		lda ($10),y			lda 	(codePtr),y
.a8e6	f0 0f		beq $a8f7			beq 	_TQExit 					; if zero exit
.a8e8	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a8ea	f0 0a		beq $a8f6			beq 	_TQSkipExit 				; skip it and exit
.a8ec	20 99 a8	jsr $a899			jsr 	TOKWriteToken 				; write out
.a8ef	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a8f1	1a		inc a				inc 	a
.a8f2	92 1a		sta ($1a)			sta 	(zTemp3)
.a8f4	80 ed		bra $a8e3			bra 	_TQLoop						; go round
.a8f6					_TQSkipExit:
.a8f6	c8		iny				iny
.a8f7					_TQExit:
.a8f7	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8f9	20 99 a8	jsr $a899			jsr 	TOKWriteToken
.a8fc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a8fd					EditProgram:
.a8fd	ad 89 10	lda $1089			lda 	VarMemory+1
.a900	1a		inc a				inc 	a
.a901	c9 9f		cmp #$9f			cmp 	#MemoryEnd >> 8
.a903	b0 3c		bcs $a941			bcs 	_EPMemory
.a905	a2 00		ldx #$00			ldx 	#0
.a907	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a909	85 10		sta $10				sta 	codePtr
.a90b	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a90d	85 11		sta $11				sta 	codePtr+1
.a90f	a0 00		ldy #$00			ldy 	#0
.a911	a2 ff		ldx #$ff			ldx 	#255
.a913	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS
.a916	98		tya				tya
.a917	18		clc				clc
.a918	65 10		adc $10				adc 	codePtr
.a91a	85 10		sta $10				sta 	codePtr
.a91c	90 02		bcc $a920			bcc 	_EPNoCarry
.a91e	e6 11		inc $11				inc 	codePtr+1
.a920					_EPNoCarry:
.a920	20 44 a9	jsr $a944			jsr 	EDFindLine
.a923	90 0f		bcc $a934			bcc 	_EPNotFound
.a925	a5 16		lda $16				lda 	zTemp1
.a927	48		pha				pha
.a928	a5 17		lda $17				lda 	zTemp1+1
.a92a	48		pha				pha
.a92b	20 7b a9	jsr $a97b			jsr 	EDDeleteLine
.a92e	68		pla				pla
.a92f	85 17		sta $17				sta 	zTemp1+1
.a931	68		pla				pla
.a932	85 16		sta $16				sta 	zTemp1
.a934					_EPNotFound:
.a934	b2 10		lda ($10)			lda 	(codePtr)
.a936	f0 03		beq $a93b			beq 	_EPNoInsert
.a938	20 a0 a9	jsr $a9a0			jsr 	EDInsertLine
.a93b					_EPNoInsert:
.a93b	20 29 a5	jsr $a529			jsr 	ResetForRun
.a93e	4c 47 a0	jmp $a047			jmp 	NewCommand
.a941					_EPMemory:
.a941	4c c7 a5	jmp $a5c7			jmp 	OutOfMemoryError
.a944					EDFindLine:
.a944	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a946	85 16		sta $16				sta 	zTemp1
.a948	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a94a	85 17		sta $17				sta 	zTemp1+1
.a94c					_EDFLLoop:
.a94c	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a94e	b1 16		lda ($16),y			lda 	(zTemp1),y
.a950	f0 25		beq $a977			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a952	c8		iny				iny
.a953	38		sec				sec
.a954	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a957	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a959	aa		tax				tax	 								; this will return 10.
.a95a	ad 00 0d	lda $0d00			lda 	stack1
.a95d	c8		iny				iny
.a95e	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a960	90 15		bcc $a977			bcc 	_EDFLFail					; if target < current then failed.
.a962	d0 04		bne $a968			bne 	_EDFLNext 					; if non-zero then goto next
.a964	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a966	f0 11		beq $a979			beq 	_EDFLFound
.a968					_EDFLNext:
.a968	a0 00		ldy #$00			ldy 	#0 							; get offset
.a96a	18		clc				clc
.a96b	b1 16		lda ($16),y			lda 	(zTemp1),y
.a96d	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a96f	85 16		sta $16				sta 	zTemp1
.a971	90 d9		bcc $a94c			bcc 	_EDFLLoop
.a973	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a975	80 d5		bra $a94c			bra 	_EDFLLoop
.a977					_EDFLFail:
.a977	18		clc				clc
.a978	60		rts				rts
.a979					_EDFLFound:
.a979	38		sec				sec
.a97a	60		rts				rts
.a97b					EDDeleteLine:
.a97b	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a97d	a2 00		ldx #$00			ldx 	#0
.a97f	b1 16		lda ($16),y			lda 	(zTemp1),y
.a981	a8		tay				tay 								; put in Y
.a982					_EDDelLoop:
.a982	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a984	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a986	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a988	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a98b	d0 07		bne $a994			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a98d	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a98f	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a992	f0 08		beq $a99c			beq		_EDDelExit
.a994					_EDDelNext:
.a994	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a996	d0 ea		bne $a982			bne 	_EDDelLoop
.a998	e6 17		inc $17				inc 	zTemp1+1
.a99a	80 e6		bra $a982			bra 	_EDDelLoop
.a99c					_EDDelExit:
.a99c	20 4f a5	jsr $a54f			jsr 	ResetVarMemory
.a99f	60		rts				rts
.a9a0					EDInsertLine:
.a9a0	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a9a3	85 1a		sta $1a				sta 	zTemp3
.a9a5	ad 89 10	lda $1089			lda 	VarMemory+1
.a9a8	85 1b		sta $1b				sta 	zTemp3+1
.a9aa	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9ac					_EDGetLength:
.a9ac	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9ae	f0 0d		beq $a9bd			beq 	_EDGotLength 				; if 0, Y is the length
.a9b0	c8		iny				iny
.a9b1	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9b3	b0 f7		bcs $a9ac			bcs 	_EDGetLength
.a9b5	98		tya				tya 								; get original position
.a9b6	3a		dec a				dec 	a
.a9b7	18		clc				clc
.a9b8	71 10		adc ($10),y			adc 	(codePtr),y
.a9ba	a8		tay				tay
.a9bb	80 ef		bra $a9ac			bra 	_EDGetLength
.a9bd					_EDGotLength:
.a9bd	98		tya				tya
.a9be	18		clc				clc
.a9bf	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9c1	48		pha				pha 								; save total size (e.g. offset)
.a9c2	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9c4	a8		tay				tay 								; in Y
.a9c5	a2 00		ldx #$00			ldx 	#0
.a9c7					_EDInsLoop:
.a9c7	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9c9	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9cb	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9cd	c5 16		cmp $16				cmp 	zTemp1
.a9cf	d0 06		bne $a9d7			bne 	_EDINextShift
.a9d1	a5 1b		lda $1b				lda 	zTemp3+1
.a9d3	c5 17		cmp $17				cmp 	zTemp1+1
.a9d5	f0 0a		beq $a9e1			beq 	_EDIShiftOver
.a9d7					_EDINextShift:
.a9d7	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9d9	d0 02		bne $a9dd			bne 	_EDINoBorrow
.a9db	c6 1b		dec $1b				dec 	zTemp3+1
.a9dd					_EDINoBorrow:
.a9dd	c6 1a		dec $1a				dec 	zTemp3
.a9df	80 e6		bra $a9c7			bra 	_EDInsLoop
.a9e1					_EDIShiftOver:
.a9e1	68		pla				pla 								; this is the size + others, e.g. offset
.a9e2	a0 00		ldy #$00			ldy 	#0
.a9e4	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.a9e6	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.a9e9	c8		iny				iny
.a9ea	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9ec	ad 00 0d	lda $0d00			lda 	stack1
.a9ef	c8		iny				iny
.a9f0	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9f2	c8		iny				iny 								; where the code goes.
.a9f3	a2 00		ldx #$00			ldx 	#0 							; comes from
.a9f5					_EDICopyCode:
.a9f5	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.a9f7	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.a9f9	c8		iny				iny 								; bump pointers
.a9fa	e6 10		inc $10				inc 	codePtr
.a9fc	d0 02		bne $aa00			bne 	_EDINoCarry
.a9fe	e6 11		inc $11				inc 	codePtr+1
.aa00					_EDINoCarry:
.aa00	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.aa02	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.aa04	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa06	d0 ed		bne $a9f5			bne 	_EDICopyCode
.aa08	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa09					Stack_Empty:
.aa09	a2 00		ldx #$00			ldx 	#0
.aa0b	60		rts				rts
.aa0c					Stack_Drop:
.aa0c	ca		dex				dex
.aa0d	60		rts				rts
.aa0e					Stack_Dup:
.aa0e	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa11	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa14	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa17	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa1a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa1d	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa20	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa23	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa26	e8		inx				inx 								; bump stack pointer
.aa27	60		rts				rts
.aa28					Stack_Nip:
.aa28	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa2b	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa2e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa31	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa34	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa37	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa3a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa3d	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa40	ca		dex				dex 								; drop tos
.aa41	60		rts				rts
.aa42					Stack_Over:
.aa42	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa45	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa48	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa4b	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa4e	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa51	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa54	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa57	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa5a	e8		inx				inx 							; bump stack pointer
.aa5b	60		rts				rts
.aa5c					Stack_Swap:
.aa5c	5a		phy				phy
.aa5d	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa60	a8		tay				tay
.aa61	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa64	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa67	98		tya				tya
.aa68	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa6b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa6e	a8		tay				tay
.aa6f	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa72	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa75	98		tya				tya
.aa76	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa79	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa7c	a8		tay				tay
.aa7d	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa80	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa83	98		tya				tya
.aa84	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa87	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa8a	a8		tay				tay
.aa8b	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa8e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa91	98		tya				tya
.aa92	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa95	7a		ply				ply
.aa96	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aa97					Unary_Absolute:
.aa97	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa9a	30 01		bmi $aa9d			bmi 	Unary_Negate
.aa9c	60		rts				rts
.aa9d					Unary_Negate:
.aa9d	38		sec				sec
.aa9e	a9 00		lda #$00			lda		#0
.aaa0	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aaa3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaa6	a9 00		lda #$00			lda		#0
.aaa8	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aaab	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaae	a9 00		lda #$00			lda		#0
.aab0	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aab3	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aab6	a9 00		lda #$00			lda		#0
.aab8	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aabb	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aabe	60		rts				rts
.aabf					Unary_Not:
.aabf	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aac2	49 ff		eor #$ff			eor 	#$FF
.aac4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aac7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaca	49 ff		eor #$ff			eor 	#$FF
.aacc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aacf	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aad2	49 ff		eor #$ff			eor 	#$FF
.aad4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aad7	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aada	49 ff		eor #$ff			eor 	#$FF
.aadc	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aadf	60		rts				rts
.aae0					Unary_Increment:
.aae0	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aae3	d0 0d		bne $aaf2			bne 	_UIExit
.aae5	fe 00 0d	inc $0d00,x			inc 	stack1,x
.aae8	d0 08		bne $aaf2			bne 	_UIExit
.aaea	fe 00 0e	inc $0e00,x			inc 	stack2,x
.aaed	d0 03		bne $aaf2			bne 	_UIExit
.aaef	fe 00 0f	inc $0f00,x			inc 	stack3,x
.aaf2					_UIExit:
.aaf2	60		rts				rts
.aaf3					Unary_Decrement:
.aaf3	38		sec				sec
.aaf4	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaf7	e9 01		sbc #$01			sbc 	#1
.aaf9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aafc	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaff	e9 00		sbc #$00			sbc 	#0
.ab01	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab04	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab07	e9 00		sbc #$00			sbc 	#0
.ab09	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab0c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab0f	e9 00		sbc #$00			sbc 	#0
.ab11	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab14	60		rts				rts
.ab15					Unary_Shl:
.ab15	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab18	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab1b	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab1e	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab21	60		rts				rts
.ab22					Unary_Shr:
.ab22	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab25	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab28	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab2b	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab2e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab2f					Mem_Peek:
.ab2f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab32	85 14		sta $14				sta 	zTemp0
.ab34	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab37	85 15		sta $15				sta 	zTemp0+1
.ab39	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab3b	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab3e	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab41	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab44	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab47	60		rts				rts
.ab48					Mem_WPeek:
.ab48	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab4b	85 14		sta $14				sta 	zTemp0
.ab4d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab50	85 15		sta $15				sta 	zTemp0+1
.ab52	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab54	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab57	5a		phy				phy 								; read msb
.ab58	a0 01		ldy #$01			ldy 	#1
.ab5a	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab5c	7a		ply				ply
.ab5d	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab60	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab63	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab66	60		rts				rts
.ab67					Mem_DPeek:
.ab67	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab6a	85 14		sta $14				sta 	zTemp0
.ab6c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab6f	85 15		sta $15				sta 	zTemp0+1
.ab71	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab73	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab76	5a		phy				phy 								; read msb
.ab77	a0 01		ldy #$01			ldy 	#1
.ab79	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab7b	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab7e	c8		iny				iny
.ab7f	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab81	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab84	c8		iny				iny
.ab85	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab87	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab8a	7a		ply				ply
.ab8b	60		rts				rts
.ab8c					Mem_Poke:
.ab8c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab8f	85 14		sta $14				sta 	zTemp0
.ab91	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab94	85 15		sta $15				sta 	zTemp0+1
.ab96	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab99	92 14		sta ($14)			sta 	(zTemp0)
.ab9b	ca		dex				dex
.ab9c	ca		dex				dex
.ab9d	60		rts				rts
.ab9e					Mem_WPoke:
.ab9e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aba1	85 14		sta $14				sta 	zTemp0
.aba3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aba6	85 15		sta $15				sta 	zTemp0+1
.aba8	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abab	92 14		sta ($14)			sta 	(zTemp0)
.abad	5a		phy				phy
.abae	a0 01		ldy #$01			ldy 	#1
.abb0	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abb3	91 14		sta ($14),y			sta 	(zTemp0),y
.abb5	7a		ply				ply
.abb6	ca		dex				dex
.abb7	ca		dex				dex
.abb8	60		rts				rts
.abb9					Mem_DPoke:
.abb9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abbc	85 14		sta $14				sta 	zTemp0
.abbe	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abc1	85 15		sta $15				sta 	zTemp0+1
.abc3	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abc6	92 14		sta ($14)			sta 	(zTemp0)
.abc8	5a		phy				phy
.abc9	a0 01		ldy #$01			ldy 	#1
.abcb	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abce	91 14		sta ($14),y			sta 	(zTemp0),y
.abd0	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abd3	c8		iny				iny
.abd4	91 14		sta ($14),y			sta 	(zTemp0),y
.abd6	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abd9	c8		iny				iny
.abda	91 14		sta ($14),y			sta 	(zTemp0),y
.abdc	7a		ply				ply
.abdd	ca		dex				dex
.abde	ca		dex				dex
.abdf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abe0					Stack_Add:
.abe0	ca		dex				dex
.abe1					Stack_Add_No_Dex:
.abe1	18		clc				clc
.abe2	bd 00 0c	lda $0c00,x			lda		stack0,x
.abe5	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.abe8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abeb	bd 00 0d	lda $0d00,x			lda		stack1,x
.abee	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.abf1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abf4	bd 00 0e	lda $0e00,x			lda		stack2,x
.abf7	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.abfa	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abfd	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac00	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.ac03	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac06	60		rts				rts
.ac07					Stack_Sub:
.ac07	ca		dex				dex
.ac08	38		sec				sec
.ac09	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac0c	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac0f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac12	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac15	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac18	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac1b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac1e	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac21	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac24	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac27	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac2a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac2d	60		rts				rts
.ac2e					Stack_And:
.ac2e	ca		dex				dex
.ac2f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac32	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac35	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac38	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac3b	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac3e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac41	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac44	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac47	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac4a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac4d	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac50	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac53	60		rts				rts
.ac54					Stack_Xor:
.ac54	ca		dex				dex
.ac55	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac58	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac5b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac5e	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac61	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac64	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac67	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac6a	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac6d	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac70	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac73	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac76	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac79	60		rts				rts
.ac7a					Stack_Or:
.ac7a	ca		dex				dex
.ac7b	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac7e	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac81	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac84	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac87	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac8a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac8d	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac90	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac93	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac96	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac99	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac9c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac9f	60		rts				rts
.aca0					Stack_Shl:
.aca0	38		sec				sec
.aca1	80 01		bra $aca4			bra 	StackShift
.aca3					Stack_Shr:
.aca3	18		clc				clc
.aca4					StackShift:
.aca4	08		php				php
.aca5	ca		dex				dex
.aca6	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.aca9	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.acab	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acae	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acb1	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acb4	d0 13		bne $acc9			bne 	_SSZero
.acb6					_SSLoop:
.acb6	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acb9	30 1a		bmi $acd5			bmi 	_SSDone 					; completed ?
.acbb	28		plp				plp 								; restore flag
.acbc	08		php				php
.acbd	b0 05		bcs $acc4			bcs 	_SSLeft 					; do either shift.
.acbf	20 22 ab	jsr $ab22			jsr 	Unary_Shr
.acc2	80 f2		bra $acb6			bra 	_SSLoop
.acc4					_SSLeft:
.acc4	20 15 ab	jsr $ab15			jsr 	Unary_Shl
.acc7	80 ed		bra $acb6			bra 	_SSLoop
.acc9					_SSZero:
.acc9	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.accc	9e 00 0d	stz $0d00,x			stz 	stack1,x
.accf	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acd2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acd5					_SSDone:
.acd5	28		plp				plp 								; throw flag.
.acd6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acd7					MulInteger32:
.acd7	ca		dex				dex
.acd8	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.acdb	85 1e		sta $1e				sta 	zLTemp1
.acdd	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ace0	85 1f		sta $1f				sta 	zLTemp1+1
.ace2	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ace5	85 20		sta $20				sta 	zLTemp1+2
.ace7	bd 00 0f	lda $0f00,x			lda 	stack3,x
.acea	85 21		sta $21				sta 	zLTemp1+3
.acec	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.acef	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acf2	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acf5	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acf8					_BFMMultiply:
.acf8	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.acfa	29 01		and #$01			and 	#1
.acfc	f0 03		beq $ad01			beq 	_BFMNoAdd
.acfe	20 e1 ab	jsr $abe1			jsr 	Stack_Add_No_Dex 			; co-opt this code
.ad01					_BFMNoAdd:
.ad01	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.ad04	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad07	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad0a	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad0d	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad0f	66 20		ror $20				ror 	zLTemp1+2
.ad11	66 1f		ror $1f				ror 	zLTemp1+1
.ad13	66 1e		ror $1e				ror 	zLTemp1
.ad15	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad17	05 1f		ora $1f				ora 	zLTemp1+1
.ad19	05 20		ora $20				ora 	zLTemp1+2
.ad1b	05 21		ora $21				ora 	zLTemp1+3
.ad1d	d0 d9		bne $acf8			bne 	_BFMMultiply
.ad1f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad20					DivInteger32:
.ad20	ca		dex				dex
.ad21	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad24	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad27	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad2a	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad2d	d0 14		bne $ad43			bne 	_BFDOkay
.ad2f	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>ad32	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad3a	20 42 59 20 5a 45 52 4f 00
.ad43					_BFDOkay:
.ad43	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad45	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad47	64 20		stz $20				stz 	zLTemp1+2
.ad49	64 21		stz $21				stz 	zLTemp1+3
.ad4b	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad4e	20 a9 ad	jsr $ada9			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad51	e8		inx				inx
.ad52	20 a9 ad	jsr $ada9			jsr 	CheckIntegerNegate
.ad55	ca		dex				dex
.ad56	5a		phy				phy 								; Y is the counter
.ad57	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad59					_BFDLoop:
.ad59	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad5c	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad5f	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad62	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad65	26 1e		rol $1e				rol 	zLTemp1
.ad67	26 1f		rol $1f				rol 	zLTemp1+1
.ad69	26 20		rol $20				rol 	zLTemp1+2
.ad6b	26 21		rol $21				rol 	zLTemp1+3
.ad6d	38		sec				sec
.ad6e	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad70	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad73	48		pha				pha
.ad74	a5 1f		lda $1f				lda 	zLTemp1+1
.ad76	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad79	48		pha				pha
.ad7a	a5 20		lda $20				lda 	zLTemp1+2
.ad7c	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad7f	48		pha				pha
.ad80	a5 21		lda $21				lda 	zLTemp1+3
.ad82	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad85	90 15		bcc $ad9c			bcc 	_BFDNoAdd
.ad87	85 21		sta $21				sta 	zLTemp1+3 					; update A
.ad89	68		pla				pla
.ad8a	85 20		sta $20				sta 	zLTemp1+2
.ad8c	68		pla				pla
.ad8d	85 1f		sta $1f				sta 	zLTemp1+1
.ad8f	68		pla				pla
.ad90	85 1e		sta $1e				sta 	zLTemp1+0
.ad92	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ad95	09 01		ora #$01			ora 	#1
.ad97	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ad9a	80 03		bra $ad9f			bra 	_BFDNext
.ad9c					_BFDNoAdd:
.ad9c	68		pla				pla 								; Throw away the intermediate calculations
.ad9d	68		pla				pla
.ad9e	68		pla				pla
.ad9f					_BFDNext:
.ad9f	88		dey				dey
.ada0	d0 b7		bne $ad59			bne 	_BFDLoop
.ada2	7a		ply				ply 								; restore Y
.ada3	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ada6	b0 07		bcs $adaf			bcs		IntegerNegateAlways 		; negate the result
.ada8	60		rts				rts
.ada9					CheckIntegerNegate:
.ada9	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.adac	30 01		bmi $adaf			bmi 	IntegerNegateAlways 		; if so negate it
.adae	60		rts				rts
.adaf					IntegerNegateAlways:
.adaf	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.adb2	4c 9d aa	jmp $aa9d			jmp 	Unary_Negate
.adb5					ModInteger32:
.adb5	20 20 ad	jsr $ad20			jsr 	DivInteger32
.adb8	a5 1e		lda $1e				lda 	zLTemp1
.adba	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adbd	a5 1f		lda $1f				lda 	zLTemp1+1
.adbf	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adc2	a5 20		lda $20				lda 	zLTemp1+2
.adc4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adc7	a5 21		lda $21				lda 	zLTemp1+3
.adc9	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adcc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adcd					Comp_Equal:
.adcd	38		sec				sec
.adce	80 01		bra $add1			bra 	Comp_CheckEqual
.add0					Comp_NotEqual:
.add0	18		clc				clc
.add1					Comp_CheckEqual:
.add1	08		php				php
.add2	ca		dex				dex
.add3	bd 00 0c	lda $0c00,x			lda		stack0,x
.add6	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.add9	d0 16		bne $adf1			bne 	_CCENonZero
.addb	bd 00 0d	lda $0d00,x			lda		stack1,x
.adde	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ade1	d0 0e		bne $adf1			bne 	_CCENonZero
.ade3	bd 00 0e	lda $0e00,x			lda		stack2,x
.ade6	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ade9	d0 06		bne $adf1			bne 	_CCENonZero
.adeb	bd 00 0f	lda $0f00,x			lda		stack3,x
.adee	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.adf1					_CCENonZero:
.adf1	f0 02		beq $adf5			beq 	_CCENotSet
.adf3	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.adf5					_CCENotSet:
.adf5					CompCheckFlip:
.adf5	28		plp				plp 								; if carry set, we want $FF if equal
.adf6	90 02		bcc $adfa			bcc 	CompReturn
.adf8	49 ff		eor #$ff			eor 	#$FF
.adfa					CompReturn:
.adfa	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.adfd	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae00	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae03	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae06	60		rts				rts
.ae07					Comp_Less:
.ae07	18		clc				clc
.ae08	80 01		bra $ae0b			bra 	Comp_LessCont
.ae0a					Comp_GreaterEqual:
.ae0a	38		sec				sec
.ae0b					Comp_LessCont:
.ae0b	08		php				php
.ae0c	ca		dex				dex
.ae0d	38		sec				sec
.ae0e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae11	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae14	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae17	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae1a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae1d	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae20	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae23	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae26	50 02		bvc $ae2a			bvc 	_CLNoFlip 					; unsigned -> signed
.ae28	49 80		eor #$80			eor 	#$80
.ae2a					_CLNoFlip:
.ae2a	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae2c	f0 c7		beq $adf5			beq 	CompCheckFlip
.ae2e	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae30	80 c3		bra $adf5			bra 	CompCheckFlip
.ae32					Comp_LessEqual:
.ae32	38		sec				sec
.ae33	80 01		bra $ae36			bra 	Comp_LessEqualCont
.ae35					Comp_Greater:
.ae35	18		clc				clc
.ae36					Comp_LessEqualCont:
.ae36	08		php				php
.ae37	ca		dex				dex
.ae38	38		sec				sec
.ae39	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae3c	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae3f	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae42	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae45	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae48	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae4b	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae4e	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae51	50 02		bvc $ae55			bvc 	_CLENoFlip 					; unsigned -> signed
.ae53	49 80		eor #$80			eor 	#$80
.ae55					_CLENoFlip:
.ae55	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae57	f0 9c		beq $adf5			beq 	CompCheckFlip
.ae59	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae5b	80 98		bra $adf5			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae5d					Allocate:
.ae5d	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae60	29 80		and #$80			and 	#$80
.ae62	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae65	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae68	d0 26		bne $ae90			bne 	_ALBad
.ae6a	18		clc				clc 								; add to varmemory pointer saving
.ae6b	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae6e	48		pha				pha
.ae6f	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae72	8d 88 10	sta $1088			sta 	VarMemory
.ae75	ad 89 10	lda $1089			lda 	VarMemory+1
.ae78	48		pha				pha
.ae79	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae7c	8d 89 10	sta $1089			sta 	VarMemory+1
.ae7f	68		pla				pla 								; pop and save
.ae80	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae83	68		pla				pla
.ae84	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae87	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae8a	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.ae8d	b0 01		bcs $ae90			bcs 	_ALBad
.ae8f	60		rts				rts
.ae90					_ALBad:
.ae90	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>ae93	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>ae9b	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.ae9d					Cmd_List:
.ae9d	20 1e a5	jsr $a51e			jsr 	ResetCodePointer 			; back to the beginning
.aea0	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.aea2	64 19		stz $19				stz 	zTemp2+1
.aea4	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.aea6	f0 0b		beq $aeb3			beq 	_CLINone
.aea8	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.aeab	85 18		sta $18				sta 	zTemp2
.aead	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aeb0	95 19		sta $19,x			sta 	zTemp2+1,x
.aeb2	ca		dex				dex 								; and pop the tos
.aeb3					_CLINone:
.aeb3	a9 18		lda #$18			lda 	#24 						; list this many lines
.aeb5	85 16		sta $16				sta 	zTemp1
.aeb7					_CLILoop
.aeb7	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aeb9	f0 24		beq $aedf			beq 	_CLIEnd
.aebb	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aebd	38		sec				sec
.aebe	b1 10		lda ($10),y			lda 	(codePtr),y
.aec0	e5 18		sbc $18				sbc 	zTemp2
.aec2	c8		iny				iny
.aec3	b1 10		lda ($10),y			lda 	(codePtr),y
.aec5	e5 19		sbc $19				sbc 	zTemp2+1
.aec7	90 09		bcc $aed2			bcc 	_CLISkip
.aec9	da		phx				phx
.aeca	20 e2 ae	jsr $aee2			jsr 	ListCurrent 				; list the line.
.aecd	fa		plx				plx
.aece	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aed0	f0 0d		beq $aedf			beq 	_CLIEnd
.aed2					_CLISkip:
.aed2	18		clc				clc
.aed3	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aed5	65 10		adc $10				adc 	codePtr
.aed7	85 10		sta $10				sta 	codePtr
.aed9	90 dc		bcc $aeb7			bcc 	_CLILoop
.aedb	e6 11		inc $11				inc 	codePtr+1
.aedd	80 d8		bra $aeb7			bra 	_CLILoop
.aedf					_CLIEnd:
.aedf	4c 33 a0	jmp $a033			jmp 	WarmStart
.aee2					ListCurrent:
.aee2	a9 05		lda #$05			lda 	#CTH_LINENO
.aee4	20 a1 a2	jsr $a2a1			jsr 	ExternColour 				; set colour
.aee7	a0 01		ldy #$01			ldy 	#1							; print line#
.aee9	b1 10		lda ($10),y			lda 	(codePtr),y
.aeeb	48		pha				pha
.aeec	c8		iny				iny
.aeed	b1 10		lda ($10),y			lda 	(codePtr),y
.aeef	a8		tay				tay
.aef0	68		pla				pla
.aef1	20 1c a6	jsr $a61c			jsr 	ErrorPrint16
.aef4	a8		tay				tay
.aef5					_LCPadOut:
.aef5	a9 20		lda #$20			lda 	#' '
.aef7	20 97 a2	jsr $a297			jsr 	ExternPrint
.aefa	c8		iny				iny
.aefb	c0 05		cpy #$05			cpy 	#5
.aefd	d0 f6		bne $aef5			bne 	_LCPadOut
.aeff	a0 03		ldy #$03			ldy 	#3 							; start here
.af01					_LCLoop:
.af01	a9 20		lda #$20			lda 	#' '						; space
.af03	20 97 a2	jsr $a297			jsr 	ExternPrint
.af06					_LCLoopNoSpace:
.af06	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.af08	30 3e		bmi $af48			bmi 	_LCIdentConst 				; identifier or constant
.af0a	d0 05		bne $af11			bne 	_LCStringToken
.af0c	a9 0d		lda #$0d			lda 	#13
.af0e	4c 97 a2	jmp $a297			jmp 	ExternPrint
.af11					_LCStringToken:
.af11	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af13	90 0c		bcc $af21			bcc		_LCString
.af15	20 89 af	jsr $af89			jsr 	ListPrintToken
.af18	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af1a	c8		iny				iny 								; advance pointer
.af1b	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af1d	f0 e7		beq $af06			beq 	_LCLoopNoSpace
.af1f	80 e0		bra $af01			bra 	_LCLoop 					; go round again.
.af21					_LCString:
.af21	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af22	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af24	a2 22		ldx #$22			ldx 	#'"'
.af26	b0 04		bcs $af2c			bcs 	_LCSSkip
.af28	a9 07		lda #$07			lda 	#CTH_COMMENT
.af2a	a2 27		ldx #$27			ldx 	#"'"
.af2c					_LCSSkip:
.af2c	20 a1 a2	jsr $a2a1			jsr 	ExternColour 				; set colour
.af2f	8a		txa				txa
.af30	48		pha				pha 								; save end quote on stack.
.af31	20 97 a2	jsr $a297			jsr 	ExternPrint
.af34	c8		iny				iny 								; skip type size
.af35	c8		iny				iny
.af36					_LCSPrint:
.af36	b1 10		lda ($10),y			lda 	(codePtr),y
.af38	c8		iny				iny
.af39	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af3b	f0 05		beq $af42			beq 	_LCSExit
.af3d	20 97 a2	jsr $a297			jsr 	ExternPrint
.af40	80 f4		bra $af36			bra 	_LCSPrint
.af42					_LCSExit:
.af42	68		pla				pla
.af43	20 97 a2	jsr $a297			jsr 	ExternPrint
.af46	80 b9		bra $af01			bra 	_LCLoop
.af48					_LCIdentConst:
.af48	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af4a	90 1e		bcc $af6a			bcc 	_LCConstant
.af4c	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af4e	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af51					_LCCIdLoop:
.af51	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af53	29 1f		and #$1f			and 	#$1F 						; convert
.af55	18		clc				clc
.af56	69 41		adc #$41			adc 	#'A'
.af58	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af5a	d0 02		bne $af5e			bne 	_LCCNotDot
.af5c	a9 2e		lda #$2e			lda 	#'.'
.af5e					_LCCNotDot:
.af5e	20 97 a2	jsr $a297			jsr 	ExternPrint
.af61	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af63	c8		iny				iny
.af64	c9 e0		cmp #$e0			cmp 	#$E0
.af66	b0 99		bcs $af01			bcs 	_LCLoop
.af68	80 e7		bra $af51			bra 	_LCCIdLoop
.af6a					_LCConstant:
.af6a	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.af6c	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af6f	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.af71	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.af74	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.af77	48		pha				pha
.af78	20 41 a6	jsr $a641			jsr 	IntegerToString 			; this could corrupt stack if full :)
.af7b	20 2f a6	jsr $a62f			jsr 	ErrorPrintIntegerBuffer
.af7e	68		pla				pla 								; sign back
.af7f	10 80		bpl $af01			bpl 	_LCLoop
.af81	a9 2d		lda #$2d			lda 	#"-"
.af83	20 97 a2	jsr $a297			jsr 	ExternPrint
.af86	4c 01 af	jmp $af01			jmp 	_LCLoop
.af89					ListPrintToken:
.af89	5a		phy				phy
.af8a	48		pha				pha 								; token colour
.af8b	a9 02		lda #$02			lda 	#CTH_TOKEN
.af8d	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af90	fa		plx				plx
.af91	a9 00		lda #$00			lda 	#KeywordText & $FF
.af93	85 14		sta $14				sta 	zTemp0
.af95	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.af97	85 15		sta $15				sta 	zTemp0+1
.af99					_LPTLoop:
.af99	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.af9b	f0 0e		beq $afab			beq 	_LPTFound
.af9d	ca		dex				dex
.af9e	b2 14		lda ($14)			lda 	(zTemp0)
.afa0	38		sec				sec									; add 1, it's length+name
.afa1	65 14		adc $14				adc 	zTemp0
.afa3	85 14		sta $14				sta 	zTemp0
.afa5	90 f2		bcc $af99			bcc 	_LPTLoop
.afa7	e6 15		inc $15				inc 	zTemp0+1
.afa9	80 ee		bra $af99			bra 	_LPTLoop
.afab					_LPTFound:
.afab	a0 01		ldy #$01			ldy 	#1 							; start here.
.afad					_LPTShow:
.afad	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afaf	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afb1	90 06		bcc $afb9			bcc 	_LPTExit
.afb3	c8		iny				iny
.afb4	20 97 a2	jsr $a297			jsr 	ExternPrint
.afb7	80 f4		bra $afad			bra 	_LPTShow
.afb9					_LPTExit:
.afb9	7a		ply				ply
.afba	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.afbb					Cmd_Renumber:
.afbb	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.afbd	85 16		sta $16				sta 	zTemp1
.afbf	a9 11		lda #$11			lda 	#ProgramStart >> 8
.afc1	85 17		sta $17				sta 	zTemp1+1
.afc3	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.afc5	85 18		sta $18				sta 	zTemp2
.afc7	a9 03		lda #$03			lda 	#1000 >> 8
.afc9	85 19		sta $19				sta 	zTemp2+1
.afcb					_CRLoop:
.afcb	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.afcd	f0 23		beq $aff2			beq 	_CRExit
.afcf	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.afd1	a5 18		lda $18				lda 	zTemp2
.afd3	91 16		sta ($16),y			sta 	(zTemp1),y
.afd5	c8		iny				iny
.afd6	a5 19		lda $19				lda 	zTemp2+1
.afd8	91 16		sta ($16),y			sta 	(zTemp1),y
.afda	18		clc				clc 								; add 10 to new number
.afdb	a5 18		lda $18				lda 	zTemp2
.afdd	69 0a		adc #$0a			adc 	#10
.afdf	85 18		sta $18				sta 	zTemp2
.afe1	90 02		bcc $afe5			bcc 	_CRNoCarry
.afe3	e6 19		inc $19				inc 	zTemp2+1
.afe5					_CRNoCarry:
.afe5	18		clc				clc 								; go to next line
.afe6	b2 16		lda ($16)			lda 	(zTemp1)
.afe8	65 16		adc $16				adc 	zTemp1
.afea	85 16		sta $16				sta 	zTemp1
.afec	90 dd		bcc $afcb			bcc 	_CRLoop
.afee	e6 17		inc $17				inc 	zTemp1+1
.aff0	80 d9		bra $afcb			bra 	_CRLoop
.aff2					_CRExit:
.aff2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.aff3					System_RUN:
.aff3	20 29 a5	jsr $a529			jsr		ResetForRun 				; clear vars, stacks etc.
.aff6	20 1e a5	jsr $a51e			jsr 	ResetCodePointer 			; point to first thing to do.
.aff9	4c 66 a3	jmp $a366			jmp 	Execute						; and run
.affc					System_END:
.affc	4c 33 a0	jmp $a033			jmp 	WarmStart
.afff					System_STOP:
.afff	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b002	53 54 4f 50 00					.text 	"STOP",0
.b007					System_Assert:
.b007	ca		dex				dex
.b008	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b00b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b00e	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b011	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b014	d0 0a		bne $b020			bne 	_SAOkay
.b016	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b019	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b020	60		rts		_SAOkay:rts
.b021					System_New:
.b021	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b024	20 29 a5	jsr $a529			jsr		ResetForRun 				; clear vars, stacks etc.
.b027	4c 33 a0	jmp $a033			jmp 	WarmStart
.b02a					System_Old:
.b02a	20 1e a5	jsr $a51e			jsr 	ResetCodePointer 			; start of first line.
.b02d					_SOFindZero:
.b02d	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b02f	f0 15		beq $b046			beq 	_SOFoundEnd
.b031	c8		iny				iny
.b032	d0 f9		bne $b02d			bne 	_SOFindZero
.b034	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b037	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b03f	45 43 4f 56 45 52 00
.b046					_SOFoundEnd:
.b046	c8		iny				iny 								; update the offset
.b047	8c 00 11	sty $1100			sty 	ProgramStart
.b04a	20 29 a5	jsr $a529			jsr 	ResetForRun 				; redo all stacks etc.
.b04d	60		rts				rts
.b04e					System_Sys:
.b04e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b051	85 14		sta $14				sta 	zTemp0
.b053	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b056	85 15		sta $15				sta 	zTemp0+1
.b058	ca		dex				dex
.b059	da		phx				phx
.b05a	5a		phy				phy
.b05b	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b05e	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b061	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b064	20 73 b0	jsr $b073			jsr 	_SSCall 					; effectively jsr (zTemp)
.b067	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b06a	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b06d	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b070	7a		ply				ply
.b071	fa		plx				plx
.b072	60		rts				rts
.b073	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b076					System_ShowStack:
.b076	da		phx				phx 								; save stack
.b077	5a		phy				phy
.b078	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b07a	a9 5b		lda #$5b			lda 	#"["
.b07c	20 97 a2	jsr $a297			jsr 	ExternPrint
.b07f	e0 00		cpx #$00			cpx 	#0 							; empty
.b081	f0 14		beq $b097			beq 	_SSEnd
.b083	a2 01		ldx #$01			ldx 	#1 							; start here
.b085					_SSLoop:
.b085	20 41 a6	jsr $a641			jsr 	IntegerToString 			; print TOS
.b088	20 2f a6	jsr $a62f			jsr 	ErrorPrintIntegerBuffer
.b08b	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b08d	f0 08		beq $b097			beq 	_SSEnd
.b08f	e8		inx				inx	 								; advance pointer print ,
.b090	a9 2c		lda #$2c			lda 	#','
.b092	20 97 a2	jsr $a297			jsr 	ExternPrint
.b095	80 ee		bra $b085			bra 	_SSLoop
.b097					_SSEnd:
.b097	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b099	20 97 a2	jsr $a297			jsr 	ExternPrint
.b09c	a9 0d		lda #$0d			lda 	#13
.b09e	20 97 a2	jsr $a297			jsr 	ExternPrint
.b0a1	7a		ply				ply
.b0a2	fa		plx				plx
.b0a3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b0a4					System_Save:
.b0a4	20 4f a5	jsr $a54f			jsr 	ResetVarMemory 				; make sure start/end are right
.b0a7	20 ba b0	jsr $b0ba			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0aa	20 dd a2	jsr $a2dd			jsr 	ExternSave
.b0ad	60		rts				rts
.b0ae					System_Load:
.b0ae	20 ba b0	jsr $b0ba			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0b1	20 17 a3	jsr $a317			jsr 	ExternLoad
.b0b4	20 29 a5	jsr $a529			jsr 	ResetForRun 				; re-initialise everything
.b0b7	4c 33 a0	jmp $a033			jmp 	WarmStart
.b0ba					SLGetFileName:
.b0ba	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0bc	f0 17		beq $b0d5			beq 	_SLFNFail
.b0be	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0c1	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0c4	d0 0f		bne $b0d5			bne 	_SLFNFail
.b0c6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b0c9	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b0cb	d0 08		bne $b0d5			bne 	_SLFNFail
.b0cd	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b0cf	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b0d2	85 14		sta $14				sta 	zTemp0
.b0d4	60		rts				rts
.b0d5					_SLFNFail:
.b0d5	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b0d8	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b0e0	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b0e5					Identifier:
.b0e5	88		dey				dey 								; wind back to identifier start
.b0e6	20 35 a4	jsr $a435			jsr 	IdentifierSearch 			; try to find it.
.b0e9	90 2f		bcc $b11a			bcc 	_IDUnknown 					; not known, give up.
.b0eb	48		pha				pha
.b0ec					_IDSkip:
.b0ec	b1 10		lda ($10),y			lda 	(codePtr),y
.b0ee	c8		iny				iny
.b0ef	c9 e0		cmp #$e0			cmp 	#$E0
.b0f1	90 f9		bcc $b0ec			bcc 	_IDSkip
.b0f3	68		pla				pla
.b0f4	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b0f6	d0 36		bne $b12e			bne 	_IDCall
.b0f8	20 e2 b1	jsr $b1e2			jsr 	IndexCheck 					; check index/subscript
.b0fb	5a		phy				phy
.b0fc	e8		inx				inx 								; make space on stack
.b0fd	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b0ff	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b101	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b104	c8		iny				iny
.b105	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b107	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b10a	c8		iny				iny
.b10b	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b10d	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b110	c8		iny				iny
.b111	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b113	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b116	7a		ply				ply
.b117	4c 66 a3	jmp $a366			jmp 	Execute
.b11a					_IDUnknown:
.b11a	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b11d	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b125	56 41 52 49 41 42 4c 45 00
.b12e					_IDCall:
.b12e	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b130	d0 1b		bne $b14d			bne 	_IDCode
.b132	20 9e b3	jsr $b39e			jsr 	StructPushCurrent 			; push current on the stack.
.b135	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b137	c6 12		dec $12				dec 	StructSP
.b139	92 12		sta ($12)			sta 	(StructSP)
.b13b	a0 01		ldy #$01			ldy 	#1 							; line address
.b13d	b2 22		lda ($22)			lda 	(idDataAddr)
.b13f	85 10		sta $10				sta 	codePtr
.b141	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b143	85 11		sta $11				sta 	codePtr+1
.b145	a0 03		ldy #$03			ldy 	#3 							; line position
.b147	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b149	a8		tay				tay
.b14a	4c 66 a3	jmp $a366			jmp 	Execute
.b14d					_IDCode:
.b14d	b2 22		lda ($22)			lda 	(idDataAddr) 				; copy the address
.b14f	85 14		sta $14				sta 	zTemp0
.b151	5a		phy				phy
.b152	a0 01		ldy #$01			ldy 	#1
.b154	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b156	85 15		sta $15				sta 	zTemp0+1
.b158	7a		ply				ply
.b159	20 5f b1	jsr $b15f			jsr 	_IDCallZTemp0 				; call the routine
.b15c	4c 66 a3	jmp $a366			jmp 	Execute
.b15f					_IDCallZTemp0:
.b15f	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.b162					ProcReturn:
.b162					ProcReturn2:
.b162	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b164	c9 43		cmp #$43			cmp 	#STM_CALL
.b166	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b168	20 d2 b3	jsr $b3d2			jsr 	StructPopCurrent
.b16b	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b16d	20 98 b3	jsr $b398			jsr 	StructPopCount
.b170	60		rts				rts
.b171					WriteVariable:
.b171	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b173	c9 c0		cmp #$c0			cmp 	#$C0
.b175	90 5d		bcc $b1d4			bcc 	_WVTypeError
.b177	20 35 a4	jsr $a435			jsr 	IdentifierSearch 			; does it exist
.b17a	90 06		bcc $b182			bcc 	_WVNoIdentifier
.b17c	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b17e	f0 12		beq $b192			beq 	_WVWriteTOS 				; if so write TOS to it.
.b180	80 52		bra $b1d4			bra 	_WVTypeError 				; not, then can't do anything.
.b182					_WVNoIdentifier:
.b182	5a		phy				phy 								; get current line number
.b183	a0 01		ldy #$01			ldy 	#1
.b185	b1 10		lda ($10),y			lda 	(codePtr),y
.b187	c8		iny				iny
.b188	11 10		ora ($10),y			ora 	(codePtr),y
.b18a	f0 2e		beq $b1ba			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b18c	7a		ply				ply
.b18d	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b18f	20 9c a4	jsr $a49c			jsr 	IdentifierCreate 			; try to find it
.b192					_WVWriteTOS:
.b192	88		dey				dey 								; skip over identifier.
.b193					_WVSkipIdentifier:
.b193	b1 10		lda ($10),y			lda 	(codePtr),y
.b195	c8		iny				iny
.b196	c9 e0		cmp #$e0			cmp 	#$E0
.b198	90 f9		bcc $b193			bcc 	_WVSkipIdentifier
.b19a	20 e2 b1	jsr $b1e2			jsr 	IndexCheck 					; check index/subscript
.b19d	5a		phy				phy									; copy TOS in
.b19e	a0 00		ldy #$00			ldy 	#0
.b1a0	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b1a3	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1a5	c8		iny				iny
.b1a6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1a9	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1ab	c8		iny				iny
.b1ac	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b1af	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1b1	c8		iny				iny
.b1b2	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b1b5	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1b7	7a		ply				ply
.b1b8	ca		dex				dex 								; drop
.b1b9	60		rts				rts									; go back and execute again.
.b1ba					_WVCantCreate:
.b1ba	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b1bd	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b1c5	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b1d4					_WVTypeError:
.b1d4	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b1d7	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b1df	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b1e2					IndexCheck:
.b1e2	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b1e4	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b1e6	d0 10		bne $b1f8			bne 	_ICExit
.b1e8	c8		iny				iny
.b1e9	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b1eb	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b1ed	f0 23		beq $b212			beq 	_ICArrayAccess
.b1ef	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b1f1	c9 80		cmp #$80			cmp 	#$80
.b1f3	f0 04		beq $b1f9			beq 	_ICConstAccess
.b1f5					_ICSyntax:
.b1f5	4c b7 a5	jmp $a5b7			jmp 	SyntaxError
.b1f8					_ICExit:
.b1f8	60		rts				rts
.b1f9					_ICConstAccess:
.b1f9	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b1fb	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b1fd	85 16		sta $16				sta 	zTemp1
.b1ff	64 17		stz $17				stz 	zTemp1+1
.b201	c8		iny				iny
.b202	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b204	c8		iny				iny
.b205	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b207	d0 ec		bne $b1f5			bne 	_ICSyntax
.b209	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b20b	c8		iny				iny
.b20c	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b20e	d0 e5		bne $b1f5			bne 	_ICSyntax
.b210	80 0c		bra $b21e			bra 	_ICAddSubscript
.b212					_ICArrayAccess:
.b212	c8		iny				iny 								; point to next
.b213	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b216	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b218	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b21b	85 17		sta $17				sta 	zTemp1+1
.b21d	ca		dex				dex
.b21e					_ICAddSubscript:
.b21e	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b220	26 17		rol $17				rol 	zTemp1+1
.b222	06 16		asl $16				asl 	zTemp1
.b224	26 17		rol $17				rol 	zTemp1+1
.b226	5a		phy				phy
.b227	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b229	a0 01		ldy #$01			ldy 	#1
.b22b	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b22d	c8		iny				iny
.b22e	11 22		ora ($22),y			ora 	(idDataAddr),y
.b230	c8		iny				iny
.b231	11 22		ora ($22),y			ora 	(idDataAddr),y
.b233	f0 17		beq $b24c			beq 	_ICZero
.b235	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b236	b2 22		lda ($22)			lda 	(idDataAddr)
.b238	65 16		adc $16				adc 	zTemp1
.b23a	48		pha				pha
.b23b	a0 01		ldy #$01			ldy 	#1
.b23d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b23f	65 17		adc $17				adc 	zTemp1+1
.b241	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b243	68		pla				pla
.b244	85 22		sta $22				sta 	idDataAddr
.b246	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b248	64 25		stz $25				stz 	idDataAddr+3
.b24a	7a		ply				ply
.b24b	60		rts				rts
.b24c					_ICZero:
.b24c	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b24f	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b257	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b263					Struct_IF:
.b263	ca		dex				dex 								; drop TOS
.b264	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check TOS
.b267	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b26a	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b26d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b270	f0 01		beq $b273			beq 	_SIFSkipForward
.b272	60		rts				rts
.b273					_SIFSkipForward:
.b273	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b275	4c 7e b2	jmp $b27e			jmp 	StructSkipForward
.b278					Struct_ELSE:
.b278	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b27a	4c 7e b2	jmp $b27e			jmp 	StructSkipForward
.b27d					Struct_ENDIF:
.b27d	60		rts				rts
.b27e					StructSkipForward:
.b27e	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b280					_SSFLoop:
.b280	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b282	f0 14		beq $b298			beq 	_SSFExit 					; if EOL then exit
.b284	c8		iny				iny 								; advance past it
.b285	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b287	f0 0f		beq $b298			beq 	_SSFExit
.b289	c5 14		cmp $14				cmp 	zTemp0
.b28b	f0 0b		beq $b298			beq 	_SSFExit
.b28d	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b28f	b0 ef		bcs $b280			bcs 	_SSFLoop
.b291	98		tya				tya 								; add length offset
.b292	3a		dec a				dec 	a
.b293	71 10		adc ($10),y			adc 	(codePtr),y
.b295	a8		tay				tay
.b296	80 e8		bra $b280			bra 	_SSFLoop
.b298					_SSFExit:
.b298	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b299					Command_For:
.b299	20 9e b3	jsr $b39e			jsr 	StructPushCurrent 			; push current on the stack.
.b29c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b29f	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b2a2	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b2a5	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b2a8	f0 34		beq $b2de			beq 	_CFZero
.b2aa	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b2ad	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b2af	c6 12		dec $12				dec 	StructSP
.b2b1	92 12		sta ($12)			sta 	(StructSP)
.b2b3	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b2b6	49 ff		eor #$ff			eor 	#$FF
.b2b8	c6 12		dec $12				dec 	StructSP
.b2ba	92 12		sta ($12)			sta 	(StructSP)
.b2bc	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b2bf	49 ff		eor #$ff			eor 	#$FF
.b2c1	c6 12		dec $12				dec 	StructSP
.b2c3	92 12		sta ($12)			sta 	(StructSP)
.b2c5	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b2c8	49 ff		eor #$ff			eor 	#$FF
.b2ca	c6 12		dec $12				dec 	StructSP
.b2cc	92 12		sta ($12)			sta 	(StructSP)
.b2ce	ca		dex				dex 								; pop stack value
.b2cf	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b2d1	c6 12		dec $12				dec 	StructSP
.b2d3	92 12		sta ($12)			sta 	(StructSP)
.b2d5	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2d7	85 24		sta $24				sta 	ForAddr
.b2d9	a5 13		lda $13				lda 	StructSP+1
.b2db	85 25		sta $25				sta 	ForAddr+1
.b2dd	60		rts				rts
.b2de					_CFZero:
.b2de	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b2e1	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b2e9	54 20 5a 45 52 4f 00
.b2f0					Command_Next:
.b2f0	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b2f2	c9 46		cmp #$46			cmp 	#STM_FOR
.b2f4	d0 30		bne $b326			bne 	_CNNoFor
.b2f6	5a		phy				phy
.b2f7	a0 00		ldy #$00			ldy 	#0
.b2f9					_CNIncrement:
.b2f9	c8		iny				iny
.b2fa	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b2fc	1a		inc a				inc 	a
.b2fd	91 12		sta ($12),y			sta 	(StructSP),y
.b2ff	f0 f8		beq $b2f9			beq		_CNIncrement 				; carry out.
.b301	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b303	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b305	c8		iny				iny 								; will all be $FF
.b306	31 12		and ($12),y			and 	(StructSP),y
.b308	c8		iny				iny
.b309	31 12		and ($12),y			and 	(StructSP),y
.b30b	c8		iny				iny
.b30c	31 12		and ($12),y			and 	(StructSP),y
.b30e	7a		ply				ply 								; restore Y
.b30f	1a		inc a				inc 	a 							; so this will be zero last time round
.b310	d0 06		bne $b318			bne 	_CNLoop 					; loop back if non-zero
.b312	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b314	20 98 b3	jsr $b398			jsr 	StructPopCount
.b317	60		rts				rts
.b318					_CNLoop:
.b318	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b31a	85 24		sta $24				sta 	ForAddr
.b31c	a5 13		lda $13				lda 	StructSP+1
.b31e	85 25		sta $25				sta 	ForAddr+1
.b320	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b322	20 d2 b3	jsr $b3d2			jsr 	StructPopCurrent
.b325	60		rts				rts
.b326					_CNNoFor:
.b326	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b329	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b331	46 4f 52 00
.b335					Command_Index:
.b335	5a		phy				phy
.b336	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b338	e8		inx				inx
.b339	38		sec				sec
.b33a	a9 fe		lda #$fe			lda 	#$FE
.b33c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b33e	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b341	c8		iny				iny
.b342	a9 ff		lda #$ff			lda 	#$FF
.b344	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b346	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b349	c8		iny				iny
.b34a	a9 ff		lda #$ff			lda 	#$FF
.b34c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b34e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b351	c8		iny				iny
.b352	a9 ff		lda #$ff			lda 	#$FF
.b354	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b356	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b359	7a		ply				ply
.b35a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b35b					Command_Repeat:
.b35b	20 9e b3	jsr $b39e			jsr 	StructPushCurrent 			; push current on the stack.
.b35e	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b360	c6 12		dec $12				dec 	StructSP
.b362	92 12		sta ($12)			sta 	(StructSP)
.b364	60		rts				rts
.b365					Command_Until:
.b365	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b367	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b369	d0 1b		bne $b386			bne 	_CUNoRepeat
.b36b	ca		dex				dex 								; pop
.b36c	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b36f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b372	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b375	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b378	f0 06		beq $b380			beq 	_CULoop
.b37a	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b37c	20 98 b3	jsr $b398			jsr 	StructPopCount
.b37f	60		rts				rts
.b380					_CULoop:
.b380	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b382	20 d2 b3	jsr $b3d2			jsr 	StructPopCurrent
.b385	60		rts				rts
.b386					_CUNoRepeat:
.b386	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b389	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b391	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b398					StructPopCount:
.b398	18		clc				clc
.b399	65 12		adc $12				adc 	StructSP
.b39b	85 12		sta $12				sta 	StructSP
.b39d	60		rts				rts
.b39e					StructPushCurrent:
.b39e	a5 12		lda $12				lda 	StructSP 					; check space for more
.b3a0	c9 0a		cmp #$0a			cmp 	#10
.b3a2	90 18		bcc $b3bc			bcc 	_SPCSpace
.b3a4	a9 00		lda #$00			lda 	#0							; push bank
.b3a6	c6 12		dec $12				dec 	StructSP
.b3a8	92 12		sta ($12)			sta 	(StructSP)
.b3aa	98		tya				tya									; y Offset
.b3ab	c6 12		dec $12				dec 	StructSP
.b3ad	92 12		sta ($12)			sta 	(StructSP)
.b3af	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b3b1	c6 12		dec $12				dec 	StructSP
.b3b3	92 12		sta ($12)			sta 	(StructSP)
.b3b5	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b3b7	c6 12		dec $12				dec 	StructSP
.b3b9	92 12		sta ($12)			sta 	(StructSP)
.b3bb	60		rts				rts
.b3bc					_SPCSpace:
.b3bc	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b3bf	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b3c7	54 41 43 4b 20 53 50 41 43 45 00
.b3d2					StructPopCurrent:
.b3d2	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b3d4	85 10		sta $10				sta 	codePtr
.b3d6	c8		iny				iny
.b3d7	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b3d9	85 11		sta $11				sta 	codePtr+1
.b3db	c8		iny				iny
.b3dc	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b3de	a8		tay				tay
.b3df	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/hashes.inc

.b3e0					libfunc_1000:
>b3e0	00 00					.word 0
>b3e2	7e b4 00 00				.dword Vera_SetAddress
>b3e6	ea b3					.word libfunc_1000_name
>b3e8	00 43					.byte 0,'C'
.b3ea					libfunc_1000_name:
>b3ea	d5 c4 d1 c0 df d2 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$d2,$c4,$f3
.b3f2					libfunc_1001:
>b3f2	e0 b3					.word libfunc_1000
>b3f4	98 b4 00 00				.dword Vera_GetAddress
>b3f8	fc b3					.word libfunc_1001_name
>b3fa	00 43					.byte 0,'C'
.b3fc					libfunc_1001_name:
>b3fc	d5 c4 d1 c0 df c6 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$c6,$c4,$f3
.b404					libfunc_1002:
>b404	00 00					.word 0
>b406	af b4 00 00				.dword Vera_SetPalette
>b40a	0e b4					.word libfunc_1002_name
>b40c	00 43					.byte 0,'C'
.b40e					libfunc_1002_name:
>b40e	d5 c4 d1 c0 df cf c0 cb			.byte $d5,$c4,$d1,$c0,$df,$cf,$c0,$cb,$c4,$d3,$d3,$e4
>b416	c4 d3 d3 e4
.b41a					libfunc_1003:
>b41a	00 00					.word 0
>b41c	4b b4 00 00				.dword String_Len
>b420	24 b4					.word libfunc_1003_name
>b422	00 43					.byte 0,'C'
.b424					libfunc_1003_name:
>b424	d2 d3 d1 df cb c4 ed			.byte $d2,$d3,$d1,$df,$cb,$c4,$ed
.b42b					DefaultHashTable:
>b42b	00 00					.word 0
>b42d	00 00					.word 0
>b42f	00 00					.word 0
>b431	f2 b3					.word libfunc_1001
>b433	04 b4					.word libfunc_1002
>b435	00 00					.word 0
>b437	00 00					.word 0
>b439	00 00					.word 0
>b43b	00 00					.word 0
>b43d	00 00					.word 0
>b43f	00 00					.word 0
>b441	00 00					.word 0
>b443	00 00					.word 0
>b445	1a b4					.word libfunc_1003
>b447	00 00					.word 0
>b449	00 00					.word 0

;******  Return to file: main.asm


;******  Processing file: generated/library.inc

.b44b					String_Len:
.b44b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy string address
.b44e	85 14		sta $14				sta 	zTemp0
.b450	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b453	85 15		sta $15				sta 	zTemp0+1
.b455	5a		phy				phy
.b456	a0 ff		ldy #$ff			ldy 	#255 						; find string length
.b458	c8		iny		_SLLoop:iny
.b459	c0 ff		cpy #$ff			cpy 	#255 						; cant find EOS.
.b45b	f0 13		beq $b470			beq 	_SLFail
.b45d	b1 14		lda ($14),y			lda 	(zTemp0),y
.b45f	d0 f7		bne $b458			bne 	_SLLoop
.b461	98		tya				tya
.b462	7a		ply				ply
.b463	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; return string
.b466	9e 00 0d	stz $0d00,x			stz 	stack1,x
.b469	9e 00 0e	stz $0e00,x			stz 	stack2,x
.b46c	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b46f	60		rts				rts
.b470					_SLFail:
.b470	20 d8 a5	jsr $a5d8			jsr 	ErrorHandler
>b473	4e 4f 54 20 53 54 52 49				.text 	"NOT STRING",0
>b47b	4e 47 00
=$9f20					Vera_Base = $9F20
.0826					veraCurrentLayer:
>0826							.byte 		? 						; current layer (0-1)
.0827					veraCurrentSprite:
>0827							.byte 		?						; current sprite (0-127)
.b47e					Vera_SetAddress:
.b47e	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b481	8d 20 9f	sta $9f20			sta 	Vera_Base
.b484	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b487	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b48a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b48d	c9 10		cmp #$10			cmp 	#16
.b48f	b0 02		bcs $b493			bcs 	_VSASetInc
.b491	09 10		ora #$10			ora 	#16
.b493					_VSASetInc:
.b493	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b496	ca		dex				dex
.b497	60		rts				rts
.b498					Vera_GetAddress:
.b498	e8		inx				inx
.b499	ad 20 9f	lda $9f20			lda 	Vera_Base
.b49c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b49f	ad 21 9f	lda $9f21			lda 	Vera_Base+1
.b4a2	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b4a5	ad 22 9f	lda $9f22			lda 	Vera_Base+2
.b4a8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b4ab	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b4ae	60		rts				rts
.b4af					Vera_SetPalette:
.b4af	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b4b2	8d 20 9f	sta $9f20			sta 	Vera_Base
.b4b5	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b4b8	29 01		and #$01			and 	#$01
.b4ba	09 10		ora #$10			ora 	#$10
.b4bc	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b4bf	a9 1f		lda #$1f			lda 	#$1F
.b4c1	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b4c4	ca		dex				dex
.b4c5	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b4c8	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b4cb	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b4ce	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b4d1	ca		dex				dex
.b4d2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	08 64 00 83 80 b9 4e 00			.byte $08,$64,$00,$83,$80,$b9,$4e,$00,$11,$6e,$00,$83,$b4,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$00,$14,$78,$00,$81,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$11,$82,$00,$83,$b5,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$00,$0c,$8c,$00,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$96,$00,$82,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$a0,$00,$81,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0c,$aa,$00,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$b4,$00,$81,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0c,$be,$00,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0c,$c8,$00,$9c,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$d2,$00,$83,$b0,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$08,$dc,$00,$8d,$90,$b1,$4e,$00,$08,$e6,$00,$8f,$a8,$4e,$2f,$00,$08,$f0,$00,$83,$bf,$4e,$2f,$00,$11,$fa,$00,$83,$b5,$80,$82,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$00,$13,$04,$01,$31,$d5,$d6,$d1,$c8,$d3,$e4,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$13,$0e,$01,$31,$d5,$d6,$d1,$c8,$d3,$e4,$80,$4e,$d5,$d6,$d1,$c8,$d3,$e4,$00,$05,$18,$01,$37,$00,$05,$22,$01,$37,$00,$06,$2c,$01,$16,$2d,$00,$11,$36,$01,$29,$d5,$d6,$d1,$c8,$d3,$e4,$89,$bc,$a3,$4e,$26,$18,$00
>1108	11 6e 00 83 b4 80 80 4e d5 c4 d1 c0 df d2 c4 f3
>1118	00 14 78 00 81 4e d5 d6 d1 c8 d3 e4 80 4e d5 d6
>1128	d1 c8 d3 e4 00 11 82 00 83 b5 80 80 4e d5 c4 d1
>1138	c0 df d2 c4 f3 00 0c 8c 00 80 4e d5 d6 d1 c8 d3
>1148	e4 00 0d 96 00 82 80 4e d5 d6 d1 c8 d3 e4 00 0d
>1158	a0 00 81 80 4e d5 d6 d1 c8 d3 e4 00 0c aa 00 80
>1168	4e d5 d6 d1 c8 d3 e4 00 0d b4 00 81 80 4e d5 d6
>1178	d1 c8 d3 e4 00 0c be 00 80 4e d5 d6 d1 c8 d3 e4
>1188	00 0c c8 00 9c 4e d5 d6 d1 c8 d3 e4 00 0d d2 00
>1198	83 b0 4e d5 d6 d1 c8 d3 e4 00 08 dc 00 8d 90 b1
>11a8	4e 00 08 e6 00 8f a8 4e 2f 00 08 f0 00 83 bf 4e
>11b8	2f 00 11 fa 00 83 b5 80 82 4e d5 c4 d1 c0 df d2
>11c8	c4 f3 00 13 04 01 31 d5 d6 d1 c8 d3 e4 80 4e d5
>11d8	d6 d1 c8 d3 e4 00 13 0e 01 31 d5 d6 d1 c8 d3 e4
>11e8	80 4e d5 d6 d1 c8 d3 e4 00 05 18 01 37 00 05 22
>11f8	01 37 00 06 2c 01 16 2d 00 11 36 01 29 d5 d6 d1
>1208	c8 d3 e4 89 bc a3 4e 26 18 00

;******  Return to file: main.asm

>1212	00						.byte 	0

;******  End of listing
