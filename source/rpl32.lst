
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Wed Oct  9 17:05:06 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9f00					MemoryEnd = $9F00 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 7e a2	jsr $a27e			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a00b	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 8e		ldy #$8e			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 24 a6	jsr $a624			jsr 	ErrorPrint16
.a01d	a2 00		ldx #$00			ldx 	#0 							; clear extended data area
.a01f	9e 00 08	stz $0800,x	_ClearX:stz 	ExtDataArea,x 				; this is so any library data
.a022	e8		inx				inx 								; is zeroed on start up.
.a023	d0 fa		bne $a01f			bne 	_ClearX
.a025	a9 0d		lda #$0d			lda 	#13
.a027	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a02a	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a02d	a9 9f		lda #$9f			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a02f	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a032	9c 8a 10	stz $108a			stz 	AllocMemory
.a035	20 31 a5	jsr $a531			jsr 	ResetForRun
.a038	20 26 a5	jsr $a526			jsr 	ResetCodePointer
.a03b					WarmStart:
.a03b	a9 06		lda #$06			lda 	#COL_CYAN
.a03d	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a040	a9 4f		lda #$4f			lda 	#"O"
.a042	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a045	a9 4b		lda #$4b			lda 	#"K"
.a047	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a04a	a9 0d		lda #$0d			lda 	#13
.a04c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a04f					NewCommand:
.a04f	8a		txa				txa
.a050	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a052	9a		txs				txs
.a053	aa		tax				tax
.a054	a9 07		lda #$07			lda 	#COL_WHITE
.a056	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a059	20 bd a2	jsr $a2bd			jsr 	ExternInput 				; input text
.a05c	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a05e	85 10		sta $10				sta 	codePtr
.a060	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a062	85 11		sta $11				sta 	codePtr+1
.a064	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a066	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a068	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a06a	85 17		sta $17				sta 	zTemp1+1
.a06c	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a06f	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a072	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a075	20 94 a7	jsr $a794			jsr 	Tokenise
.a078	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a07a					SkipSpaces:
.a07a	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a07d	c8		iny				iny
.a07e	c9 20		cmp #$20			cmp 	#' '
.a080	f0 f8		beq $a07a			beq 	SkipSpaces
.a082	c9 30		cmp #$30			cmp 	#'0'
.a084	90 0e		bcc $a094			bcc 	ExecuteCLI
.a086	c9 3a		cmp #$3a			cmp 	#'9'+1
.a088	b0 0a		bcs $a094			bcs 	ExecuteCLI
.a08a	ad 00 09	lda $0900			lda 	InputBuffer
.a08d	c9 20		cmp #$20			cmp 	#' '
.a08f	f0 03		beq $a094			beq 	ExecuteCLI
.a091	4c 05 a9	jmp $a905			jmp		EditProgram
.a094					ExecuteCLI:
.a094	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a096	85 10		sta $10				sta 	codePtr
.a098	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a09a	85 11		sta $11				sta 	codePtr+1
.a09c	a0 03		ldy #$03			ldy 	#3
.a09e	4c 6e a3	jmp $a36e			jmp 	Execute 					; and run it
.a0a1					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a0a1	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$36,$20,$44,$41,$54,$45,$3a,$30,$39,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a9	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b9	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c9	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d9	39 0d 0d 42 55 49 4c 44 3a 36 20 44 41 54 45 3a
>a0e9	30 39 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0f9	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a108					KeywordText:
>a108	01 21					.byte $01,$21                          ; $10 !
>a10a	01 2a					.byte $01,$2a                          ; $11 *
>a10c	01 2b					.byte $01,$2b                          ; $12 +
>a10e	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a111	01 2d					.byte $01,$2d                          ; $14 -
>a113	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a116	01 2e					.byte $01,$2e                          ; $16 .
>a118	01 2f					.byte $01,$2f                          ; $17 /
>a11a	01 3b					.byte $01,$3b                          ; $18 ;
>a11c	01 3c					.byte $01,$3c                          ; $19 <
>a11e	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a121	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a124	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a127	01 3d					.byte $01,$3d                          ; $1d =
>a129	01 3e					.byte $01,$3e                          ; $1e >
>a12b	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a12e	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a131	01 40					.byte $01,$40                          ; $21 @
>a133	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a137	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a13d	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a141	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a148	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a14b	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a14e	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a152	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a156	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a15b	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a15f	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a164	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a168	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a16e	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a172	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a175	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a17b	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a180	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a185	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a189	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a190	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a194	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a199	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a19d	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a1a1	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a1a5	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a8	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1ad	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1b5	52
>a1b6	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1bd	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1c4	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c8	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1cd	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1d1	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1d5	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1da	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1df	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1e3	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1e9	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1ec	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1ef	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1f3	01 5b					.byte $01,$5b                          ; $4b [
>a1f5	01 5d					.byte $01,$5d                          ; $4c ]
>a1f7	01 5e					.byte $01,$5e                          ; $4d ^
>a1f9	01 2b					.byte $01,$2b                          ; $4e {+}
>a1fb	01 2d					.byte $01,$2d                          ; $4f {-}
>a1fd	00					.byte $00
.a1fe					KeywordVectorTable:
>a1fe	c1 ab					.word Mem_DPoke                        ; $10 !
>a200	df ac					.word MulInteger32                     ; $11 *
>a202	e8 ab					.word Stack_Add                        ; $12 +
>a204	e8 aa					.word Unary_Increment                  ; $13 ++
>a206	0f ac					.word Stack_Sub                        ; $14 -
>a208	fb aa					.word Unary_Decrement                  ; $15 --
>a20a	7e b0					.word System_ShowStack                 ; $16 .
>a20c	28 ad					.word DivInteger32                     ; $17 /
>a20e	6a b1					.word ProcReturn                       ; $18 ;
>a210	0f ae					.word Comp_Less                        ; $19 <
>a212	1d ab					.word Unary_Shl                        ; $1a <<
>a214	3a ae					.word Comp_LessEqual                   ; $1b <=
>a216	d8 ad					.word Comp_NotEqual                    ; $1c <>
>a218	d5 ad					.word Comp_Equal                       ; $1d =
>a21a	3d ae					.word Comp_Greater                     ; $1e >
>a21c	12 ae					.word Comp_GreaterEqual                ; $1f >=
>a21e	2a ab					.word Unary_Shr                        ; $20 >>
>a220	6f ab					.word Mem_DPeek                        ; $21 @
>a222	9f aa					.word Unary_Absolute                   ; $22 ABS
>a224	65 ae					.word Allocate                         ; $23 ALLOC
>a226	36 ac					.word Stack_And                        ; $24 AND
>a228	0f b0					.word System_Assert                    ; $25 ASSERT
>a22a	94 ab					.word Mem_Poke                         ; $26 C!
>a22c	37 ab					.word Mem_Peek                         ; $27 C@
>a22e	11 aa					.word Stack_Empty                      ; $28 CLR
>a230	bf a5					.word SyntaxError                      ; $29 DEF
>a232	14 aa					.word Stack_Drop                       ; $2a DROP
>a234	16 aa					.word Stack_Dup                        ; $2b DUP
>a236	80 b2					.word Struct_ELSE                      ; $2c ELSE
>a238	04 b0					.word System_END                       ; $2d END
>a23a	85 b2					.word Struct_ENDIF                     ; $2e ENDIF
>a23c	a1 b2					.word Command_For                      ; $2f FOR
>a23e	6b b2					.word Struct_IF                        ; $30 IF
>a240	3d b3					.word Command_Index                    ; $31 INDEX
>a242	a5 ae					.word Cmd_List                         ; $32 LIST
>a244	b6 b0					.word System_Load                      ; $33 LOAD
>a246	bd ad					.word ModInteger32                     ; $34 MOD
>a248	a5 aa					.word Unary_Negate                     ; $35 NEGATE
>a24a	29 b0					.word System_New                       ; $36 NEW
>a24c	f8 b2					.word Command_Next                     ; $37 NEXT
>a24e	30 aa					.word Stack_Nip                        ; $38 NIP
>a250	c7 aa					.word Unary_Not                        ; $39 NOT
>a252	32 b0					.word System_Old                       ; $3a OLD
>a254	82 ac					.word Stack_Or                         ; $3b OR
>a256	4a aa					.word Stack_Over                       ; $3c OVER
>a258	c3 af					.word Cmd_Renumber                     ; $3d RENUMBER
>a25a	63 b3					.word Command_Repeat                   ; $3e REPEAT
>a25c	6a b1					.word ProcReturn2                      ; $3f RETURN
>a25e	fb af					.word System_RUN                       ; $40 RUN
>a260	ac b0					.word System_Save                      ; $41 SAVE
>a262	a8 ac					.word Stack_Shl                        ; $42 SHL
>a264	ab ac					.word Stack_Shr                        ; $43 SHR
>a266	07 b0					.word System_STOP                      ; $44 STOP
>a268	64 aa					.word Stack_Swap                       ; $45 SWAP
>a26a	56 b0					.word System_Sys                       ; $46 SYS
>a26c	6d b3					.word Command_Until                    ; $47 UNTIL
>a26e	a6 ab					.word Mem_WPoke                        ; $48 W!
>a270	50 ab					.word Mem_WPeek                        ; $49 W@
>a272	5c ac					.word Stack_Xor                        ; $4a XOR
>a274	bf a5					.word SyntaxError                      ; $4b [
>a276	bf a5					.word SyntaxError                      ; $4c ]
>a278	79 b1					.word WriteVariable                    ; $4d ^
>a27a	bf a5					.word SyntaxError                      ; $4e {+}
>a27c	bf a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a27e					ExternInitialise:
.a27e	a9 07		lda #$07			lda 	#$07 						; set colour
.a280	8d 86 02	sta $0286			sta 	646
.a283	a9 0e		lda #$0e			lda 	#14							; lower case
.a285	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a288	a9 93		lda #$93			lda 	#147 						; clear screen
.a28a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a28d	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a28f	4c a9 a2	jmp $a2a9			jmp 	ExternColour
.a292					ExternCheckBreak:
.a292	da		phx				phx 								; make sure we keep XY
.a293	5a		phy				phy
.a294	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a297	f0 03		beq $a29c			beq		_ECBExit 					; stopped
.a299	7a		ply				ply 								; restore and exit.
.a29a	fa		plx				plx
.a29b	60		rts				rts
.a29c					_ECBExit:
.a29c	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a29f					ExternPrint:
.a29f	48		pha				pha
.a2a0	da		phx				phx
.a2a1	5a		phy				phy
.a2a2	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2a5	7a		ply				ply
.a2a6	fa		plx				plx
.a2a7	68		pla				pla
.a2a8	60		rts				rts
.a2a9					ExternColour:
.a2a9	48		pha				pha
.a2aa	da		phx				phx
.a2ab	aa		tax				tax
.a2ac	bd b5 a2	lda $a2b5,x			lda 	_ECTable,x
.a2af	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a2b2	fa		plx				plx
.a2b3	68		pla				pla
.a2b4	60		rts				rts
.a2b5					_ECTable:
>a2b5	90						.byte 	144
>a2b6	1c						.byte 	28
>a2b7	1e						.byte 	30
>a2b8	9e						.byte 	158
>a2b9	1f						.byte 	31
>a2ba	9c						.byte 	156
>a2bb	9f						.byte 	159
>a2bc	05						.byte 	5
.a2bd					ExternInput:
.a2bd	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2bf	85 14		sta $14				sta 	zTemp0
.a2c1	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2c3	85 15		sta $15				sta 	zTemp0+1
.a2c5	a9 07		lda #$07			lda 	#COL_WHITE
.a2c7	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a2ca	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2cd	c9 0d		cmp #$0d			cmp 	#13
.a2cf	f0 0a		beq $a2db			beq 	_EIExit
.a2d1	92 14		sta ($14)			sta 	(zTemp0)
.a2d3	e6 14		inc $14				inc 	zTemp0
.a2d5	d0 f3		bne $a2ca			bne 	_EIRead
.a2d7	e6 15		inc $15				inc 	zTemp0+1
.a2d9	80 ef		bra $a2ca			bra 	_EIRead
.a2db	a9 00		lda #$00	_EIExit:lda 	#0
.a2dd	92 14		sta ($14)			sta 	(zTemp0)
.a2df	a9 0d		lda #$0d			lda 	#13
.a2e1	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a2e4	60		rts				rts
.a2e5					ExternSave:
.a2e5	da		phx				phx
.a2e6	5a		phy				phy
.a2e7	20 4f a3	jsr $a34f			jsr 	EXGetLength 				; get length of file into A
.a2ea	a6 14		ldx $14				ldx 	zTemp0
.a2ec	a4 15		ldy $15				ldy 	zTemp0+1
.a2ee	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a2f1	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a2f3	a0 00		ldy #$00			ldy 	#0
.a2f5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a2f8	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a2fa	85 c1		sta $c1				sta 	$C1
.a2fc	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a2fe	85 c2		sta $c2				sta 	$C2
.a300	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a303	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a306	a9 c1		lda #$c1			lda 	#$C1
.a308	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a30b	b0 03		bcs $a310			bcs 	_ESSave
.a30d	7a		ply				ply
.a30e	fa		plx				plx
.a30f	60		rts				rts
.a310					_ESSave:
.a310	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a313	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a31b	4c 45 44 00
.a31f					ExternLoad:
.a31f	da		phx				phx
.a320	5a		phy				phy
.a321	20 4f a3	jsr $a34f			jsr 	EXGetLength 				; get length of file into A
.a324	a6 14		ldx $14				ldx 	zTemp0
.a326	a4 15		ldy $15				ldy 	zTemp0+1
.a328	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a32b	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a32d	a0 00		ldy #$00			ldy 	#0
.a32f	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a332	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a334	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a336	a9 00		lda #$00			lda 	#0 							; load command
.a338	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a33b	b0 03		bcs $a340			bcs 	_ESLoad
.a33d	7a		ply				ply
.a33e	fa		plx				plx
.a33f	60		rts				rts
.a340					_ESLoad:
.a340	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a343	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a34b	4c 45 44 00
.a34f					EXGetLength:
.a34f	a0 ff		ldy #$ff			ldy 	#255
.a351	c8		iny		_EXGL:	iny
.a352	b1 14		lda ($14),y			lda 	(zTemp0),y
.a354	d0 fb		bne $a351			bne 	_EXGL
.a356	98		tya				tya
.a357	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a358					EXNextLine:
.a358	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a35a	f0 0f		beq $a36b			beq 	_EXNLWarmStart
.a35c	18		clc				clc 								; advance code pointer to next line
.a35d	65 10		adc $10				adc 	codePtr
.a35f	85 10		sta $10				sta 	codePtr
.a361	90 02		bcc $a365			bcc 	_EXNLNoBump
.a363	e6 11		inc $11				inc 	codePtr+1
.a365					_EXNLNoBump:
.a365	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a367	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a369	d0 03		bne $a36e			bne 	Execute 					; not end of program
.a36b					_EXNLWarmStart:
.a36b	4c 04 b0	jmp $b004			jmp 	System_END
.a36e	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a370	b0 1c		bcs $a38e			bcs 	EXStackOverflow
.a372	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a375	d0 03		bne $a37a			bne 	_EXNoBreak
.a377	20 92 a2	jsr $a292			jsr 	ExternCheckBreak
.a37a					_EXNoBreak:
.a37a	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a37c	f0 da		beq $a358			beq 	EXNextLine 					; reached end of the line.
.a37e	c8		iny				iny 								; advance pointer.
.a37f	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a381	90 39		bcc $a3bc			bcc 	EXStringComment
.a383	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a385	90 1f		bcc $a3a6			bcc 	EXTokenExecute
.a387	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a389	90 15		bcc $a3a0			bcc 	EXPushConstant
.a38b	4c ed b0	jmp $b0ed			jmp 	Identifier 					; it's an identifier C0-FF
.a38e					EXStackOverflow:
.a38e	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a391	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a399	45 52 46 4c 4f 57 00
.a3a0					EXPushConstant:
.a3a0	88		dey				dey
.a3a1	20 eb a3	jsr $a3eb			jsr 	ExtractIntegerToTOS 		; extract integer
.a3a4	80 c8		bra $a36e			bra 	Execute
.a3a6					EXTokenExecute:
.a3a6	0a		asl a				asl 	a 							; double token, also clears carry
.a3a7	da		phx				phx 								; save X, put token x 2 in X
.a3a8	aa		tax				tax
.a3a9	bd de a1	lda $a1de,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3ac	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3ae	bd df a1	lda $a1df,x			lda 	KeywordVectorTable-$20+1,x
.a3b1	85 15		sta $15				sta 	zTemp0+1
.a3b3	fa		plx				plx 								; restore X
.a3b4	20 b9 a3	jsr $a3b9			jsr 	_EXTCall 					; call the routine
.a3b7	80 b5		bra $a36e			bra 	Execute
.a3b9					_EXTCall:
.a3b9	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3bc					EXStringComment:
.a3bc	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3be	f0 15		beq $a3d5			beq 	EXStringSkip 				; (comment), so just skip it.
.a3c0	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3c1	98		tya				tya
.a3c2	38		sec				sec
.a3c3	65 10		adc $10				adc 	codePtr
.a3c5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3c8	a5 11		lda $11				lda 	codePtr+1
.a3ca	69 00		adc #$00			adc 	#0
.a3cc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3cf	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3d2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3d5					EXStringSkip:
.a3d5	98		tya				tya 								; the current position in A
.a3d6	18		clc				clc
.a3d7	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3d9	a8		tay				tay 			 					; and make that the current position.
.a3da	88		dey				dey 								; back one because of the initial skip
.a3db	80 91		bra $a36e			bra 	Execute
.a3dd					EXShiftTOSRight:
.a3dd	4a		lsr a				lsr 	a
.a3de	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3e1	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3e4	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a3e7	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a3ea	60		rts				rts
.a3eb					ExtractIntegerToTOS:
.a3eb	b1 10		lda ($10),y			lda 	(codePtr),y
.a3ed	c8		iny				iny
.a3ee	e8		inx				inx 								; make stack space
.a3ef	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a3f1	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3f4	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a3f7	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a3fa	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3fd					_EXConstantLoop:
.a3fd	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a3ff	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a401	c9 80		cmp #$80			cmp 	#$80
.a403	d0 2d		bne $a432			bne		_EXDone 					; no then exit
.a405	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a408	48		pha				pha
.a409	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a40c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a40f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a412	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a415	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a418	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a41b	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a41e	68		pla				pla
.a41f	20 dd a3	jsr $a3dd			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a422	20 dd a3	jsr $a3dd			jsr 	EXShiftTOSRight				; which will be x64
.a425	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a427	c8		iny				iny
.a428	29 3f		and #$3f			and 	#$3F
.a42a	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a42d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a430	80 cb		bra $a3fd			bra 	_EXConstantLoop
.a432	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a434	c8		iny				iny 								; skip over unary constant + -
.a435	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a437	d0 03		bne $a43c			bne 	_EXPositive
.a439	4c a5 aa	jmp $aaa5			jmp 	Unary_Negate
.a43c					_EXPositive:
.a43c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a43d					IdentifierSearch:
.a43d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a43f	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a441	90 12		bcc $a455			bcc 	_ISSlow
.a443	c9 fa		cmp #$fa			cmp 	#$F9+1
.a445	b0 0e		bcs $a455			bcs 	_ISSlow
.a447	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a449	0a		asl a				asl 	a
.a44a	0a		asl a				asl		a
.a44b	85 22		sta $22				sta 	idDataAddr					; set up addres
.a44d	a9 10		lda #$10			lda 	#AZVariables >> 8
.a44f	85 23		sta $23				sta 	idDataAddr+1
.a451	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a453	38		sec				sec 								; return with CS.
.a454	60		rts				rts
.a455					_ISSlow:
.a455	20 11 a5	jsr $a511			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a458	98		tya				tya 								; set (zTemp1) to point to the
.a459	18		clc				clc 	 							; identifier to be searched.
.a45a	65 10		adc $10				adc 	codePtr
.a45c	85 16		sta $16				sta 	zTemp1
.a45e	a5 11		lda $11				lda 	codePtr+1
.a460	69 00		adc #$00			adc 	#0
.a462	85 17		sta $17				sta 	zTemp1+1
.a464	5a		phy				phy 								; save Y
.a465	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a467	48		pha				pha
.a468	a0 01		ldy #$01			ldy 	#1
.a46a	b1 14		lda ($14),y			lda 	(zTemp0),y
.a46c	85 15		sta $15				sta 	zTemp0+1
.a46e	68		pla				pla
.a46f	85 14		sta $14				sta 	zTemp0
.a471	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a473	f0 2c		beq $a4a1			beq 	_ISFail
.a475	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a477	b1 14		lda ($14),y			lda 	(zTemp0),y
.a479	85 18		sta $18				sta 	zTemp2
.a47b	c8		iny				iny
.a47c	b1 14		lda ($14),y			lda 	(zTemp0),y
.a47e	85 19		sta $19				sta 	zTemp2+1
.a480	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a482					_ISCompare:
.a482	b1 16		lda ($16),y			lda 	(zTemp1),y
.a484	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a486	d0 dd		bne $a465			bne		_ISLoop 					; different ?
.a488	c8		iny				iny
.a489	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a48b	90 f5		bcc $a482			bcc 	_ISCompare
.a48d	18		clc				clc 								; set up the data pointer
.a48e	a5 14		lda $14				lda 	zTemp0
.a490	69 02		adc #$02			adc 	#2
.a492	85 22		sta $22				sta 	idDataAddr
.a494	a5 15		lda $15				lda 	zTemp0+1
.a496	69 00		adc #$00			adc		#0
.a498	85 23		sta $23				sta 	idDataAddr+1
.a49a	a0 09		ldy #$09			ldy 	#9 							; get the type
.a49c	b1 14		lda ($14),y			lda 	(zTemp0),y
.a49e	7a		ply				ply
.a49f	38		sec				sec
.a4a0	60		rts				rts
.a4a1					_ISFail:
.a4a1	7a		ply				ply
.a4a2	18		clc				clc
.a4a3	60		rts				rts
.a4a4					IdentifierCreate:
.a4a4	5a		phy				phy 								; save Y
.a4a5	48		pha				pha 								; save type on stack
.a4a6	20 11 a5	jsr $a511			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4a9	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4ac	85 16		sta $16				sta 	zTemp1
.a4ae	ad 89 10	lda $1089			lda 	VarMemory+1
.a4b1	85 17		sta $17				sta 	zTemp1+1
.a4b3	5a		phy				phy 								; save Y (code offset)
.a4b4	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4b6	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4b8	91 16		sta ($16),y			sta 	(zTemp1),y
.a4ba	c8		iny				iny
.a4bb	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4bd	91 16		sta ($16),y			sta 	(zTemp1),y
.a4bf	c8		iny				iny
.a4c0					_IDCErase:
.a4c0	a9 00		lda #$00			lda 	#0
.a4c2	91 16		sta ($16),y			sta 	(zTemp1),y
.a4c4	c8		iny				iny
.a4c5	c0 06		cpy #$06			cpy 	#6
.a4c7	d0 f7		bne $a4c0			bne 	_IDCErase
.a4c9	68		pla				pla 								; original Y
.a4ca	18		clc				clc
.a4cb	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4cd	91 16		sta ($16),y			sta 	(zTemp1),y
.a4cf	c8		iny				iny
.a4d0	a5 11		lda $11				lda 	codePtr+1
.a4d2	69 00		adc #$00			adc 	#0
.a4d4	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d6	c8		iny				iny
.a4d7	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4d9	91 16		sta ($16),y			sta 	(zTemp1),y
.a4db	68		pla				pla 								; restore type
.a4dc	c8		iny				iny
.a4dd	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4df	c8		iny				iny
.a4e0	98		tya				tya									; add offset to VarMemory
.a4e1	18		clc				clc
.a4e2	6d 88 10	adc $1088			adc 	VarMemory
.a4e5	8d 88 10	sta $1088			sta 	VarMemory
.a4e8	ad 89 10	lda $1089			lda 	VarMemory+1
.a4eb	69 00		adc #$00			adc 	#0
.a4ed	8d 89 10	sta $1089			sta 	VarMemory+1
.a4f0	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a4f3	f0 19		beq $a50e			beq 	_IDCMemory
.a4f5	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a4f7	92 14		sta ($14)			sta 	(zTemp0)
.a4f9	a0 01		ldy #$01			ldy 	#1
.a4fb	a5 17		lda $17				lda 	zTemp1+1
.a4fd	91 14		sta ($14),y			sta 	(zTemp0),y
.a4ff	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a501	18		clc				clc
.a502	69 02		adc #$02			adc 	#2
.a504	85 22		sta $22				sta 	idDataAddr
.a506	a5 17		lda $17				lda 	zTemp1+1
.a508	69 00		adc #$00			adc 	#0
.a50a	85 23		sta $23				sta 	idDataAddr+1
.a50c	7a		ply				ply 								; restore Y and exit
.a50d	60		rts				rts
.a50e					_IDCMemory:
.a50e	4c cf a5	jmp $a5cf			jmp 	OutOfMemoryError
.a511					IdentifierSetUpHashPtr:
.a511	5a		phy				phy
.a512					_ISPLoop:
.a512	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the last identifier character
.a514	c8		iny				iny
.a515	c9 e0		cmp #$e0			cmp 	#$E0
.a517	90 f9		bcc $a512			bcc 	_ISPLoop
.a519	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a51b	0a		asl a				asl 	a 							; convert to an offset, clc
.a51c	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a51e	85 14		sta $14				sta 	zTemp0
.a520	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a522	85 15		sta $15				sta 	zTemp0+1
.a524	7a		ply				ply
.a525	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a526					ResetCodePointer:
.a526	48		pha				pha
.a527	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a529	85 11		sta $11				sta 	codePtr+1
.a52b	64 10		stz $10				stz 	codePtr
.a52d	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a52f	68		pla				pla
.a530	60		rts				rts
.a531					ResetForRun:
.a531	48		pha				pha
.a532	5a		phy				phy
.a533	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a535					_RRErase:
.a535	bd b5 b4	lda $b4b5,x			lda 	DefaultHashTable,x
.a538	9d 68 10	sta $1068,x			sta		HashTable,x
.a53b	e8		inx				inx
.a53c	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a53e	d0 f5		bne $a535			bne 	_RRErase
.a540	20 57 a5	jsr $a557			jsr 	ResetVarMemory
.a543	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a545	85 12		sta $12				sta 	StructSP
.a547	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a549	85 13		sta $13				sta 	StructSP+1
.a54b	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a54d	92 12		sta ($12)			sta 	(StructSP)
.a54f	20 7e a5	jsr $a57e			jsr 	ProcedureScan
.a552	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a554	7a		ply				ply
.a555	68		pla				pla
.a556	60		rts				rts
.a557					ResetVarMemory:
.a557	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a559	85 14		sta $14				sta 	zTemp0
.a55b	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a55d	85 15		sta $15				sta 	zTemp0+1
.a55f					_RRFindEnd:
.a55f	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a561	f0 0b		beq $a56e			beq 	_RRFoundEnd
.a563	18		clc				clc 								; no, add offset to pointer.
.a564	65 14		adc $14				adc 	zTemp0
.a566	85 14		sta $14				sta 	zTemp0
.a568	90 f5		bcc $a55f			bcc 	_RRFindEnd
.a56a	e6 15		inc $15				inc 	zTemp0+1
.a56c	80 f1		bra $a55f			bra 	_RRFindEnd
.a56e					_RRFoundEnd:
.a56e	18		clc				clc 								; add 1 to this, as it points to the last
.a56f	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a571	69 01		adc #$01			adc 	#1
.a573	8d 88 10	sta $1088			sta 	VarMemory
.a576	a5 15		lda $15				lda 	zTemp0+1
.a578	69 00		adc #$00			adc 	#0
.a57a	8d 89 10	sta $1089			sta 	VarMemory+1
.a57d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a57e					ProcedureScan:
.a57e	20 26 a5	jsr $a526			jsr 	ResetCodePointer 			; reset the code pointer.
.a581	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a583	f0 39		beq $a5be			beq 	_PSExit
.a585	a0 03		ldy #$03			ldy 	#3 							; start of line
.a587	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a589	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a58b	d0 24		bne $a5b1			bne 	_PSNext
.a58d	c8		iny				iny 								; skip over def first
.a58e	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a590	29 e0		and #$e0			and 	#$E0
.a592	c9 c0		cmp #$c0			cmp 	#$C0
.a594	d0 1b		bne $a5b1			bne 	_PSNext 					; otherwise ignore it.
.a596	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a598	20 a4 a4	jsr $a4a4			jsr 	IdentifierCreate
.a59b					_PSSkipIdentifier:
.a59b	b1 10		lda ($10),y			lda 	(codePtr),y
.a59d	c9 e0		cmp #$e0			cmp 	#$E0
.a59f	c8		iny				iny
.a5a0	90 f9		bcc $a59b			bcc 	_PSSkipIdentifier
.a5a2	98		tya				tya  								; save the address in the data slot.
.a5a3	a0 03		ldy #$03			ldy 	#3
.a5a5	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a5a7	a5 10		lda $10				lda 	codePtr
.a5a9	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a5ab	a5 11		lda $11				lda 	codePtr+1
.a5ad	a0 01		ldy #$01			ldy 	#1
.a5af	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a5b1					_PSNext:
.a5b1	18		clc				clc 								; go to next
.a5b2	b2 10		lda ($10)			lda 	(codePtr)
.a5b4	65 10		adc $10				adc 	codePtr
.a5b6	85 10		sta $10				sta 	codeptr
.a5b8	90 c7		bcc $a581			bcc 	_PSMain
.a5ba	e6 11		inc $11				inc 	codePtr+1
.a5bc	80 c3		bra $a581			bra 	_PSMain
.a5be					_PSExit:
.a5be	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5bf					SyntaxError:
.a5bf	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a5c2	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5ca	52 52 4f 52 00
.a5cf					OutOfMemoryError:
.a5cf	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a5d2	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5da	45 4d 4f 52 59 00
.a5e0					ErrorHandler:
.a5e0	68		pla				pla 								; pop message address
.a5e1	85 14		sta $14				sta 	zTemp0
.a5e3	68		pla				pla
.a5e4	85 15		sta $15				sta 	zTemp0+1
.a5e6	a9 05		lda #$05			lda 	#CTH_ERROR
.a5e8	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a5eb	a0 01		ldy #$01			ldy 	#1 							; print it
.a5ed					_ErrorPrint:
.a5ed	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5ef	20 9f a2	jsr $a29f			jsr		ExternPrint
.a5f2	c8		iny				iny
.a5f3	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5f5	d0 f6		bne $a5ed			bne 	_ErrorPrint
.a5f7	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a5f9	b1 10		lda ($10),y			lda		(codePtr),y
.a5fb	c8		iny				iny
.a5fc	12 10		ora ($10)			ora 	(codePtr)
.a5fe	f0 1c		beq $a61c			beq 	_ErrorNoLine 				; if so, skip
.a600	a9 20		lda #$20			lda 	#32
.a602	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a605	a9 40		lda #$40			lda 	#'@'
.a607	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a60a	a9 20		lda #$20			lda 	#32
.a60c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a60f	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a611	b1 10		lda ($10),y			lda 	(codePtr),y
.a613	48		pha				pha
.a614	c8		iny				iny
.a615	b1 10		lda ($10),y			lda 	(codePtr),y
.a617	a8		tay				tay
.a618	68		pla				pla
.a619	20 24 a6	jsr $a624			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a61c					_ErrorNoLine:
.a61c	a9 0d		lda #$0d			lda 	#13							; new line
.a61e	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a621	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a624					ErrorPrint16:
.a624	da		phx				phx
.a625	e8		inx				inx 								; space on stack
.a626	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a629	98		tya				tya
.a62a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a62d	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a630	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a633	20 49 a6	jsr $a649			jsr 	IntegerToString 			; convert to string.
.a636	fa		plx				plx
.a637					ErrorPrintIntegerBuffer:
.a637	da		phx				phx
.a638	a2 00		ldx #$00			ldx 	#0
.a63a					_EP16Loop:
.a63a	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a63d	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a640	e8		inx				inx
.a641	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a644	d0 f4		bne $a63a			bne 	_EP16Loop
.a646	8a		txa				txa
.a647	fa		plx				plx
.a648	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a649					IntegerToString:
.a649	48		pha				pha
.a64a	5a		phy				phy
.a64b	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a64e	48		pha				pha
.a64f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a652	48		pha				pha
.a653	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a656	48		pha				pha
.a657	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a65a	48		pha				pha
.a65b	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a65e	10 08		bpl $a668			bpl 		_ITSNotMinus
.a660	a9 2d		lda #$2d			lda 		#"-"
.a662	20 0a a7	jsr $a70a			jsr 		ITSOutputCharacter
.a665	20 a5 aa	jsr $aaa5			jsr 		Unary_Negate
.a668					_ITSNotMinus:
.a668	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a66b	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a66e	8a		txa				txa 								; use Y for the integer index.
.a66f	a8		tay				tay
.a670	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a672					_ITSNextSubtractor:
.a672	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a674	8d 21 08	sta $0821			sta 		NumConvCount
.a677					_ITSSubtract:
.a677	38		sec				sec
.a678	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a67b	fd e6 a6	sbc $a6e6,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a67e	48		pha				pha
.a67f	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a682	fd e7 a6	sbc $a6e7,x			sbc 		_ITSSubtractors+1,x
.a685	48		pha				pha
.a686	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a689	fd e8 a6	sbc $a6e8,x			sbc 		_ITSSubtractors+2,x
.a68c	48		pha				pha
.a68d	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a690	fd e9 a6	sbc $a6e9,x			sbc 		_ITSSubtractors+3,x
.a693	90 14		bcc $a6a9			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a695	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a698	68		pla				pla
.a699	99 00 0e	sta $0e00,y			sta 		stack2,y
.a69c	68		pla				pla
.a69d	99 00 0d	sta $0d00,y			sta 		stack1,y
.a6a0	68		pla				pla
.a6a1	99 00 0c	sta $0c00,y			sta 		stack0,y
.a6a4	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a6a7	80 ce		bra $a677			bra 		_ITSSubtract 			; go round again.
.a6a9					_ITSCantSubtract:
.a6a9	68		pla				pla 								; throw away interim answers
.a6aa	68		pla				pla 								; (the subtraction that failed)
.a6ab	68		pla				pla
.a6ac	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a6af	c9 30		cmp #$30			cmp 		#"0"
.a6b1	d0 05		bne $a6b8			bne 		_ITSOutputDigit
.a6b3	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6b6	f0 09		beq $a6c1			beq	 		_ITSGoNextSubtractor
.a6b8					_ITSOutputDigit:
.a6b8	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6bb	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6be	20 0a a7	jsr $a70a			jsr 		ITSOutputCharacter 		; output it.
.a6c1					_ITSGoNextSubtractor:
.a6c1	e8		inx				inx 								; next dword in subtractor table.
.a6c2	e8		inx				inx
.a6c3	e8		inx				inx
.a6c4	e8		inx				inx
.a6c5	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6c7	d0 a9		bne $a672			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6c9	98		tya				tya 								; X is back as the mantissa index
.a6ca	aa		tax				tax
.a6cb	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6ce	09 30		ora #$30			ora 		#"0"
.a6d0	20 0a a7	jsr $a70a			jsr 		ITSOutputCharacter
.a6d3	68		pla				pla
.a6d4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6d7	68		pla				pla
.a6d8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6db	68		pla				pla
.a6dc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6df	68		pla				pla
.a6e0	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6e3	7a		ply				ply 								; and exit
.a6e4	68		pla				pla
.a6e5	60		rts				rts
.a6e6					_ITSSubtractors:
>a6e6	00 ca 9a 3b					.dword 		1000000000
>a6ea	00 e1 f5 05					.dword 		100000000
>a6ee	80 96 98 00					.dword 		10000000
>a6f2	40 42 0f 00					.dword 		1000000
>a6f6	a0 86 01 00					.dword 		100000
>a6fa	10 27 00 00					.dword 		10000
>a6fe	e8 03 00 00					.dword 		1000
>a702	64 00 00 00					.dword 		100
>a706	0a 00 00 00					.dword 		10
.a70a					_ITSSubtractorsEnd:
.a70a					ITSOutputCharacter:
.a70a	48		pha				pha
.a70b	da		phx				phx
.a70c	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a70f	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a712	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a715	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a718	fa		plx				plx
.a719	68		pla				pla
.a71a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a71b					IntFromString:
.a71b	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a71d	8c 25 08	sty $0825			sty 	IFSHexFlag
.a720	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a722	c9 26		cmp #$26			cmp 	#"&"
.a724	d0 04		bne $a72a			bne 	_IFSNotHex
.a726	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a729	c8		iny				iny 								; skip
.a72a					_IFSNotHex:
.a72a	e8		inx				inx 								; space on stack
.a72b	20 87 a7	jsr $a787			jsr 	IFSClearTOS
.a72e					_IFSLoop:
.a72e	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a731	f0 0a		beq $a73d			beq 	_IFSDecOnly
.a733	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a735	c9 41		cmp #$41			cmp 	#"A"
.a737	90 04		bcc $a73d			bcc 	_IFSDecOnly
.a739	c9 47		cmp #$47			cmp 	#"F"+1
.a73b	90 0a		bcc $a747			bcc 	_IFSOkDigit
.a73d					_IFSDecOnly:
.a73d	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a73f	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a741	90 3e		bcc $a781			bcc 	_IFSExit
.a743	c9 3a		cmp #$3a			cmp 	#"9"+1
.a745	b0 3a		bcs $a781			bcs 	_IFSExit
.a747					_IFSOkDigit:
.a747	ad 25 08	lda $0825			lda 	IFSHexFlag
.a74a	d0 11		bne $a75d			bne 	_IFSHexShift
.a74c	20 16 aa	jsr $aa16			jsr 	Stack_Dup 					; duplicate tos
.a74f	20 1d ab	jsr $ab1d			jsr 	Unary_Shl	 				; x 2
.a752	20 1d ab	jsr $ab1d			jsr 	Unary_Shl 					; x 4
.a755	20 e8 ab	jsr $abe8			jsr 	Stack_Add 					; x 5
.a758	20 1d ab	jsr $ab1d			jsr 	Unary_Shl 					; x 10
.a75b	80 0c		bra $a769			bra 	_IFSAddIn
.a75d					_IFSHexShift:
.a75d	20 1d ab	jsr $ab1d			jsr 	Unary_Shl	 				; x 2
.a760	20 1d ab	jsr $ab1d			jsr 	Unary_Shl	 				; x 4
.a763	20 1d ab	jsr $ab1d			jsr 	Unary_Shl	 				; x 8
.a766	20 1d ab	jsr $ab1d			jsr 	Unary_Shl	 				; x 16
.a769					_IFSAddIn:
.a769	e8		inx				inx  								; create space next up
.a76a	20 87 a7	jsr $a787			jsr 	IFSClearTOS
.a76d	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a76f	c9 41		cmp #$41			cmp 	#"A"
.a771	90 03		bcc $a776			bcc 	_IFSDec
.a773	38		sec				sec 								; hex fixup.
.a774	e9 07		sbc #$07			sbc 	#7
.a776					_IFSDec:
.a776	29 0f		and #$0f			and 	#15
.a778	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a77b	20 e8 ab	jsr $abe8			jsr 	Stack_Add 					; add to tos
.a77e	c8		iny				iny
.a77f	80 ad		bra $a72e			bra 	_IFSLoop
.a781					_IFSExit:
.a781	98		tya				tya
.a782	38		sec				sec
.a783	f0 01		beq $a786			beq 	_IFSSkipFail
.a785	18		clc				clc
.a786					_IFSSkipFail:
.a786	60		rts				rts
.a787					IFSClearTOS:
.a787	9e 00 0c	stz $0c00,x			stz		stack0,x
.a78a	9e 00 0d	stz $0d00,x			stz		stack1,x
.a78d	9e 00 0e	stz $0e00,x			stz		stack2,x
.a790	9e 00 0f	stz $0f00,x			stz		stack3,x
.a793	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a794					Tokenise:
.a794	da		phx				phx
.a795	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a797					_TKSkip:
.a797	c8		iny				iny
.a798					_TKMainLoop:
.a798	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a79a	f0 06		beq $a7a2			beq 	_TKExit
.a79c	c9 20		cmp #$20			cmp 	#" "
.a79e	f0 f7		beq $a797			beq 	_TKSkip
.a7a0	80 04		bra $a7a6			bra 	_TKNotEnd
.a7a2	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a7a4	fa		plx				plx
.a7a5	60		rts				rts
.a7a6					_TKNotEnd:
.a7a6	c9 22		cmp #$22			cmp 	#'"'
.a7a8	f0 04		beq $a7ae			beq 	_TKIsQuote
.a7aa	c9 27		cmp #$27			cmp 	#"'"
.a7ac	d0 05		bne $a7b3			bne 	_TKNotQuote
.a7ae					_TKIsQuote:
.a7ae	20 d2 a8	jsr $a8d2			jsr		TOKQuotedString
.a7b1	80 e5		bra $a798			bra 	_TKMainLoop
.a7b3					_TKNotQuote:
.a7b3	98		tya				tya 								; current pos -> zTemp0
.a7b4	18		clc				clc
.a7b5	65 10		adc $10				adc 	codePtr
.a7b7	85 14		sta $14				sta 	zTemp0
.a7b9	85 10		sta $10				sta 	codePtr
.a7bb	a5 11		lda $11				lda 	codePtr+1
.a7bd	69 00		adc #$00			adc 	#0
.a7bf	85 15		sta $15				sta 	zTemp0+1
.a7c1	85 11		sta $11				sta 	codePtr+1
.a7c3	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7c5	b1 10		lda ($10),y			lda 	(codePtr),y
.a7c7	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7c9	f0 08		beq $a7d3			beq 	_TKIsNumber
.a7cb	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7cd	90 23		bcc $a7f2			bcc 	_TKNotNumber
.a7cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7d1	b0 1f		bcs $a7f2			bcs 	_TKNotNumber
.a7d3					_TKIsNumber:
.a7d3	e8		inx				inx
.a7d4	20 1b a7	jsr $a71b			jsr 	IntFromString 				; convert to integer
.a7d7	48		pha				pha
.a7d8	20 aa a8	jsr $a8aa			jsr 	TokWriteConstant 			; do constant recursively.
.a7db	7a		ply				ply
.a7dc	ca		dex				dex
.a7dd	b1 10		lda ($10),y			lda 	(codePtr),y
.a7df	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7e1	d0 08		bne $a7eb			bne 	_TKIsPositive
.a7e3	c8		iny				iny									; skip it
.a7e4	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7e6	20 a1 a8	jsr $a8a1			jsr 	TokWriteToken 				; write token out
.a7e9	80 ad		bra $a798			bra 	_TKMainLoop 				; loop back.
.a7eb					_TKIsPositive:
.a7eb	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a7ed	20 a1 a8	jsr $a8a1			jsr 	TokWriteToken 				; write token out
.a7f0	80 a6		bra $a798			bra 	_TKMainLoop 				; loop back.
.a7f2					_TKNotNumber:
.a7f2	a9 08		lda #$08			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7f4	85 18		sta $18				sta 	zTemp2
.a7f6	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a7f8	85 19		sta $19				sta 	zTemp2+1
.a7fa	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a7fc	a9 10		lda #$10			lda 	#$10
.a7fe	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a800					_TKSearch:
.a800	a0 00		ldy #$00			ldy 	#0
.a802					_TKCompare:
.a802	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a804	c8		iny				iny
.a805	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a807	d0 07		bne $a810			bne 	_TKNext
.a809	98		tya				tya
.a80a	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a80c	d0 f4		bne $a802			bne 	_TKCompare 					; found a match.
.a80e	80 13		bra $a823			bra 	_TKFound
.a810	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a812	38		sec				sec 								; add length+1 to current
.a813	65 18		adc $18				adc 	zTemp2
.a815	85 18		sta $18				sta 	zTemp2
.a817	90 02		bcc $a81b			bcc 	_TKNNC
.a819	e6 19		inc $19				inc 	zTemp2+1
.a81b	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a81d	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a81f	d0 df		bne $a800			bne 	_TKSearch 					; go try again.
.a821	80 0f		bra $a832			bra 	_TKComplete
.a823					_TKFound:
.a823	98		tya				tya
.a824	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a826	90 e8		bcc $a810			bcc 	_TKNext 					; if < best try next
.a828	f0 e6		beq $a810			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a82a	85 1a		sta $1a				sta 	zTemp3 						; update best
.a82c	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a82e	85 1c		sta $1c				sta 	zTemp4
.a830	80 de		bra $a810			bra 	_TKNext
.a832					_TKComplete:
.a832	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a834	f0 1a		beq $a850			beq		_TKTokenFail 				; if zero no match occurred
.a836	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a838	88		dey				dey
.a839	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at last character
.a83b	c8		iny				iny
.a83c	20 91 a8	jsr $a891			jsr 	TOKIsIdentifier 			; identifier character
.a83f	90 07		bcc $a848			bcc 	_TKOutput 					; if not, then token is okay
.a841	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a843	20 91 a8	jsr $a891			jsr 	TOKIsIdentifier 			; is that an identifier
.a846	b0 08		bcs $a850			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a848					_TKOutput:
.a848	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a84a	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken
.a84d	4c 98 a7	jmp $a798			jmp 	_TKMainLoop					; go round again
.a850					_TKTokenFail:
.a850	a0 00		ldy #$00			ldy 	#0
.a852	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a854	20 91 a8	jsr $a891			jsr 	TOKIsIdentifier
.a857	b0 13		bcs $a86c			bcs 	_TKCopyIdent 				; if yes copy it
.a859	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>a85c	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a864	4f 4b 45 4e 49 53 45 00
.a86c					_TKCopyIdent:
.a86c	c8		iny				iny 								; get next
.a86d	b1 10		lda ($10),y			lda 	(codePtr),y
.a86f	20 91 a8	jsr $a891			jsr 	TOKIsIdentifier 			; if identifier
.a872	08		php				php 								; save CS on stack
.a873	88		dey				dey 								; back to character
.a874	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a876	c8		iny				iny
.a877	c9 2e		cmp #$2e			cmp 	#"."
.a879	d0 02		bne $a87d			bne 	_TKNotDot
.a87b	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a87d					_TKNotDot:
.a87d	38		sec				sec
.a87e	e9 41		sbc #$41			sbc		#'A'
.a880	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a882	28		plp				plp 								; CS if next is identifier
.a883	08		php				php
.a884	b0 02		bcs $a888			bcs 	_TKNotLast					; CC if next is not identifier
.a886	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a888					_TKNotLast:
.a888	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken 				; write out
.a88b	28		plp				plp 								; get test result
.a88c	b0 de		bcs $a86c			bcs 	_TKCopyIdent 				; get the next identifier.
.a88e	4c 98 a7	jmp $a798			jmp 	_TKMainLoop
.a891					TOKIsIdentifier:
.a891	c9 2e		cmp #$2e			cmp 	#"."
.a893	f0 08		beq $a89d			beq 	_TIIYes
.a895	c9 41		cmp #$41			cmp 	#"A"
.a897	90 06		bcc $a89f			bcc 	_TIINo
.a899	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a89b	b0 02		bcs $a89f			bcs 	_TIINo
.a89d					_TIIYes:
.a89d	38		sec				sec
.a89e	60		rts				rts
.a89f					_TIINo:
.a89f	18		clc				clc
.a8a0	60		rts				rts
.a8a1					TokWriteToken:
.a8a1	92 16		sta ($16)			sta 	(zTemp1)
.a8a3	e6 16		inc $16				inc 	zTemp1
.a8a5	d0 02		bne $a8a9			bne 	_TWTExit
.a8a7	e6 17		inc $17				inc 	zTemp1+1
.a8a9					_TWTExit:
.a8a9	60		rts				rts
.a8aa					TokWriteConstant:
.a8aa	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8ad	29 3f		and #$3f			and		#63
.a8af	48		pha				pha 								; save on stack
.a8b0	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8b3	29 c0		and #$c0			and 	#$C0
.a8b5	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8b8	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8bb	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8be	f0 0d		beq $a8cd			beq 	_TWCNoCall 					; no, don't call.
.a8c0	5a		phy				phy
.a8c1	a0 06		ldy #$06			ldy 	#6
.a8c3					_TWCShift:
.a8c3	20 2a ab	jsr $ab2a			jsr 	Unary_Shr
.a8c6	88		dey				dey
.a8c7	d0 fa		bne $a8c3			bne 	_TWCShift
.a8c9	7a		ply				ply
.a8ca	20 aa a8	jsr $a8aa			jsr 	TokWriteConstant
.a8cd					_TWCNoCall:
.a8cd	68		pla				pla
.a8ce	09 80		ora #$80			ora 	#$80						; make digit token
.a8d0	80 cf		bra $a8a1			bra 	TokWriteToken 				; and write it out.
.a8d2					TokQuotedString:
.a8d2	85 18		sta $18				sta 	zTemp2 						; save quote
.a8d4	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8d6	f0 02		beq $a8da			beq 	_TQDouble
.a8d8	a9 01		lda #$01			lda 	#1
.a8da					_TQDouble:
.a8da	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8db	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken 				; write out
.a8de	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8e0	85 1a		sta $1a				sta 	zTemp3
.a8e2	a5 17		lda $17				lda 	zTemp1+1
.a8e4	85 1b		sta $1b				sta 	zTemp3+1
.a8e6	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8e8	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken
.a8eb					_TQLoop:
.a8eb	c8		iny				iny 								; next character
.a8ec	b1 10		lda ($10),y			lda 	(codePtr),y
.a8ee	f0 0f		beq $a8ff			beq 	_TQExit 					; if zero exit
.a8f0	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a8f2	f0 0a		beq $a8fe			beq 	_TQSkipExit 				; skip it and exit
.a8f4	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken 				; write out
.a8f7	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a8f9	1a		inc a				inc 	a
.a8fa	92 1a		sta ($1a)			sta 	(zTemp3)
.a8fc	80 ed		bra $a8eb			bra 	_TQLoop						; go round
.a8fe					_TQSkipExit:
.a8fe	c8		iny				iny
.a8ff					_TQExit:
.a8ff	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a901	20 a1 a8	jsr $a8a1			jsr 	TOKWriteToken
.a904	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a905					EditProgram:
.a905	ad 89 10	lda $1089			lda 	VarMemory+1
.a908	1a		inc a				inc 	a
.a909	c9 9f		cmp #$9f			cmp 	#MemoryEnd >> 8
.a90b	b0 3c		bcs $a949			bcs 	_EPMemory
.a90d	a2 00		ldx #$00			ldx 	#0
.a90f	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a911	85 10		sta $10				sta 	codePtr
.a913	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a915	85 11		sta $11				sta 	codePtr+1
.a917	a0 00		ldy #$00			ldy 	#0
.a919	a2 ff		ldx #$ff			ldx 	#255
.a91b	20 eb a3	jsr $a3eb			jsr 	ExtractIntegerToTOS
.a91e	98		tya				tya
.a91f	18		clc				clc
.a920	65 10		adc $10				adc 	codePtr
.a922	85 10		sta $10				sta 	codePtr
.a924	90 02		bcc $a928			bcc 	_EPNoCarry
.a926	e6 11		inc $11				inc 	codePtr+1
.a928					_EPNoCarry:
.a928	20 4c a9	jsr $a94c			jsr 	EDFindLine
.a92b	90 0f		bcc $a93c			bcc 	_EPNotFound
.a92d	a5 16		lda $16				lda 	zTemp1
.a92f	48		pha				pha
.a930	a5 17		lda $17				lda 	zTemp1+1
.a932	48		pha				pha
.a933	20 83 a9	jsr $a983			jsr 	EDDeleteLine
.a936	68		pla				pla
.a937	85 17		sta $17				sta 	zTemp1+1
.a939	68		pla				pla
.a93a	85 16		sta $16				sta 	zTemp1
.a93c					_EPNotFound:
.a93c	b2 10		lda ($10)			lda 	(codePtr)
.a93e	f0 03		beq $a943			beq 	_EPNoInsert
.a940	20 a8 a9	jsr $a9a8			jsr 	EDInsertLine
.a943					_EPNoInsert:
.a943	20 31 a5	jsr $a531			jsr 	ResetForRun
.a946	4c 4f a0	jmp $a04f			jmp 	NewCommand
.a949					_EPMemory:
.a949	4c cf a5	jmp $a5cf			jmp 	OutOfMemoryError
.a94c					EDFindLine:
.a94c	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a94e	85 16		sta $16				sta 	zTemp1
.a950	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a952	85 17		sta $17				sta 	zTemp1+1
.a954					_EDFLLoop:
.a954	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a956	b1 16		lda ($16),y			lda 	(zTemp1),y
.a958	f0 25		beq $a97f			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a95a	c8		iny				iny
.a95b	38		sec				sec
.a95c	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a95f	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a961	aa		tax				tax	 								; this will return 10.
.a962	ad 00 0d	lda $0d00			lda 	stack1
.a965	c8		iny				iny
.a966	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a968	90 15		bcc $a97f			bcc 	_EDFLFail					; if target < current then failed.
.a96a	d0 04		bne $a970			bne 	_EDFLNext 					; if non-zero then goto next
.a96c	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a96e	f0 11		beq $a981			beq 	_EDFLFound
.a970					_EDFLNext:
.a970	a0 00		ldy #$00			ldy 	#0 							; get offset
.a972	18		clc				clc
.a973	b1 16		lda ($16),y			lda 	(zTemp1),y
.a975	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a977	85 16		sta $16				sta 	zTemp1
.a979	90 d9		bcc $a954			bcc 	_EDFLLoop
.a97b	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a97d	80 d5		bra $a954			bra 	_EDFLLoop
.a97f					_EDFLFail:
.a97f	18		clc				clc
.a980	60		rts				rts
.a981					_EDFLFound:
.a981	38		sec				sec
.a982	60		rts				rts
.a983					EDDeleteLine:
.a983	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a985	a2 00		ldx #$00			ldx 	#0
.a987	b1 16		lda ($16),y			lda 	(zTemp1),y
.a989	a8		tay				tay 								; put in Y
.a98a					_EDDelLoop:
.a98a	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a98c	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a98e	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a990	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a993	d0 07		bne $a99c			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a995	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a997	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a99a	f0 08		beq $a9a4			beq		_EDDelExit
.a99c					_EDDelNext:
.a99c	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a99e	d0 ea		bne $a98a			bne 	_EDDelLoop
.a9a0	e6 17		inc $17				inc 	zTemp1+1
.a9a2	80 e6		bra $a98a			bra 	_EDDelLoop
.a9a4					_EDDelExit:
.a9a4	20 57 a5	jsr $a557			jsr 	ResetVarMemory
.a9a7	60		rts				rts
.a9a8					EDInsertLine:
.a9a8	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a9ab	85 1a		sta $1a				sta 	zTemp3
.a9ad	ad 89 10	lda $1089			lda 	VarMemory+1
.a9b0	85 1b		sta $1b				sta 	zTemp3+1
.a9b2	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9b4					_EDGetLength:
.a9b4	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9b6	f0 0d		beq $a9c5			beq 	_EDGotLength 				; if 0, Y is the length
.a9b8	c8		iny				iny
.a9b9	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9bb	b0 f7		bcs $a9b4			bcs 	_EDGetLength
.a9bd	98		tya				tya 								; get original position
.a9be	3a		dec a				dec 	a
.a9bf	18		clc				clc
.a9c0	71 10		adc ($10),y			adc 	(codePtr),y
.a9c2	a8		tay				tay
.a9c3	80 ef		bra $a9b4			bra 	_EDGetLength
.a9c5					_EDGotLength:
.a9c5	98		tya				tya
.a9c6	18		clc				clc
.a9c7	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9c9	48		pha				pha 								; save total size (e.g. offset)
.a9ca	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9cc	a8		tay				tay 								; in Y
.a9cd	a2 00		ldx #$00			ldx 	#0
.a9cf					_EDInsLoop:
.a9cf	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9d1	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9d3	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9d5	c5 16		cmp $16				cmp 	zTemp1
.a9d7	d0 06		bne $a9df			bne 	_EDINextShift
.a9d9	a5 1b		lda $1b				lda 	zTemp3+1
.a9db	c5 17		cmp $17				cmp 	zTemp1+1
.a9dd	f0 0a		beq $a9e9			beq 	_EDIShiftOver
.a9df					_EDINextShift:
.a9df	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9e1	d0 02		bne $a9e5			bne 	_EDINoBorrow
.a9e3	c6 1b		dec $1b				dec 	zTemp3+1
.a9e5					_EDINoBorrow:
.a9e5	c6 1a		dec $1a				dec 	zTemp3
.a9e7	80 e6		bra $a9cf			bra 	_EDInsLoop
.a9e9					_EDIShiftOver:
.a9e9	68		pla				pla 								; this is the size + others, e.g. offset
.a9ea	a0 00		ldy #$00			ldy 	#0
.a9ec	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.a9ee	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.a9f1	c8		iny				iny
.a9f2	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9f4	ad 00 0d	lda $0d00			lda 	stack1
.a9f7	c8		iny				iny
.a9f8	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9fa	c8		iny				iny 								; where the code goes.
.a9fb	a2 00		ldx #$00			ldx 	#0 							; comes from
.a9fd					_EDICopyCode:
.a9fd	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.a9ff	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.aa01	c8		iny				iny 								; bump pointers
.aa02	e6 10		inc $10				inc 	codePtr
.aa04	d0 02		bne $aa08			bne 	_EDINoCarry
.aa06	e6 11		inc $11				inc 	codePtr+1
.aa08					_EDINoCarry:
.aa08	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.aa0a	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.aa0c	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa0e	d0 ed		bne $a9fd			bne 	_EDICopyCode
.aa10	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa11					Stack_Empty:
.aa11	a2 00		ldx #$00			ldx 	#0
.aa13	60		rts				rts
.aa14					Stack_Drop:
.aa14	ca		dex				dex
.aa15	60		rts				rts
.aa16					Stack_Dup:
.aa16	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa19	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa1c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa1f	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa22	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa25	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa28	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa2b	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa2e	e8		inx				inx 								; bump stack pointer
.aa2f	60		rts				rts
.aa30					Stack_Nip:
.aa30	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa33	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa36	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa39	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa3c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa3f	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa42	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa45	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa48	ca		dex				dex 								; drop tos
.aa49	60		rts				rts
.aa4a					Stack_Over:
.aa4a	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa4d	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa50	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa53	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa56	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa59	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa5c	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa5f	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa62	e8		inx				inx 							; bump stack pointer
.aa63	60		rts				rts
.aa64					Stack_Swap:
.aa64	5a		phy				phy
.aa65	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa68	a8		tay				tay
.aa69	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa6c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa6f	98		tya				tya
.aa70	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa73	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa76	a8		tay				tay
.aa77	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa7a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa7d	98		tya				tya
.aa7e	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa81	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa84	a8		tay				tay
.aa85	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa88	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa8b	98		tya				tya
.aa8c	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa8f	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa92	a8		tay				tay
.aa93	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa96	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa99	98		tya				tya
.aa9a	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa9d	7a		ply				ply
.aa9e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aa9f					Unary_Absolute:
.aa9f	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaa2	30 01		bmi $aaa5			bmi 	Unary_Negate
.aaa4	60		rts				rts
.aaa5					Unary_Negate:
.aaa5	38		sec				sec
.aaa6	a9 00		lda #$00			lda		#0
.aaa8	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aaab	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaae	a9 00		lda #$00			lda		#0
.aab0	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aab3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aab6	a9 00		lda #$00			lda		#0
.aab8	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aabb	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aabe	a9 00		lda #$00			lda		#0
.aac0	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aac3	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aac6	60		rts				rts
.aac7					Unary_Not:
.aac7	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaca	49 ff		eor #$ff			eor 	#$FF
.aacc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aacf	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aad2	49 ff		eor #$ff			eor 	#$FF
.aad4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aad7	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aada	49 ff		eor #$ff			eor 	#$FF
.aadc	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aadf	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aae2	49 ff		eor #$ff			eor 	#$FF
.aae4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aae7	60		rts				rts
.aae8					Unary_Increment:
.aae8	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aaeb	d0 0d		bne $aafa			bne 	_UIExit
.aaed	fe 00 0d	inc $0d00,x			inc 	stack1,x
.aaf0	d0 08		bne $aafa			bne 	_UIExit
.aaf2	fe 00 0e	inc $0e00,x			inc 	stack2,x
.aaf5	d0 03		bne $aafa			bne 	_UIExit
.aaf7	fe 00 0f	inc $0f00,x			inc 	stack3,x
.aafa					_UIExit:
.aafa	60		rts				rts
.aafb					Unary_Decrement:
.aafb	38		sec				sec
.aafc	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaff	e9 01		sbc #$01			sbc 	#1
.ab01	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab04	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab07	e9 00		sbc #$00			sbc 	#0
.ab09	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab0c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab0f	e9 00		sbc #$00			sbc 	#0
.ab11	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab14	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab17	e9 00		sbc #$00			sbc 	#0
.ab19	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab1c	60		rts				rts
.ab1d					Unary_Shl:
.ab1d	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab20	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab23	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab26	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab29	60		rts				rts
.ab2a					Unary_Shr:
.ab2a	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab2d	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab30	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab33	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab36	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab37					Mem_Peek:
.ab37	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab3a	85 14		sta $14				sta 	zTemp0
.ab3c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab3f	85 15		sta $15				sta 	zTemp0+1
.ab41	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab43	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab46	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab49	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab4c	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab4f	60		rts				rts
.ab50					Mem_WPeek:
.ab50	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab53	85 14		sta $14				sta 	zTemp0
.ab55	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab58	85 15		sta $15				sta 	zTemp0+1
.ab5a	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab5c	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab5f	5a		phy				phy 								; read msb
.ab60	a0 01		ldy #$01			ldy 	#1
.ab62	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab64	7a		ply				ply
.ab65	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab68	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab6b	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab6e	60		rts				rts
.ab6f					Mem_DPeek:
.ab6f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab72	85 14		sta $14				sta 	zTemp0
.ab74	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab77	85 15		sta $15				sta 	zTemp0+1
.ab79	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab7b	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab7e	5a		phy				phy 								; read msb
.ab7f	a0 01		ldy #$01			ldy 	#1
.ab81	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab83	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab86	c8		iny				iny
.ab87	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab89	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab8c	c8		iny				iny
.ab8d	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab8f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab92	7a		ply				ply
.ab93	60		rts				rts
.ab94					Mem_Poke:
.ab94	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab97	85 14		sta $14				sta 	zTemp0
.ab99	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab9c	85 15		sta $15				sta 	zTemp0+1
.ab9e	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aba1	92 14		sta ($14)			sta 	(zTemp0)
.aba3	ca		dex				dex
.aba4	ca		dex				dex
.aba5	60		rts				rts
.aba6					Mem_WPoke:
.aba6	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aba9	85 14		sta $14				sta 	zTemp0
.abab	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abae	85 15		sta $15				sta 	zTemp0+1
.abb0	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abb3	92 14		sta ($14)			sta 	(zTemp0)
.abb5	5a		phy				phy
.abb6	a0 01		ldy #$01			ldy 	#1
.abb8	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abbb	91 14		sta ($14),y			sta 	(zTemp0),y
.abbd	7a		ply				ply
.abbe	ca		dex				dex
.abbf	ca		dex				dex
.abc0	60		rts				rts
.abc1					Mem_DPoke:
.abc1	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abc4	85 14		sta $14				sta 	zTemp0
.abc6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abc9	85 15		sta $15				sta 	zTemp0+1
.abcb	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abce	92 14		sta ($14)			sta 	(zTemp0)
.abd0	5a		phy				phy
.abd1	a0 01		ldy #$01			ldy 	#1
.abd3	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abd6	91 14		sta ($14),y			sta 	(zTemp0),y
.abd8	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abdb	c8		iny				iny
.abdc	91 14		sta ($14),y			sta 	(zTemp0),y
.abde	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abe1	c8		iny				iny
.abe2	91 14		sta ($14),y			sta 	(zTemp0),y
.abe4	7a		ply				ply
.abe5	ca		dex				dex
.abe6	ca		dex				dex
.abe7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abe8					Stack_Add:
.abe8	ca		dex				dex
.abe9					Stack_Add_No_Dex:
.abe9	18		clc				clc
.abea	bd 00 0c	lda $0c00,x			lda		stack0,x
.abed	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.abf0	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abf3	bd 00 0d	lda $0d00,x			lda		stack1,x
.abf6	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.abf9	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abfc	bd 00 0e	lda $0e00,x			lda		stack2,x
.abff	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.ac02	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac05	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac08	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.ac0b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac0e	60		rts				rts
.ac0f					Stack_Sub:
.ac0f	ca		dex				dex
.ac10	38		sec				sec
.ac11	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac14	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac17	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac1a	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac1d	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac20	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac23	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac26	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac29	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac2c	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac2f	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac32	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac35	60		rts				rts
.ac36					Stack_And:
.ac36	ca		dex				dex
.ac37	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac3a	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac3d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac40	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac43	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac46	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac49	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac4c	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac4f	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac52	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac55	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac58	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac5b	60		rts				rts
.ac5c					Stack_Xor:
.ac5c	ca		dex				dex
.ac5d	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac60	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac63	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac66	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac69	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac6c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac6f	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac72	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac75	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac78	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac7b	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac7e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac81	60		rts				rts
.ac82					Stack_Or:
.ac82	ca		dex				dex
.ac83	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac86	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac89	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac8c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac8f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac92	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac95	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac98	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac9b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac9e	bd 00 0f	lda $0f00,x			lda		stack3,x
.aca1	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aca4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aca7	60		rts				rts
.aca8					Stack_Shl:
.aca8	38		sec				sec
.aca9	80 01		bra $acac			bra 	StackShift
.acab					Stack_Shr:
.acab	18		clc				clc
.acac					StackShift:
.acac	08		php				php
.acad	ca		dex				dex
.acae	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.acb1	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.acb3	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acb6	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acb9	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acbc	d0 13		bne $acd1			bne 	_SSZero
.acbe					_SSLoop:
.acbe	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acc1	30 1a		bmi $acdd			bmi 	_SSDone 					; completed ?
.acc3	28		plp				plp 								; restore flag
.acc4	08		php				php
.acc5	b0 05		bcs $accc			bcs 	_SSLeft 					; do either shift.
.acc7	20 2a ab	jsr $ab2a			jsr 	Unary_Shr
.acca	80 f2		bra $acbe			bra 	_SSLoop
.accc					_SSLeft:
.accc	20 1d ab	jsr $ab1d			jsr 	Unary_Shl
.accf	80 ed		bra $acbe			bra 	_SSLoop
.acd1					_SSZero:
.acd1	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.acd4	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acd7	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acda	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acdd					_SSDone:
.acdd	28		plp				plp 								; throw flag.
.acde	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acdf					MulInteger32:
.acdf	ca		dex				dex
.ace0	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.ace3	85 1e		sta $1e				sta 	zLTemp1
.ace5	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ace8	85 1f		sta $1f				sta 	zLTemp1+1
.acea	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aced	85 20		sta $20				sta 	zLTemp1+2
.acef	bd 00 0f	lda $0f00,x			lda 	stack3,x
.acf2	85 21		sta $21				sta 	zLTemp1+3
.acf4	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.acf7	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acfa	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acfd	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ad00					_BFMMultiply:
.ad00	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.ad02	29 01		and #$01			and 	#1
.ad04	f0 03		beq $ad09			beq 	_BFMNoAdd
.ad06	20 e9 ab	jsr $abe9			jsr 	Stack_Add_No_Dex 			; co-opt this code
.ad09					_BFMNoAdd:
.ad09	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.ad0c	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad0f	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad12	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad15	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad17	66 20		ror $20				ror 	zLTemp1+2
.ad19	66 1f		ror $1f				ror 	zLTemp1+1
.ad1b	66 1e		ror $1e				ror 	zLTemp1
.ad1d	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad1f	05 1f		ora $1f				ora 	zLTemp1+1
.ad21	05 20		ora $20				ora 	zLTemp1+2
.ad23	05 21		ora $21				ora 	zLTemp1+3
.ad25	d0 d9		bne $ad00			bne 	_BFMMultiply
.ad27	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad28					DivInteger32:
.ad28	ca		dex				dex
.ad29	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad2c	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad2f	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad32	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad35	d0 14		bne $ad4b			bne 	_BFDOkay
.ad37	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>ad3a	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad42	20 42 59 20 5a 45 52 4f 00
.ad4b					_BFDOkay:
.ad4b	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad4d	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad4f	64 20		stz $20				stz 	zLTemp1+2
.ad51	64 21		stz $21				stz 	zLTemp1+3
.ad53	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad56	20 b1 ad	jsr $adb1			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad59	e8		inx				inx
.ad5a	20 b1 ad	jsr $adb1			jsr 	CheckIntegerNegate
.ad5d	ca		dex				dex
.ad5e	5a		phy				phy 								; Y is the counter
.ad5f	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad61					_BFDLoop:
.ad61	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad64	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad67	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad6a	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad6d	26 1e		rol $1e				rol 	zLTemp1
.ad6f	26 1f		rol $1f				rol 	zLTemp1+1
.ad71	26 20		rol $20				rol 	zLTemp1+2
.ad73	26 21		rol $21				rol 	zLTemp1+3
.ad75	38		sec				sec
.ad76	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad78	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad7b	48		pha				pha
.ad7c	a5 1f		lda $1f				lda 	zLTemp1+1
.ad7e	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad81	48		pha				pha
.ad82	a5 20		lda $20				lda 	zLTemp1+2
.ad84	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad87	48		pha				pha
.ad88	a5 21		lda $21				lda 	zLTemp1+3
.ad8a	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad8d	90 15		bcc $ada4			bcc 	_BFDNoAdd
.ad8f	85 21		sta $21				sta 	zLTemp1+3 					; update A
.ad91	68		pla				pla
.ad92	85 20		sta $20				sta 	zLTemp1+2
.ad94	68		pla				pla
.ad95	85 1f		sta $1f				sta 	zLTemp1+1
.ad97	68		pla				pla
.ad98	85 1e		sta $1e				sta 	zLTemp1+0
.ad9a	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ad9d	09 01		ora #$01			ora 	#1
.ad9f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ada2	80 03		bra $ada7			bra 	_BFDNext
.ada4					_BFDNoAdd:
.ada4	68		pla				pla 								; Throw away the intermediate calculations
.ada5	68		pla				pla
.ada6	68		pla				pla
.ada7					_BFDNext:
.ada7	88		dey				dey
.ada8	d0 b7		bne $ad61			bne 	_BFDLoop
.adaa	7a		ply				ply 								; restore Y
.adab	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.adae	b0 07		bcs $adb7			bcs		IntegerNegateAlways 		; negate the result
.adb0	60		rts				rts
.adb1					CheckIntegerNegate:
.adb1	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.adb4	30 01		bmi $adb7			bmi 	IntegerNegateAlways 		; if so negate it
.adb6	60		rts				rts
.adb7					IntegerNegateAlways:
.adb7	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.adba	4c a5 aa	jmp $aaa5			jmp 	Unary_Negate
.adbd					ModInteger32:
.adbd	20 28 ad	jsr $ad28			jsr 	DivInteger32
.adc0	a5 1e		lda $1e				lda 	zLTemp1
.adc2	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adc5	a5 1f		lda $1f				lda 	zLTemp1+1
.adc7	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adca	a5 20		lda $20				lda 	zLTemp1+2
.adcc	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adcf	a5 21		lda $21				lda 	zLTemp1+3
.add1	9d 00 0f	sta $0f00,x			sta 	stack3,x
.add4	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.add5					Comp_Equal:
.add5	38		sec				sec
.add6	80 01		bra $add9			bra 	Comp_CheckEqual
.add8					Comp_NotEqual:
.add8	18		clc				clc
.add9					Comp_CheckEqual:
.add9	08		php				php
.adda	ca		dex				dex
.addb	bd 00 0c	lda $0c00,x			lda		stack0,x
.adde	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.ade1	d0 16		bne $adf9			bne 	_CCENonZero
.ade3	bd 00 0d	lda $0d00,x			lda		stack1,x
.ade6	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ade9	d0 0e		bne $adf9			bne 	_CCENonZero
.adeb	bd 00 0e	lda $0e00,x			lda		stack2,x
.adee	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.adf1	d0 06		bne $adf9			bne 	_CCENonZero
.adf3	bd 00 0f	lda $0f00,x			lda		stack3,x
.adf6	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.adf9					_CCENonZero:
.adf9	f0 02		beq $adfd			beq 	_CCENotSet
.adfb	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.adfd					_CCENotSet:
.adfd					CompCheckFlip:
.adfd	28		plp				plp 								; if carry set, we want $FF if equal
.adfe	90 02		bcc $ae02			bcc 	CompReturn
.ae00	49 ff		eor #$ff			eor 	#$FF
.ae02					CompReturn:
.ae02	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.ae05	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae08	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae0b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae0e	60		rts				rts
.ae0f					Comp_Less:
.ae0f	18		clc				clc
.ae10	80 01		bra $ae13			bra 	Comp_LessCont
.ae12					Comp_GreaterEqual:
.ae12	38		sec				sec
.ae13					Comp_LessCont:
.ae13	08		php				php
.ae14	ca		dex				dex
.ae15	38		sec				sec
.ae16	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae19	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae1c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae1f	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae22	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae25	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae28	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae2b	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae2e	50 02		bvc $ae32			bvc 	_CLNoFlip 					; unsigned -> signed
.ae30	49 80		eor #$80			eor 	#$80
.ae32					_CLNoFlip:
.ae32	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae34	f0 c7		beq $adfd			beq 	CompCheckFlip
.ae36	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae38	80 c3		bra $adfd			bra 	CompCheckFlip
.ae3a					Comp_LessEqual:
.ae3a	38		sec				sec
.ae3b	80 01		bra $ae3e			bra 	Comp_LessEqualCont
.ae3d					Comp_Greater:
.ae3d	18		clc				clc
.ae3e					Comp_LessEqualCont:
.ae3e	08		php				php
.ae3f	ca		dex				dex
.ae40	38		sec				sec
.ae41	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae44	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae47	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae4a	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae4d	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae50	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae53	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae56	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae59	50 02		bvc $ae5d			bvc 	_CLENoFlip 					; unsigned -> signed
.ae5b	49 80		eor #$80			eor 	#$80
.ae5d					_CLENoFlip:
.ae5d	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae5f	f0 9c		beq $adfd			beq 	CompCheckFlip
.ae61	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae63	80 98		bra $adfd			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae65					Allocate:
.ae65	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae68	29 80		and #$80			and 	#$80
.ae6a	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae6d	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae70	d0 26		bne $ae98			bne 	_ALBad
.ae72	18		clc				clc 								; add to varmemory pointer saving
.ae73	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae76	48		pha				pha
.ae77	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae7a	8d 88 10	sta $1088			sta 	VarMemory
.ae7d	ad 89 10	lda $1089			lda 	VarMemory+1
.ae80	48		pha				pha
.ae81	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae84	8d 89 10	sta $1089			sta 	VarMemory+1
.ae87	68		pla				pla 								; pop and save
.ae88	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae8b	68		pla				pla
.ae8c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae8f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae92	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.ae95	b0 01		bcs $ae98			bcs 	_ALBad
.ae97	60		rts				rts
.ae98					_ALBad:
.ae98	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>ae9b	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>aea3	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.aea5					Cmd_List:
.aea5	20 26 a5	jsr $a526			jsr 	ResetCodePointer 			; back to the beginning
.aea8	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.aeaa	64 19		stz $19				stz 	zTemp2+1
.aeac	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.aeae	f0 0b		beq $aebb			beq 	_CLINone
.aeb0	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.aeb3	85 18		sta $18				sta 	zTemp2
.aeb5	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aeb8	85 19		sta $19				sta 	zTemp2+1
.aeba	ca		dex				dex 								; and pop the tos
.aebb					_CLINone:
.aebb	a9 18		lda #$18			lda 	#24 						; list this many lines
.aebd	85 16		sta $16				sta 	zTemp1
.aebf					_CLILoop
.aebf	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aec1	f0 24		beq $aee7			beq 	_CLIEnd
.aec3	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aec5	38		sec				sec
.aec6	b1 10		lda ($10),y			lda 	(codePtr),y
.aec8	e5 18		sbc $18				sbc 	zTemp2
.aeca	c8		iny				iny
.aecb	b1 10		lda ($10),y			lda 	(codePtr),y
.aecd	e5 19		sbc $19				sbc 	zTemp2+1
.aecf	90 09		bcc $aeda			bcc 	_CLISkip
.aed1	da		phx				phx
.aed2	20 ea ae	jsr $aeea			jsr 	ListCurrent 				; list the line.
.aed5	fa		plx				plx
.aed6	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aed8	f0 0d		beq $aee7			beq 	_CLIEnd
.aeda					_CLISkip:
.aeda	18		clc				clc
.aedb	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aedd	65 10		adc $10				adc 	codePtr
.aedf	85 10		sta $10				sta 	codePtr
.aee1	90 dc		bcc $aebf			bcc 	_CLILoop
.aee3	e6 11		inc $11				inc 	codePtr+1
.aee5	80 d8		bra $aebf			bra 	_CLILoop
.aee7					_CLIEnd:
.aee7	4c 3b a0	jmp $a03b			jmp 	WarmStart
.aeea					ListCurrent:
.aeea	a9 05		lda #$05			lda 	#CTH_LINENO
.aeec	20 a9 a2	jsr $a2a9			jsr 	ExternColour 				; set colour
.aeef	a0 01		ldy #$01			ldy 	#1							; print line#
.aef1	b1 10		lda ($10),y			lda 	(codePtr),y
.aef3	48		pha				pha
.aef4	c8		iny				iny
.aef5	b1 10		lda ($10),y			lda 	(codePtr),y
.aef7	a8		tay				tay
.aef8	68		pla				pla
.aef9	20 24 a6	jsr $a624			jsr 	ErrorPrint16
.aefc	a8		tay				tay
.aefd					_LCPadOut:
.aefd	a9 20		lda #$20			lda 	#' '
.aeff	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af02	c8		iny				iny
.af03	c0 05		cpy #$05			cpy 	#5
.af05	d0 f6		bne $aefd			bne 	_LCPadOut
.af07	a0 03		ldy #$03			ldy 	#3 							; start here
.af09					_LCLoop:
.af09	a9 20		lda #$20			lda 	#' '						; space
.af0b	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af0e					_LCLoopNoSpace:
.af0e	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.af10	30 3e		bmi $af50			bmi 	_LCIdentConst 				; identifier or constant
.af12	d0 05		bne $af19			bne 	_LCStringToken
.af14	a9 0d		lda #$0d			lda 	#13
.af16	4c 9f a2	jmp $a29f			jmp 	ExternPrint
.af19					_LCStringToken:
.af19	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af1b	90 0c		bcc $af29			bcc		_LCString
.af1d	20 91 af	jsr $af91			jsr 	ListPrintToken
.af20	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af22	c8		iny				iny 								; advance pointer
.af23	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af25	f0 e7		beq $af0e			beq 	_LCLoopNoSpace
.af27	80 e0		bra $af09			bra 	_LCLoop 					; go round again.
.af29					_LCString:
.af29	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af2a	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af2c	a2 22		ldx #$22			ldx 	#'"'
.af2e	b0 04		bcs $af34			bcs 	_LCSSkip
.af30	a9 07		lda #$07			lda 	#CTH_COMMENT
.af32	a2 27		ldx #$27			ldx 	#"'"
.af34					_LCSSkip:
.af34	20 a9 a2	jsr $a2a9			jsr 	ExternColour 				; set colour
.af37	8a		txa				txa
.af38	48		pha				pha 								; save end quote on stack.
.af39	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af3c	c8		iny				iny 								; skip type size
.af3d	c8		iny				iny
.af3e					_LCSPrint:
.af3e	b1 10		lda ($10),y			lda 	(codePtr),y
.af40	c8		iny				iny
.af41	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af43	f0 05		beq $af4a			beq 	_LCSExit
.af45	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af48	80 f4		bra $af3e			bra 	_LCSPrint
.af4a					_LCSExit:
.af4a	68		pla				pla
.af4b	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af4e	80 b9		bra $af09			bra 	_LCLoop
.af50					_LCIdentConst:
.af50	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af52	90 1e		bcc $af72			bcc 	_LCConstant
.af54	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af56	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.af59					_LCCIdLoop:
.af59	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af5b	29 1f		and #$1f			and 	#$1F 						; convert
.af5d	18		clc				clc
.af5e	69 41		adc #$41			adc 	#'A'
.af60	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af62	d0 02		bne $af66			bne 	_LCCNotDot
.af64	a9 2e		lda #$2e			lda 	#'.'
.af66					_LCCNotDot:
.af66	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af69	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af6b	c8		iny				iny
.af6c	c9 e0		cmp #$e0			cmp 	#$E0
.af6e	b0 99		bcs $af09			bcs 	_LCLoop
.af70	80 e7		bra $af59			bra 	_LCCIdLoop
.af72					_LCConstant:
.af72	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.af74	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.af77	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.af79	20 eb a3	jsr $a3eb			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.af7c	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.af7f	48		pha				pha
.af80	20 49 a6	jsr $a649			jsr 	IntegerToString 			; this could corrupt stack if full :)
.af83	20 37 a6	jsr $a637			jsr 	ErrorPrintIntegerBuffer
.af86	68		pla				pla 								; sign back
.af87	10 80		bpl $af09			bpl 	_LCLoop
.af89	a9 2d		lda #$2d			lda 	#"-"
.af8b	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af8e	4c 09 af	jmp $af09			jmp 	_LCLoop
.af91					ListPrintToken:
.af91	5a		phy				phy
.af92	48		pha				pha 								; token colour
.af93	a9 02		lda #$02			lda 	#CTH_TOKEN
.af95	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.af98	fa		plx				plx
.af99	a9 08		lda #$08			lda 	#KeywordText & $FF
.af9b	85 14		sta $14				sta 	zTemp0
.af9d	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.af9f	85 15		sta $15				sta 	zTemp0+1
.afa1					_LPTLoop:
.afa1	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.afa3	f0 0e		beq $afb3			beq 	_LPTFound
.afa5	ca		dex				dex
.afa6	b2 14		lda ($14)			lda 	(zTemp0)
.afa8	38		sec				sec									; add 1, it's length+name
.afa9	65 14		adc $14				adc 	zTemp0
.afab	85 14		sta $14				sta 	zTemp0
.afad	90 f2		bcc $afa1			bcc 	_LPTLoop
.afaf	e6 15		inc $15				inc 	zTemp0+1
.afb1	80 ee		bra $afa1			bra 	_LPTLoop
.afb3					_LPTFound:
.afb3	a0 01		ldy #$01			ldy 	#1 							; start here.
.afb5					_LPTShow:
.afb5	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afb7	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afb9	90 06		bcc $afc1			bcc 	_LPTExit
.afbb	c8		iny				iny
.afbc	20 9f a2	jsr $a29f			jsr 	ExternPrint
.afbf	80 f4		bra $afb5			bra 	_LPTShow
.afc1					_LPTExit:
.afc1	7a		ply				ply
.afc2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.afc3					Cmd_Renumber:
.afc3	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.afc5	85 16		sta $16				sta 	zTemp1
.afc7	a9 11		lda #$11			lda 	#ProgramStart >> 8
.afc9	85 17		sta $17				sta 	zTemp1+1
.afcb	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.afcd	85 18		sta $18				sta 	zTemp2
.afcf	a9 03		lda #$03			lda 	#1000 >> 8
.afd1	85 19		sta $19				sta 	zTemp2+1
.afd3					_CRLoop:
.afd3	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.afd5	f0 23		beq $affa			beq 	_CRExit
.afd7	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.afd9	a5 18		lda $18				lda 	zTemp2
.afdb	91 16		sta ($16),y			sta 	(zTemp1),y
.afdd	c8		iny				iny
.afde	a5 19		lda $19				lda 	zTemp2+1
.afe0	91 16		sta ($16),y			sta 	(zTemp1),y
.afe2	18		clc				clc 								; add 10 to new number
.afe3	a5 18		lda $18				lda 	zTemp2
.afe5	69 0a		adc #$0a			adc 	#10
.afe7	85 18		sta $18				sta 	zTemp2
.afe9	90 02		bcc $afed			bcc 	_CRNoCarry
.afeb	e6 19		inc $19				inc 	zTemp2+1
.afed					_CRNoCarry:
.afed	18		clc				clc 								; go to next line
.afee	b2 16		lda ($16)			lda 	(zTemp1)
.aff0	65 16		adc $16				adc 	zTemp1
.aff2	85 16		sta $16				sta 	zTemp1
.aff4	90 dd		bcc $afd3			bcc 	_CRLoop
.aff6	e6 17		inc $17				inc 	zTemp1+1
.aff8	80 d9		bra $afd3			bra 	_CRLoop
.affa					_CRExit:
.affa	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.affb					System_RUN:
.affb	20 31 a5	jsr $a531			jsr		ResetForRun 				; clear vars, stacks etc.
.affe	20 26 a5	jsr $a526			jsr 	ResetCodePointer 			; point to first thing to do.
.b001	4c 6e a3	jmp $a36e			jmp 	Execute						; and run
.b004					System_END:
.b004	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b007					System_STOP:
.b007	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b00a	53 54 4f 50 00					.text 	"STOP",0
.b00f					System_Assert:
.b00f	ca		dex				dex
.b010	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b013	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b016	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b019	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b01c	d0 0a		bne $b028			bne 	_SAOkay
.b01e	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b021	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b028	60		rts		_SAOkay:rts
.b029					System_New:
.b029	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b02c	20 31 a5	jsr $a531			jsr		ResetForRun 				; clear vars, stacks etc.
.b02f	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b032					System_Old:
.b032	20 26 a5	jsr $a526			jsr 	ResetCodePointer 			; start of first line.
.b035					_SOFindZero:
.b035	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b037	f0 15		beq $b04e			beq 	_SOFoundEnd
.b039	c8		iny				iny
.b03a	d0 f9		bne $b035			bne 	_SOFindZero
.b03c	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b03f	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b047	45 43 4f 56 45 52 00
.b04e					_SOFoundEnd:
.b04e	c8		iny				iny 								; update the offset
.b04f	8c 00 11	sty $1100			sty 	ProgramStart
.b052	20 31 a5	jsr $a531			jsr 	ResetForRun 				; redo all stacks etc.
.b055	60		rts				rts
.b056					System_Sys:
.b056	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b059	85 14		sta $14				sta 	zTemp0
.b05b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b05e	85 15		sta $15				sta 	zTemp0+1
.b060	ca		dex				dex
.b061	da		phx				phx
.b062	5a		phy				phy
.b063	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b066	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b069	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b06c	20 7b b0	jsr $b07b			jsr 	_SSCall 					; effectively jsr (zTemp)
.b06f	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b072	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b075	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b078	7a		ply				ply
.b079	fa		plx				plx
.b07a	60		rts				rts
.b07b	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b07e					System_ShowStack:
.b07e	da		phx				phx 								; save stack
.b07f	5a		phy				phy
.b080	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b082	a9 5b		lda #$5b			lda 	#"["
.b084	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b087	e0 00		cpx #$00			cpx 	#0 							; empty
.b089	f0 14		beq $b09f			beq 	_SSEnd
.b08b	a2 01		ldx #$01			ldx 	#1 							; start here
.b08d					_SSLoop:
.b08d	20 49 a6	jsr $a649			jsr 	IntegerToString 			; print TOS
.b090	20 37 a6	jsr $a637			jsr 	ErrorPrintIntegerBuffer
.b093	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b095	f0 08		beq $b09f			beq 	_SSEnd
.b097	e8		inx				inx	 								; advance pointer print ,
.b098	a9 2c		lda #$2c			lda 	#','
.b09a	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b09d	80 ee		bra $b08d			bra 	_SSLoop
.b09f					_SSEnd:
.b09f	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b0a1	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b0a4	a9 0d		lda #$0d			lda 	#13
.b0a6	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b0a9	7a		ply				ply
.b0aa	fa		plx				plx
.b0ab	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b0ac					System_Save:
.b0ac	20 57 a5	jsr $a557			jsr 	ResetVarMemory 				; make sure start/end are right
.b0af	20 c2 b0	jsr $b0c2			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0b2	20 e5 a2	jsr $a2e5			jsr 	ExternSave
.b0b5	60		rts				rts
.b0b6					System_Load:
.b0b6	20 c2 b0	jsr $b0c2			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0b9	20 1f a3	jsr $a31f			jsr 	ExternLoad
.b0bc	20 31 a5	jsr $a531			jsr 	ResetForRun 				; re-initialise everything
.b0bf	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b0c2					SLGetFileName:
.b0c2	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0c4	f0 17		beq $b0dd			beq 	_SLFNFail
.b0c6	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0c9	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0cc	d0 0f		bne $b0dd			bne 	_SLFNFail
.b0ce	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b0d1	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b0d3	d0 08		bne $b0dd			bne 	_SLFNFail
.b0d5	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b0d7	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b0da	85 14		sta $14				sta 	zTemp0
.b0dc	60		rts				rts
.b0dd					_SLFNFail:
.b0dd	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b0e0	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b0e8	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b0ed					Identifier:
.b0ed	88		dey				dey 								; wind back to identifier start
.b0ee	20 3d a4	jsr $a43d			jsr 	IdentifierSearch 			; try to find it.
.b0f1	90 2f		bcc $b122			bcc 	_IDUnknown 					; not known, give up.
.b0f3	48		pha				pha
.b0f4					_IDSkip:
.b0f4	b1 10		lda ($10),y			lda 	(codePtr),y
.b0f6	c8		iny				iny
.b0f7	c9 e0		cmp #$e0			cmp 	#$E0
.b0f9	90 f9		bcc $b0f4			bcc 	_IDSkip
.b0fb	68		pla				pla
.b0fc	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b0fe	d0 36		bne $b136			bne 	_IDCall
.b100	20 ea b1	jsr $b1ea			jsr 	IndexCheck 					; check index/subscript
.b103	5a		phy				phy
.b104	e8		inx				inx 								; make space on stack
.b105	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b107	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b109	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b10c	c8		iny				iny
.b10d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b10f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b112	c8		iny				iny
.b113	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b115	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b118	c8		iny				iny
.b119	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b11b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b11e	7a		ply				ply
.b11f	4c 6e a3	jmp $a36e			jmp 	Execute
.b122					_IDUnknown:
.b122	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b125	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b12d	56 41 52 49 41 42 4c 45 00
.b136					_IDCall:
.b136	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b138	d0 1b		bne $b155			bne 	_IDCode
.b13a	20 a6 b3	jsr $b3a6			jsr 	StructPushCurrent 			; push current on the stack.
.b13d	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b13f	c6 12		dec $12				dec 	StructSP
.b141	92 12		sta ($12)			sta 	(StructSP)
.b143	a0 01		ldy #$01			ldy 	#1 							; line address
.b145	b2 22		lda ($22)			lda 	(idDataAddr)
.b147	85 10		sta $10				sta 	codePtr
.b149	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b14b	85 11		sta $11				sta 	codePtr+1
.b14d	a0 03		ldy #$03			ldy 	#3 							; line position
.b14f	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b151	a8		tay				tay
.b152	4c 6e a3	jmp $a36e			jmp 	Execute
.b155					_IDCode:
.b155	b2 22		lda ($22)			lda 	(idDataAddr) 				; copy the address
.b157	85 14		sta $14				sta 	zTemp0
.b159	5a		phy				phy
.b15a	a0 01		ldy #$01			ldy 	#1
.b15c	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b15e	85 15		sta $15				sta 	zTemp0+1
.b160	7a		ply				ply
.b161	20 67 b1	jsr $b167			jsr 	_IDCallZTemp0 				; call the routine
.b164	4c 6e a3	jmp $a36e			jmp 	Execute
.b167					_IDCallZTemp0:
.b167	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.b16a					ProcReturn:
.b16a					ProcReturn2:
.b16a	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b16c	c9 43		cmp #$43			cmp 	#STM_CALL
.b16e	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b170	20 da b3	jsr $b3da			jsr 	StructPopCurrent
.b173	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b175	20 a0 b3	jsr $b3a0			jsr 	StructPopCount
.b178	60		rts				rts
.b179					WriteVariable:
.b179	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b17b	c9 c0		cmp #$c0			cmp 	#$C0
.b17d	90 5d		bcc $b1dc			bcc 	_WVTypeError
.b17f	20 3d a4	jsr $a43d			jsr 	IdentifierSearch 			; does it exist
.b182	90 06		bcc $b18a			bcc 	_WVNoIdentifier
.b184	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b186	f0 12		beq $b19a			beq 	_WVWriteTOS 				; if so write TOS to it.
.b188	80 52		bra $b1dc			bra 	_WVTypeError 				; not, then can't do anything.
.b18a					_WVNoIdentifier:
.b18a	5a		phy				phy 								; get current line number
.b18b	a0 01		ldy #$01			ldy 	#1
.b18d	b1 10		lda ($10),y			lda 	(codePtr),y
.b18f	c8		iny				iny
.b190	11 10		ora ($10),y			ora 	(codePtr),y
.b192	f0 2e		beq $b1c2			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b194	7a		ply				ply
.b195	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b197	20 a4 a4	jsr $a4a4			jsr 	IdentifierCreate 			; try to find it
.b19a					_WVWriteTOS:
.b19a	88		dey				dey 								; skip over identifier.
.b19b					_WVSkipIdentifier:
.b19b	b1 10		lda ($10),y			lda 	(codePtr),y
.b19d	c8		iny				iny
.b19e	c9 e0		cmp #$e0			cmp 	#$E0
.b1a0	90 f9		bcc $b19b			bcc 	_WVSkipIdentifier
.b1a2	20 ea b1	jsr $b1ea			jsr 	IndexCheck 					; check index/subscript
.b1a5	5a		phy				phy									; copy TOS in
.b1a6	a0 00		ldy #$00			ldy 	#0
.b1a8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b1ab	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1ad	c8		iny				iny
.b1ae	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1b1	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1b3	c8		iny				iny
.b1b4	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b1b7	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1b9	c8		iny				iny
.b1ba	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b1bd	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1bf	7a		ply				ply
.b1c0	ca		dex				dex 								; drop
.b1c1	60		rts				rts									; go back and execute again.
.b1c2					_WVCantCreate:
.b1c2	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b1c5	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b1cd	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b1dc					_WVTypeError:
.b1dc	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b1df	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b1e7	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b1ea					IndexCheck:
.b1ea	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b1ec	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b1ee	d0 10		bne $b200			bne 	_ICExit
.b1f0	c8		iny				iny
.b1f1	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b1f3	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b1f5	f0 23		beq $b21a			beq 	_ICArrayAccess
.b1f7	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b1f9	c9 80		cmp #$80			cmp 	#$80
.b1fb	f0 04		beq $b201			beq 	_ICConstAccess
.b1fd					_ICSyntax:
.b1fd	4c bf a5	jmp $a5bf			jmp 	SyntaxError
.b200					_ICExit:
.b200	60		rts				rts
.b201					_ICConstAccess:
.b201	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b203	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b205	85 16		sta $16				sta 	zTemp1
.b207	64 17		stz $17				stz 	zTemp1+1
.b209	c8		iny				iny
.b20a	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b20c	c8		iny				iny
.b20d	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b20f	d0 ec		bne $b1fd			bne 	_ICSyntax
.b211	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b213	c8		iny				iny
.b214	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b216	d0 e5		bne $b1fd			bne 	_ICSyntax
.b218	80 0c		bra $b226			bra 	_ICAddSubscript
.b21a					_ICArrayAccess:
.b21a	c8		iny				iny 								; point to next
.b21b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b21e	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b220	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b223	85 17		sta $17				sta 	zTemp1+1
.b225	ca		dex				dex
.b226					_ICAddSubscript:
.b226	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b228	26 17		rol $17				rol 	zTemp1+1
.b22a	06 16		asl $16				asl 	zTemp1
.b22c	26 17		rol $17				rol 	zTemp1+1
.b22e	5a		phy				phy
.b22f	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b231	a0 01		ldy #$01			ldy 	#1
.b233	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b235	c8		iny				iny
.b236	11 22		ora ($22),y			ora 	(idDataAddr),y
.b238	c8		iny				iny
.b239	11 22		ora ($22),y			ora 	(idDataAddr),y
.b23b	f0 17		beq $b254			beq 	_ICZero
.b23d	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b23e	b2 22		lda ($22)			lda 	(idDataAddr)
.b240	65 16		adc $16				adc 	zTemp1
.b242	48		pha				pha
.b243	a0 01		ldy #$01			ldy 	#1
.b245	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b247	65 17		adc $17				adc 	zTemp1+1
.b249	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b24b	68		pla				pla
.b24c	85 22		sta $22				sta 	idDataAddr
.b24e	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b250	64 25		stz $25				stz 	idDataAddr+3
.b252	7a		ply				ply
.b253	60		rts				rts
.b254					_ICZero:
.b254	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b257	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b25f	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b26b					Struct_IF:
.b26b	ca		dex				dex 								; drop TOS
.b26c	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check TOS
.b26f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b272	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b275	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b278	f0 01		beq $b27b			beq 	_SIFSkipForward
.b27a	60		rts				rts
.b27b					_SIFSkipForward:
.b27b	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b27d	4c 86 b2	jmp $b286			jmp 	StructSkipForward
.b280					Struct_ELSE:
.b280	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b282	4c 86 b2	jmp $b286			jmp 	StructSkipForward
.b285					Struct_ENDIF:
.b285	60		rts				rts
.b286					StructSkipForward:
.b286	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b288					_SSFLoop:
.b288	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b28a	f0 14		beq $b2a0			beq 	_SSFExit 					; if EOL then exit
.b28c	c8		iny				iny 								; advance past it
.b28d	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b28f	f0 0f		beq $b2a0			beq 	_SSFExit
.b291	c5 14		cmp $14				cmp 	zTemp0
.b293	f0 0b		beq $b2a0			beq 	_SSFExit
.b295	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b297	b0 ef		bcs $b288			bcs 	_SSFLoop
.b299	98		tya				tya 								; add length offset
.b29a	3a		dec a				dec 	a
.b29b	71 10		adc ($10),y			adc 	(codePtr),y
.b29d	a8		tay				tay
.b29e	80 e8		bra $b288			bra 	_SSFLoop
.b2a0					_SSFExit:
.b2a0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b2a1					Command_For:
.b2a1	20 a6 b3	jsr $b3a6			jsr 	StructPushCurrent 			; push current on the stack.
.b2a4	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b2a7	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b2aa	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b2ad	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b2b0	f0 34		beq $b2e6			beq 	_CFZero
.b2b2	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b2b5	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b2b7	c6 12		dec $12				dec 	StructSP
.b2b9	92 12		sta ($12)			sta 	(StructSP)
.b2bb	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b2be	49 ff		eor #$ff			eor 	#$FF
.b2c0	c6 12		dec $12				dec 	StructSP
.b2c2	92 12		sta ($12)			sta 	(StructSP)
.b2c4	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b2c7	49 ff		eor #$ff			eor 	#$FF
.b2c9	c6 12		dec $12				dec 	StructSP
.b2cb	92 12		sta ($12)			sta 	(StructSP)
.b2cd	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b2d0	49 ff		eor #$ff			eor 	#$FF
.b2d2	c6 12		dec $12				dec 	StructSP
.b2d4	92 12		sta ($12)			sta 	(StructSP)
.b2d6	ca		dex				dex 								; pop stack value
.b2d7	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b2d9	c6 12		dec $12				dec 	StructSP
.b2db	92 12		sta ($12)			sta 	(StructSP)
.b2dd	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2df	85 24		sta $24				sta 	ForAddr
.b2e1	a5 13		lda $13				lda 	StructSP+1
.b2e3	85 25		sta $25				sta 	ForAddr+1
.b2e5	60		rts				rts
.b2e6					_CFZero:
.b2e6	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b2e9	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b2f1	54 20 5a 45 52 4f 00
.b2f8					Command_Next:
.b2f8	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b2fa	c9 46		cmp #$46			cmp 	#STM_FOR
.b2fc	d0 30		bne $b32e			bne 	_CNNoFor
.b2fe	5a		phy				phy
.b2ff	a0 00		ldy #$00			ldy 	#0
.b301					_CNIncrement:
.b301	c8		iny				iny
.b302	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b304	1a		inc a				inc 	a
.b305	91 12		sta ($12),y			sta 	(StructSP),y
.b307	f0 f8		beq $b301			beq		_CNIncrement 				; carry out.
.b309	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b30b	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b30d	c8		iny				iny 								; will all be $FF
.b30e	31 12		and ($12),y			and 	(StructSP),y
.b310	c8		iny				iny
.b311	31 12		and ($12),y			and 	(StructSP),y
.b313	c8		iny				iny
.b314	31 12		and ($12),y			and 	(StructSP),y
.b316	7a		ply				ply 								; restore Y
.b317	1a		inc a				inc 	a 							; so this will be zero last time round
.b318	d0 06		bne $b320			bne 	_CNLoop 					; loop back if non-zero
.b31a	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b31c	20 a0 b3	jsr $b3a0			jsr 	StructPopCount
.b31f	60		rts				rts
.b320					_CNLoop:
.b320	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b322	85 24		sta $24				sta 	ForAddr
.b324	a5 13		lda $13				lda 	StructSP+1
.b326	85 25		sta $25				sta 	ForAddr+1
.b328	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b32a	20 da b3	jsr $b3da			jsr 	StructPopCurrent
.b32d	60		rts				rts
.b32e					_CNNoFor:
.b32e	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b331	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b339	46 4f 52 00
.b33d					Command_Index:
.b33d	5a		phy				phy
.b33e	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b340	e8		inx				inx
.b341	38		sec				sec
.b342	a9 fe		lda #$fe			lda 	#$FE
.b344	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b346	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b349	c8		iny				iny
.b34a	a9 ff		lda #$ff			lda 	#$FF
.b34c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b34e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b351	c8		iny				iny
.b352	a9 ff		lda #$ff			lda 	#$FF
.b354	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b356	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b359	c8		iny				iny
.b35a	a9 ff		lda #$ff			lda 	#$FF
.b35c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b35e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b361	7a		ply				ply
.b362	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b363					Command_Repeat:
.b363	20 a6 b3	jsr $b3a6			jsr 	StructPushCurrent 			; push current on the stack.
.b366	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b368	c6 12		dec $12				dec 	StructSP
.b36a	92 12		sta ($12)			sta 	(StructSP)
.b36c	60		rts				rts
.b36d					Command_Until:
.b36d	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b36f	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b371	d0 1b		bne $b38e			bne 	_CUNoRepeat
.b373	ca		dex				dex 								; pop
.b374	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b377	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b37a	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b37d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b380	f0 06		beq $b388			beq 	_CULoop
.b382	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b384	20 a0 b3	jsr $b3a0			jsr 	StructPopCount
.b387	60		rts				rts
.b388					_CULoop:
.b388	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b38a	20 da b3	jsr $b3da			jsr 	StructPopCurrent
.b38d	60		rts				rts
.b38e					_CUNoRepeat:
.b38e	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b391	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b399	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b3a0					StructPopCount:
.b3a0	18		clc				clc
.b3a1	65 12		adc $12				adc 	StructSP
.b3a3	85 12		sta $12				sta 	StructSP
.b3a5	60		rts				rts
.b3a6					StructPushCurrent:
.b3a6	a5 12		lda $12				lda 	StructSP 					; check space for more
.b3a8	c9 0a		cmp #$0a			cmp 	#10
.b3aa	90 18		bcc $b3c4			bcc 	_SPCSpace
.b3ac	a9 00		lda #$00			lda 	#0							; push bank
.b3ae	c6 12		dec $12				dec 	StructSP
.b3b0	92 12		sta ($12)			sta 	(StructSP)
.b3b2	98		tya				tya									; y Offset
.b3b3	c6 12		dec $12				dec 	StructSP
.b3b5	92 12		sta ($12)			sta 	(StructSP)
.b3b7	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b3b9	c6 12		dec $12				dec 	StructSP
.b3bb	92 12		sta ($12)			sta 	(StructSP)
.b3bd	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b3bf	c6 12		dec $12				dec 	StructSP
.b3c1	92 12		sta ($12)			sta 	(StructSP)
.b3c3	60		rts				rts
.b3c4					_SPCSpace:
.b3c4	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b3c7	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b3cf	54 41 43 4b 20 53 50 41 43 45 00
.b3da					StructPopCurrent:
.b3da	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b3dc	85 10		sta $10				sta 	codePtr
.b3de	c8		iny				iny
.b3df	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b3e1	85 11		sta $11				sta 	codePtr+1
.b3e3	c8		iny				iny
.b3e4	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b3e6	a8		tay				tay
.b3e7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/hashes.inc

.b3e8					libfunc_1000:
>b3e8	00 00					.word 0
>b3ea	ca b5 00 00				.dword Vera_Sprite
>b3ee	f2 b3					.word libfunc_1000_name
>b3f0	00 43					.byte 0,'C'
.b3f2					libfunc_1000_name:
>b3f2	d5 c4 d1 c0 df f2			.byte $d5,$c4,$d1,$c0,$df,$f2
.b3f8					libfunc_1001:
>b3f8	00 00					.word 0
>b3fa	d5 b4 00 00				.dword System_Random
>b3fe	02 b4					.word libfunc_1001_name
>b400	00 43					.byte 0,'C'
.b402					libfunc_1001_name:
>b402	d1 cd e3				.byte $d1,$cd,$e3
.b405					libfunc_1002:
>b405	f8 b3					.word libfunc_1001
>b407	75 b5 00 00				.dword Vera_SetAddress
>b40b	0f b4					.word libfunc_1002_name
>b40d	00 43					.byte 0,'C'
.b40f					libfunc_1002_name:
>b40f	d5 c4 d1 c0 df d2 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$d2,$c4,$f3
.b417					libfunc_1003:
>b417	05 b4					.word libfunc_1002
>b419	8f b5 00 00				.dword Vera_GetAddress
>b41d	21 b4					.word libfunc_1003_name
>b41f	00 43					.byte 0,'C'
.b421					libfunc_1003_name:
>b421	d5 c4 d1 c0 df c6 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$c6,$c4,$f3
.b429					libfunc_1004:
>b429	00 00					.word 0
>b42b	a6 b5 00 00				.dword Vera_SetPalette
>b42f	33 b4					.word libfunc_1004_name
>b431	00 43					.byte 0,'C'
.b433					libfunc_1004_name:
>b433	d5 c4 d1 c0 df cf c0 cb			.byte $d5,$c4,$d1,$c0,$df,$cf,$c0,$cb,$c4,$d3,$d3,$e4
>b43b	c4 d3 d3 e4
.b43f					libfunc_1005:
>b43f	29 b4					.word libfunc_1004
>b441	f4 b5 00 00				.dword Vera_SpriteMove
>b445	49 b4					.word libfunc_1005_name
>b447	00 43					.byte 0,'C'
.b449					libfunc_1005_name:
>b449	d5 c4 d1 c0 df d2 df cc			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$cc,$ce,$d5,$e4
>b451	ce d5 e4
.b454					libfunc_1006:
>b454	3f b4					.word libfunc_1005
>b456	3c b6 00 00				.dword Vera_SetSize
>b45a	5e b4					.word libfunc_1006_name
>b45c	00 43					.byte 0,'C'
.b45e					libfunc_1006_name:
>b45e	d5 c4 d1 c0 df d2 df d2			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4
>b466	c8 d9 e4
.b469					libfunc_1007:
>b469	00 00					.word 0
>b46b	d8 b5 00 00				.dword Vera_SpriteDisable
>b46f	73 b4					.word libfunc_1007_name
>b471	00 43					.byte 0,'C'
.b473					libfunc_1007_name:
>b473	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$c5,$e5
>b47b	c5 e5
.b47d					libfunc_1008:
>b47d	00 00					.word 0
>b47f	0c b6 00 00				.dword Vera_SpriteSetup
>b483	87 b4					.word libfunc_1008_name
>b485	00 43					.byte 0,'C'
.b487					libfunc_1008_name:
>b487	d5 c4 d1 c0 df d2 df c6			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7
>b48f	c5 f7
.b491					libfunc_1009:
>b491	00 00					.word 0
>b493	42 b5 00 00				.dword String_Len
>b497	9b b4					.word libfunc_1009_name
>b499	00 43					.byte 0,'C'
.b49b					libfunc_1009_name:
>b49b	d2 d3 d1 df cb c4 ed			.byte $d2,$d3,$d1,$df,$cb,$c4,$ed
.b4a2					libfunc_1010:
>b4a2	91 b4					.word libfunc_1009
>b4a4	d4 b5 00 00				.dword Vera_SpriteEnable
>b4a8	ac b4					.word libfunc_1010_name
>b4aa	00 43					.byte 0,'C'
.b4ac					libfunc_1010_name:
>b4ac	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed
>b4b4	ed
.b4b5					DefaultHashTable:
>b4b5	00 00					.word 0
>b4b7	00 00					.word 0
>b4b9	e8 b3					.word libfunc_1000
>b4bb	17 b4					.word libfunc_1003
>b4bd	54 b4					.word libfunc_1006
>b4bf	69 b4					.word libfunc_1007
>b4c1	00 00					.word 0
>b4c3	7d b4					.word libfunc_1008
>b4c5	00 00					.word 0
>b4c7	00 00					.word 0
>b4c9	00 00					.word 0
>b4cb	00 00					.word 0
>b4cd	00 00					.word 0
>b4cf	a2 b4					.word libfunc_1010
>b4d1	00 00					.word 0
>b4d3	00 00					.word 0

;******  Return to file: main.asm


;******  Processing file: generated/library.inc

.0826					RandomSeed:
>0826							.dword 		?
.b4d5					System_Random:
.b4d5	ad 26 08	lda $0826		lda 	RandomSeed
.b4d8	0d 27 08	ora $0827		ora 	RandomSeed+1
.b4db	0d 28 08	ora $0828		ora 	RandomSeed+2
.b4de	0d 29 08	ora $0829		ora 	RandomSeed+3
.b4e1	d0 09		bne $b4ec		bne 	_SRSeeded
.b4e3	ee 27 08	inc $0827		inc 	RandomSeed+1
.b4e6	ce 29 08	dec $0829		dec 	RandomSeed+3
.b4e9	20 d5 b4	jsr $b4d5		jsr 	System_Random
.b4ec					_SRSeeded:
.b4ec	5a		phy			phy
.b4ed	ac 28 08	ldy $0828		ldy RandomSeed+2 ; will move to RandomSeed+3 at the end
.b4f0	ad 27 08	lda $0827		lda RandomSeed+1
.b4f3	8d 28 08	sta $0828		sta RandomSeed+2
.b4f6	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b4f9	4a		lsr a			lsr
.b4fa	8d 27 08	sta $0827		sta RandomSeed+1 ; reverse: 100011
.b4fd	4a		lsr a			lsr
.b4fe	4a		lsr a			lsr
.b4ff	4a		lsr a			lsr
.b500	4a		lsr a			lsr
.b501	4d 27 08	eor $0827		eor RandomSeed+1
.b504	4a		lsr a			lsr
.b505	4d 27 08	eor $0827		eor RandomSeed+1
.b508	4d 26 08	eor $0826		eor RandomSeed+0 ; combine with original low byte
.b50b	8d 27 08	sta $0827		sta RandomSeed+1
.b50e	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b511	0a		asl a			asl
.b512	4d 29 08	eor $0829		eor RandomSeed+3
.b515	0a		asl a			asl
.b516	0a		asl a			asl
.b517	0a		asl a			asl
.b518	0a		asl a			asl
.b519	4d 29 08	eor $0829		eor RandomSeed+3
.b51c	0a		asl a			asl
.b51d	0a		asl a			asl
.b51e	4d 29 08	eor $0829		eor RandomSeed+3
.b521	8c 29 08	sty $0829		sty RandomSeed+3 ; finish rotating byte 2 into 3
.b524	8d 26 08	sta $0826		sta RandomSeed+0
.b527	e8		inx			inx
.b528	ad 26 08	lda $0826		lda	RandomSeed+0
.b52b	9d 00 0c	sta $0c00,x		sta stack0,x
.b52e	ad 27 08	lda $0827		lda	RandomSeed+1
.b531	9d 00 0d	sta $0d00,x		sta stack1,x
.b534	ad 28 08	lda $0828		lda	RandomSeed+2
.b537	9d 00 0e	sta $0e00,x		sta stack2,x
.b53a	ad 29 08	lda $0829		lda	RandomSeed+3
.b53d	9d 00 0f	sta $0f00,x		sta stack3,x
.b540	7a		ply			ply
.b541	60		rts			rts
.b542					String_Len:
.b542	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy string address
.b545	85 14		sta $14				sta 	zTemp0
.b547	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b54a	85 15		sta $15				sta 	zTemp0+1
.b54c	5a		phy				phy
.b54d	a0 ff		ldy #$ff			ldy 	#255 						; find string length
.b54f	c8		iny		_SLLoop:iny
.b550	c0 ff		cpy #$ff			cpy 	#255 						; cant find EOS.
.b552	f0 13		beq $b567			beq 	_SLFail
.b554	b1 14		lda ($14),y			lda 	(zTemp0),y
.b556	d0 f7		bne $b54f			bne 	_SLLoop
.b558	98		tya				tya
.b559	7a		ply				ply
.b55a	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; return string
.b55d	9e 00 0d	stz $0d00,x			stz 	stack1,x
.b560	9e 00 0e	stz $0e00,x			stz 	stack2,x
.b563	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b566	60		rts				rts
.b567					_SLFail:
.b567	20 e0 a5	jsr $a5e0			jsr 	ErrorHandler
>b56a	4e 4f 54 20 53 54 52 49				.text 	"NOT STRING",0
>b572	4e 47 00
=$9f20					Vera_Base = $9F20
.082a					veraCurrentLayer:
>082a							.byte 		? 						; current layer (0-1)
.082b					veraCurrentSprite:
>082b							.byte 		?						; current sprite (0-127)
.082c					veraSpriteMode:
>082c							.byte 		? 						; 0 4 bit, 1 8 bit
.b575					Vera_SetAddress:
.b575	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b578	8d 20 9f	sta $9f20			sta 	Vera_Base
.b57b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b57e	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b581	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b584	c9 10		cmp #$10			cmp 	#16
.b586	b0 02		bcs $b58a			bcs 	_VSASetInc
.b588	09 10		ora #$10			ora 	#16
.b58a					_VSASetInc:
.b58a	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b58d	ca		dex				dex
.b58e	60		rts				rts
.b58f					Vera_GetAddress:
.b58f	e8		inx				inx
.b590	ad 20 9f	lda $9f20			lda 	Vera_Base
.b593	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b596	ad 21 9f	lda $9f21			lda 	Vera_Base+1
.b599	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b59c	ad 22 9f	lda $9f22			lda 	Vera_Base+2
.b59f	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b5a2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b5a5	60		rts				rts
.b5a6					Vera_SetPalette:
.b5a6	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5a9	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5ac	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5af	29 01		and #$01			and 	#$01
.b5b1	09 10		ora #$10			ora 	#$10
.b5b3	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5b6	a9 1f		lda #$1f			lda 	#$1F
.b5b8	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5bb	ca		dex				dex
.b5bc	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5bf	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5c2	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5c5	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5c8	ca		dex				dex
.b5c9	60		rts				rts
.b5ca					Vera_Sprite:
.b5ca	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5cd	29 7f		and #$7f			and 	#$7F
.b5cf	8d 2b 08	sta $082b			sta 	veraCurrentSprite
.b5d2	ca		dex				dex
.b5d3	60		rts				rts
.b5d4					Vera_SpriteEnable:
.b5d4	a9 01		lda #$01			lda 	#1
.b5d6	80 02		bra $b5da			bra 	Vera_SpriteControl
.b5d8					Vera_SpriteDisable:
.b5d8	a9 00		lda #$00			lda 	#0
.b5da					Vera_SpriteControl:
.b5da	48		pha				pha
.b5db	a9 00		lda #$00			lda 	#$00
.b5dd	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5e0	a9 40		lda #$40			lda 	#$40
.b5e2	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5e5	a9 1f		lda #$1f			lda 	#$1F
.b5e7	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5ea	68		pla				pla
.b5eb	29 01		and #$01			and 	#1
.b5ed	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5f0	9c 23 9f	stz $9f23			stz 	Vera_Base+3
.b5f3	60		rts				rts
.b5f4					Vera_SpriteMove:
.b5f4	a9 02		lda #$02			lda 	#2 							; physical position
.b5f6	20 5a b6	jsr $b65a			jsr 	Vera_CurrentSprite
.b5f9	20 fc b5	jsr $b5fc			jsr 	_VSMOutPosition
.b5fc					_VSMOutPosition:
.b5fc	ca		dex				dex
.b5fd	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b600	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b603	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b606	29 03		and #$03			and 	#$03
.b608	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b60b	60		rts				rts
.b60c					Vera_SpriteSetup:
.b60c	a9 00		lda #$00			lda 	#0
.b60e	20 5a b6	jsr $b65a			jsr 	Vera_CurrentSprite
.b611	ca		dex				dex
.b612	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b615	85 14		sta $14				sta 	zTemp0
.b617	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b61a	85 15		sta $15				sta 	zTemp0+1
.b61c	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.b61f	85 16		sta $16				sta 	zTemp1
.b621	5a		phy				phy
.b622	a0 05		ldy #$05			ldy 	#5
.b624	46 16		lsr $16		_VSSS:	lsr 	zTemp1
.b626	66 15		ror $15				ror 	zTemp0+1
.b628	66 14		ror $14				ror 	zTemp0
.b62a	88		dey				dey
.b62b	d0 f7		bne $b624			bne 	_VSSS
.b62d	7a		ply				ply
.b62e	a5 14		lda $14				lda 	zTemp0
.b630	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b633	a5 15		lda $15				lda 	zTemp0+1
.b635	0d 2c 08	ora $082c			ora 	veraSpriteMode
.b638	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b63b	60		rts				rts
.b63c					Vera_SetSize:
.b63c	a9 06		lda #$06			lda 	#6
.b63e	20 5a b6	jsr $b65a			jsr 	Vera_CurrentSprite
.b641	a9 1c		lda #$1c			lda 	#$1C
.b643	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b646	ca		dex				dex
.b647	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b64a	29 03		and #$03			and 	#3
.b64c	85 14		sta $14				sta 	zTemp0
.b64e	0a		asl a				asl 	a
.b64f	0a		asl a				asl 	a
.b650	05 14		ora $14				ora 	zTemp0
.b652	0a		asl a				asl 	a
.b653	0a		asl a				asl 	a
.b654	0a		asl a				asl 	a
.b655	0a		asl a				asl 	a
.b656	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b659	60		rts				rts
.b65a					Vera_CurrentSprite:
.b65a	48		pha				pha 								; save offset
.b65b	ad 2b 08	lda $082b			lda 	veraCurrentSprite 			; address in zTemp0
.b65e	0a		asl a				asl 	a
.b65f	85 14		sta $14				sta 	zTemp0		 				; sprite# x 2
.b661	64 15		stz $15				stz 	zTemp0+1
.b663	06 14		asl $14				asl 	zTemp0 						; x 8
.b665	26 15		rol $15				rol 	zTemp0+1
.b667	06 14		asl $14				asl 	zTemp0
.b669	68		pla				pla 								; fix up address
.b66a	05 14		ora $14				ora 	zTemp0
.b66c	8d 20 9f	sta $9f20			sta  	Vera_Base+0
.b66f	a5 15		lda $15				lda 	zTemp0+1
.b671	09 50		ora #$50			ora 	#$50
.b673	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b676	a9 1f		lda #$1f			lda 	#$1F
.b678	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b67b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	0c 64 00 81 4e d5 c4 d1			.byte $0c,$64,$00,$81,$4e,$d5,$c4,$d1,$c0,$df,$f2,$00,$0d,$6e,$00,$d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed,$00,$12,$78,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7,$00,$11,$82,$00,$83,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4,$00,$10,$8c,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$00,$07,$96,$00,$a0,$4e,$2f,$00,$11,$a0,$00,$81,$80,$4e,$2f,$31,$20,$20,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$aa,$00,$37,$37,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$06,$b4,$00,$16,$2d,$00,$11,$be,$00,$29,$d5,$d6,$d1,$c8,$d3,$e4,$89,$bc,$a3,$4e,$26,$18,$00,$0c,$c8,$00,$29,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$08,$d2,$00,$8f,$a8,$4e,$2f,$00,$08,$dc,$00,$83,$bf,$4e,$2f,$00,$05,$e6,$00,$37,$00,$06,$f0,$00,$37,$18,$00
>1108	c0 df f2 00 0d 6e 00 d5 c4 d1 c0 df d2 df ce ed
>1118	00 12 78 00 90 80 80 4e d5 c4 d1 c0 df d2 df c6
>1128	c5 f7 00 11 82 00 83 4e d5 c4 d1 c0 df d2 df d2
>1138	c8 d9 e4 00 10 8c 00 90 80 80 4e d5 c4 d1 c0 df
>1148	d2 c4 f3 00 07 96 00 a0 4e 2f 00 11 a0 00 81 80
>1158	4e 2f 31 20 20 d5 d6 d1 c8 d3 e4 00 0d aa 00 37
>1168	37 c0 cd c8 cc c0 d3 e4 00 06 b4 00 16 2d 00 11
>1178	be 00 29 d5 d6 d1 c8 d3 e4 89 bc a3 4e 26 18 00
>1188	0c c8 00 29 c0 cd c8 cc c0 d3 e4 00 08 d2 00 8f
>1198	a8 4e 2f 00 08 dc 00 83 bf 4e 2f 00 05 e6 00 37
>11a8	00 06 f0 00 37 18 00

;******  Return to file: main.asm

>11af	00						.byte 	0

;******  End of listing
