
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Tue Oct  8 23:24:23 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9800					MemoryEnd = $9800 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 6e a2	jsr $a26e			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 91 a0	lda $a091,x			lda 	BootMessage,x
.a00b	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 91 a0	lda $a091,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 87		ldy #$87			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 12 a6	jsr $a612			jsr 	ErrorPrint16
.a01d	a9 0d		lda #$0d			lda 	#13
.a01f	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a022	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a025	20 1a a5	jsr $a51a			jsr 	ResetForRun
.a028	20 0f a5	jsr $a50f			jsr 	ResetCodePointer
.a02b					WarmStart:
.a02b	a9 06		lda #$06			lda 	#COL_CYAN
.a02d	20 99 a2	jsr $a299			jsr 	ExternColour
.a030	a9 4f		lda #$4f			lda 	#"O"
.a032	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a035	a9 4b		lda #$4b			lda 	#"K"
.a037	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a03a	a9 0d		lda #$0d			lda 	#13
.a03c	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a03f					NewCommand:
.a03f	8a		txa				txa
.a040	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a042	9a		txs				txs
.a043	aa		tax				tax
.a044	a9 07		lda #$07			lda 	#COL_WHITE
.a046	20 99 a2	jsr $a299			jsr 	ExternColour
.a049	20 ad a2	jsr $a2ad			jsr 	ExternInput 				; input text
.a04c	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a04e	85 10		sta $10				sta 	codePtr
.a050	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a052	85 11		sta $11				sta 	codePtr+1
.a054	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a056	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a058	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a05a	85 17		sta $17				sta 	zTemp1+1
.a05c	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a05f	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a062	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a065	20 82 a7	jsr $a782			jsr 	Tokenise
.a068	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a06a					SkipSpaces:
.a06a	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a06d	c8		iny				iny
.a06e	c9 20		cmp #$20			cmp 	#' '
.a070	f0 f8		beq $a06a			beq 	SkipSpaces
.a072	c9 30		cmp #$30			cmp 	#'0'
.a074	90 0e		bcc $a084			bcc 	ExecuteCLI
.a076	c9 3a		cmp #$3a			cmp 	#'9'+1
.a078	b0 0a		bcs $a084			bcs 	ExecuteCLI
.a07a	ad 00 09	lda $0900			lda 	InputBuffer
.a07d	c9 20		cmp #$20			cmp 	#' '
.a07f	f0 03		beq $a084			beq 	ExecuteCLI
.a081	4c f1 a8	jmp $a8f1			jmp		EditProgram
.a084					ExecuteCLI:
.a084	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a086	85 10		sta $10				sta 	codePtr
.a088	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a08a	85 11		sta $11				sta 	codePtr+1
.a08c	a0 03		ldy #$03			ldy 	#3
.a08e	4c 5e a3	jmp $a35e			jmp 	Execute 					; and run it
.a091					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a091	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$35,$20,$44,$41,$54,$45,$3a,$30,$38,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a099	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0a9	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0b9	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0c9	39 0d 0d 42 55 49 4c 44 3a 35 20 44 41 54 45 3a
>a0d9	30 38 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0e9	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a0f8					KeywordText:
>a0f8	01 21					.byte $01,$21                          ; $10 !
>a0fa	01 2a					.byte $01,$2a                          ; $11 *
>a0fc	01 2b					.byte $01,$2b                          ; $12 +
>a0fe	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a101	01 2d					.byte $01,$2d                          ; $14 -
>a103	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a106	01 2e					.byte $01,$2e                          ; $16 .
>a108	01 2f					.byte $01,$2f                          ; $17 /
>a10a	01 3b					.byte $01,$3b                          ; $18 ;
>a10c	01 3c					.byte $01,$3c                          ; $19 <
>a10e	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a111	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a114	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a117	01 3d					.byte $01,$3d                          ; $1d =
>a119	01 3e					.byte $01,$3e                          ; $1e >
>a11b	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a11e	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a121	01 40					.byte $01,$40                          ; $21 @
>a123	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a127	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a12d	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a131	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a138	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a13b	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a13e	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a142	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a146	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a14b	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a14f	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a154	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a158	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a15e	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a162	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a165	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a16b	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a170	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a175	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a179	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a180	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a184	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a189	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a18d	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a191	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a195	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a198	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a19d	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1a5	52
>a1a6	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1ad	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1b4	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1b8	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1bd	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1c1	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1c5	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1ca	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1cf	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1d3	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1d9	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1dc	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1df	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1e3	01 5b					.byte $01,$5b                          ; $4b [
>a1e5	01 5d					.byte $01,$5d                          ; $4c ]
>a1e7	01 5e					.byte $01,$5e                          ; $4d ^
>a1e9	01 2b					.byte $01,$2b                          ; $4e {+}
>a1eb	01 2d					.byte $01,$2d                          ; $4f {-}
>a1ed	00					.byte $00
.a1ee					KeywordVectorTable:
>a1ee	ad ab					.word Mem_DPoke                        ; $10 !
>a1f0	cb ac					.word MulInteger32                     ; $11 *
>a1f2	d4 ab					.word Stack_Add                        ; $12 +
>a1f4	d4 aa					.word Unary_Increment                  ; $13 ++
>a1f6	fb ab					.word Stack_Sub                        ; $14 -
>a1f8	e7 aa					.word Unary_Decrement                  ; $15 --
>a1fa	65 b0					.word System_ShowStack                 ; $16 .
>a1fc	14 ad					.word DivInteger32                     ; $17 /
>a1fe	3b b1					.word ProcReturn                       ; $18 ;
>a200	fb ad					.word Comp_Less                        ; $19 <
>a202	09 ab					.word Unary_Shl                        ; $1a <<
>a204	26 ae					.word Comp_LessEqual                   ; $1b <=
>a206	c4 ad					.word Comp_NotEqual                    ; $1c <>
>a208	c1 ad					.word Comp_Equal                       ; $1d =
>a20a	29 ae					.word Comp_Greater                     ; $1e >
>a20c	fe ad					.word Comp_GreaterEqual                ; $1f >=
>a20e	16 ab					.word Unary_Shr                        ; $20 >>
>a210	5b ab					.word Mem_DPeek                        ; $21 @
>a212	8b aa					.word Unary_Absolute                   ; $22 ABS
>a214	51 ae					.word Allocate                         ; $23 ALLOC
>a216	22 ac					.word Stack_And                        ; $24 AND
>a218	f6 af					.word System_Assert                    ; $25 ASSERT
>a21a	80 ab					.word Mem_Poke                         ; $26 C!
>a21c	23 ab					.word Mem_Peek                         ; $27 C@
>a21e	fd a9					.word Stack_Empty                      ; $28 CLR
>a220	ad a5					.word SyntaxError                      ; $29 DEF
>a222	00 aa					.word Stack_Drop                       ; $2a DROP
>a224	02 aa					.word Stack_Dup                        ; $2b DUP
>a226	50 b2					.word Struct_ELSE                      ; $2c ELSE
>a228	eb af					.word System_END                       ; $2d END
>a22a	55 b2					.word Struct_ENDIF                     ; $2e ENDIF
>a22c	57 b2					.word Command_For                      ; $2f FOR
>a22e	3c b2					.word Struct_IF                        ; $30 IF
>a230	f3 b2					.word Command_Index                    ; $31 INDEX
>a232	8c ae					.word Cmd_List                         ; $32 LIST
>a234	9d b0					.word System_Load                      ; $33 LOAD
>a236	a9 ad					.word ModInteger32                     ; $34 MOD
>a238	91 aa					.word Unary_Negate                     ; $35 NEGATE
>a23a	10 b0					.word System_New                       ; $36 NEW
>a23c	ae b2					.word Command_Next                     ; $37 NEXT
>a23e	1c aa					.word Stack_Nip                        ; $38 NIP
>a240	b3 aa					.word Unary_Not                        ; $39 NOT
>a242	19 b0					.word System_Old                       ; $3a OLD
>a244	6e ac					.word Stack_Or                         ; $3b OR
>a246	36 aa					.word Stack_Over                       ; $3c OVER
>a248	aa af					.word Cmd_Renumber                     ; $3d RENUMBER
>a24a	19 b3					.word Command_Repeat                   ; $3e REPEAT
>a24c	3b b1					.word ProcReturn2                      ; $3f RETURN
>a24e	e2 af					.word System_RUN                       ; $40 RUN
>a250	93 b0					.word System_Save                      ; $41 SAVE
>a252	94 ac					.word Stack_Shl                        ; $42 SHL
>a254	97 ac					.word Stack_Shr                        ; $43 SHR
>a256	ee af					.word System_STOP                      ; $44 STOP
>a258	50 aa					.word Stack_Swap                       ; $45 SWAP
>a25a	3d b0					.word System_Sys                       ; $46 SYS
>a25c	23 b3					.word Command_Until                    ; $47 UNTIL
>a25e	92 ab					.word Mem_WPoke                        ; $48 W!
>a260	3c ab					.word Mem_WPeek                        ; $49 W@
>a262	48 ac					.word Stack_Xor                        ; $4a XOR
>a264	ad a5					.word SyntaxError                      ; $4b [
>a266	ad a5					.word SyntaxError                      ; $4c ]
>a268	4a b1					.word WriteVariable                    ; $4d ^
>a26a	ad a5					.word SyntaxError                      ; $4e {+}
>a26c	ad a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a26e					ExternInitialise:
.a26e	a9 07		lda #$07			lda 	#$07 						; set colour
.a270	8d 86 02	sta $0286			sta 	646
.a273	a9 0e		lda #$0e			lda 	#14							; lower case
.a275	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a278	a9 93		lda #$93			lda 	#147 						; clear screen
.a27a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a27d	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a27f	4c 99 a2	jmp $a299			jmp 	ExternColour
.a282					ExternCheckBreak:
.a282	da		phx				phx 								; make sure we keep XY
.a283	5a		phy				phy
.a284	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a287	f0 03		beq $a28c			beq		_ECBExit 					; stopped
.a289	7a		ply				ply 								; restore and exit.
.a28a	fa		plx				plx
.a28b	60		rts				rts
.a28c					_ECBExit:
.a28c	4c 2b a0	jmp $a02b			jmp 	WarmStart
.a28f					ExternPrint:
.a28f	48		pha				pha
.a290	da		phx				phx
.a291	5a		phy				phy
.a292	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a295	7a		ply				ply
.a296	fa		plx				plx
.a297	68		pla				pla
.a298	60		rts				rts
.a299					ExternColour:
.a299	48		pha				pha
.a29a	da		phx				phx
.a29b	aa		tax				tax
.a29c	bd a5 a2	lda $a2a5,x			lda 	_ECTable,x
.a29f	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a2a2	fa		plx				plx
.a2a3	68		pla				pla
.a2a4	60		rts				rts
.a2a5					_ECTable:
>a2a5	90						.byte 	144
>a2a6	1c						.byte 	28
>a2a7	1e						.byte 	30
>a2a8	9e						.byte 	158
>a2a9	1f						.byte 	31
>a2aa	9c						.byte 	156
>a2ab	9f						.byte 	159
>a2ac	05						.byte 	5
.a2ad					ExternInput:
.a2ad	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2af	85 14		sta $14				sta 	zTemp0
.a2b1	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2b3	85 15		sta $15				sta 	zTemp0+1
.a2b5	a9 07		lda #$07			lda 	#COL_WHITE
.a2b7	20 99 a2	jsr $a299			jsr 	ExternColour
.a2ba	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2bd	c9 0d		cmp #$0d			cmp 	#13
.a2bf	f0 0a		beq $a2cb			beq 	_EIExit
.a2c1	92 14		sta ($14)			sta 	(zTemp0)
.a2c3	e6 14		inc $14				inc 	zTemp0
.a2c5	d0 f3		bne $a2ba			bne 	_EIRead
.a2c7	e6 15		inc $15				inc 	zTemp0+1
.a2c9	80 ef		bra $a2ba			bra 	_EIRead
.a2cb	a9 00		lda #$00	_EIExit:lda 	#0
.a2cd	92 14		sta ($14)			sta 	(zTemp0)
.a2cf	a9 0d		lda #$0d			lda 	#13
.a2d1	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a2d4	60		rts				rts
.a2d5					ExternSave:
.a2d5	da		phx				phx
.a2d6	5a		phy				phy
.a2d7	20 3f a3	jsr $a33f			jsr 	EXGetLength 				; get length of file into A
.a2da	a6 14		ldx $14				ldx 	zTemp0
.a2dc	a4 15		ldy $15				ldy 	zTemp0+1
.a2de	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a2e1	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a2e3	a0 00		ldy #$00			ldy 	#0
.a2e5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a2e8	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a2ea	85 c1		sta $c1				sta 	$C1
.a2ec	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a2ee	85 c2		sta $c2				sta 	$C2
.a2f0	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a2f3	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a2f6	a9 c1		lda #$c1			lda 	#$C1
.a2f8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a2fb	b0 03		bcs $a300			bcs 	_ESSave
.a2fd	7a		ply				ply
.a2fe	fa		plx				plx
.a2ff	60		rts				rts
.a300					_ESSave:
.a300	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a303	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a30b	4c 45 44 00
.a30f					ExternLoad:
.a30f	da		phx				phx
.a310	5a		phy				phy
.a311	20 3f a3	jsr $a33f			jsr 	EXGetLength 				; get length of file into A
.a314	a6 14		ldx $14				ldx 	zTemp0
.a316	a4 15		ldy $15				ldy 	zTemp0+1
.a318	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a31b	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a31d	a0 00		ldy #$00			ldy 	#0
.a31f	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a322	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a324	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a326	a9 00		lda #$00			lda 	#0 							; load command
.a328	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a32b	b0 03		bcs $a330			bcs 	_ESLoad
.a32d	7a		ply				ply
.a32e	fa		plx				plx
.a32f	60		rts				rts
.a330					_ESLoad:
.a330	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a333	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a33b	4c 45 44 00
.a33f					EXGetLength:
.a33f	a0 ff		ldy #$ff			ldy 	#255
.a341	c8		iny		_EXGL:	iny
.a342	b1 14		lda ($14),y			lda 	(zTemp0),y
.a344	d0 fb		bne $a341			bne 	_EXGL
.a346	98		tya				tya
.a347	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a348					EXNextLine:
.a348	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a34a	f0 0f		beq $a35b			beq 	_EXNLWarmStart
.a34c	18		clc				clc 								; advance code pointer to next line
.a34d	65 10		adc $10				adc 	codePtr
.a34f	85 10		sta $10				sta 	codePtr
.a351	90 02		bcc $a355			bcc 	_EXNLNoBump
.a353	e6 11		inc $11				inc 	codePtr+1
.a355					_EXNLNoBump:
.a355	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a357	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a359	d0 03		bne $a35e			bne 	Execute 					; not end of program
.a35b					_EXNLWarmStart:
.a35b	4c eb af	jmp $afeb			jmp 	System_END
.a35e	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a360	b0 1c		bcs $a37e			bcs 	EXStackOverflow
.a362	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a365	d0 03		bne $a36a			bne 	_EXNoBreak
.a367	20 82 a2	jsr $a282			jsr 	ExternCheckBreak
.a36a					_EXNoBreak:
.a36a	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a36c	f0 da		beq $a348			beq 	EXNextLine 					; reached end of the line.
.a36e	c8		iny				iny 								; advance pointer.
.a36f	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a371	90 39		bcc $a3ac			bcc 	EXStringComment
.a373	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a375	90 1f		bcc $a396			bcc 	EXTokenExecute
.a377	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a379	90 15		bcc $a390			bcc 	EXPushConstant
.a37b	4c d2 b0	jmp $b0d2			jmp 	Identifier 					; it's an identifier C0-FF
.a37e					EXStackOverflow:
.a37e	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a381	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a389	45 52 46 4c 4f 57 00
.a390					EXPushConstant:
.a390	88		dey				dey
.a391	20 db a3	jsr $a3db			jsr 	ExtractIntegerToTOS 		; extract integer
.a394	80 c8		bra $a35e			bra 	Execute
.a396					EXTokenExecute:
.a396	0a		asl a				asl 	a 							; double token, also clears carry
.a397	da		phx				phx 								; save X, put token x 2 in X
.a398	aa		tax				tax
.a399	bd ce a1	lda $a1ce,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a39c	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a39e	bd cf a1	lda $a1cf,x			lda 	KeywordVectorTable-$20+1,x
.a3a1	85 15		sta $15				sta 	zTemp0+1
.a3a3	fa		plx				plx 								; restore X
.a3a4	20 a9 a3	jsr $a3a9			jsr 	_EXTCall 					; call the routine
.a3a7	80 b5		bra $a35e			bra 	Execute
.a3a9					_EXTCall:
.a3a9	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3ac					EXStringComment:
.a3ac	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3ae	f0 15		beq $a3c5			beq 	EXStringSkip 				; (comment), so just skip it.
.a3b0	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3b1	98		tya				tya
.a3b2	38		sec				sec
.a3b3	65 10		adc $10				adc 	codePtr
.a3b5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3b8	a5 11		lda $11				lda 	codePtr+1
.a3ba	69 00		adc #$00			adc 	#0
.a3bc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3bf	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3c2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3c5					EXStringSkip:
.a3c5	98		tya				tya 								; the current position in A
.a3c6	18		clc				clc
.a3c7	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3c9	a8		tay				tay 			 					; and make that the current position.
.a3ca	88		dey				dey 								; back one because of the initial skip
.a3cb	80 91		bra $a35e			bra 	Execute
.a3cd					EXShiftTOSRight:
.a3cd	4a		lsr a				lsr 	a
.a3ce	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3d1	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3d4	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a3d7	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a3da	60		rts				rts
.a3db					ExtractIntegerToTOS:
.a3db	b1 10		lda ($10),y			lda 	(codePtr),y
.a3dd	c8		iny				iny
.a3de	e8		inx				inx 								; make stack space
.a3df	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a3e1	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3e4	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a3e7	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a3ea	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3ed					_EXConstantLoop:
.a3ed	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a3ef	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a3f1	c9 80		cmp #$80			cmp 	#$80
.a3f3	d0 2d		bne $a422			bne		_EXDone 					; no then exit
.a3f5	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a3f8	48		pha				pha
.a3f9	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a3fc	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a3ff	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a402	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a405	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a408	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a40b	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a40e	68		pla				pla
.a40f	20 cd a3	jsr $a3cd			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a412	20 cd a3	jsr $a3cd			jsr 	EXShiftTOSRight				; which will be x64
.a415	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a417	c8		iny				iny
.a418	29 3f		and #$3f			and 	#$3F
.a41a	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a41d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a420	80 cb		bra $a3ed			bra 	_EXConstantLoop
.a422	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a424	c8		iny				iny 								; skip over unary constant + -
.a425	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a427	d0 03		bne $a42c			bne 	_EXPositive
.a429	4c 91 aa	jmp $aa91			jmp 	Unary_Negate
.a42c					_EXPositive:
.a42c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a42d					IdentifierSearch:
.a42d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a42f	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a431	90 12		bcc $a445			bcc 	_ISSlow
.a433	c9 fa		cmp #$fa			cmp 	#$F9+1
.a435	b0 0e		bcs $a445			bcs 	_ISSlow
.a437	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a439	0a		asl a				asl 	a
.a43a	0a		asl a				asl		a
.a43b	85 22		sta $22				sta 	idDataAddr					; set up addres
.a43d	a9 10		lda #$10			lda 	#AZVariables >> 8
.a43f	85 23		sta $23				sta 	idDataAddr+1
.a441	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a443	38		sec				sec 								; return with CS.
.a444	60		rts				rts
.a445					_ISSlow:
.a445	20 01 a5	jsr $a501			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a448	98		tya				tya 								; set (zTemp1) to point to the
.a449	18		clc				clc 	 							; identifier to be searched.
.a44a	65 10		adc $10				adc 	codePtr
.a44c	85 16		sta $16				sta 	zTemp1
.a44e	a5 11		lda $11				lda 	codePtr+1
.a450	69 00		adc #$00			adc 	#0
.a452	85 17		sta $17				sta 	zTemp1+1
.a454	5a		phy				phy 								; save Y
.a455	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a457	48		pha				pha
.a458	a0 01		ldy #$01			ldy 	#1
.a45a	b1 14		lda ($14),y			lda 	(zTemp0),y
.a45c	85 15		sta $15				sta 	zTemp0+1
.a45e	68		pla				pla
.a45f	85 14		sta $14				sta 	zTemp0
.a461	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a463	f0 2c		beq $a491			beq 	_ISFail
.a465	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a467	b1 14		lda ($14),y			lda 	(zTemp0),y
.a469	85 18		sta $18				sta 	zTemp2
.a46b	c8		iny				iny
.a46c	b1 14		lda ($14),y			lda 	(zTemp0),y
.a46e	85 19		sta $19				sta 	zTemp2+1
.a470	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a472					_ISCompare:
.a472	b1 16		lda ($16),y			lda 	(zTemp1),y
.a474	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a476	d0 dd		bne $a455			bne		_ISLoop 					; different ?
.a478	c8		iny				iny
.a479	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a47b	90 f5		bcc $a472			bcc 	_ISCompare
.a47d	18		clc				clc 								; set up the data pointer
.a47e	a5 14		lda $14				lda 	zTemp0
.a480	69 02		adc #$02			adc 	#2
.a482	85 22		sta $22				sta 	idDataAddr
.a484	a5 15		lda $15				lda 	zTemp0+1
.a486	69 00		adc #$00			adc		#0
.a488	85 23		sta $23				sta 	idDataAddr+1
.a48a	a0 09		ldy #$09			ldy 	#9 							; get the type
.a48c	b1 14		lda ($14),y			lda 	(zTemp0),y
.a48e	7a		ply				ply
.a48f	38		sec				sec
.a490	60		rts				rts
.a491					_ISFail:
.a491	7a		ply				ply
.a492	18		clc				clc
.a493	60		rts				rts
.a494					IdentifierCreate:
.a494	5a		phy				phy 								; save Y
.a495	48		pha				pha 								; save type on stack
.a496	20 01 a5	jsr $a501			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a499	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a49c	85 16		sta $16				sta 	zTemp1
.a49e	ad 89 10	lda $1089			lda 	VarMemory+1
.a4a1	85 17		sta $17				sta 	zTemp1+1
.a4a3	5a		phy				phy 								; save Y (code offset)
.a4a4	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4a6	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4a8	91 16		sta ($16),y			sta 	(zTemp1),y
.a4aa	c8		iny				iny
.a4ab	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4ad	91 16		sta ($16),y			sta 	(zTemp1),y
.a4af	c8		iny				iny
.a4b0					_IDCErase:
.a4b0	a9 00		lda #$00			lda 	#0
.a4b2	91 16		sta ($16),y			sta 	(zTemp1),y
.a4b4	c8		iny				iny
.a4b5	c0 06		cpy #$06			cpy 	#6
.a4b7	d0 f7		bne $a4b0			bne 	_IDCErase
.a4b9	68		pla				pla 								; original Y
.a4ba	18		clc				clc
.a4bb	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4bd	91 16		sta ($16),y			sta 	(zTemp1),y
.a4bf	c8		iny				iny
.a4c0	a5 11		lda $11				lda 	codePtr+1
.a4c2	69 00		adc #$00			adc 	#0
.a4c4	91 16		sta ($16),y			sta 	(zTemp1),y
.a4c6	c8		iny				iny
.a4c7	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4c9	91 16		sta ($16),y			sta 	(zTemp1),y
.a4cb	68		pla				pla 								; restore type
.a4cc	c8		iny				iny
.a4cd	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4cf	c8		iny				iny
.a4d0	98		tya				tya									; add offset to VarMemory
.a4d1	18		clc				clc
.a4d2	6d 88 10	adc $1088			adc 	VarMemory
.a4d5	8d 88 10	sta $1088			sta 	VarMemory
.a4d8	ad 89 10	lda $1089			lda 	VarMemory+1
.a4db	69 00		adc #$00			adc 	#0
.a4dd	8d 89 10	sta $1089			sta 	VarMemory+1
.a4e0	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a4e3	f0 19		beq $a4fe			beq 	_IDCMemory
.a4e5	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a4e7	92 14		sta ($14)			sta 	(zTemp0)
.a4e9	a0 01		ldy #$01			ldy 	#1
.a4eb	a5 17		lda $17				lda 	zTemp1+1
.a4ed	91 14		sta ($14),y			sta 	(zTemp0),y
.a4ef	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a4f1	18		clc				clc
.a4f2	69 02		adc #$02			adc 	#2
.a4f4	85 22		sta $22				sta 	idDataAddr
.a4f6	a5 17		lda $17				lda 	zTemp1+1
.a4f8	69 00		adc #$00			adc 	#0
.a4fa	85 23		sta $23				sta 	idDataAddr+1
.a4fc	7a		ply				ply 								; restore Y and exit
.a4fd	60		rts				rts
.a4fe					_IDCMemory:
.a4fe	4c bd a5	jmp $a5bd			jmp 	OutOfMemoryError
.a501					IdentifierSetUpHashPtr:
.a501	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the first operator
.a503	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a505	0a		asl a				asl 	a 							; convert to an offset, clc
.a506	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a508	85 14		sta $14				sta 	zTemp0
.a50a	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a50c	85 15		sta $15				sta 	zTemp0+1
.a50e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a50f					ResetCodePointer:
.a50f	48		pha				pha
.a510	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a512	85 11		sta $11				sta 	codePtr+1
.a514	64 10		stz $10				stz 	codePtr
.a516	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a518	68		pla				pla
.a519	60		rts				rts
.a51a					ResetForRun:
.a51a	48		pha				pha
.a51b	5a		phy				phy
.a51c	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a51e					_RRErase:
.a51e	9e 68 10	stz $1068,x			stz		HashTable,x
.a521	e8		inx				inx
.a522	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a524	d0 f8		bne $a51e			bne 	_RRErase
.a526	20 45 a5	jsr $a545			jsr 	ResetVarMemory
.a529	a9 98		lda #$98			lda 	#MemoryEnd >> 8
.a52b	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a52e	9c 8a 10	stz $108a			stz 	AllocMemory
.a531	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a533	85 12		sta $12				sta 	StructSP
.a535	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a537	85 13		sta $13				sta 	StructSP+1
.a539	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a53b	92 12		sta ($12)			sta 	(StructSP)
.a53d	20 6c a5	jsr $a56c			jsr 	ProcedureScan
.a540	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a542	7a		ply				ply
.a543	68		pla				pla
.a544	60		rts				rts
.a545					ResetVarMemory:
.a545	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a547	85 14		sta $14				sta 	zTemp0
.a549	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a54b	85 15		sta $15				sta 	zTemp0+1
.a54d					_RRFindEnd:
.a54d	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a54f	f0 0b		beq $a55c			beq 	_RRFoundEnd
.a551	18		clc				clc 								; no, add offset to pointer.
.a552	65 14		adc $14				adc 	zTemp0
.a554	85 14		sta $14				sta 	zTemp0
.a556	90 f5		bcc $a54d			bcc 	_RRFindEnd
.a558	e6 15		inc $15				inc 	zTemp0+1
.a55a	80 f1		bra $a54d			bra 	_RRFindEnd
.a55c					_RRFoundEnd:
.a55c	18		clc				clc 								; add 1 to this, as it points to the last
.a55d	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a55f	69 01		adc #$01			adc 	#1
.a561	8d 88 10	sta $1088			sta 	VarMemory
.a564	a5 15		lda $15				lda 	zTemp0+1
.a566	69 00		adc #$00			adc 	#0
.a568	8d 89 10	sta $1089			sta 	VarMemory+1
.a56b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a56c					ProcedureScan:
.a56c	20 0f a5	jsr $a50f			jsr 	ResetCodePointer 			; reset the code pointer.
.a56f	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a571	f0 39		beq $a5ac			beq 	_PSExit
.a573	a0 03		ldy #$03			ldy 	#3 							; start of line
.a575	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a577	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a579	d0 24		bne $a59f			bne 	_PSNext
.a57b	c8		iny				iny 								; skip over def first
.a57c	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a57e	29 e0		and #$e0			and 	#$E0
.a580	c9 c0		cmp #$c0			cmp 	#$C0
.a582	d0 1b		bne $a59f			bne 	_PSNext 					; otherwise ignore it.
.a584	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a586	20 94 a4	jsr $a494			jsr 	IdentifierCreate
.a589					_PSSkipIdentifier:
.a589	b1 10		lda ($10),y			lda 	(codePtr),y
.a58b	c9 e0		cmp #$e0			cmp 	#$E0
.a58d	c8		iny				iny
.a58e	90 f9		bcc $a589			bcc 	_PSSkipIdentifier
.a590	98		tya				tya  								; save the address in the data slot.
.a591	a0 03		ldy #$03			ldy 	#3
.a593	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a595	a5 10		lda $10				lda 	codePtr
.a597	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a599	a5 11		lda $11				lda 	codePtr+1
.a59b	a0 01		ldy #$01			ldy 	#1
.a59d	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a59f					_PSNext:
.a59f	18		clc				clc 								; go to next
.a5a0	b2 10		lda ($10)			lda 	(codePtr)
.a5a2	65 10		adc $10				adc 	codePtr
.a5a4	85 10		sta $10				sta 	codeptr
.a5a6	90 c7		bcc $a56f			bcc 	_PSMain
.a5a8	e6 11		inc $11				inc 	codePtr+1
.a5aa	80 c3		bra $a56f			bra 	_PSMain
.a5ac					_PSExit:
.a5ac	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5ad					SyntaxError:
.a5ad	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a5b0	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5b8	52 52 4f 52 00
.a5bd					OutOfMemoryError:
.a5bd	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a5c0	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5c8	45 4d 4f 52 59 00
.a5ce					ErrorHandler:
.a5ce	68		pla				pla 								; pop message address
.a5cf	85 14		sta $14				sta 	zTemp0
.a5d1	68		pla				pla
.a5d2	85 15		sta $15				sta 	zTemp0+1
.a5d4	a9 05		lda #$05			lda 	#CTH_ERROR
.a5d6	20 99 a2	jsr $a299			jsr 	ExternColour
.a5d9	a0 01		ldy #$01			ldy 	#1 							; print it
.a5db					_ErrorPrint:
.a5db	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5dd	20 8f a2	jsr $a28f			jsr		ExternPrint
.a5e0	c8		iny				iny
.a5e1	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5e3	d0 f6		bne $a5db			bne 	_ErrorPrint
.a5e5	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a5e7	b1 10		lda ($10),y			lda		(codePtr),y
.a5e9	c8		iny				iny
.a5ea	12 10		ora ($10)			ora 	(codePtr)
.a5ec	f0 1c		beq $a60a			beq 	_ErrorNoLine 				; if so, skip
.a5ee	a9 20		lda #$20			lda 	#32
.a5f0	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a5f3	a9 40		lda #$40			lda 	#'@'
.a5f5	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a5f8	a9 20		lda #$20			lda 	#32
.a5fa	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a5fd	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a5ff	b1 10		lda ($10),y			lda 	(codePtr),y
.a601	48		pha				pha
.a602	c8		iny				iny
.a603	b1 10		lda ($10),y			lda 	(codePtr),y
.a605	a8		tay				tay
.a606	68		pla				pla
.a607	20 12 a6	jsr $a612			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a60a					_ErrorNoLine:
.a60a	a9 0d		lda #$0d			lda 	#13							; new line
.a60c	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a60f	4c 2b a0	jmp $a02b			jmp 	WarmStart
.a612					ErrorPrint16:
.a612	da		phx				phx
.a613	e8		inx				inx 								; space on stack
.a614	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a617	98		tya				tya
.a618	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a61b	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a61e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a621	20 37 a6	jsr $a637			jsr 	IntegerToString 			; convert to string.
.a624	fa		plx				plx
.a625					ErrorPrintIntegerBuffer:
.a625	da		phx				phx
.a626	a2 00		ldx #$00			ldx 	#0
.a628					_EP16Loop:
.a628	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a62b	20 8f a2	jsr $a28f			jsr 	ExternPrint
.a62e	e8		inx				inx
.a62f	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a632	d0 f4		bne $a628			bne 	_EP16Loop
.a634	8a		txa				txa
.a635	fa		plx				plx
.a636	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a637					IntegerToString:
.a637	48		pha				pha
.a638	5a		phy				phy
.a639	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a63c	48		pha				pha
.a63d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a640	48		pha				pha
.a641	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a644	48		pha				pha
.a645	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a648	48		pha				pha
.a649	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a64c	10 08		bpl $a656			bpl 		_ITSNotMinus
.a64e	a9 2d		lda #$2d			lda 		#"-"
.a650	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter
.a653	20 91 aa	jsr $aa91			jsr 		Unary_Negate
.a656					_ITSNotMinus:
.a656	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a659	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a65c	8a		txa				txa 								; use Y for the integer index.
.a65d	a8		tay				tay
.a65e	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a660					_ITSNextSubtractor:
.a660	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a662	8d 21 08	sta $0821			sta 		NumConvCount
.a665					_ITSSubtract:
.a665	38		sec				sec
.a666	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a669	fd d4 a6	sbc $a6d4,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a66c	48		pha				pha
.a66d	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a670	fd d5 a6	sbc $a6d5,x			sbc 		_ITSSubtractors+1,x
.a673	48		pha				pha
.a674	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a677	fd d6 a6	sbc $a6d6,x			sbc 		_ITSSubtractors+2,x
.a67a	48		pha				pha
.a67b	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a67e	fd d7 a6	sbc $a6d7,x			sbc 		_ITSSubtractors+3,x
.a681	90 14		bcc $a697			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a683	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a686	68		pla				pla
.a687	99 00 0e	sta $0e00,y			sta 		stack2,y
.a68a	68		pla				pla
.a68b	99 00 0d	sta $0d00,y			sta 		stack1,y
.a68e	68		pla				pla
.a68f	99 00 0c	sta $0c00,y			sta 		stack0,y
.a692	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a695	80 ce		bra $a665			bra 		_ITSSubtract 			; go round again.
.a697					_ITSCantSubtract:
.a697	68		pla				pla 								; throw away interim answers
.a698	68		pla				pla 								; (the subtraction that failed)
.a699	68		pla				pla
.a69a	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a69d	c9 30		cmp #$30			cmp 		#"0"
.a69f	d0 05		bne $a6a6			bne 		_ITSOutputDigit
.a6a1	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6a4	f0 09		beq $a6af			beq	 		_ITSGoNextSubtractor
.a6a6					_ITSOutputDigit:
.a6a6	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6a9	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6ac	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter 		; output it.
.a6af					_ITSGoNextSubtractor:
.a6af	e8		inx				inx 								; next dword in subtractor table.
.a6b0	e8		inx				inx
.a6b1	e8		inx				inx
.a6b2	e8		inx				inx
.a6b3	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6b5	d0 a9		bne $a660			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6b7	98		tya				tya 								; X is back as the mantissa index
.a6b8	aa		tax				tax
.a6b9	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6bc	09 30		ora #$30			ora 		#"0"
.a6be	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter
.a6c1	68		pla				pla
.a6c2	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6c5	68		pla				pla
.a6c6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6c9	68		pla				pla
.a6ca	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6cd	68		pla				pla
.a6ce	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6d1	7a		ply				ply 								; and exit
.a6d2	68		pla				pla
.a6d3	60		rts				rts
.a6d4					_ITSSubtractors:
>a6d4	00 ca 9a 3b					.dword 		1000000000
>a6d8	00 e1 f5 05					.dword 		100000000
>a6dc	80 96 98 00					.dword 		10000000
>a6e0	40 42 0f 00					.dword 		1000000
>a6e4	a0 86 01 00					.dword 		100000
>a6e8	10 27 00 00					.dword 		10000
>a6ec	e8 03 00 00					.dword 		1000
>a6f0	64 00 00 00					.dword 		100
>a6f4	0a 00 00 00					.dword 		10
.a6f8					_ITSSubtractorsEnd:
.a6f8					ITSOutputCharacter:
.a6f8	48		pha				pha
.a6f9	da		phx				phx
.a6fa	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a6fd	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a700	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a703	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a706	fa		plx				plx
.a707	68		pla				pla
.a708	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a709					IntFromString:
.a709	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a70b	8c 25 08	sty $0825			sty 	IFSHexFlag
.a70e	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a710	c9 26		cmp #$26			cmp 	#"&"
.a712	d0 04		bne $a718			bne 	_IFSNotHex
.a714	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a717	c8		iny				iny 								; skip
.a718					_IFSNotHex:
.a718	e8		inx				inx 								; space on stack
.a719	20 75 a7	jsr $a775			jsr 	IFSClearTOS
.a71c					_IFSLoop:
.a71c	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a71f	f0 0a		beq $a72b			beq 	_IFSDecOnly
.a721	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a723	c9 41		cmp #$41			cmp 	#"A"
.a725	90 04		bcc $a72b			bcc 	_IFSDecOnly
.a727	c9 47		cmp #$47			cmp 	#"F"+1
.a729	90 0a		bcc $a735			bcc 	_IFSOkDigit
.a72b					_IFSDecOnly:
.a72b	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a72d	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a72f	90 3e		bcc $a76f			bcc 	_IFSExit
.a731	c9 3a		cmp #$3a			cmp 	#"9"+1
.a733	b0 3a		bcs $a76f			bcs 	_IFSExit
.a735					_IFSOkDigit:
.a735	ad 25 08	lda $0825			lda 	IFSHexFlag
.a738	d0 11		bne $a74b			bne 	_IFSHexShift
.a73a	20 02 aa	jsr $aa02			jsr 	Stack_Dup 					; duplicate tos
.a73d	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 2
.a740	20 09 ab	jsr $ab09			jsr 	Unary_Shl 					; x 4
.a743	20 d4 ab	jsr $abd4			jsr 	Stack_Add 					; x 5
.a746	20 09 ab	jsr $ab09			jsr 	Unary_Shl 					; x 10
.a749	80 0c		bra $a757			bra 	_IFSAddIn
.a74b					_IFSHexShift:
.a74b	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 2
.a74e	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 4
.a751	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 8
.a754	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 16
.a757					_IFSAddIn:
.a757	e8		inx				inx  								; create space next up
.a758	20 75 a7	jsr $a775			jsr 	IFSClearTOS
.a75b	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a75d	c9 41		cmp #$41			cmp 	#"A"
.a75f	90 03		bcc $a764			bcc 	_IFSDec
.a761	38		sec				sec 								; hex fixup.
.a762	e9 07		sbc #$07			sbc 	#7
.a764					_IFSDec:
.a764	29 0f		and #$0f			and 	#15
.a766	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a769	20 d4 ab	jsr $abd4			jsr 	Stack_Add 					; add to tos
.a76c	c8		iny				iny
.a76d	80 ad		bra $a71c			bra 	_IFSLoop
.a76f					_IFSExit:
.a76f	98		tya				tya
.a770	38		sec				sec
.a771	f0 01		beq $a774			beq 	_IFSSkipFail
.a773	18		clc				clc
.a774					_IFSSkipFail:
.a774	60		rts				rts
.a775					IFSClearTOS:
.a775	9e 00 0c	stz $0c00,x			stz		stack0,x
.a778	9e 00 0d	stz $0d00,x			stz		stack1,x
.a77b	9e 00 0e	stz $0e00,x			stz		stack2,x
.a77e	9e 00 0f	stz $0f00,x			stz		stack3,x
.a781	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a782					Tokenise:
.a782	da		phx				phx
.a783	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a785					_TKSkip:
.a785	c8		iny				iny
.a786					_TKMainLoop:
.a786	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a788	f0 06		beq $a790			beq 	_TKExit
.a78a	c9 20		cmp #$20			cmp 	#" "
.a78c	f0 f7		beq $a785			beq 	_TKSkip
.a78e	80 04		bra $a794			bra 	_TKNotEnd
.a790	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a792	fa		plx				plx
.a793	60		rts				rts
.a794					_TKNotEnd:
.a794	c9 22		cmp #$22			cmp 	#'"'
.a796	f0 04		beq $a79c			beq 	_TKIsQuote
.a798	c9 27		cmp #$27			cmp 	#"'"
.a79a	d0 05		bne $a7a1			bne 	_TKNotQuote
.a79c					_TKIsQuote:
.a79c	20 be a8	jsr $a8be			jsr		TOKQuotedString
.a79f	80 e5		bra $a786			bra 	_TKMainLoop
.a7a1					_TKNotQuote:
.a7a1	98		tya				tya 								; current pos -> zTemp0
.a7a2	18		clc				clc
.a7a3	65 10		adc $10				adc 	codePtr
.a7a5	85 14		sta $14				sta 	zTemp0
.a7a7	85 10		sta $10				sta 	codePtr
.a7a9	a5 11		lda $11				lda 	codePtr+1
.a7ab	69 00		adc #$00			adc 	#0
.a7ad	85 15		sta $15				sta 	zTemp0+1
.a7af	85 11		sta $11				sta 	codePtr+1
.a7b1	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7b3	b1 10		lda ($10),y			lda 	(codePtr),y
.a7b5	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7b7	f0 08		beq $a7c1			beq 	_TKIsNumber
.a7b9	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7bb	90 23		bcc $a7e0			bcc 	_TKNotNumber
.a7bd	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7bf	b0 1f		bcs $a7e0			bcs 	_TKNotNumber
.a7c1					_TKIsNumber:
.a7c1	e8		inx				inx
.a7c2	20 09 a7	jsr $a709			jsr 	IntFromString 				; convert to integer
.a7c5	48		pha				pha
.a7c6	20 96 a8	jsr $a896			jsr 	TokWriteConstant 			; do constant recursively.
.a7c9	7a		ply				ply
.a7ca	ca		dex				dex
.a7cb	b1 10		lda ($10),y			lda 	(codePtr),y
.a7cd	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7cf	d0 08		bne $a7d9			bne 	_TKIsPositive
.a7d1	c8		iny				iny									; skip it
.a7d2	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7d4	20 8d a8	jsr $a88d			jsr 	TokWriteToken 				; write token out
.a7d7	80 ad		bra $a786			bra 	_TKMainLoop 				; loop back.
.a7d9					_TKIsPositive:
.a7d9	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a7db	20 8d a8	jsr $a88d			jsr 	TokWriteToken 				; write token out
.a7de	80 a6		bra $a786			bra 	_TKMainLoop 				; loop back.
.a7e0					_TKNotNumber:
.a7e0	a9 f8		lda #$f8			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7e2	85 18		sta $18				sta 	zTemp2
.a7e4	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a7e6	85 19		sta $19				sta 	zTemp2+1
.a7e8	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a7ea	a9 10		lda #$10			lda 	#$10
.a7ec	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a7ee					_TKSearch:
.a7ee	a0 00		ldy #$00			ldy 	#0
.a7f0					_TKCompare:
.a7f0	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a7f2	c8		iny				iny
.a7f3	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a7f5	d0 07		bne $a7fe			bne 	_TKNext
.a7f7	98		tya				tya
.a7f8	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a7fa	d0 f4		bne $a7f0			bne 	_TKCompare 					; found a match.
.a7fc	80 13		bra $a811			bra 	_TKFound
.a7fe	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a800	38		sec				sec 								; add length+1 to current
.a801	65 18		adc $18				adc 	zTemp2
.a803	85 18		sta $18				sta 	zTemp2
.a805	90 02		bcc $a809			bcc 	_TKNNC
.a807	e6 19		inc $19				inc 	zTemp2+1
.a809	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a80b	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a80d	d0 df		bne $a7ee			bne 	_TKSearch 					; go try again.
.a80f	80 0f		bra $a820			bra 	_TKComplete
.a811					_TKFound:
.a811	98		tya				tya
.a812	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a814	90 e8		bcc $a7fe			bcc 	_TKNext 					; if < best try next
.a816	f0 e6		beq $a7fe			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a818	85 1a		sta $1a				sta 	zTemp3 						; update best
.a81a	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a81c	85 1c		sta $1c				sta 	zTemp4
.a81e	80 de		bra $a7fe			bra 	_TKNext
.a820					_TKComplete:
.a820	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a822	f0 18		beq $a83c			beq		_TKTokenFail 				; if zero no match occurred
.a824	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a826	b2 10		lda ($10)			lda 	(codePtr) 					; look at first character
.a828	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; identifier character
.a82b	90 07		bcc $a834			bcc 	_TKOutput 					; if not, then token is okay
.a82d	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a82f	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; is that an identifier
.a832	b0 08		bcs $a83c			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a834					_TKOutput:
.a834	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a836	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a839	4c 86 a7	jmp $a786			jmp 	_TKMainLoop					; go round again
.a83c					_TKTokenFail:
.a83c	a0 00		ldy #$00			ldy 	#0
.a83e	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a840	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier
.a843	b0 13		bcs $a858			bcs 	_TKCopyIdent 				; if yes copy it
.a845	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a848	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a850	4f 4b 45 4e 49 53 45 00
.a858					_TKCopyIdent:
.a858	c8		iny				iny 								; get next
.a859	b1 10		lda ($10),y			lda 	(codePtr),y
.a85b	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; if identifier
.a85e	08		php				php 								; save CS on stack
.a85f	88		dey				dey 								; back to character
.a860	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a862	c8		iny				iny
.a863	c9 2e		cmp #$2e			cmp 	#"."
.a865	d0 02		bne $a869			bne 	_TKNotDot
.a867	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a869					_TKNotDot:
.a869	38		sec				sec
.a86a	e9 41		sbc #$41			sbc		#'A'
.a86c	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a86e	28		plp				plp 								; CS if next is identifier
.a86f	08		php				php
.a870	b0 02		bcs $a874			bcs 	_TKNotLast					; CC if next is not identifier
.a872	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a874					_TKNotLast:
.a874	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a877	28		plp				plp 								; get test result
.a878	b0 de		bcs $a858			bcs 	_TKCopyIdent 				; get the next identifier.
.a87a	4c 86 a7	jmp $a786			jmp 	_TKMainLoop
.a87d					TOKIsIdentifier:
.a87d	c9 2e		cmp #$2e			cmp 	#"."
.a87f	f0 08		beq $a889			beq 	_TIIYes
.a881	c9 41		cmp #$41			cmp 	#"A"
.a883	90 06		bcc $a88b			bcc 	_TIINo
.a885	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a887	b0 02		bcs $a88b			bcs 	_TIINo
.a889					_TIIYes:
.a889	38		sec				sec
.a88a	60		rts				rts
.a88b					_TIINo:
.a88b	18		clc				clc
.a88c	60		rts				rts
.a88d					TokWriteToken:
.a88d	92 16		sta ($16)			sta 	(zTemp1)
.a88f	e6 16		inc $16				inc 	zTemp1
.a891	d0 02		bne $a895			bne 	_TWTExit
.a893	e6 17		inc $17				inc 	zTemp1+1
.a895					_TWTExit:
.a895	60		rts				rts
.a896					TokWriteConstant:
.a896	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a899	29 3f		and #$3f			and		#63
.a89b	48		pha				pha 								; save on stack
.a89c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a89f	29 c0		and #$c0			and 	#$C0
.a8a1	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8a4	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8a7	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8aa	f0 0d		beq $a8b9			beq 	_TWCNoCall 					; no, don't call.
.a8ac	5a		phy				phy
.a8ad	a0 06		ldy #$06			ldy 	#6
.a8af					_TWCShift:
.a8af	20 16 ab	jsr $ab16			jsr 	Unary_Shr
.a8b2	88		dey				dey
.a8b3	d0 fa		bne $a8af			bne 	_TWCShift
.a8b5	7a		ply				ply
.a8b6	20 96 a8	jsr $a896			jsr 	TokWriteConstant
.a8b9					_TWCNoCall:
.a8b9	68		pla				pla
.a8ba	09 80		ora #$80			ora 	#$80						; make digit token
.a8bc	80 cf		bra $a88d			bra 	TokWriteToken 				; and write it out.
.a8be					TokQuotedString:
.a8be	85 18		sta $18				sta 	zTemp2 						; save quote
.a8c0	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8c2	f0 02		beq $a8c6			beq 	_TQDouble
.a8c4	a9 01		lda #$01			lda 	#1
.a8c6					_TQDouble:
.a8c6	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8c7	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a8ca	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8cc	85 1a		sta $1a				sta 	zTemp3
.a8ce	a5 17		lda $17				lda 	zTemp1+1
.a8d0	85 1b		sta $1b				sta 	zTemp3+1
.a8d2	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8d4	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a8d7					_TQLoop:
.a8d7	c8		iny				iny 								; next character
.a8d8	b1 10		lda ($10),y			lda 	(codePtr),y
.a8da	f0 0f		beq $a8eb			beq 	_TQExit 					; if zero exit
.a8dc	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a8de	f0 0a		beq $a8ea			beq 	_TQSkipExit 				; skip it and exit
.a8e0	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a8e3	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a8e5	1a		inc a				inc 	a
.a8e6	92 1a		sta ($1a)			sta 	(zTemp3)
.a8e8	80 ed		bra $a8d7			bra 	_TQLoop						; go round
.a8ea					_TQSkipExit:
.a8ea	c8		iny				iny
.a8eb					_TQExit:
.a8eb	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8ed	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a8f0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a8f1					EditProgram:
.a8f1	ad 89 10	lda $1089			lda 	VarMemory+1
.a8f4	1a		inc a				inc 	a
.a8f5	c9 98		cmp #$98			cmp 	#MemoryEnd >> 8
.a8f7	b0 3c		bcs $a935			bcs 	_EPMemory
.a8f9	a2 00		ldx #$00			ldx 	#0
.a8fb	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a8fd	85 10		sta $10				sta 	codePtr
.a8ff	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a901	85 11		sta $11				sta 	codePtr+1
.a903	a0 00		ldy #$00			ldy 	#0
.a905	a2 ff		ldx #$ff			ldx 	#255
.a907	20 db a3	jsr $a3db			jsr 	ExtractIntegerToTOS
.a90a	98		tya				tya
.a90b	18		clc				clc
.a90c	65 10		adc $10				adc 	codePtr
.a90e	85 10		sta $10				sta 	codePtr
.a910	90 02		bcc $a914			bcc 	_EPNoCarry
.a912	e6 11		inc $11				inc 	codePtr+1
.a914					_EPNoCarry:
.a914	20 38 a9	jsr $a938			jsr 	EDFindLine
.a917	90 0f		bcc $a928			bcc 	_EPNotFound
.a919	a5 16		lda $16				lda 	zTemp1
.a91b	48		pha				pha
.a91c	a5 17		lda $17				lda 	zTemp1+1
.a91e	48		pha				pha
.a91f	20 6f a9	jsr $a96f			jsr 	EDDeleteLine
.a922	68		pla				pla
.a923	85 17		sta $17				sta 	zTemp1+1
.a925	68		pla				pla
.a926	85 16		sta $16				sta 	zTemp1
.a928					_EPNotFound:
.a928	b2 10		lda ($10)			lda 	(codePtr)
.a92a	f0 03		beq $a92f			beq 	_EPNoInsert
.a92c	20 94 a9	jsr $a994			jsr 	EDInsertLine
.a92f					_EPNoInsert:
.a92f	20 1a a5	jsr $a51a			jsr 	ResetForRun
.a932	4c 3f a0	jmp $a03f			jmp 	NewCommand
.a935					_EPMemory:
.a935	4c bd a5	jmp $a5bd			jmp 	OutOfMemoryError
.a938					EDFindLine:
.a938	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a93a	85 16		sta $16				sta 	zTemp1
.a93c	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a93e	85 17		sta $17				sta 	zTemp1+1
.a940					_EDFLLoop:
.a940	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a942	b1 16		lda ($16),y			lda 	(zTemp1),y
.a944	f0 25		beq $a96b			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a946	c8		iny				iny
.a947	38		sec				sec
.a948	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a94b	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a94d	aa		tax				tax	 								; this will return 10.
.a94e	ad 00 0d	lda $0d00			lda 	stack1
.a951	c8		iny				iny
.a952	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a954	90 15		bcc $a96b			bcc 	_EDFLFail					; if target < current then failed.
.a956	d0 04		bne $a95c			bne 	_EDFLNext 					; if non-zero then goto next
.a958	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a95a	f0 11		beq $a96d			beq 	_EDFLFound
.a95c					_EDFLNext:
.a95c	a0 00		ldy #$00			ldy 	#0 							; get offset
.a95e	18		clc				clc
.a95f	b1 16		lda ($16),y			lda 	(zTemp1),y
.a961	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a963	85 16		sta $16				sta 	zTemp1
.a965	90 d9		bcc $a940			bcc 	_EDFLLoop
.a967	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a969	80 d5		bra $a940			bra 	_EDFLLoop
.a96b					_EDFLFail:
.a96b	18		clc				clc
.a96c	60		rts				rts
.a96d					_EDFLFound:
.a96d	38		sec				sec
.a96e	60		rts				rts
.a96f					EDDeleteLine:
.a96f	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a971	a2 00		ldx #$00			ldx 	#0
.a973	b1 16		lda ($16),y			lda 	(zTemp1),y
.a975	a8		tay				tay 								; put in Y
.a976					_EDDelLoop:
.a976	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a978	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a97a	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a97c	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a97f	d0 07		bne $a988			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a981	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a983	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a986	f0 08		beq $a990			beq		_EDDelExit
.a988					_EDDelNext:
.a988	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a98a	d0 ea		bne $a976			bne 	_EDDelLoop
.a98c	e6 17		inc $17				inc 	zTemp1+1
.a98e	80 e6		bra $a976			bra 	_EDDelLoop
.a990					_EDDelExit:
.a990	20 45 a5	jsr $a545			jsr 	ResetVarMemory
.a993	60		rts				rts
.a994					EDInsertLine:
.a994	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a997	85 1a		sta $1a				sta 	zTemp3
.a999	ad 89 10	lda $1089			lda 	VarMemory+1
.a99c	85 1b		sta $1b				sta 	zTemp3+1
.a99e	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9a0					_EDGetLength:
.a9a0	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9a2	f0 0d		beq $a9b1			beq 	_EDGotLength 				; if 0, Y is the length
.a9a4	c8		iny				iny
.a9a5	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9a7	b0 f7		bcs $a9a0			bcs 	_EDGetLength
.a9a9	98		tya				tya 								; get original position
.a9aa	3a		dec a				dec 	a
.a9ab	18		clc				clc
.a9ac	71 10		adc ($10),y			adc 	(codePtr),y
.a9ae	a8		tay				tay
.a9af	80 ef		bra $a9a0			bra 	_EDGetLength
.a9b1					_EDGotLength:
.a9b1	98		tya				tya
.a9b2	18		clc				clc
.a9b3	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9b5	48		pha				pha 								; save total size (e.g. offset)
.a9b6	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9b8	a8		tay				tay 								; in Y
.a9b9	a2 00		ldx #$00			ldx 	#0
.a9bb					_EDInsLoop:
.a9bb	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9bd	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9bf	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9c1	c5 16		cmp $16				cmp 	zTemp1
.a9c3	d0 06		bne $a9cb			bne 	_EDINextShift
.a9c5	a5 1b		lda $1b				lda 	zTemp3+1
.a9c7	c5 17		cmp $17				cmp 	zTemp1+1
.a9c9	f0 0a		beq $a9d5			beq 	_EDIShiftOver
.a9cb					_EDINextShift:
.a9cb	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9cd	d0 02		bne $a9d1			bne 	_EDINoBorrow
.a9cf	c6 1b		dec $1b				dec 	zTemp3+1
.a9d1					_EDINoBorrow:
.a9d1	c6 1a		dec $1a				dec 	zTemp3
.a9d3	80 e6		bra $a9bb			bra 	_EDInsLoop
.a9d5					_EDIShiftOver:
.a9d5	68		pla				pla 								; this is the size + others, e.g. offset
.a9d6	a0 00		ldy #$00			ldy 	#0
.a9d8	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.a9da	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.a9dd	c8		iny				iny
.a9de	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9e0	ad 00 0d	lda $0d00			lda 	stack1
.a9e3	c8		iny				iny
.a9e4	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9e6	c8		iny				iny 								; where the code goes.
.a9e7	a2 00		ldx #$00			ldx 	#0 							; comes from
.a9e9					_EDICopyCode:
.a9e9	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.a9eb	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.a9ed	c8		iny				iny 								; bump pointers
.a9ee	e6 10		inc $10				inc 	codePtr
.a9f0	d0 02		bne $a9f4			bne 	_EDINoCarry
.a9f2	e6 11		inc $11				inc 	codePtr+1
.a9f4					_EDINoCarry:
.a9f4	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.a9f6	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.a9f8	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.a9fa	d0 ed		bne $a9e9			bne 	_EDICopyCode
.a9fc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a9fd					Stack_Empty:
.a9fd	a2 00		ldx #$00			ldx 	#0
.a9ff	60		rts				rts
.aa00					Stack_Drop:
.aa00	ca		dex				dex
.aa01	60		rts				rts
.aa02					Stack_Dup:
.aa02	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa05	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa08	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa0b	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa0e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa11	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa14	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa17	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa1a	e8		inx				inx 								; bump stack pointer
.aa1b	60		rts				rts
.aa1c					Stack_Nip:
.aa1c	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa1f	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa22	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa25	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa28	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa2b	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa2e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa31	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa34	ca		dex				dex 								; drop tos
.aa35	60		rts				rts
.aa36					Stack_Over:
.aa36	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa39	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa3c	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa3f	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa42	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa45	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa48	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa4b	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa4e	e8		inx				inx 							; bump stack pointer
.aa4f	60		rts				rts
.aa50					Stack_Swap:
.aa50	5a		phy				phy
.aa51	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa54	a8		tay				tay
.aa55	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa58	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa5b	98		tya				tya
.aa5c	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa5f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa62	a8		tay				tay
.aa63	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa66	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa69	98		tya				tya
.aa6a	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa6d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa70	a8		tay				tay
.aa71	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa74	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa77	98		tya				tya
.aa78	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa7b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa7e	a8		tay				tay
.aa7f	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa82	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa85	98		tya				tya
.aa86	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa89	7a		ply				ply
.aa8a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aa8b					Unary_Absolute:
.aa8b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa8e	30 01		bmi $aa91			bmi 	Unary_Negate
.aa90	60		rts				rts
.aa91					Unary_Negate:
.aa91	38		sec				sec
.aa92	a9 00		lda #$00			lda		#0
.aa94	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aa97	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa9a	a9 00		lda #$00			lda		#0
.aa9c	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aa9f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaa2	a9 00		lda #$00			lda		#0
.aaa4	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aaa7	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaaa	a9 00		lda #$00			lda		#0
.aaac	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aaaf	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aab2	60		rts				rts
.aab3					Unary_Not:
.aab3	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aab6	49 ff		eor #$ff			eor 	#$FF
.aab8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aabb	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aabe	49 ff		eor #$ff			eor 	#$FF
.aac0	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aac3	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aac6	49 ff		eor #$ff			eor 	#$FF
.aac8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aacb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aace	49 ff		eor #$ff			eor 	#$FF
.aad0	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aad3	60		rts				rts
.aad4					Unary_Increment:
.aad4	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aad7	d0 0d		bne $aae6			bne 	_UIExit
.aad9	fe 00 0d	inc $0d00,x			inc 	stack1,x
.aadc	d0 08		bne $aae6			bne 	_UIExit
.aade	fe 00 0e	inc $0e00,x			inc 	stack2,x
.aae1	d0 03		bne $aae6			bne 	_UIExit
.aae3	fe 00 0f	inc $0f00,x			inc 	stack3,x
.aae6					_UIExit:
.aae6	60		rts				rts
.aae7					Unary_Decrement:
.aae7	38		sec				sec
.aae8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaeb	e9 01		sbc #$01			sbc 	#1
.aaed	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaf0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaf3	e9 00		sbc #$00			sbc 	#0
.aaf5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaf8	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aafb	e9 00		sbc #$00			sbc 	#0
.aafd	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab00	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab03	e9 00		sbc #$00			sbc 	#0
.ab05	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab08	60		rts				rts
.ab09					Unary_Shl:
.ab09	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab0c	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab0f	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab12	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab15	60		rts				rts
.ab16					Unary_Shr:
.ab16	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab19	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab1c	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab1f	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab22	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab23					Mem_Peek:
.ab23	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab26	85 14		sta $14				sta 	zTemp0
.ab28	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab2b	85 15		sta $15				sta 	zTemp0+1
.ab2d	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab2f	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab32	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab35	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab38	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab3b	60		rts				rts
.ab3c					Mem_WPeek:
.ab3c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab3f	85 14		sta $14				sta 	zTemp0
.ab41	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab44	85 15		sta $15				sta 	zTemp0+1
.ab46	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab48	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab4b	5a		phy				phy 								; read msb
.ab4c	a0 01		ldy #$01			ldy 	#1
.ab4e	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab50	7a		ply				ply
.ab51	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab54	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab57	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab5a	60		rts				rts
.ab5b					Mem_DPeek:
.ab5b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab5e	85 14		sta $14				sta 	zTemp0
.ab60	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab63	85 15		sta $15				sta 	zTemp0+1
.ab65	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab67	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab6a	5a		phy				phy 								; read msb
.ab6b	a0 01		ldy #$01			ldy 	#1
.ab6d	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab6f	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab72	c8		iny				iny
.ab73	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab75	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab78	c8		iny				iny
.ab79	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab7b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab7e	7a		ply				ply
.ab7f	60		rts				rts
.ab80					Mem_Poke:
.ab80	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab83	85 14		sta $14				sta 	zTemp0
.ab85	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab88	85 15		sta $15				sta 	zTemp0+1
.ab8a	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab8d	92 14		sta ($14)			sta 	(zTemp0)
.ab8f	ca		dex				dex
.ab90	ca		dex				dex
.ab91	60		rts				rts
.ab92					Mem_WPoke:
.ab92	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab95	85 14		sta $14				sta 	zTemp0
.ab97	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab9a	85 15		sta $15				sta 	zTemp0+1
.ab9c	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab9f	92 14		sta ($14)			sta 	(zTemp0)
.aba1	5a		phy				phy
.aba2	a0 01		ldy #$01			ldy 	#1
.aba4	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.aba7	91 14		sta ($14),y			sta 	(zTemp0),y
.aba9	7a		ply				ply
.abaa	ca		dex				dex
.abab	ca		dex				dex
.abac	60		rts				rts
.abad					Mem_DPoke:
.abad	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abb0	85 14		sta $14				sta 	zTemp0
.abb2	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abb5	85 15		sta $15				sta 	zTemp0+1
.abb7	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abba	92 14		sta ($14)			sta 	(zTemp0)
.abbc	5a		phy				phy
.abbd	a0 01		ldy #$01			ldy 	#1
.abbf	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abc2	91 14		sta ($14),y			sta 	(zTemp0),y
.abc4	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abc7	c8		iny				iny
.abc8	91 14		sta ($14),y			sta 	(zTemp0),y
.abca	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abcd	c8		iny				iny
.abce	91 14		sta ($14),y			sta 	(zTemp0),y
.abd0	7a		ply				ply
.abd1	ca		dex				dex
.abd2	ca		dex				dex
.abd3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abd4					Stack_Add:
.abd4	ca		dex				dex
.abd5					Stack_Add_No_Dex:
.abd5	18		clc				clc
.abd6	bd 00 0c	lda $0c00,x			lda		stack0,x
.abd9	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.abdc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abdf	bd 00 0d	lda $0d00,x			lda		stack1,x
.abe2	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.abe5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abe8	bd 00 0e	lda $0e00,x			lda		stack2,x
.abeb	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.abee	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abf1	bd 00 0f	lda $0f00,x			lda		stack3,x
.abf4	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.abf7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abfa	60		rts				rts
.abfb					Stack_Sub:
.abfb	ca		dex				dex
.abfc	38		sec				sec
.abfd	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac00	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac03	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac06	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac09	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac0c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac0f	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac12	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac15	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac18	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac1b	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac1e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac21	60		rts				rts
.ac22					Stack_And:
.ac22	ca		dex				dex
.ac23	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac26	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac29	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac2c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac2f	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac32	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac35	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac38	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac3b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac3e	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac41	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac44	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac47	60		rts				rts
.ac48					Stack_Xor:
.ac48	ca		dex				dex
.ac49	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac4c	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac4f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac52	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac55	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac58	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac5b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac5e	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac61	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac64	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac67	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac6a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac6d	60		rts				rts
.ac6e					Stack_Or:
.ac6e	ca		dex				dex
.ac6f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac72	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac75	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac78	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac7b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac7e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac81	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac84	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac87	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac8a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac8d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac90	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac93	60		rts				rts
.ac94					Stack_Shl:
.ac94	38		sec				sec
.ac95	80 01		bra $ac98			bra 	StackShift
.ac97					Stack_Shr:
.ac97	18		clc				clc
.ac98					StackShift:
.ac98	08		php				php
.ac99	ca		dex				dex
.ac9a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.ac9d	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.ac9f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aca2	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.aca5	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aca8	d0 13		bne $acbd			bne 	_SSZero
.acaa					_SSLoop:
.acaa	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acad	30 1a		bmi $acc9			bmi 	_SSDone 					; completed ?
.acaf	28		plp				plp 								; restore flag
.acb0	08		php				php
.acb1	b0 05		bcs $acb8			bcs 	_SSLeft 					; do either shift.
.acb3	20 16 ab	jsr $ab16			jsr 	Unary_Shr
.acb6	80 f2		bra $acaa			bra 	_SSLoop
.acb8					_SSLeft:
.acb8	20 09 ab	jsr $ab09			jsr 	Unary_Shl
.acbb	80 ed		bra $acaa			bra 	_SSLoop
.acbd					_SSZero:
.acbd	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.acc0	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acc3	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acc6	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acc9					_SSDone:
.acc9	28		plp				plp 								; throw flag.
.acca	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.accb					MulInteger32:
.accb	ca		dex				dex
.accc	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.accf	85 1e		sta $1e				sta 	zLTemp1
.acd1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.acd4	85 1f		sta $1f				sta 	zLTemp1+1
.acd6	bd 00 0e	lda $0e00,x			lda 	stack2,x
.acd9	85 20		sta $20				sta 	zLTemp1+2
.acdb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.acde	85 21		sta $21				sta 	zLTemp1+3
.ace0	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ace3	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ace6	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ace9	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acec					_BFMMultiply:
.acec	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.acee	29 01		and #$01			and 	#1
.acf0	f0 03		beq $acf5			beq 	_BFMNoAdd
.acf2	20 d5 ab	jsr $abd5			jsr 	Stack_Add_No_Dex 			; co-opt this code
.acf5					_BFMNoAdd:
.acf5	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.acf8	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.acfb	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.acfe	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad01	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad03	66 20		ror $20				ror 	zLTemp1+2
.ad05	66 1f		ror $1f				ror 	zLTemp1+1
.ad07	66 1e		ror $1e				ror 	zLTemp1
.ad09	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad0b	05 1f		ora $1f				ora 	zLTemp1+1
.ad0d	05 20		ora $20				ora 	zLTemp1+2
.ad0f	05 21		ora $21				ora 	zLTemp1+3
.ad11	d0 d9		bne $acec			bne 	_BFMMultiply
.ad13	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad14					DivInteger32:
.ad14	ca		dex				dex
.ad15	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad18	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad1b	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad1e	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad21	d0 14		bne $ad37			bne 	_BFDOkay
.ad23	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>ad26	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad2e	20 42 59 20 5a 45 52 4f 00
.ad37					_BFDOkay:
.ad37	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad39	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad3b	64 20		stz $20				stz 	zLTemp1+2
.ad3d	64 21		stz $21				stz 	zLTemp1+3
.ad3f	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad42	20 9d ad	jsr $ad9d			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad45	e8		inx				inx
.ad46	20 9d ad	jsr $ad9d			jsr 	CheckIntegerNegate
.ad49	ca		dex				dex
.ad4a	5a		phy				phy 								; Y is the counter
.ad4b	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad4d					_BFDLoop:
.ad4d	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad50	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad53	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad56	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad59	26 1e		rol $1e				rol 	zLTemp1
.ad5b	26 1f		rol $1f				rol 	zLTemp1+1
.ad5d	26 20		rol $20				rol 	zLTemp1+2
.ad5f	26 21		rol $21				rol 	zLTemp1+3
.ad61	38		sec				sec
.ad62	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad64	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad67	48		pha				pha
.ad68	a5 1f		lda $1f				lda 	zLTemp1+1
.ad6a	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad6d	48		pha				pha
.ad6e	a5 20		lda $20				lda 	zLTemp1+2
.ad70	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad73	48		pha				pha
.ad74	a5 21		lda $21				lda 	zLTemp1+3
.ad76	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad79	90 15		bcc $ad90			bcc 	_BFDNoAdd
.ad7b	85 21		sta $21				sta 	zLTemp1+3 					; update A
.ad7d	68		pla				pla
.ad7e	85 20		sta $20				sta 	zLTemp1+2
.ad80	68		pla				pla
.ad81	85 1f		sta $1f				sta 	zLTemp1+1
.ad83	68		pla				pla
.ad84	85 1e		sta $1e				sta 	zLTemp1+0
.ad86	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ad89	09 01		ora #$01			ora 	#1
.ad8b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ad8e	80 03		bra $ad93			bra 	_BFDNext
.ad90					_BFDNoAdd:
.ad90	68		pla				pla 								; Throw away the intermediate calculations
.ad91	68		pla				pla
.ad92	68		pla				pla
.ad93					_BFDNext:
.ad93	88		dey				dey
.ad94	d0 b7		bne $ad4d			bne 	_BFDLoop
.ad96	7a		ply				ply 								; restore Y
.ad97	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ad9a	b0 07		bcs $ada3			bcs		IntegerNegateAlways 		; negate the result
.ad9c	60		rts				rts
.ad9d					CheckIntegerNegate:
.ad9d	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ada0	30 01		bmi $ada3			bmi 	IntegerNegateAlways 		; if so negate it
.ada2	60		rts				rts
.ada3					IntegerNegateAlways:
.ada3	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.ada6	4c 91 aa	jmp $aa91			jmp 	Unary_Negate
.ada9					ModInteger32:
.ada9	20 14 ad	jsr $ad14			jsr 	DivInteger32
.adac	a5 1e		lda $1e				lda 	zLTemp1
.adae	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adb1	a5 1f		lda $1f				lda 	zLTemp1+1
.adb3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adb6	a5 20		lda $20				lda 	zLTemp1+2
.adb8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adbb	a5 21		lda $21				lda 	zLTemp1+3
.adbd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adc0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adc1					Comp_Equal:
.adc1	38		sec				sec
.adc2	80 01		bra $adc5			bra 	Comp_CheckEqual
.adc4					Comp_NotEqual:
.adc4	18		clc				clc
.adc5					Comp_CheckEqual:
.adc5	08		php				php
.adc6	ca		dex				dex
.adc7	bd 00 0c	lda $0c00,x			lda		stack0,x
.adca	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.adcd	d0 16		bne $ade5			bne 	_CCENonZero
.adcf	bd 00 0d	lda $0d00,x			lda		stack1,x
.add2	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.add5	d0 0e		bne $ade5			bne 	_CCENonZero
.add7	bd 00 0e	lda $0e00,x			lda		stack2,x
.adda	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.addd	d0 06		bne $ade5			bne 	_CCENonZero
.addf	bd 00 0f	lda $0f00,x			lda		stack3,x
.ade2	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ade5					_CCENonZero:
.ade5	f0 02		beq $ade9			beq 	_CCENotSet
.ade7	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ade9					_CCENotSet:
.ade9					CompCheckFlip:
.ade9	28		plp				plp 								; if carry set, we want $FF if equal
.adea	90 02		bcc $adee			bcc 	CompReturn
.adec	49 ff		eor #$ff			eor 	#$FF
.adee					CompReturn:
.adee	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.adf1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adf4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adf7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adfa	60		rts				rts
.adfb					Comp_Less:
.adfb	18		clc				clc
.adfc	80 01		bra $adff			bra 	Comp_LessCont
.adfe					Comp_GreaterEqual:
.adfe	38		sec				sec
.adff					Comp_LessCont:
.adff	08		php				php
.ae00	ca		dex				dex
.ae01	38		sec				sec
.ae02	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae05	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae08	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae0b	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae0e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae11	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae14	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae17	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae1a	50 02		bvc $ae1e			bvc 	_CLNoFlip 					; unsigned -> signed
.ae1c	49 80		eor #$80			eor 	#$80
.ae1e					_CLNoFlip:
.ae1e	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae20	f0 c7		beq $ade9			beq 	CompCheckFlip
.ae22	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae24	80 c3		bra $ade9			bra 	CompCheckFlip
.ae26					Comp_LessEqual:
.ae26	38		sec				sec
.ae27	80 01		bra $ae2a			bra 	Comp_LessEqualCont
.ae29					Comp_Greater:
.ae29	18		clc				clc
.ae2a					Comp_LessEqualCont:
.ae2a	08		php				php
.ae2b	ca		dex				dex
.ae2c	38		sec				sec
.ae2d	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae30	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae33	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae36	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae39	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae3c	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae3f	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae42	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae45	50 02		bvc $ae49			bvc 	_CLENoFlip 					; unsigned -> signed
.ae47	49 80		eor #$80			eor 	#$80
.ae49					_CLENoFlip:
.ae49	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae4b	f0 9c		beq $ade9			beq 	CompCheckFlip
.ae4d	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae4f	80 98		bra $ade9			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae51					Allocate:
.ae51	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae54	29 80		and #$80			and 	#$80
.ae56	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae59	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae5c	d0 21		bne $ae7f			bne 	_ALBad
.ae5e	38		sec				sec 								; subtract from alloc ptr returning
.ae5f	ad 8a 10	lda $108a			lda 	AllocMemory 				; address
.ae62	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae65	8d 8a 10	sta $108a			sta 	AllocMemory
.ae68	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae6b	ad 8b 10	lda $108b			lda 	AllocMemory+1
.ae6e	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae71	8d 8b 10	sta $108b			sta 	AllocMemory+1
.ae74	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae77	cd 89 10	cmp $1089			cmp 	VarMemory+1 				; check range
.ae7a	f0 03		beq $ae7f			beq 	_ALBad
.ae7c	90 01		bcc $ae7f			bcc 	_ALBad
.ae7e	60		rts				rts
.ae7f					_ALBad:
.ae7f	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>ae82	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>ae8a	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.ae8c					Cmd_List:
.ae8c	20 0f a5	jsr $a50f			jsr 	ResetCodePointer 			; back to the beginning
.ae8f	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.ae91	64 19		stz $19				stz 	zTemp2+1
.ae93	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.ae95	f0 0b		beq $aea2			beq 	_CLINone
.ae97	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.ae9a	85 18		sta $18				sta 	zTemp2
.ae9c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae9f	95 19		sta $19,x			sta 	zTemp2+1,x
.aea1	ca		dex				dex 								; and pop the tos
.aea2					_CLINone:
.aea2	a9 10		lda #$10			lda 	#16 						; list this many lines
.aea4	85 16		sta $16				sta 	zTemp1
.aea6					_CLILoop
.aea6	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aea8	f0 24		beq $aece			beq 	_CLIEnd
.aeaa	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aeac	38		sec				sec
.aead	b1 10		lda ($10),y			lda 	(codePtr),y
.aeaf	e5 18		sbc $18				sbc 	zTemp2
.aeb1	c8		iny				iny
.aeb2	b1 10		lda ($10),y			lda 	(codePtr),y
.aeb4	e5 19		sbc $19				sbc 	zTemp2+1
.aeb6	90 09		bcc $aec1			bcc 	_CLISkip
.aeb8	da		phx				phx
.aeb9	20 d1 ae	jsr $aed1			jsr 	ListCurrent 				; list the line.
.aebc	fa		plx				plx
.aebd	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aebf	f0 0d		beq $aece			beq 	_CLIEnd
.aec1					_CLISkip:
.aec1	18		clc				clc
.aec2	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aec4	65 10		adc $10				adc 	codePtr
.aec6	85 10		sta $10				sta 	codePtr
.aec8	90 dc		bcc $aea6			bcc 	_CLILoop
.aeca	e6 11		inc $11				inc 	codePtr+1
.aecc	80 d8		bra $aea6			bra 	_CLILoop
.aece					_CLIEnd:
.aece	4c 2b a0	jmp $a02b			jmp 	WarmStart
.aed1					ListCurrent:
.aed1	a9 05		lda #$05			lda 	#CTH_LINENO
.aed3	20 99 a2	jsr $a299			jsr 	ExternColour 				; set colour
.aed6	a0 01		ldy #$01			ldy 	#1							; print line#
.aed8	b1 10		lda ($10),y			lda 	(codePtr),y
.aeda	48		pha				pha
.aedb	c8		iny				iny
.aedc	b1 10		lda ($10),y			lda 	(codePtr),y
.aede	a8		tay				tay
.aedf	68		pla				pla
.aee0	20 12 a6	jsr $a612			jsr 	ErrorPrint16
.aee3	a8		tay				tay
.aee4					_LCPadOut:
.aee4	a9 20		lda #$20			lda 	#' '
.aee6	20 8f a2	jsr $a28f			jsr 	ExternPrint
.aee9	c8		iny				iny
.aeea	c0 05		cpy #$05			cpy 	#5
.aeec	d0 f6		bne $aee4			bne 	_LCPadOut
.aeee	a0 03		ldy #$03			ldy 	#3 							; start here
.aef0					_LCLoop:
.aef0	a9 20		lda #$20			lda 	#' '						; space
.aef2	20 8f a2	jsr $a28f			jsr 	ExternPrint
.aef5					_LCLoopNoSpace:
.aef5	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.aef7	30 3e		bmi $af37			bmi 	_LCIdentConst 				; identifier or constant
.aef9	d0 05		bne $af00			bne 	_LCStringToken
.aefb	a9 0d		lda #$0d			lda 	#13
.aefd	4c 8f a2	jmp $a28f			jmp 	ExternPrint
.af00					_LCStringToken:
.af00	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af02	90 0c		bcc $af10			bcc		_LCString
.af04	20 78 af	jsr $af78			jsr 	ListPrintToken
.af07	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af09	c8		iny				iny 								; advance pointer
.af0a	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af0c	f0 e7		beq $aef5			beq 	_LCLoopNoSpace
.af0e	80 e0		bra $aef0			bra 	_LCLoop 					; go round again.
.af10					_LCString:
.af10	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af11	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af13	a2 22		ldx #$22			ldx 	#'"'
.af15	b0 04		bcs $af1b			bcs 	_LCSSkip
.af17	a9 07		lda #$07			lda 	#CTH_COMMENT
.af19	a2 27		ldx #$27			ldx 	#"'"
.af1b					_LCSSkip:
.af1b	20 99 a2	jsr $a299			jsr 	ExternColour 				; set colour
.af1e	8a		txa				txa
.af1f	48		pha				pha 								; save end quote on stack.
.af20	20 8f a2	jsr $a28f			jsr 	ExternPrint
.af23	c8		iny				iny 								; skip type size
.af24	c8		iny				iny
.af25					_LCSPrint:
.af25	b1 10		lda ($10),y			lda 	(codePtr),y
.af27	c8		iny				iny
.af28	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af2a	f0 05		beq $af31			beq 	_LCSExit
.af2c	20 8f a2	jsr $a28f			jsr 	ExternPrint
.af2f	80 f4		bra $af25			bra 	_LCSPrint
.af31					_LCSExit:
.af31	68		pla				pla
.af32	20 8f a2	jsr $a28f			jsr 	ExternPrint
.af35	80 b9		bra $aef0			bra 	_LCLoop
.af37					_LCIdentConst:
.af37	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af39	90 1e		bcc $af59			bcc 	_LCConstant
.af3b	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af3d	20 99 a2	jsr $a299			jsr 	ExternColour
.af40					_LCCIdLoop:
.af40	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af42	29 1f		and #$1f			and 	#$1F 						; convert
.af44	18		clc				clc
.af45	69 41		adc #$41			adc 	#'A'
.af47	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af49	d0 02		bne $af4d			bne 	_LCCNotDot
.af4b	a9 2e		lda #$2e			lda 	#'.'
.af4d					_LCCNotDot:
.af4d	20 8f a2	jsr $a28f			jsr 	ExternPrint
.af50	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af52	c8		iny				iny
.af53	c9 e0		cmp #$e0			cmp 	#$E0
.af55	b0 99		bcs $aef0			bcs 	_LCLoop
.af57	80 e7		bra $af40			bra 	_LCCIdLoop
.af59					_LCConstant:
.af59	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.af5b	20 99 a2	jsr $a299			jsr 	ExternColour
.af5e	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.af60	20 db a3	jsr $a3db			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.af63	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.af66	48		pha				pha
.af67	20 37 a6	jsr $a637			jsr 	IntegerToString 			; this could corrupt stack if full :)
.af6a	20 25 a6	jsr $a625			jsr 	ErrorPrintIntegerBuffer
.af6d	68		pla				pla 								; sign back
.af6e	10 80		bpl $aef0			bpl 	_LCLoop
.af70	a9 2d		lda #$2d			lda 	#"-"
.af72	20 8f a2	jsr $a28f			jsr 	ExternPrint
.af75	4c f0 ae	jmp $aef0			jmp 	_LCLoop
.af78					ListPrintToken:
.af78	5a		phy				phy
.af79	48		pha				pha 								; token colour
.af7a	a9 02		lda #$02			lda 	#CTH_TOKEN
.af7c	20 99 a2	jsr $a299			jsr 	ExternColour
.af7f	fa		plx				plx
.af80	a9 f8		lda #$f8			lda 	#KeywordText & $FF
.af82	85 14		sta $14				sta 	zTemp0
.af84	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.af86	85 15		sta $15				sta 	zTemp0+1
.af88					_LPTLoop:
.af88	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.af8a	f0 0e		beq $af9a			beq 	_LPTFound
.af8c	ca		dex				dex
.af8d	b2 14		lda ($14)			lda 	(zTemp0)
.af8f	38		sec				sec									; add 1, it's length+name
.af90	65 14		adc $14				adc 	zTemp0
.af92	85 14		sta $14				sta 	zTemp0
.af94	90 f2		bcc $af88			bcc 	_LPTLoop
.af96	e6 15		inc $15				inc 	zTemp0+1
.af98	80 ee		bra $af88			bra 	_LPTLoop
.af9a					_LPTFound:
.af9a	a0 01		ldy #$01			ldy 	#1 							; start here.
.af9c					_LPTShow:
.af9c	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.af9e	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afa0	90 06		bcc $afa8			bcc 	_LPTExit
.afa2	c8		iny				iny
.afa3	20 8f a2	jsr $a28f			jsr 	ExternPrint
.afa6	80 f4		bra $af9c			bra 	_LPTShow
.afa8					_LPTExit:
.afa8	7a		ply				ply
.afa9	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.afaa					Cmd_Renumber:
.afaa	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.afac	85 16		sta $16				sta 	zTemp1
.afae	a9 11		lda #$11			lda 	#ProgramStart >> 8
.afb0	85 17		sta $17				sta 	zTemp1+1
.afb2	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.afb4	85 18		sta $18				sta 	zTemp2
.afb6	a9 03		lda #$03			lda 	#1000 >> 8
.afb8	85 19		sta $19				sta 	zTemp2+1
.afba					_CRLoop:
.afba	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.afbc	f0 23		beq $afe1			beq 	_CRExit
.afbe	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.afc0	a5 18		lda $18				lda 	zTemp2
.afc2	91 16		sta ($16),y			sta 	(zTemp1),y
.afc4	c8		iny				iny
.afc5	a5 19		lda $19				lda 	zTemp2+1
.afc7	91 16		sta ($16),y			sta 	(zTemp1),y
.afc9	18		clc				clc 								; add 10 to new number
.afca	a5 18		lda $18				lda 	zTemp2
.afcc	69 0a		adc #$0a			adc 	#10
.afce	85 18		sta $18				sta 	zTemp2
.afd0	90 02		bcc $afd4			bcc 	_CRNoCarry
.afd2	e6 19		inc $19				inc 	zTemp2+1
.afd4					_CRNoCarry:
.afd4	18		clc				clc 								; go to next line
.afd5	b2 16		lda ($16)			lda 	(zTemp1)
.afd7	65 16		adc $16				adc 	zTemp1
.afd9	85 16		sta $16				sta 	zTemp1
.afdb	90 dd		bcc $afba			bcc 	_CRLoop
.afdd	e6 17		inc $17				inc 	zTemp1+1
.afdf	80 d9		bra $afba			bra 	_CRLoop
.afe1					_CRExit:
.afe1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.afe2					System_RUN:
.afe2	20 1a a5	jsr $a51a			jsr		ResetForRun 				; clear vars, stacks etc.
.afe5	20 0f a5	jsr $a50f			jsr 	ResetCodePointer 			; point to first thing to do.
.afe8	4c 5e a3	jmp $a35e			jmp 	Execute						; and run
.afeb					System_END:
.afeb	4c 2b a0	jmp $a02b			jmp 	WarmStart
.afee					System_STOP:
.afee	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>aff1	53 54 4f 50 00					.text 	"STOP",0
.aff6					System_Assert:
.aff6	ca		dex				dex
.aff7	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.affa	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.affd	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b000	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b003	d0 0a		bne $b00f			bne 	_SAOkay
.b005	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b008	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b00f	60		rts		_SAOkay:rts
.b010					System_New:
.b010	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b013	20 1a a5	jsr $a51a			jsr		ResetForRun 				; clear vars, stacks etc.
.b016	4c 2b a0	jmp $a02b			jmp 	WarmStart
.b019					System_Old:
.b019	20 0f a5	jsr $a50f			jsr 	ResetCodePointer 			; start of first line.
.b01c					_SOFindZero:
.b01c	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b01e	f0 15		beq $b035			beq 	_SOFoundEnd
.b020	c8		iny				iny
.b021	d0 f9		bne $b01c			bne 	_SOFindZero
.b023	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b026	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b02e	45 43 4f 56 45 52 00
.b035					_SOFoundEnd:
.b035	c8		iny				iny 								; update the offset
.b036	8c 00 11	sty $1100			sty 	ProgramStart
.b039	20 1a a5	jsr $a51a			jsr 	ResetForRun 				; redo all stacks etc.
.b03c	60		rts				rts
.b03d					System_Sys:
.b03d	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b040	85 14		sta $14				sta 	zTemp0
.b042	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b045	85 15		sta $15				sta 	zTemp0+1
.b047	ca		dex				dex
.b048	da		phx				phx
.b049	5a		phy				phy
.b04a	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b04d	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b050	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b053	20 62 b0	jsr $b062			jsr 	_SSCall 					; effectively jsr (zTemp)
.b056	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b059	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b05c	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b05f	7a		ply				ply
.b060	fa		plx				plx
.b061	60		rts				rts
.b062	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b065					System_ShowStack:
.b065	da		phx				phx 								; save stack
.b066	5a		phy				phy
.b067	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b069	a9 5b		lda #$5b			lda 	#"["
.b06b	20 8f a2	jsr $a28f			jsr 	ExternPrint
.b06e	e0 00		cpx #$00			cpx 	#0 							; empty
.b070	f0 14		beq $b086			beq 	_SSEnd
.b072	a2 01		ldx #$01			ldx 	#1 							; start here
.b074					_SSLoop:
.b074	20 37 a6	jsr $a637			jsr 	IntegerToString 			; print TOS
.b077	20 25 a6	jsr $a625			jsr 	ErrorPrintIntegerBuffer
.b07a	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b07c	f0 08		beq $b086			beq 	_SSEnd
.b07e	e8		inx				inx	 								; advance pointer print ,
.b07f	a9 2c		lda #$2c			lda 	#','
.b081	20 8f a2	jsr $a28f			jsr 	ExternPrint
.b084	80 ee		bra $b074			bra 	_SSLoop
.b086					_SSEnd:
.b086	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b088	20 8f a2	jsr $a28f			jsr 	ExternPrint
.b08b	a9 0d		lda #$0d			lda 	#13
.b08d	20 8f a2	jsr $a28f			jsr 	ExternPrint
.b090	7a		ply				ply
.b091	fa		plx				plx
.b092	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b093					System_Save:
.b093	20 45 a5	jsr $a545			jsr 	ResetVarMemory 				; make sure start/end are right
.b096	20 a7 b0	jsr $b0a7			jsr 	SLGetFileName 				; get filename -> zTemp0
.b099	20 d5 a2	jsr $a2d5			jsr 	ExternSave
.b09c	60		rts				rts
.b09d					System_Load:
.b09d	20 a7 b0	jsr $b0a7			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0a0	20 0f a3	jsr $a30f			jsr 	ExternLoad
.b0a3	20 1a a5	jsr $a51a			jsr 	ResetForRun 				; re-initialise everything
.b0a6	60		rts				rts
.b0a7					SLGetFileName:
.b0a7	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0a9	f0 17		beq $b0c2			beq 	_SLFNFail
.b0ab	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0ae	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0b1	d0 0f		bne $b0c2			bne 	_SLFNFail
.b0b3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b0b6	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b0b8	d0 08		bne $b0c2			bne 	_SLFNFail
.b0ba	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b0bc	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b0bf	85 14		sta $14				sta 	zTemp0
.b0c1	60		rts				rts
.b0c2					_SLFNFail:
.b0c2	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b0c5	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b0cd	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b0d2					Identifier:
.b0d2	88		dey				dey 								; wind back to identifier start
.b0d3	20 2d a4	jsr $a42d			jsr 	IdentifierSearch 			; try to find it.
.b0d6	90 2f		bcc $b107			bcc 	_IDUnknown 					; not known, give up.
.b0d8	48		pha				pha
.b0d9					_IDSkip:
.b0d9	b1 10		lda ($10),y			lda 	(codePtr),y
.b0db	c8		iny				iny
.b0dc	c9 e0		cmp #$e0			cmp 	#$E0
.b0de	90 f9		bcc $b0d9			bcc 	_IDSkip
.b0e0	68		pla				pla
.b0e1	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b0e3	d0 36		bne $b11b			bne 	_IDCall
.b0e5	20 bb b1	jsr $b1bb			jsr 	IndexCheck 					; check index/subscript
.b0e8	5a		phy				phy
.b0e9	e8		inx				inx 								; make space on stack
.b0ea	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b0ec	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b0ee	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b0f1	c8		iny				iny
.b0f2	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b0f4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b0f7	c8		iny				iny
.b0f8	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b0fa	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b0fd	c8		iny				iny
.b0fe	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b100	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b103	7a		ply				ply
.b104	4c 5e a3	jmp $a35e			jmp 	Execute
.b107					_IDUnknown:
.b107	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b10a	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b112	56 41 52 49 41 42 4c 45 00
.b11b					_IDCall:
.b11b	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b11d	d0 1b		bne $b13a			bne 	_IDCode
.b11f	20 5c b3	jsr $b35c			jsr 	StructPushCurrent 			; push current on the stack.
.b122	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b124	c6 12		dec $12				dec 	StructSP
.b126	92 12		sta ($12)			sta 	(StructSP)
.b128	a0 01		ldy #$01			ldy 	#1 							; line address
.b12a	b2 22		lda ($22)			lda 	(idDataAddr)
.b12c	85 10		sta $10				sta 	codePtr
.b12e	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b130	85 11		sta $11				sta 	codePtr+1
.b132	a0 03		ldy #$03			ldy 	#3 							; line position
.b134	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b136	a8		tay				tay
.b137	4c 5e a3	jmp $a35e			jmp 	Execute
.b13a					_IDCode:
>b13a	ff						.byte 	$FF
.b13b					ProcReturn:
.b13b					ProcReturn2:
.b13b	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b13d	c9 43		cmp #$43			cmp 	#STM_CALL
.b13f	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b141	20 90 b3	jsr $b390			jsr 	StructPopCurrent
.b144	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b146	20 56 b3	jsr $b356			jsr 	StructPopCount
.b149	60		rts				rts
.b14a					WriteVariable:
.b14a	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b14c	c9 c0		cmp #$c0			cmp 	#$C0
.b14e	90 5d		bcc $b1ad			bcc 	_WVTypeError
.b150	20 2d a4	jsr $a42d			jsr 	IdentifierSearch 			; does it exist
.b153	90 06		bcc $b15b			bcc 	_WVNoIdentifier
.b155	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b157	f0 12		beq $b16b			beq 	_WVWriteTOS 				; if so write TOS to it.
.b159	80 52		bra $b1ad			bra 	_WVTypeError 				; not, then can't do anything.
.b15b					_WVNoIdentifier:
.b15b	5a		phy				phy 								; get current line number
.b15c	a0 01		ldy #$01			ldy 	#1
.b15e	b1 10		lda ($10),y			lda 	(codePtr),y
.b160	c8		iny				iny
.b161	11 10		ora ($10),y			ora 	(codePtr),y
.b163	f0 2e		beq $b193			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b165	7a		ply				ply
.b166	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b168	20 94 a4	jsr $a494			jsr 	IdentifierCreate 			; try to find it
.b16b					_WVWriteTOS:
.b16b	88		dey				dey 								; skip over identifier.
.b16c					_WVSkipIdentifier:
.b16c	b1 10		lda ($10),y			lda 	(codePtr),y
.b16e	c8		iny				iny
.b16f	c9 e0		cmp #$e0			cmp 	#$E0
.b171	90 f9		bcc $b16c			bcc 	_WVSkipIdentifier
.b173	20 bb b1	jsr $b1bb			jsr 	IndexCheck 					; check index/subscript
.b176	5a		phy				phy									; copy TOS in
.b177	a0 00		ldy #$00			ldy 	#0
.b179	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b17c	91 22		sta ($22),y			sta 	(idDataAddr),y
.b17e	c8		iny				iny
.b17f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b182	91 22		sta ($22),y			sta 	(idDataAddr),y
.b184	c8		iny				iny
.b185	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b188	91 22		sta ($22),y			sta 	(idDataAddr),y
.b18a	c8		iny				iny
.b18b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b18e	91 22		sta ($22),y			sta 	(idDataAddr),y
.b190	7a		ply				ply
.b191	ca		dex				dex 								; drop
.b192	60		rts				rts									; go back and execute again.
.b193					_WVCantCreate:
.b193	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b196	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b19e	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b1ad					_WVTypeError:
.b1ad	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b1b0	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b1b8	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b1bb					IndexCheck:
.b1bb	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b1bd	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b1bf	d0 10		bne $b1d1			bne 	_ICExit
.b1c1	c8		iny				iny
.b1c2	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b1c4	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b1c6	f0 23		beq $b1eb			beq 	_ICArrayAccess
.b1c8	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b1ca	c9 80		cmp #$80			cmp 	#$80
.b1cc	f0 04		beq $b1d2			beq 	_ICConstAccess
.b1ce					_ICSyntax:
.b1ce	4c ad a5	jmp $a5ad			jmp 	SyntaxError
.b1d1					_ICExit:
.b1d1	60		rts				rts
.b1d2					_ICConstAccess:
.b1d2	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b1d4	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b1d6	85 16		sta $16				sta 	zTemp1
.b1d8	64 17		stz $17				stz 	zTemp1+1
.b1da	c8		iny				iny
.b1db	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b1dd	c8		iny				iny
.b1de	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b1e0	d0 ec		bne $b1ce			bne 	_ICSyntax
.b1e2	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b1e4	c8		iny				iny
.b1e5	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b1e7	d0 e5		bne $b1ce			bne 	_ICSyntax
.b1e9	80 0c		bra $b1f7			bra 	_ICAddSubscript
.b1eb					_ICArrayAccess:
.b1eb	c8		iny				iny 								; point to next
.b1ec	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b1ef	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b1f1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1f4	85 17		sta $17				sta 	zTemp1+1
.b1f6	ca		dex				dex
.b1f7					_ICAddSubscript:
.b1f7	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b1f9	26 17		rol $17				rol 	zTemp1+1
.b1fb	06 16		asl $16				asl 	zTemp1
.b1fd	26 17		rol $17				rol 	zTemp1+1
.b1ff	5a		phy				phy
.b200	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b202	a0 01		ldy #$01			ldy 	#1
.b204	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b206	c8		iny				iny
.b207	11 22		ora ($22),y			ora 	(idDataAddr),y
.b209	c8		iny				iny
.b20a	11 22		ora ($22),y			ora 	(idDataAddr),y
.b20c	f0 17		beq $b225			beq 	_ICZero
.b20e	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b20f	b2 22		lda ($22)			lda 	(idDataAddr)
.b211	65 16		adc $16				adc 	zTemp1
.b213	48		pha				pha
.b214	a0 01		ldy #$01			ldy 	#1
.b216	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b218	65 17		adc $17				adc 	zTemp1+1
.b21a	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b21c	68		pla				pla
.b21d	85 22		sta $22				sta 	idDataAddr
.b21f	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b221	64 25		stz $25				stz 	idDataAddr+3
.b223	7a		ply				ply
.b224	60		rts				rts
.b225					_ICZero:
.b225	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b228	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b230	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b23c					Struct_IF:
.b23c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check TOS
.b23f	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b242	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b245	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b248	f0 01		beq $b24b			beq 	_SIFSkipForward
.b24a	60		rts				rts
.b24b					_SIFSkipForward:
.b24b	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b24d	4c 56 b2	jmp $b256			jmp 	StructSkipForward
.b250					Struct_ELSE:
.b250	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b252	4c 56 b2	jmp $b256			jmp 	StructSkipForward
.b255					Struct_ENDIF:
.b255	60		rts				rts
.b256					StructSkipForward:
>b256	ff						.byte 	$FF

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b257					Command_For:
.b257	20 5c b3	jsr $b35c			jsr 	StructPushCurrent 			; push current on the stack.
.b25a	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b25d	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b260	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b263	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b266	f0 34		beq $b29c			beq 	_CFZero
.b268	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b26b	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b26d	c6 12		dec $12				dec 	StructSP
.b26f	92 12		sta ($12)			sta 	(StructSP)
.b271	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b274	49 ff		eor #$ff			eor 	#$FF
.b276	c6 12		dec $12				dec 	StructSP
.b278	92 12		sta ($12)			sta 	(StructSP)
.b27a	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b27d	49 ff		eor #$ff			eor 	#$FF
.b27f	c6 12		dec $12				dec 	StructSP
.b281	92 12		sta ($12)			sta 	(StructSP)
.b283	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b286	49 ff		eor #$ff			eor 	#$FF
.b288	c6 12		dec $12				dec 	StructSP
.b28a	92 12		sta ($12)			sta 	(StructSP)
.b28c	ca		dex				dex 								; pop stack value
.b28d	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b28f	c6 12		dec $12				dec 	StructSP
.b291	92 12		sta ($12)			sta 	(StructSP)
.b293	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b295	85 24		sta $24				sta 	ForAddr
.b297	a5 13		lda $13				lda 	StructSP+1
.b299	85 25		sta $25				sta 	ForAddr+1
.b29b	60		rts				rts
.b29c					_CFZero:
.b29c	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b29f	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b2a7	54 20 5a 45 52 4f 00
.b2ae					Command_Next:
.b2ae	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b2b0	c9 46		cmp #$46			cmp 	#STM_FOR
.b2b2	d0 30		bne $b2e4			bne 	_CNNoFor
.b2b4	5a		phy				phy
.b2b5	a0 00		ldy #$00			ldy 	#0
.b2b7					_CNIncrement:
.b2b7	c8		iny				iny
.b2b8	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b2ba	1a		inc a				inc 	a
.b2bb	91 12		sta ($12),y			sta 	(StructSP),y
.b2bd	f0 f8		beq $b2b7			beq		_CNIncrement 				; carry out.
.b2bf	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b2c1	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b2c3	c8		iny				iny 								; will all be $FF
.b2c4	31 12		and ($12),y			and 	(StructSP),y
.b2c6	c8		iny				iny
.b2c7	31 12		and ($12),y			and 	(StructSP),y
.b2c9	c8		iny				iny
.b2ca	31 12		and ($12),y			and 	(StructSP),y
.b2cc	7a		ply				ply 								; restore Y
.b2cd	1a		inc a				inc 	a 							; so this will be zero last time round
.b2ce	d0 06		bne $b2d6			bne 	_CNLoop 					; loop back if non-zero
.b2d0	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b2d2	20 56 b3	jsr $b356			jsr 	StructPopCount
.b2d5	60		rts				rts
.b2d6					_CNLoop:
.b2d6	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2d8	85 24		sta $24				sta 	ForAddr
.b2da	a5 13		lda $13				lda 	StructSP+1
.b2dc	85 25		sta $25				sta 	ForAddr+1
.b2de	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b2e0	20 90 b3	jsr $b390			jsr 	StructPopCurrent
.b2e3	60		rts				rts
.b2e4					_CNNoFor:
.b2e4	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b2e7	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b2ef	46 4f 52 00
.b2f3					Command_Index:
.b2f3	5a		phy				phy
.b2f4	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b2f6	e8		inx				inx
.b2f7	38		sec				sec
.b2f8	a9 fe		lda #$fe			lda 	#$FE
.b2fa	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b2fc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b2ff	c8		iny				iny
.b300	a9 ff		lda #$ff			lda 	#$FF
.b302	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b304	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b307	c8		iny				iny
.b308	a9 ff		lda #$ff			lda 	#$FF
.b30a	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b30c	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b30f	c8		iny				iny
.b310	a9 ff		lda #$ff			lda 	#$FF
.b312	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b314	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b317	7a		ply				ply
.b318	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b319					Command_Repeat:
.b319	20 5c b3	jsr $b35c			jsr 	StructPushCurrent 			; push current on the stack.
.b31c	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b31e	c6 12		dec $12				dec 	StructSP
.b320	92 12		sta ($12)			sta 	(StructSP)
.b322	60		rts				rts
.b323					Command_Until:
.b323	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b325	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b327	d0 1b		bne $b344			bne 	_CUNoRepeat
.b329	ca		dex				dex 								; pop
.b32a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b32d	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b330	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b333	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b336	f0 06		beq $b33e			beq 	_CULoop
.b338	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b33a	20 56 b3	jsr $b356			jsr 	StructPopCount
.b33d	60		rts				rts
.b33e					_CULoop:
.b33e	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b340	20 90 b3	jsr $b390			jsr 	StructPopCurrent
.b343	60		rts				rts
.b344					_CUNoRepeat:
.b344	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b347	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b34f	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b356					StructPopCount:
.b356	18		clc				clc
.b357	65 12		adc $12				adc 	StructSP
.b359	85 12		sta $12				sta 	StructSP
.b35b	60		rts				rts
.b35c					StructPushCurrent:
.b35c	a5 12		lda $12				lda 	StructSP 					; check space for more
.b35e	c9 0a		cmp #$0a			cmp 	#10
.b360	90 18		bcc $b37a			bcc 	_SPCSpace
.b362	a9 00		lda #$00			lda 	#0							; push bank
.b364	c6 12		dec $12				dec 	StructSP
.b366	92 12		sta ($12)			sta 	(StructSP)
.b368	98		tya				tya									; y Offset
.b369	c6 12		dec $12				dec 	StructSP
.b36b	92 12		sta ($12)			sta 	(StructSP)
.b36d	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b36f	c6 12		dec $12				dec 	StructSP
.b371	92 12		sta ($12)			sta 	(StructSP)
.b373	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b375	c6 12		dec $12				dec 	StructSP
.b377	92 12		sta ($12)			sta 	(StructSP)
.b379	60		rts				rts
.b37a					_SPCSpace:
.b37a	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b37d	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b385	54 41 43 4b 20 53 50 41 43 45 00
.b390					StructPopCurrent:
.b390	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b392	85 10		sta $10				sta 	codePtr
.b394	c8		iny				iny
.b395	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b397	85 11		sta $11				sta 	codePtr+1
.b399	c8		iny				iny
.b39a	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b39c	a8		tay				tay
.b39d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	08 64 00 83 80 b9 4e 00			.byte $08,$64,$00,$83,$80,$b9,$4e,$00,$08,$6e,$00,$8d,$90,$b1,$4e,$00,$06,$78,$00,$16,$2d,$00,$10,$82,$00,$29,$d2,$d3,$c0,$f1,$aa,$4e,$c4,$cc,$c8,$f3,$18,$00,$11,$8c,$00,$29,$c4,$cc,$c8,$f3,$4d,$e0,$8f,$bf,$92,$4e,$46,$18,$00
>1108	08 6e 00 8d 90 b1 4e 00 06 78 00 16 2d 00 10 82
>1118	00 29 d2 d3 c0 f1 aa 4e c4 cc c8 f3 18 00 11 8c
>1128	00 29 c4 cc c8 f3 4d e0 8f bf 92 4e 46 18 00

;******  Return to file: main.asm

>1137	00						.byte 	0

;******  End of listing
