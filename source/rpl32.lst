
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Wed Oct  9 08:19:52 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9800					MemoryEnd = $9800 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 76 a2	jsr $a276			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 99 a0	lda $a099,x			lda 	BootMessage,x
.a00b	20 97 a2	jsr $a297			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 99 a0	lda $a099,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 87		ldy #$87			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 12 a6	jsr $a612			jsr 	ErrorPrint16
.a01d	a9 0d		lda #$0d			lda 	#13
.a01f	20 97 a2	jsr $a297			jsr 	ExternPrint
.a022	20 97 a2	jsr $a297			jsr 	ExternPrint
.a025	a9 98		lda #$98			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a027	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a02a	9c 8a 10	stz $108a			stz 	AllocMemory
.a02d	20 22 a5	jsr $a522			jsr 	ResetForRun
.a030	20 17 a5	jsr $a517			jsr 	ResetCodePointer
.a033					WarmStart:
.a033	a9 06		lda #$06			lda 	#COL_CYAN
.a035	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a038	a9 4f		lda #$4f			lda 	#"O"
.a03a	20 97 a2	jsr $a297			jsr 	ExternPrint
.a03d	a9 4b		lda #$4b			lda 	#"K"
.a03f	20 97 a2	jsr $a297			jsr 	ExternPrint
.a042	a9 0d		lda #$0d			lda 	#13
.a044	20 97 a2	jsr $a297			jsr 	ExternPrint
.a047					NewCommand:
.a047	8a		txa				txa
.a048	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a04a	9a		txs				txs
.a04b	aa		tax				tax
.a04c	a9 07		lda #$07			lda 	#COL_WHITE
.a04e	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a051	20 b5 a2	jsr $a2b5			jsr 	ExternInput 				; input text
.a054	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a056	85 10		sta $10				sta 	codePtr
.a058	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a05a	85 11		sta $11				sta 	codePtr+1
.a05c	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a05e	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a060	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a062	85 17		sta $17				sta 	zTemp1+1
.a064	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a067	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a06a	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a06d	20 82 a7	jsr $a782			jsr 	Tokenise
.a070	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a072					SkipSpaces:
.a072	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a075	c8		iny				iny
.a076	c9 20		cmp #$20			cmp 	#' '
.a078	f0 f8		beq $a072			beq 	SkipSpaces
.a07a	c9 30		cmp #$30			cmp 	#'0'
.a07c	90 0e		bcc $a08c			bcc 	ExecuteCLI
.a07e	c9 3a		cmp #$3a			cmp 	#'9'+1
.a080	b0 0a		bcs $a08c			bcs 	ExecuteCLI
.a082	ad 00 09	lda $0900			lda 	InputBuffer
.a085	c9 20		cmp #$20			cmp 	#' '
.a087	f0 03		beq $a08c			beq 	ExecuteCLI
.a089	4c f1 a8	jmp $a8f1			jmp		EditProgram
.a08c					ExecuteCLI:
.a08c	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a08e	85 10		sta $10				sta 	codePtr
.a090	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a092	85 11		sta $11				sta 	codePtr+1
.a094	a0 03		ldy #$03			ldy 	#3
.a096	4c 66 a3	jmp $a366			jmp 	Execute 					; and run it
.a099					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a099	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$35,$20,$44,$41,$54,$45,$3a,$30,$39,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a1	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b1	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c1	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d1	39 0d 0d 42 55 49 4c 44 3a 35 20 44 41 54 45 3a
>a0e1	30 39 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0f1	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a100					KeywordText:
>a100	01 21					.byte $01,$21                          ; $10 !
>a102	01 2a					.byte $01,$2a                          ; $11 *
>a104	01 2b					.byte $01,$2b                          ; $12 +
>a106	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a109	01 2d					.byte $01,$2d                          ; $14 -
>a10b	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a10e	01 2e					.byte $01,$2e                          ; $16 .
>a110	01 2f					.byte $01,$2f                          ; $17 /
>a112	01 3b					.byte $01,$3b                          ; $18 ;
>a114	01 3c					.byte $01,$3c                          ; $19 <
>a116	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a119	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a11c	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a11f	01 3d					.byte $01,$3d                          ; $1d =
>a121	01 3e					.byte $01,$3e                          ; $1e >
>a123	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a126	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a129	01 40					.byte $01,$40                          ; $21 @
>a12b	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a12f	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a135	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a139	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a140	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a143	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a146	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a14a	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a14e	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a153	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a157	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a15c	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a160	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a166	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a16a	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a16d	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a173	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a178	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a17d	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a181	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a188	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a18c	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a191	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a195	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a199	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a19d	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a0	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1a5	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1ad	52
>a1ae	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1b5	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1bc	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c0	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1c5	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1c9	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1cd	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1d2	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1d7	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1db	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1e1	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1e4	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1e7	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1eb	01 5b					.byte $01,$5b                          ; $4b [
>a1ed	01 5d					.byte $01,$5d                          ; $4c ]
>a1ef	01 5e					.byte $01,$5e                          ; $4d ^
>a1f1	01 2b					.byte $01,$2b                          ; $4e {+}
>a1f3	01 2d					.byte $01,$2d                          ; $4f {-}
>a1f5	00					.byte $00
.a1f6					KeywordVectorTable:
>a1f6	ad ab					.word Mem_DPoke                        ; $10 !
>a1f8	cb ac					.word MulInteger32                     ; $11 *
>a1fa	d4 ab					.word Stack_Add                        ; $12 +
>a1fc	d4 aa					.word Unary_Increment                  ; $13 ++
>a1fe	fb ab					.word Stack_Sub                        ; $14 -
>a200	e7 aa					.word Unary_Decrement                  ; $15 --
>a202	6a b0					.word System_ShowStack                 ; $16 .
>a204	14 ad					.word DivInteger32                     ; $17 /
>a206	42 b1					.word ProcReturn                       ; $18 ;
>a208	fb ad					.word Comp_Less                        ; $19 <
>a20a	09 ab					.word Unary_Shl                        ; $1a <<
>a20c	26 ae					.word Comp_LessEqual                   ; $1b <=
>a20e	c4 ad					.word Comp_NotEqual                    ; $1c <>
>a210	c1 ad					.word Comp_Equal                       ; $1d =
>a212	29 ae					.word Comp_Greater                     ; $1e >
>a214	fe ad					.word Comp_GreaterEqual                ; $1f >=
>a216	16 ab					.word Unary_Shr                        ; $20 >>
>a218	5b ab					.word Mem_DPeek                        ; $21 @
>a21a	8b aa					.word Unary_Absolute                   ; $22 ABS
>a21c	51 ae					.word Allocate                         ; $23 ALLOC
>a21e	22 ac					.word Stack_And                        ; $24 AND
>a220	fb af					.word System_Assert                    ; $25 ASSERT
>a222	80 ab					.word Mem_Poke                         ; $26 C!
>a224	23 ab					.word Mem_Peek                         ; $27 C@
>a226	fd a9					.word Stack_Empty                      ; $28 CLR
>a228	ad a5					.word SyntaxError                      ; $29 DEF
>a22a	00 aa					.word Stack_Drop                       ; $2a DROP
>a22c	02 aa					.word Stack_Dup                        ; $2b DUP
>a22e	57 b2					.word Struct_ELSE                      ; $2c ELSE
>a230	f0 af					.word System_END                       ; $2d END
>a232	5c b2					.word Struct_ENDIF                     ; $2e ENDIF
>a234	78 b2					.word Command_For                      ; $2f FOR
>a236	43 b2					.word Struct_IF                        ; $30 IF
>a238	14 b3					.word Command_Index                    ; $31 INDEX
>a23a	91 ae					.word Cmd_List                         ; $32 LIST
>a23c	a2 b0					.word System_Load                      ; $33 LOAD
>a23e	a9 ad					.word ModInteger32                     ; $34 MOD
>a240	91 aa					.word Unary_Negate                     ; $35 NEGATE
>a242	15 b0					.word System_New                       ; $36 NEW
>a244	cf b2					.word Command_Next                     ; $37 NEXT
>a246	1c aa					.word Stack_Nip                        ; $38 NIP
>a248	b3 aa					.word Unary_Not                        ; $39 NOT
>a24a	1e b0					.word System_Old                       ; $3a OLD
>a24c	6e ac					.word Stack_Or                         ; $3b OR
>a24e	36 aa					.word Stack_Over                       ; $3c OVER
>a250	af af					.word Cmd_Renumber                     ; $3d RENUMBER
>a252	3a b3					.word Command_Repeat                   ; $3e REPEAT
>a254	42 b1					.word ProcReturn2                      ; $3f RETURN
>a256	e7 af					.word System_RUN                       ; $40 RUN
>a258	98 b0					.word System_Save                      ; $41 SAVE
>a25a	94 ac					.word Stack_Shl                        ; $42 SHL
>a25c	97 ac					.word Stack_Shr                        ; $43 SHR
>a25e	f3 af					.word System_STOP                      ; $44 STOP
>a260	50 aa					.word Stack_Swap                       ; $45 SWAP
>a262	42 b0					.word System_Sys                       ; $46 SYS
>a264	44 b3					.word Command_Until                    ; $47 UNTIL
>a266	92 ab					.word Mem_WPoke                        ; $48 W!
>a268	3c ab					.word Mem_WPeek                        ; $49 W@
>a26a	48 ac					.word Stack_Xor                        ; $4a XOR
>a26c	ad a5					.word SyntaxError                      ; $4b [
>a26e	ad a5					.word SyntaxError                      ; $4c ]
>a270	51 b1					.word WriteVariable                    ; $4d ^
>a272	ad a5					.word SyntaxError                      ; $4e {+}
>a274	ad a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a276					ExternInitialise:
.a276	a9 07		lda #$07			lda 	#$07 						; set colour
.a278	8d 86 02	sta $0286			sta 	646
.a27b	a9 0e		lda #$0e			lda 	#14							; lower case
.a27d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a280	a9 93		lda #$93			lda 	#147 						; clear screen
.a282	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a285	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a287	4c a1 a2	jmp $a2a1			jmp 	ExternColour
.a28a					ExternCheckBreak:
.a28a	da		phx				phx 								; make sure we keep XY
.a28b	5a		phy				phy
.a28c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a28f	f0 03		beq $a294			beq		_ECBExit 					; stopped
.a291	7a		ply				ply 								; restore and exit.
.a292	fa		plx				plx
.a293	60		rts				rts
.a294					_ECBExit:
.a294	4c 33 a0	jmp $a033			jmp 	WarmStart
.a297					ExternPrint:
.a297	48		pha				pha
.a298	da		phx				phx
.a299	5a		phy				phy
.a29a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a29d	7a		ply				ply
.a29e	fa		plx				plx
.a29f	68		pla				pla
.a2a0	60		rts				rts
.a2a1					ExternColour:
.a2a1	48		pha				pha
.a2a2	da		phx				phx
.a2a3	aa		tax				tax
.a2a4	bd ad a2	lda $a2ad,x			lda 	_ECTable,x
.a2a7	20 97 a2	jsr $a297			jsr 	ExternPrint
.a2aa	fa		plx				plx
.a2ab	68		pla				pla
.a2ac	60		rts				rts
.a2ad					_ECTable:
>a2ad	90						.byte 	144
>a2ae	1c						.byte 	28
>a2af	1e						.byte 	30
>a2b0	9e						.byte 	158
>a2b1	1f						.byte 	31
>a2b2	9c						.byte 	156
>a2b3	9f						.byte 	159
>a2b4	05						.byte 	5
.a2b5					ExternInput:
.a2b5	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2b7	85 14		sta $14				sta 	zTemp0
.a2b9	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2bb	85 15		sta $15				sta 	zTemp0+1
.a2bd	a9 07		lda #$07			lda 	#COL_WHITE
.a2bf	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a2c2	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2c5	c9 0d		cmp #$0d			cmp 	#13
.a2c7	f0 0a		beq $a2d3			beq 	_EIExit
.a2c9	92 14		sta ($14)			sta 	(zTemp0)
.a2cb	e6 14		inc $14				inc 	zTemp0
.a2cd	d0 f3		bne $a2c2			bne 	_EIRead
.a2cf	e6 15		inc $15				inc 	zTemp0+1
.a2d1	80 ef		bra $a2c2			bra 	_EIRead
.a2d3	a9 00		lda #$00	_EIExit:lda 	#0
.a2d5	92 14		sta ($14)			sta 	(zTemp0)
.a2d7	a9 0d		lda #$0d			lda 	#13
.a2d9	20 97 a2	jsr $a297			jsr 	ExternPrint
.a2dc	60		rts				rts
.a2dd					ExternSave:
.a2dd	da		phx				phx
.a2de	5a		phy				phy
.a2df	20 47 a3	jsr $a347			jsr 	EXGetLength 				; get length of file into A
.a2e2	a6 14		ldx $14				ldx 	zTemp0
.a2e4	a4 15		ldy $15				ldy 	zTemp0+1
.a2e6	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a2e9	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a2eb	a0 00		ldy #$00			ldy 	#0
.a2ed	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a2f0	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a2f2	85 c1		sta $c1				sta 	$C1
.a2f4	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a2f6	85 c2		sta $c2				sta 	$C2
.a2f8	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a2fb	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a2fe	a9 c1		lda #$c1			lda 	#$C1
.a300	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a303	b0 03		bcs $a308			bcs 	_ESSave
.a305	7a		ply				ply
.a306	fa		plx				plx
.a307	60		rts				rts
.a308					_ESSave:
.a308	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a30b	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a313	4c 45 44 00
.a317					ExternLoad:
.a317	da		phx				phx
.a318	5a		phy				phy
.a319	20 47 a3	jsr $a347			jsr 	EXGetLength 				; get length of file into A
.a31c	a6 14		ldx $14				ldx 	zTemp0
.a31e	a4 15		ldy $15				ldy 	zTemp0+1
.a320	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a323	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a325	a0 00		ldy #$00			ldy 	#0
.a327	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a32a	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a32c	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a32e	a9 00		lda #$00			lda 	#0 							; load command
.a330	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a333	b0 03		bcs $a338			bcs 	_ESLoad
.a335	7a		ply				ply
.a336	fa		plx				plx
.a337	60		rts				rts
.a338					_ESLoad:
.a338	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a33b	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a343	4c 45 44 00
.a347					EXGetLength:
.a347	a0 ff		ldy #$ff			ldy 	#255
.a349	c8		iny		_EXGL:	iny
.a34a	b1 14		lda ($14),y			lda 	(zTemp0),y
.a34c	d0 fb		bne $a349			bne 	_EXGL
.a34e	98		tya				tya
.a34f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a350					EXNextLine:
.a350	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a352	f0 0f		beq $a363			beq 	_EXNLWarmStart
.a354	18		clc				clc 								; advance code pointer to next line
.a355	65 10		adc $10				adc 	codePtr
.a357	85 10		sta $10				sta 	codePtr
.a359	90 02		bcc $a35d			bcc 	_EXNLNoBump
.a35b	e6 11		inc $11				inc 	codePtr+1
.a35d					_EXNLNoBump:
.a35d	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a35f	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a361	d0 03		bne $a366			bne 	Execute 					; not end of program
.a363					_EXNLWarmStart:
.a363	4c f0 af	jmp $aff0			jmp 	System_END
.a366	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a368	b0 1c		bcs $a386			bcs 	EXStackOverflow
.a36a	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a36d	d0 03		bne $a372			bne 	_EXNoBreak
.a36f	20 8a a2	jsr $a28a			jsr 	ExternCheckBreak
.a372					_EXNoBreak:
.a372	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a374	f0 da		beq $a350			beq 	EXNextLine 					; reached end of the line.
.a376	c8		iny				iny 								; advance pointer.
.a377	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a379	90 39		bcc $a3b4			bcc 	EXStringComment
.a37b	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a37d	90 1f		bcc $a39e			bcc 	EXTokenExecute
.a37f	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a381	90 15		bcc $a398			bcc 	EXPushConstant
.a383	4c d9 b0	jmp $b0d9			jmp 	Identifier 					; it's an identifier C0-FF
.a386					EXStackOverflow:
.a386	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a389	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a391	45 52 46 4c 4f 57 00
.a398					EXPushConstant:
.a398	88		dey				dey
.a399	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS 		; extract integer
.a39c	80 c8		bra $a366			bra 	Execute
.a39e					EXTokenExecute:
.a39e	0a		asl a				asl 	a 							; double token, also clears carry
.a39f	da		phx				phx 								; save X, put token x 2 in X
.a3a0	aa		tax				tax
.a3a1	bd d6 a1	lda $a1d6,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3a4	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3a6	bd d7 a1	lda $a1d7,x			lda 	KeywordVectorTable-$20+1,x
.a3a9	85 15		sta $15				sta 	zTemp0+1
.a3ab	fa		plx				plx 								; restore X
.a3ac	20 b1 a3	jsr $a3b1			jsr 	_EXTCall 					; call the routine
.a3af	80 b5		bra $a366			bra 	Execute
.a3b1					_EXTCall:
.a3b1	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3b4					EXStringComment:
.a3b4	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3b6	f0 15		beq $a3cd			beq 	EXStringSkip 				; (comment), so just skip it.
.a3b8	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3b9	98		tya				tya
.a3ba	38		sec				sec
.a3bb	65 10		adc $10				adc 	codePtr
.a3bd	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3c0	a5 11		lda $11				lda 	codePtr+1
.a3c2	69 00		adc #$00			adc 	#0
.a3c4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3c7	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3ca	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3cd					EXStringSkip:
.a3cd	98		tya				tya 								; the current position in A
.a3ce	18		clc				clc
.a3cf	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3d1	a8		tay				tay 			 					; and make that the current position.
.a3d2	88		dey				dey 								; back one because of the initial skip
.a3d3	80 91		bra $a366			bra 	Execute
.a3d5					EXShiftTOSRight:
.a3d5	4a		lsr a				lsr 	a
.a3d6	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3d9	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3dc	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a3df	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a3e2	60		rts				rts
.a3e3					ExtractIntegerToTOS:
.a3e3	b1 10		lda ($10),y			lda 	(codePtr),y
.a3e5	c8		iny				iny
.a3e6	e8		inx				inx 								; make stack space
.a3e7	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a3e9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3ec	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a3ef	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a3f2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3f5					_EXConstantLoop:
.a3f5	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a3f7	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a3f9	c9 80		cmp #$80			cmp 	#$80
.a3fb	d0 2d		bne $a42a			bne		_EXDone 					; no then exit
.a3fd	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a400	48		pha				pha
.a401	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a404	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a407	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a40a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a40d	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a410	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a413	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a416	68		pla				pla
.a417	20 d5 a3	jsr $a3d5			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a41a	20 d5 a3	jsr $a3d5			jsr 	EXShiftTOSRight				; which will be x64
.a41d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a41f	c8		iny				iny
.a420	29 3f		and #$3f			and 	#$3F
.a422	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a425	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a428	80 cb		bra $a3f5			bra 	_EXConstantLoop
.a42a	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a42c	c8		iny				iny 								; skip over unary constant + -
.a42d	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a42f	d0 03		bne $a434			bne 	_EXPositive
.a431	4c 91 aa	jmp $aa91			jmp 	Unary_Negate
.a434					_EXPositive:
.a434	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a435					IdentifierSearch:
.a435	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a437	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a439	90 12		bcc $a44d			bcc 	_ISSlow
.a43b	c9 fa		cmp #$fa			cmp 	#$F9+1
.a43d	b0 0e		bcs $a44d			bcs 	_ISSlow
.a43f	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a441	0a		asl a				asl 	a
.a442	0a		asl a				asl		a
.a443	85 22		sta $22				sta 	idDataAddr					; set up addres
.a445	a9 10		lda #$10			lda 	#AZVariables >> 8
.a447	85 23		sta $23				sta 	idDataAddr+1
.a449	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a44b	38		sec				sec 								; return with CS.
.a44c	60		rts				rts
.a44d					_ISSlow:
.a44d	20 09 a5	jsr $a509			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a450	98		tya				tya 								; set (zTemp1) to point to the
.a451	18		clc				clc 	 							; identifier to be searched.
.a452	65 10		adc $10				adc 	codePtr
.a454	85 16		sta $16				sta 	zTemp1
.a456	a5 11		lda $11				lda 	codePtr+1
.a458	69 00		adc #$00			adc 	#0
.a45a	85 17		sta $17				sta 	zTemp1+1
.a45c	5a		phy				phy 								; save Y
.a45d	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a45f	48		pha				pha
.a460	a0 01		ldy #$01			ldy 	#1
.a462	b1 14		lda ($14),y			lda 	(zTemp0),y
.a464	85 15		sta $15				sta 	zTemp0+1
.a466	68		pla				pla
.a467	85 14		sta $14				sta 	zTemp0
.a469	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a46b	f0 2c		beq $a499			beq 	_ISFail
.a46d	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a46f	b1 14		lda ($14),y			lda 	(zTemp0),y
.a471	85 18		sta $18				sta 	zTemp2
.a473	c8		iny				iny
.a474	b1 14		lda ($14),y			lda 	(zTemp0),y
.a476	85 19		sta $19				sta 	zTemp2+1
.a478	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a47a					_ISCompare:
.a47a	b1 16		lda ($16),y			lda 	(zTemp1),y
.a47c	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a47e	d0 dd		bne $a45d			bne		_ISLoop 					; different ?
.a480	c8		iny				iny
.a481	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a483	90 f5		bcc $a47a			bcc 	_ISCompare
.a485	18		clc				clc 								; set up the data pointer
.a486	a5 14		lda $14				lda 	zTemp0
.a488	69 02		adc #$02			adc 	#2
.a48a	85 22		sta $22				sta 	idDataAddr
.a48c	a5 15		lda $15				lda 	zTemp0+1
.a48e	69 00		adc #$00			adc		#0
.a490	85 23		sta $23				sta 	idDataAddr+1
.a492	a0 09		ldy #$09			ldy 	#9 							; get the type
.a494	b1 14		lda ($14),y			lda 	(zTemp0),y
.a496	7a		ply				ply
.a497	38		sec				sec
.a498	60		rts				rts
.a499					_ISFail:
.a499	7a		ply				ply
.a49a	18		clc				clc
.a49b	60		rts				rts
.a49c					IdentifierCreate:
.a49c	5a		phy				phy 								; save Y
.a49d	48		pha				pha 								; save type on stack
.a49e	20 09 a5	jsr $a509			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4a1	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4a4	85 16		sta $16				sta 	zTemp1
.a4a6	ad 89 10	lda $1089			lda 	VarMemory+1
.a4a9	85 17		sta $17				sta 	zTemp1+1
.a4ab	5a		phy				phy 								; save Y (code offset)
.a4ac	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4ae	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4b0	91 16		sta ($16),y			sta 	(zTemp1),y
.a4b2	c8		iny				iny
.a4b3	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4b5	91 16		sta ($16),y			sta 	(zTemp1),y
.a4b7	c8		iny				iny
.a4b8					_IDCErase:
.a4b8	a9 00		lda #$00			lda 	#0
.a4ba	91 16		sta ($16),y			sta 	(zTemp1),y
.a4bc	c8		iny				iny
.a4bd	c0 06		cpy #$06			cpy 	#6
.a4bf	d0 f7		bne $a4b8			bne 	_IDCErase
.a4c1	68		pla				pla 								; original Y
.a4c2	18		clc				clc
.a4c3	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4c5	91 16		sta ($16),y			sta 	(zTemp1),y
.a4c7	c8		iny				iny
.a4c8	a5 11		lda $11				lda 	codePtr+1
.a4ca	69 00		adc #$00			adc 	#0
.a4cc	91 16		sta ($16),y			sta 	(zTemp1),y
.a4ce	c8		iny				iny
.a4cf	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4d1	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d3	68		pla				pla 								; restore type
.a4d4	c8		iny				iny
.a4d5	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4d7	c8		iny				iny
.a4d8	98		tya				tya									; add offset to VarMemory
.a4d9	18		clc				clc
.a4da	6d 88 10	adc $1088			adc 	VarMemory
.a4dd	8d 88 10	sta $1088			sta 	VarMemory
.a4e0	ad 89 10	lda $1089			lda 	VarMemory+1
.a4e3	69 00		adc #$00			adc 	#0
.a4e5	8d 89 10	sta $1089			sta 	VarMemory+1
.a4e8	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a4eb	f0 19		beq $a506			beq 	_IDCMemory
.a4ed	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a4ef	92 14		sta ($14)			sta 	(zTemp0)
.a4f1	a0 01		ldy #$01			ldy 	#1
.a4f3	a5 17		lda $17				lda 	zTemp1+1
.a4f5	91 14		sta ($14),y			sta 	(zTemp0),y
.a4f7	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a4f9	18		clc				clc
.a4fa	69 02		adc #$02			adc 	#2
.a4fc	85 22		sta $22				sta 	idDataAddr
.a4fe	a5 17		lda $17				lda 	zTemp1+1
.a500	69 00		adc #$00			adc 	#0
.a502	85 23		sta $23				sta 	idDataAddr+1
.a504	7a		ply				ply 								; restore Y and exit
.a505	60		rts				rts
.a506					_IDCMemory:
.a506	4c bd a5	jmp $a5bd			jmp 	OutOfMemoryError
.a509					IdentifierSetUpHashPtr:
.a509	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the first operator
.a50b	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a50d	0a		asl a				asl 	a 							; convert to an offset, clc
.a50e	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a510	85 14		sta $14				sta 	zTemp0
.a512	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a514	85 15		sta $15				sta 	zTemp0+1
.a516	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a517					ResetCodePointer:
.a517	48		pha				pha
.a518	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a51a	85 11		sta $11				sta 	codePtr+1
.a51c	64 10		stz $10				stz 	codePtr
.a51e	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a520	68		pla				pla
.a521	60		rts				rts
.a522					ResetForRun:
.a522	48		pha				pha
.a523	5a		phy				phy
.a524	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a526					_RRErase:
.a526	9e 68 10	stz $1068,x			stz		HashTable,x
.a529	e8		inx				inx
.a52a	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a52c	d0 f8		bne $a526			bne 	_RRErase
.a52e	20 45 a5	jsr $a545			jsr 	ResetVarMemory
.a531	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a533	85 12		sta $12				sta 	StructSP
.a535	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a537	85 13		sta $13				sta 	StructSP+1
.a539	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a53b	92 12		sta ($12)			sta 	(StructSP)
.a53d	20 6c a5	jsr $a56c			jsr 	ProcedureScan
.a540	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a542	7a		ply				ply
.a543	68		pla				pla
.a544	60		rts				rts
.a545					ResetVarMemory:
.a545	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a547	85 14		sta $14				sta 	zTemp0
.a549	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a54b	85 15		sta $15				sta 	zTemp0+1
.a54d					_RRFindEnd:
.a54d	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a54f	f0 0b		beq $a55c			beq 	_RRFoundEnd
.a551	18		clc				clc 								; no, add offset to pointer.
.a552	65 14		adc $14				adc 	zTemp0
.a554	85 14		sta $14				sta 	zTemp0
.a556	90 f5		bcc $a54d			bcc 	_RRFindEnd
.a558	e6 15		inc $15				inc 	zTemp0+1
.a55a	80 f1		bra $a54d			bra 	_RRFindEnd
.a55c					_RRFoundEnd:
.a55c	18		clc				clc 								; add 1 to this, as it points to the last
.a55d	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a55f	69 01		adc #$01			adc 	#1
.a561	8d 88 10	sta $1088			sta 	VarMemory
.a564	a5 15		lda $15				lda 	zTemp0+1
.a566	69 00		adc #$00			adc 	#0
.a568	8d 89 10	sta $1089			sta 	VarMemory+1
.a56b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a56c					ProcedureScan:
.a56c	20 17 a5	jsr $a517			jsr 	ResetCodePointer 			; reset the code pointer.
.a56f	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a571	f0 39		beq $a5ac			beq 	_PSExit
.a573	a0 03		ldy #$03			ldy 	#3 							; start of line
.a575	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a577	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a579	d0 24		bne $a59f			bne 	_PSNext
.a57b	c8		iny				iny 								; skip over def first
.a57c	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a57e	29 e0		and #$e0			and 	#$E0
.a580	c9 c0		cmp #$c0			cmp 	#$C0
.a582	d0 1b		bne $a59f			bne 	_PSNext 					; otherwise ignore it.
.a584	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a586	20 9c a4	jsr $a49c			jsr 	IdentifierCreate
.a589					_PSSkipIdentifier:
.a589	b1 10		lda ($10),y			lda 	(codePtr),y
.a58b	c9 e0		cmp #$e0			cmp 	#$E0
.a58d	c8		iny				iny
.a58e	90 f9		bcc $a589			bcc 	_PSSkipIdentifier
.a590	98		tya				tya  								; save the address in the data slot.
.a591	a0 03		ldy #$03			ldy 	#3
.a593	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a595	a5 10		lda $10				lda 	codePtr
.a597	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a599	a5 11		lda $11				lda 	codePtr+1
.a59b	a0 01		ldy #$01			ldy 	#1
.a59d	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a59f					_PSNext:
.a59f	18		clc				clc 								; go to next
.a5a0	b2 10		lda ($10)			lda 	(codePtr)
.a5a2	65 10		adc $10				adc 	codePtr
.a5a4	85 10		sta $10				sta 	codeptr
.a5a6	90 c7		bcc $a56f			bcc 	_PSMain
.a5a8	e6 11		inc $11				inc 	codePtr+1
.a5aa	80 c3		bra $a56f			bra 	_PSMain
.a5ac					_PSExit:
.a5ac	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5ad					SyntaxError:
.a5ad	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a5b0	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5b8	52 52 4f 52 00
.a5bd					OutOfMemoryError:
.a5bd	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a5c0	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5c8	45 4d 4f 52 59 00
.a5ce					ErrorHandler:
.a5ce	68		pla				pla 								; pop message address
.a5cf	85 14		sta $14				sta 	zTemp0
.a5d1	68		pla				pla
.a5d2	85 15		sta $15				sta 	zTemp0+1
.a5d4	a9 05		lda #$05			lda 	#CTH_ERROR
.a5d6	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.a5d9	a0 01		ldy #$01			ldy 	#1 							; print it
.a5db					_ErrorPrint:
.a5db	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5dd	20 97 a2	jsr $a297			jsr		ExternPrint
.a5e0	c8		iny				iny
.a5e1	b1 14		lda ($14),y			lda 	(zTemp0),y
.a5e3	d0 f6		bne $a5db			bne 	_ErrorPrint
.a5e5	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a5e7	b1 10		lda ($10),y			lda		(codePtr),y
.a5e9	c8		iny				iny
.a5ea	12 10		ora ($10)			ora 	(codePtr)
.a5ec	f0 1c		beq $a60a			beq 	_ErrorNoLine 				; if so, skip
.a5ee	a9 20		lda #$20			lda 	#32
.a5f0	20 97 a2	jsr $a297			jsr 	ExternPrint
.a5f3	a9 40		lda #$40			lda 	#'@'
.a5f5	20 97 a2	jsr $a297			jsr 	ExternPrint
.a5f8	a9 20		lda #$20			lda 	#32
.a5fa	20 97 a2	jsr $a297			jsr 	ExternPrint
.a5fd	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a5ff	b1 10		lda ($10),y			lda 	(codePtr),y
.a601	48		pha				pha
.a602	c8		iny				iny
.a603	b1 10		lda ($10),y			lda 	(codePtr),y
.a605	a8		tay				tay
.a606	68		pla				pla
.a607	20 12 a6	jsr $a612			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a60a					_ErrorNoLine:
.a60a	a9 0d		lda #$0d			lda 	#13							; new line
.a60c	20 97 a2	jsr $a297			jsr 	ExternPrint
.a60f	4c 33 a0	jmp $a033			jmp 	WarmStart
.a612					ErrorPrint16:
.a612	da		phx				phx
.a613	e8		inx				inx 								; space on stack
.a614	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a617	98		tya				tya
.a618	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a61b	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a61e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a621	20 37 a6	jsr $a637			jsr 	IntegerToString 			; convert to string.
.a624	fa		plx				plx
.a625					ErrorPrintIntegerBuffer:
.a625	da		phx				phx
.a626	a2 00		ldx #$00			ldx 	#0
.a628					_EP16Loop:
.a628	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a62b	20 97 a2	jsr $a297			jsr 	ExternPrint
.a62e	e8		inx				inx
.a62f	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a632	d0 f4		bne $a628			bne 	_EP16Loop
.a634	8a		txa				txa
.a635	fa		plx				plx
.a636	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a637					IntegerToString:
.a637	48		pha				pha
.a638	5a		phy				phy
.a639	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a63c	48		pha				pha
.a63d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a640	48		pha				pha
.a641	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a644	48		pha				pha
.a645	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a648	48		pha				pha
.a649	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a64c	10 08		bpl $a656			bpl 		_ITSNotMinus
.a64e	a9 2d		lda #$2d			lda 		#"-"
.a650	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter
.a653	20 91 aa	jsr $aa91			jsr 		Unary_Negate
.a656					_ITSNotMinus:
.a656	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a659	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a65c	8a		txa				txa 								; use Y for the integer index.
.a65d	a8		tay				tay
.a65e	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a660					_ITSNextSubtractor:
.a660	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a662	8d 21 08	sta $0821			sta 		NumConvCount
.a665					_ITSSubtract:
.a665	38		sec				sec
.a666	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a669	fd d4 a6	sbc $a6d4,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a66c	48		pha				pha
.a66d	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a670	fd d5 a6	sbc $a6d5,x			sbc 		_ITSSubtractors+1,x
.a673	48		pha				pha
.a674	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a677	fd d6 a6	sbc $a6d6,x			sbc 		_ITSSubtractors+2,x
.a67a	48		pha				pha
.a67b	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a67e	fd d7 a6	sbc $a6d7,x			sbc 		_ITSSubtractors+3,x
.a681	90 14		bcc $a697			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a683	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a686	68		pla				pla
.a687	99 00 0e	sta $0e00,y			sta 		stack2,y
.a68a	68		pla				pla
.a68b	99 00 0d	sta $0d00,y			sta 		stack1,y
.a68e	68		pla				pla
.a68f	99 00 0c	sta $0c00,y			sta 		stack0,y
.a692	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a695	80 ce		bra $a665			bra 		_ITSSubtract 			; go round again.
.a697					_ITSCantSubtract:
.a697	68		pla				pla 								; throw away interim answers
.a698	68		pla				pla 								; (the subtraction that failed)
.a699	68		pla				pla
.a69a	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a69d	c9 30		cmp #$30			cmp 		#"0"
.a69f	d0 05		bne $a6a6			bne 		_ITSOutputDigit
.a6a1	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6a4	f0 09		beq $a6af			beq	 		_ITSGoNextSubtractor
.a6a6					_ITSOutputDigit:
.a6a6	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6a9	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6ac	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter 		; output it.
.a6af					_ITSGoNextSubtractor:
.a6af	e8		inx				inx 								; next dword in subtractor table.
.a6b0	e8		inx				inx
.a6b1	e8		inx				inx
.a6b2	e8		inx				inx
.a6b3	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6b5	d0 a9		bne $a660			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6b7	98		tya				tya 								; X is back as the mantissa index
.a6b8	aa		tax				tax
.a6b9	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6bc	09 30		ora #$30			ora 		#"0"
.a6be	20 f8 a6	jsr $a6f8			jsr 		ITSOutputCharacter
.a6c1	68		pla				pla
.a6c2	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6c5	68		pla				pla
.a6c6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6c9	68		pla				pla
.a6ca	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6cd	68		pla				pla
.a6ce	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6d1	7a		ply				ply 								; and exit
.a6d2	68		pla				pla
.a6d3	60		rts				rts
.a6d4					_ITSSubtractors:
>a6d4	00 ca 9a 3b					.dword 		1000000000
>a6d8	00 e1 f5 05					.dword 		100000000
>a6dc	80 96 98 00					.dword 		10000000
>a6e0	40 42 0f 00					.dword 		1000000
>a6e4	a0 86 01 00					.dword 		100000
>a6e8	10 27 00 00					.dword 		10000
>a6ec	e8 03 00 00					.dword 		1000
>a6f0	64 00 00 00					.dword 		100
>a6f4	0a 00 00 00					.dword 		10
.a6f8					_ITSSubtractorsEnd:
.a6f8					ITSOutputCharacter:
.a6f8	48		pha				pha
.a6f9	da		phx				phx
.a6fa	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a6fd	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a700	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a703	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a706	fa		plx				plx
.a707	68		pla				pla
.a708	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a709					IntFromString:
.a709	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a70b	8c 25 08	sty $0825			sty 	IFSHexFlag
.a70e	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a710	c9 26		cmp #$26			cmp 	#"&"
.a712	d0 04		bne $a718			bne 	_IFSNotHex
.a714	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a717	c8		iny				iny 								; skip
.a718					_IFSNotHex:
.a718	e8		inx				inx 								; space on stack
.a719	20 75 a7	jsr $a775			jsr 	IFSClearTOS
.a71c					_IFSLoop:
.a71c	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a71f	f0 0a		beq $a72b			beq 	_IFSDecOnly
.a721	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a723	c9 41		cmp #$41			cmp 	#"A"
.a725	90 04		bcc $a72b			bcc 	_IFSDecOnly
.a727	c9 47		cmp #$47			cmp 	#"F"+1
.a729	90 0a		bcc $a735			bcc 	_IFSOkDigit
.a72b					_IFSDecOnly:
.a72b	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a72d	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a72f	90 3e		bcc $a76f			bcc 	_IFSExit
.a731	c9 3a		cmp #$3a			cmp 	#"9"+1
.a733	b0 3a		bcs $a76f			bcs 	_IFSExit
.a735					_IFSOkDigit:
.a735	ad 25 08	lda $0825			lda 	IFSHexFlag
.a738	d0 11		bne $a74b			bne 	_IFSHexShift
.a73a	20 02 aa	jsr $aa02			jsr 	Stack_Dup 					; duplicate tos
.a73d	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 2
.a740	20 09 ab	jsr $ab09			jsr 	Unary_Shl 					; x 4
.a743	20 d4 ab	jsr $abd4			jsr 	Stack_Add 					; x 5
.a746	20 09 ab	jsr $ab09			jsr 	Unary_Shl 					; x 10
.a749	80 0c		bra $a757			bra 	_IFSAddIn
.a74b					_IFSHexShift:
.a74b	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 2
.a74e	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 4
.a751	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 8
.a754	20 09 ab	jsr $ab09			jsr 	Unary_Shl	 				; x 16
.a757					_IFSAddIn:
.a757	e8		inx				inx  								; create space next up
.a758	20 75 a7	jsr $a775			jsr 	IFSClearTOS
.a75b	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a75d	c9 41		cmp #$41			cmp 	#"A"
.a75f	90 03		bcc $a764			bcc 	_IFSDec
.a761	38		sec				sec 								; hex fixup.
.a762	e9 07		sbc #$07			sbc 	#7
.a764					_IFSDec:
.a764	29 0f		and #$0f			and 	#15
.a766	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a769	20 d4 ab	jsr $abd4			jsr 	Stack_Add 					; add to tos
.a76c	c8		iny				iny
.a76d	80 ad		bra $a71c			bra 	_IFSLoop
.a76f					_IFSExit:
.a76f	98		tya				tya
.a770	38		sec				sec
.a771	f0 01		beq $a774			beq 	_IFSSkipFail
.a773	18		clc				clc
.a774					_IFSSkipFail:
.a774	60		rts				rts
.a775					IFSClearTOS:
.a775	9e 00 0c	stz $0c00,x			stz		stack0,x
.a778	9e 00 0d	stz $0d00,x			stz		stack1,x
.a77b	9e 00 0e	stz $0e00,x			stz		stack2,x
.a77e	9e 00 0f	stz $0f00,x			stz		stack3,x
.a781	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a782					Tokenise:
.a782	da		phx				phx
.a783	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a785					_TKSkip:
.a785	c8		iny				iny
.a786					_TKMainLoop:
.a786	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a788	f0 06		beq $a790			beq 	_TKExit
.a78a	c9 20		cmp #$20			cmp 	#" "
.a78c	f0 f7		beq $a785			beq 	_TKSkip
.a78e	80 04		bra $a794			bra 	_TKNotEnd
.a790	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a792	fa		plx				plx
.a793	60		rts				rts
.a794					_TKNotEnd:
.a794	c9 22		cmp #$22			cmp 	#'"'
.a796	f0 04		beq $a79c			beq 	_TKIsQuote
.a798	c9 27		cmp #$27			cmp 	#"'"
.a79a	d0 05		bne $a7a1			bne 	_TKNotQuote
.a79c					_TKIsQuote:
.a79c	20 be a8	jsr $a8be			jsr		TOKQuotedString
.a79f	80 e5		bra $a786			bra 	_TKMainLoop
.a7a1					_TKNotQuote:
.a7a1	98		tya				tya 								; current pos -> zTemp0
.a7a2	18		clc				clc
.a7a3	65 10		adc $10				adc 	codePtr
.a7a5	85 14		sta $14				sta 	zTemp0
.a7a7	85 10		sta $10				sta 	codePtr
.a7a9	a5 11		lda $11				lda 	codePtr+1
.a7ab	69 00		adc #$00			adc 	#0
.a7ad	85 15		sta $15				sta 	zTemp0+1
.a7af	85 11		sta $11				sta 	codePtr+1
.a7b1	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7b3	b1 10		lda ($10),y			lda 	(codePtr),y
.a7b5	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7b7	f0 08		beq $a7c1			beq 	_TKIsNumber
.a7b9	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7bb	90 23		bcc $a7e0			bcc 	_TKNotNumber
.a7bd	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7bf	b0 1f		bcs $a7e0			bcs 	_TKNotNumber
.a7c1					_TKIsNumber:
.a7c1	e8		inx				inx
.a7c2	20 09 a7	jsr $a709			jsr 	IntFromString 				; convert to integer
.a7c5	48		pha				pha
.a7c6	20 96 a8	jsr $a896			jsr 	TokWriteConstant 			; do constant recursively.
.a7c9	7a		ply				ply
.a7ca	ca		dex				dex
.a7cb	b1 10		lda ($10),y			lda 	(codePtr),y
.a7cd	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7cf	d0 08		bne $a7d9			bne 	_TKIsPositive
.a7d1	c8		iny				iny									; skip it
.a7d2	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7d4	20 8d a8	jsr $a88d			jsr 	TokWriteToken 				; write token out
.a7d7	80 ad		bra $a786			bra 	_TKMainLoop 				; loop back.
.a7d9					_TKIsPositive:
.a7d9	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a7db	20 8d a8	jsr $a88d			jsr 	TokWriteToken 				; write token out
.a7de	80 a6		bra $a786			bra 	_TKMainLoop 				; loop back.
.a7e0					_TKNotNumber:
.a7e0	a9 00		lda #$00			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7e2	85 18		sta $18				sta 	zTemp2
.a7e4	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a7e6	85 19		sta $19				sta 	zTemp2+1
.a7e8	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a7ea	a9 10		lda #$10			lda 	#$10
.a7ec	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a7ee					_TKSearch:
.a7ee	a0 00		ldy #$00			ldy 	#0
.a7f0					_TKCompare:
.a7f0	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a7f2	c8		iny				iny
.a7f3	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a7f5	d0 07		bne $a7fe			bne 	_TKNext
.a7f7	98		tya				tya
.a7f8	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a7fa	d0 f4		bne $a7f0			bne 	_TKCompare 					; found a match.
.a7fc	80 13		bra $a811			bra 	_TKFound
.a7fe	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a800	38		sec				sec 								; add length+1 to current
.a801	65 18		adc $18				adc 	zTemp2
.a803	85 18		sta $18				sta 	zTemp2
.a805	90 02		bcc $a809			bcc 	_TKNNC
.a807	e6 19		inc $19				inc 	zTemp2+1
.a809	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a80b	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a80d	d0 df		bne $a7ee			bne 	_TKSearch 					; go try again.
.a80f	80 0f		bra $a820			bra 	_TKComplete
.a811					_TKFound:
.a811	98		tya				tya
.a812	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a814	90 e8		bcc $a7fe			bcc 	_TKNext 					; if < best try next
.a816	f0 e6		beq $a7fe			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a818	85 1a		sta $1a				sta 	zTemp3 						; update best
.a81a	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a81c	85 1c		sta $1c				sta 	zTemp4
.a81e	80 de		bra $a7fe			bra 	_TKNext
.a820					_TKComplete:
.a820	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a822	f0 18		beq $a83c			beq		_TKTokenFail 				; if zero no match occurred
.a824	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a826	b2 10		lda ($10)			lda 	(codePtr) 					; look at first character
.a828	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; identifier character
.a82b	90 07		bcc $a834			bcc 	_TKOutput 					; if not, then token is okay
.a82d	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a82f	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; is that an identifier
.a832	b0 08		bcs $a83c			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a834					_TKOutput:
.a834	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a836	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a839	4c 86 a7	jmp $a786			jmp 	_TKMainLoop					; go round again
.a83c					_TKTokenFail:
.a83c	a0 00		ldy #$00			ldy 	#0
.a83e	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a840	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier
.a843	b0 13		bcs $a858			bcs 	_TKCopyIdent 				; if yes copy it
.a845	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>a848	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a850	4f 4b 45 4e 49 53 45 00
.a858					_TKCopyIdent:
.a858	c8		iny				iny 								; get next
.a859	b1 10		lda ($10),y			lda 	(codePtr),y
.a85b	20 7d a8	jsr $a87d			jsr 	TOKIsIdentifier 			; if identifier
.a85e	08		php				php 								; save CS on stack
.a85f	88		dey				dey 								; back to character
.a860	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a862	c8		iny				iny
.a863	c9 2e		cmp #$2e			cmp 	#"."
.a865	d0 02		bne $a869			bne 	_TKNotDot
.a867	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a869					_TKNotDot:
.a869	38		sec				sec
.a86a	e9 41		sbc #$41			sbc		#'A'
.a86c	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a86e	28		plp				plp 								; CS if next is identifier
.a86f	08		php				php
.a870	b0 02		bcs $a874			bcs 	_TKNotLast					; CC if next is not identifier
.a872	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a874					_TKNotLast:
.a874	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a877	28		plp				plp 								; get test result
.a878	b0 de		bcs $a858			bcs 	_TKCopyIdent 				; get the next identifier.
.a87a	4c 86 a7	jmp $a786			jmp 	_TKMainLoop
.a87d					TOKIsIdentifier:
.a87d	c9 2e		cmp #$2e			cmp 	#"."
.a87f	f0 08		beq $a889			beq 	_TIIYes
.a881	c9 41		cmp #$41			cmp 	#"A"
.a883	90 06		bcc $a88b			bcc 	_TIINo
.a885	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a887	b0 02		bcs $a88b			bcs 	_TIINo
.a889					_TIIYes:
.a889	38		sec				sec
.a88a	60		rts				rts
.a88b					_TIINo:
.a88b	18		clc				clc
.a88c	60		rts				rts
.a88d					TokWriteToken:
.a88d	92 16		sta ($16)			sta 	(zTemp1)
.a88f	e6 16		inc $16				inc 	zTemp1
.a891	d0 02		bne $a895			bne 	_TWTExit
.a893	e6 17		inc $17				inc 	zTemp1+1
.a895					_TWTExit:
.a895	60		rts				rts
.a896					TokWriteConstant:
.a896	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a899	29 3f		and #$3f			and		#63
.a89b	48		pha				pha 								; save on stack
.a89c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a89f	29 c0		and #$c0			and 	#$C0
.a8a1	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8a4	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8a7	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8aa	f0 0d		beq $a8b9			beq 	_TWCNoCall 					; no, don't call.
.a8ac	5a		phy				phy
.a8ad	a0 06		ldy #$06			ldy 	#6
.a8af					_TWCShift:
.a8af	20 16 ab	jsr $ab16			jsr 	Unary_Shr
.a8b2	88		dey				dey
.a8b3	d0 fa		bne $a8af			bne 	_TWCShift
.a8b5	7a		ply				ply
.a8b6	20 96 a8	jsr $a896			jsr 	TokWriteConstant
.a8b9					_TWCNoCall:
.a8b9	68		pla				pla
.a8ba	09 80		ora #$80			ora 	#$80						; make digit token
.a8bc	80 cf		bra $a88d			bra 	TokWriteToken 				; and write it out.
.a8be					TokQuotedString:
.a8be	85 18		sta $18				sta 	zTemp2 						; save quote
.a8c0	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8c2	f0 02		beq $a8c6			beq 	_TQDouble
.a8c4	a9 01		lda #$01			lda 	#1
.a8c6					_TQDouble:
.a8c6	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8c7	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a8ca	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8cc	85 1a		sta $1a				sta 	zTemp3
.a8ce	a5 17		lda $17				lda 	zTemp1+1
.a8d0	85 1b		sta $1b				sta 	zTemp3+1
.a8d2	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8d4	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a8d7					_TQLoop:
.a8d7	c8		iny				iny 								; next character
.a8d8	b1 10		lda ($10),y			lda 	(codePtr),y
.a8da	f0 0f		beq $a8eb			beq 	_TQExit 					; if zero exit
.a8dc	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a8de	f0 0a		beq $a8ea			beq 	_TQSkipExit 				; skip it and exit
.a8e0	20 8d a8	jsr $a88d			jsr 	TOKWriteToken 				; write out
.a8e3	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a8e5	1a		inc a				inc 	a
.a8e6	92 1a		sta ($1a)			sta 	(zTemp3)
.a8e8	80 ed		bra $a8d7			bra 	_TQLoop						; go round
.a8ea					_TQSkipExit:
.a8ea	c8		iny				iny
.a8eb					_TQExit:
.a8eb	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8ed	20 8d a8	jsr $a88d			jsr 	TOKWriteToken
.a8f0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a8f1					EditProgram:
.a8f1	ad 89 10	lda $1089			lda 	VarMemory+1
.a8f4	1a		inc a				inc 	a
.a8f5	c9 98		cmp #$98			cmp 	#MemoryEnd >> 8
.a8f7	b0 3c		bcs $a935			bcs 	_EPMemory
.a8f9	a2 00		ldx #$00			ldx 	#0
.a8fb	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a8fd	85 10		sta $10				sta 	codePtr
.a8ff	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a901	85 11		sta $11				sta 	codePtr+1
.a903	a0 00		ldy #$00			ldy 	#0
.a905	a2 ff		ldx #$ff			ldx 	#255
.a907	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS
.a90a	98		tya				tya
.a90b	18		clc				clc
.a90c	65 10		adc $10				adc 	codePtr
.a90e	85 10		sta $10				sta 	codePtr
.a910	90 02		bcc $a914			bcc 	_EPNoCarry
.a912	e6 11		inc $11				inc 	codePtr+1
.a914					_EPNoCarry:
.a914	20 38 a9	jsr $a938			jsr 	EDFindLine
.a917	90 0f		bcc $a928			bcc 	_EPNotFound
.a919	a5 16		lda $16				lda 	zTemp1
.a91b	48		pha				pha
.a91c	a5 17		lda $17				lda 	zTemp1+1
.a91e	48		pha				pha
.a91f	20 6f a9	jsr $a96f			jsr 	EDDeleteLine
.a922	68		pla				pla
.a923	85 17		sta $17				sta 	zTemp1+1
.a925	68		pla				pla
.a926	85 16		sta $16				sta 	zTemp1
.a928					_EPNotFound:
.a928	b2 10		lda ($10)			lda 	(codePtr)
.a92a	f0 03		beq $a92f			beq 	_EPNoInsert
.a92c	20 94 a9	jsr $a994			jsr 	EDInsertLine
.a92f					_EPNoInsert:
.a92f	20 22 a5	jsr $a522			jsr 	ResetForRun
.a932	4c 47 a0	jmp $a047			jmp 	NewCommand
.a935					_EPMemory:
.a935	4c bd a5	jmp $a5bd			jmp 	OutOfMemoryError
.a938					EDFindLine:
.a938	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a93a	85 16		sta $16				sta 	zTemp1
.a93c	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a93e	85 17		sta $17				sta 	zTemp1+1
.a940					_EDFLLoop:
.a940	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a942	b1 16		lda ($16),y			lda 	(zTemp1),y
.a944	f0 25		beq $a96b			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a946	c8		iny				iny
.a947	38		sec				sec
.a948	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a94b	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a94d	aa		tax				tax	 								; this will return 10.
.a94e	ad 00 0d	lda $0d00			lda 	stack1
.a951	c8		iny				iny
.a952	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a954	90 15		bcc $a96b			bcc 	_EDFLFail					; if target < current then failed.
.a956	d0 04		bne $a95c			bne 	_EDFLNext 					; if non-zero then goto next
.a958	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a95a	f0 11		beq $a96d			beq 	_EDFLFound
.a95c					_EDFLNext:
.a95c	a0 00		ldy #$00			ldy 	#0 							; get offset
.a95e	18		clc				clc
.a95f	b1 16		lda ($16),y			lda 	(zTemp1),y
.a961	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a963	85 16		sta $16				sta 	zTemp1
.a965	90 d9		bcc $a940			bcc 	_EDFLLoop
.a967	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a969	80 d5		bra $a940			bra 	_EDFLLoop
.a96b					_EDFLFail:
.a96b	18		clc				clc
.a96c	60		rts				rts
.a96d					_EDFLFound:
.a96d	38		sec				sec
.a96e	60		rts				rts
.a96f					EDDeleteLine:
.a96f	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a971	a2 00		ldx #$00			ldx 	#0
.a973	b1 16		lda ($16),y			lda 	(zTemp1),y
.a975	a8		tay				tay 								; put in Y
.a976					_EDDelLoop:
.a976	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a978	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a97a	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a97c	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a97f	d0 07		bne $a988			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a981	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a983	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a986	f0 08		beq $a990			beq		_EDDelExit
.a988					_EDDelNext:
.a988	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a98a	d0 ea		bne $a976			bne 	_EDDelLoop
.a98c	e6 17		inc $17				inc 	zTemp1+1
.a98e	80 e6		bra $a976			bra 	_EDDelLoop
.a990					_EDDelExit:
.a990	20 45 a5	jsr $a545			jsr 	ResetVarMemory
.a993	60		rts				rts
.a994					EDInsertLine:
.a994	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a997	85 1a		sta $1a				sta 	zTemp3
.a999	ad 89 10	lda $1089			lda 	VarMemory+1
.a99c	85 1b		sta $1b				sta 	zTemp3+1
.a99e	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9a0					_EDGetLength:
.a9a0	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9a2	f0 0d		beq $a9b1			beq 	_EDGotLength 				; if 0, Y is the length
.a9a4	c8		iny				iny
.a9a5	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9a7	b0 f7		bcs $a9a0			bcs 	_EDGetLength
.a9a9	98		tya				tya 								; get original position
.a9aa	3a		dec a				dec 	a
.a9ab	18		clc				clc
.a9ac	71 10		adc ($10),y			adc 	(codePtr),y
.a9ae	a8		tay				tay
.a9af	80 ef		bra $a9a0			bra 	_EDGetLength
.a9b1					_EDGotLength:
.a9b1	98		tya				tya
.a9b2	18		clc				clc
.a9b3	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9b5	48		pha				pha 								; save total size (e.g. offset)
.a9b6	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9b8	a8		tay				tay 								; in Y
.a9b9	a2 00		ldx #$00			ldx 	#0
.a9bb					_EDInsLoop:
.a9bb	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9bd	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9bf	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9c1	c5 16		cmp $16				cmp 	zTemp1
.a9c3	d0 06		bne $a9cb			bne 	_EDINextShift
.a9c5	a5 1b		lda $1b				lda 	zTemp3+1
.a9c7	c5 17		cmp $17				cmp 	zTemp1+1
.a9c9	f0 0a		beq $a9d5			beq 	_EDIShiftOver
.a9cb					_EDINextShift:
.a9cb	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9cd	d0 02		bne $a9d1			bne 	_EDINoBorrow
.a9cf	c6 1b		dec $1b				dec 	zTemp3+1
.a9d1					_EDINoBorrow:
.a9d1	c6 1a		dec $1a				dec 	zTemp3
.a9d3	80 e6		bra $a9bb			bra 	_EDInsLoop
.a9d5					_EDIShiftOver:
.a9d5	68		pla				pla 								; this is the size + others, e.g. offset
.a9d6	a0 00		ldy #$00			ldy 	#0
.a9d8	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.a9da	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.a9dd	c8		iny				iny
.a9de	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9e0	ad 00 0d	lda $0d00			lda 	stack1
.a9e3	c8		iny				iny
.a9e4	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9e6	c8		iny				iny 								; where the code goes.
.a9e7	a2 00		ldx #$00			ldx 	#0 							; comes from
.a9e9					_EDICopyCode:
.a9e9	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.a9eb	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.a9ed	c8		iny				iny 								; bump pointers
.a9ee	e6 10		inc $10				inc 	codePtr
.a9f0	d0 02		bne $a9f4			bne 	_EDINoCarry
.a9f2	e6 11		inc $11				inc 	codePtr+1
.a9f4					_EDINoCarry:
.a9f4	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.a9f6	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.a9f8	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.a9fa	d0 ed		bne $a9e9			bne 	_EDICopyCode
.a9fc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a9fd					Stack_Empty:
.a9fd	a2 00		ldx #$00			ldx 	#0
.a9ff	60		rts				rts
.aa00					Stack_Drop:
.aa00	ca		dex				dex
.aa01	60		rts				rts
.aa02					Stack_Dup:
.aa02	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa05	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa08	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa0b	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa0e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa11	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa14	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa17	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa1a	e8		inx				inx 								; bump stack pointer
.aa1b	60		rts				rts
.aa1c					Stack_Nip:
.aa1c	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa1f	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa22	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa25	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa28	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa2b	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa2e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa31	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa34	ca		dex				dex 								; drop tos
.aa35	60		rts				rts
.aa36					Stack_Over:
.aa36	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa39	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa3c	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa3f	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa42	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa45	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa48	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa4b	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa4e	e8		inx				inx 							; bump stack pointer
.aa4f	60		rts				rts
.aa50					Stack_Swap:
.aa50	5a		phy				phy
.aa51	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa54	a8		tay				tay
.aa55	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa58	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa5b	98		tya				tya
.aa5c	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa5f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa62	a8		tay				tay
.aa63	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa66	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa69	98		tya				tya
.aa6a	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa6d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa70	a8		tay				tay
.aa71	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa74	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa77	98		tya				tya
.aa78	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa7b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa7e	a8		tay				tay
.aa7f	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa82	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa85	98		tya				tya
.aa86	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa89	7a		ply				ply
.aa8a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aa8b					Unary_Absolute:
.aa8b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa8e	30 01		bmi $aa91			bmi 	Unary_Negate
.aa90	60		rts				rts
.aa91					Unary_Negate:
.aa91	38		sec				sec
.aa92	a9 00		lda #$00			lda		#0
.aa94	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aa97	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa9a	a9 00		lda #$00			lda		#0
.aa9c	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aa9f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaa2	a9 00		lda #$00			lda		#0
.aaa4	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aaa7	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaaa	a9 00		lda #$00			lda		#0
.aaac	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aaaf	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aab2	60		rts				rts
.aab3					Unary_Not:
.aab3	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aab6	49 ff		eor #$ff			eor 	#$FF
.aab8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aabb	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aabe	49 ff		eor #$ff			eor 	#$FF
.aac0	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aac3	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aac6	49 ff		eor #$ff			eor 	#$FF
.aac8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aacb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aace	49 ff		eor #$ff			eor 	#$FF
.aad0	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aad3	60		rts				rts
.aad4					Unary_Increment:
.aad4	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aad7	d0 0d		bne $aae6			bne 	_UIExit
.aad9	fe 00 0d	inc $0d00,x			inc 	stack1,x
.aadc	d0 08		bne $aae6			bne 	_UIExit
.aade	fe 00 0e	inc $0e00,x			inc 	stack2,x
.aae1	d0 03		bne $aae6			bne 	_UIExit
.aae3	fe 00 0f	inc $0f00,x			inc 	stack3,x
.aae6					_UIExit:
.aae6	60		rts				rts
.aae7					Unary_Decrement:
.aae7	38		sec				sec
.aae8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaeb	e9 01		sbc #$01			sbc 	#1
.aaed	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaf0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaf3	e9 00		sbc #$00			sbc 	#0
.aaf5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaf8	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aafb	e9 00		sbc #$00			sbc 	#0
.aafd	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab00	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab03	e9 00		sbc #$00			sbc 	#0
.ab05	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab08	60		rts				rts
.ab09					Unary_Shl:
.ab09	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab0c	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab0f	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab12	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab15	60		rts				rts
.ab16					Unary_Shr:
.ab16	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab19	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab1c	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab1f	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab22	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab23					Mem_Peek:
.ab23	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab26	85 14		sta $14				sta 	zTemp0
.ab28	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab2b	85 15		sta $15				sta 	zTemp0+1
.ab2d	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab2f	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab32	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab35	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab38	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab3b	60		rts				rts
.ab3c					Mem_WPeek:
.ab3c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab3f	85 14		sta $14				sta 	zTemp0
.ab41	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab44	85 15		sta $15				sta 	zTemp0+1
.ab46	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab48	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab4b	5a		phy				phy 								; read msb
.ab4c	a0 01		ldy #$01			ldy 	#1
.ab4e	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab50	7a		ply				ply
.ab51	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab54	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab57	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab5a	60		rts				rts
.ab5b					Mem_DPeek:
.ab5b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab5e	85 14		sta $14				sta 	zTemp0
.ab60	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab63	85 15		sta $15				sta 	zTemp0+1
.ab65	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab67	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab6a	5a		phy				phy 								; read msb
.ab6b	a0 01		ldy #$01			ldy 	#1
.ab6d	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab6f	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab72	c8		iny				iny
.ab73	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab75	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab78	c8		iny				iny
.ab79	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab7b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab7e	7a		ply				ply
.ab7f	60		rts				rts
.ab80					Mem_Poke:
.ab80	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab83	85 14		sta $14				sta 	zTemp0
.ab85	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab88	85 15		sta $15				sta 	zTemp0+1
.ab8a	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab8d	92 14		sta ($14)			sta 	(zTemp0)
.ab8f	ca		dex				dex
.ab90	ca		dex				dex
.ab91	60		rts				rts
.ab92					Mem_WPoke:
.ab92	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab95	85 14		sta $14				sta 	zTemp0
.ab97	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab9a	85 15		sta $15				sta 	zTemp0+1
.ab9c	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab9f	92 14		sta ($14)			sta 	(zTemp0)
.aba1	5a		phy				phy
.aba2	a0 01		ldy #$01			ldy 	#1
.aba4	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.aba7	91 14		sta ($14),y			sta 	(zTemp0),y
.aba9	7a		ply				ply
.abaa	ca		dex				dex
.abab	ca		dex				dex
.abac	60		rts				rts
.abad					Mem_DPoke:
.abad	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abb0	85 14		sta $14				sta 	zTemp0
.abb2	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abb5	85 15		sta $15				sta 	zTemp0+1
.abb7	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abba	92 14		sta ($14)			sta 	(zTemp0)
.abbc	5a		phy				phy
.abbd	a0 01		ldy #$01			ldy 	#1
.abbf	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abc2	91 14		sta ($14),y			sta 	(zTemp0),y
.abc4	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abc7	c8		iny				iny
.abc8	91 14		sta ($14),y			sta 	(zTemp0),y
.abca	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abcd	c8		iny				iny
.abce	91 14		sta ($14),y			sta 	(zTemp0),y
.abd0	7a		ply				ply
.abd1	ca		dex				dex
.abd2	ca		dex				dex
.abd3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abd4					Stack_Add:
.abd4	ca		dex				dex
.abd5					Stack_Add_No_Dex:
.abd5	18		clc				clc
.abd6	bd 00 0c	lda $0c00,x			lda		stack0,x
.abd9	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.abdc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abdf	bd 00 0d	lda $0d00,x			lda		stack1,x
.abe2	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.abe5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abe8	bd 00 0e	lda $0e00,x			lda		stack2,x
.abeb	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.abee	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abf1	bd 00 0f	lda $0f00,x			lda		stack3,x
.abf4	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.abf7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abfa	60		rts				rts
.abfb					Stack_Sub:
.abfb	ca		dex				dex
.abfc	38		sec				sec
.abfd	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac00	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac03	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac06	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac09	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac0c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac0f	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac12	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac15	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac18	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac1b	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac1e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac21	60		rts				rts
.ac22					Stack_And:
.ac22	ca		dex				dex
.ac23	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac26	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac29	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac2c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac2f	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac32	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac35	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac38	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac3b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac3e	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac41	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac44	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac47	60		rts				rts
.ac48					Stack_Xor:
.ac48	ca		dex				dex
.ac49	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac4c	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac4f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac52	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac55	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac58	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac5b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac5e	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac61	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac64	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac67	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac6a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac6d	60		rts				rts
.ac6e					Stack_Or:
.ac6e	ca		dex				dex
.ac6f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac72	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac75	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac78	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac7b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac7e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac81	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac84	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac87	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac8a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac8d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac90	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac93	60		rts				rts
.ac94					Stack_Shl:
.ac94	38		sec				sec
.ac95	80 01		bra $ac98			bra 	StackShift
.ac97					Stack_Shr:
.ac97	18		clc				clc
.ac98					StackShift:
.ac98	08		php				php
.ac99	ca		dex				dex
.ac9a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.ac9d	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.ac9f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aca2	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.aca5	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aca8	d0 13		bne $acbd			bne 	_SSZero
.acaa					_SSLoop:
.acaa	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acad	30 1a		bmi $acc9			bmi 	_SSDone 					; completed ?
.acaf	28		plp				plp 								; restore flag
.acb0	08		php				php
.acb1	b0 05		bcs $acb8			bcs 	_SSLeft 					; do either shift.
.acb3	20 16 ab	jsr $ab16			jsr 	Unary_Shr
.acb6	80 f2		bra $acaa			bra 	_SSLoop
.acb8					_SSLeft:
.acb8	20 09 ab	jsr $ab09			jsr 	Unary_Shl
.acbb	80 ed		bra $acaa			bra 	_SSLoop
.acbd					_SSZero:
.acbd	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.acc0	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acc3	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acc6	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acc9					_SSDone:
.acc9	28		plp				plp 								; throw flag.
.acca	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.accb					MulInteger32:
.accb	ca		dex				dex
.accc	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.accf	85 1e		sta $1e				sta 	zLTemp1
.acd1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.acd4	85 1f		sta $1f				sta 	zLTemp1+1
.acd6	bd 00 0e	lda $0e00,x			lda 	stack2,x
.acd9	85 20		sta $20				sta 	zLTemp1+2
.acdb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.acde	85 21		sta $21				sta 	zLTemp1+3
.ace0	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ace3	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ace6	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ace9	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acec					_BFMMultiply:
.acec	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.acee	29 01		and #$01			and 	#1
.acf0	f0 03		beq $acf5			beq 	_BFMNoAdd
.acf2	20 d5 ab	jsr $abd5			jsr 	Stack_Add_No_Dex 			; co-opt this code
.acf5					_BFMNoAdd:
.acf5	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.acf8	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.acfb	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.acfe	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad01	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad03	66 20		ror $20				ror 	zLTemp1+2
.ad05	66 1f		ror $1f				ror 	zLTemp1+1
.ad07	66 1e		ror $1e				ror 	zLTemp1
.ad09	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad0b	05 1f		ora $1f				ora 	zLTemp1+1
.ad0d	05 20		ora $20				ora 	zLTemp1+2
.ad0f	05 21		ora $21				ora 	zLTemp1+3
.ad11	d0 d9		bne $acec			bne 	_BFMMultiply
.ad13	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad14					DivInteger32:
.ad14	ca		dex				dex
.ad15	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad18	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad1b	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad1e	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad21	d0 14		bne $ad37			bne 	_BFDOkay
.ad23	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>ad26	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad2e	20 42 59 20 5a 45 52 4f 00
.ad37					_BFDOkay:
.ad37	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad39	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad3b	64 20		stz $20				stz 	zLTemp1+2
.ad3d	64 21		stz $21				stz 	zLTemp1+3
.ad3f	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad42	20 9d ad	jsr $ad9d			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad45	e8		inx				inx
.ad46	20 9d ad	jsr $ad9d			jsr 	CheckIntegerNegate
.ad49	ca		dex				dex
.ad4a	5a		phy				phy 								; Y is the counter
.ad4b	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad4d					_BFDLoop:
.ad4d	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad50	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad53	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad56	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad59	26 1e		rol $1e				rol 	zLTemp1
.ad5b	26 1f		rol $1f				rol 	zLTemp1+1
.ad5d	26 20		rol $20				rol 	zLTemp1+2
.ad5f	26 21		rol $21				rol 	zLTemp1+3
.ad61	38		sec				sec
.ad62	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad64	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad67	48		pha				pha
.ad68	a5 1f		lda $1f				lda 	zLTemp1+1
.ad6a	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad6d	48		pha				pha
.ad6e	a5 20		lda $20				lda 	zLTemp1+2
.ad70	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad73	48		pha				pha
.ad74	a5 21		lda $21				lda 	zLTemp1+3
.ad76	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad79	90 15		bcc $ad90			bcc 	_BFDNoAdd
.ad7b	85 21		sta $21				sta 	zLTemp1+3 					; update A
.ad7d	68		pla				pla
.ad7e	85 20		sta $20				sta 	zLTemp1+2
.ad80	68		pla				pla
.ad81	85 1f		sta $1f				sta 	zLTemp1+1
.ad83	68		pla				pla
.ad84	85 1e		sta $1e				sta 	zLTemp1+0
.ad86	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ad89	09 01		ora #$01			ora 	#1
.ad8b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ad8e	80 03		bra $ad93			bra 	_BFDNext
.ad90					_BFDNoAdd:
.ad90	68		pla				pla 								; Throw away the intermediate calculations
.ad91	68		pla				pla
.ad92	68		pla				pla
.ad93					_BFDNext:
.ad93	88		dey				dey
.ad94	d0 b7		bne $ad4d			bne 	_BFDLoop
.ad96	7a		ply				ply 								; restore Y
.ad97	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ad9a	b0 07		bcs $ada3			bcs		IntegerNegateAlways 		; negate the result
.ad9c	60		rts				rts
.ad9d					CheckIntegerNegate:
.ad9d	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ada0	30 01		bmi $ada3			bmi 	IntegerNegateAlways 		; if so negate it
.ada2	60		rts				rts
.ada3					IntegerNegateAlways:
.ada3	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.ada6	4c 91 aa	jmp $aa91			jmp 	Unary_Negate
.ada9					ModInteger32:
.ada9	20 14 ad	jsr $ad14			jsr 	DivInteger32
.adac	a5 1e		lda $1e				lda 	zLTemp1
.adae	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adb1	a5 1f		lda $1f				lda 	zLTemp1+1
.adb3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adb6	a5 20		lda $20				lda 	zLTemp1+2
.adb8	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adbb	a5 21		lda $21				lda 	zLTemp1+3
.adbd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adc0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adc1					Comp_Equal:
.adc1	38		sec				sec
.adc2	80 01		bra $adc5			bra 	Comp_CheckEqual
.adc4					Comp_NotEqual:
.adc4	18		clc				clc
.adc5					Comp_CheckEqual:
.adc5	08		php				php
.adc6	ca		dex				dex
.adc7	bd 00 0c	lda $0c00,x			lda		stack0,x
.adca	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.adcd	d0 16		bne $ade5			bne 	_CCENonZero
.adcf	bd 00 0d	lda $0d00,x			lda		stack1,x
.add2	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.add5	d0 0e		bne $ade5			bne 	_CCENonZero
.add7	bd 00 0e	lda $0e00,x			lda		stack2,x
.adda	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.addd	d0 06		bne $ade5			bne 	_CCENonZero
.addf	bd 00 0f	lda $0f00,x			lda		stack3,x
.ade2	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ade5					_CCENonZero:
.ade5	f0 02		beq $ade9			beq 	_CCENotSet
.ade7	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ade9					_CCENotSet:
.ade9					CompCheckFlip:
.ade9	28		plp				plp 								; if carry set, we want $FF if equal
.adea	90 02		bcc $adee			bcc 	CompReturn
.adec	49 ff		eor #$ff			eor 	#$FF
.adee					CompReturn:
.adee	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.adf1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adf4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adf7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adfa	60		rts				rts
.adfb					Comp_Less:
.adfb	18		clc				clc
.adfc	80 01		bra $adff			bra 	Comp_LessCont
.adfe					Comp_GreaterEqual:
.adfe	38		sec				sec
.adff					Comp_LessCont:
.adff	08		php				php
.ae00	ca		dex				dex
.ae01	38		sec				sec
.ae02	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae05	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae08	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae0b	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae0e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae11	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae14	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae17	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae1a	50 02		bvc $ae1e			bvc 	_CLNoFlip 					; unsigned -> signed
.ae1c	49 80		eor #$80			eor 	#$80
.ae1e					_CLNoFlip:
.ae1e	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae20	f0 c7		beq $ade9			beq 	CompCheckFlip
.ae22	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae24	80 c3		bra $ade9			bra 	CompCheckFlip
.ae26					Comp_LessEqual:
.ae26	38		sec				sec
.ae27	80 01		bra $ae2a			bra 	Comp_LessEqualCont
.ae29					Comp_Greater:
.ae29	18		clc				clc
.ae2a					Comp_LessEqualCont:
.ae2a	08		php				php
.ae2b	ca		dex				dex
.ae2c	38		sec				sec
.ae2d	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae30	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae33	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae36	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae39	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae3c	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae3f	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae42	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae45	50 02		bvc $ae49			bvc 	_CLENoFlip 					; unsigned -> signed
.ae47	49 80		eor #$80			eor 	#$80
.ae49					_CLENoFlip:
.ae49	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae4b	f0 9c		beq $ade9			beq 	CompCheckFlip
.ae4d	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae4f	80 98		bra $ade9			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae51					Allocate:
.ae51	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae54	29 80		and #$80			and 	#$80
.ae56	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae59	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae5c	d0 26		bne $ae84			bne 	_ALBad
.ae5e	18		clc				clc 								; add to varmemory pointer saving
.ae5f	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae62	48		pha				pha
.ae63	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae66	8d 88 10	sta $1088			sta 	VarMemory
.ae69	ad 89 10	lda $1089			lda 	VarMemory+1
.ae6c	48		pha				pha
.ae6d	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae70	8d 89 10	sta $1089			sta 	VarMemory+1
.ae73	68		pla				pla 								; pop and save
.ae74	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae77	68		pla				pla
.ae78	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae7b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae7e	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.ae81	b0 01		bcs $ae84			bcs 	_ALBad
.ae83	60		rts				rts
.ae84					_ALBad:
.ae84	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>ae87	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>ae8f	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.ae91					Cmd_List:
.ae91	20 17 a5	jsr $a517			jsr 	ResetCodePointer 			; back to the beginning
.ae94	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.ae96	64 19		stz $19				stz 	zTemp2+1
.ae98	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.ae9a	f0 0b		beq $aea7			beq 	_CLINone
.ae9c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.ae9f	85 18		sta $18				sta 	zTemp2
.aea1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aea4	95 19		sta $19,x			sta 	zTemp2+1,x
.aea6	ca		dex				dex 								; and pop the tos
.aea7					_CLINone:
.aea7	a9 10		lda #$10			lda 	#16 						; list this many lines
.aea9	85 16		sta $16				sta 	zTemp1
.aeab					_CLILoop
.aeab	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aead	f0 24		beq $aed3			beq 	_CLIEnd
.aeaf	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aeb1	38		sec				sec
.aeb2	b1 10		lda ($10),y			lda 	(codePtr),y
.aeb4	e5 18		sbc $18				sbc 	zTemp2
.aeb6	c8		iny				iny
.aeb7	b1 10		lda ($10),y			lda 	(codePtr),y
.aeb9	e5 19		sbc $19				sbc 	zTemp2+1
.aebb	90 09		bcc $aec6			bcc 	_CLISkip
.aebd	da		phx				phx
.aebe	20 d6 ae	jsr $aed6			jsr 	ListCurrent 				; list the line.
.aec1	fa		plx				plx
.aec2	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aec4	f0 0d		beq $aed3			beq 	_CLIEnd
.aec6					_CLISkip:
.aec6	18		clc				clc
.aec7	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aec9	65 10		adc $10				adc 	codePtr
.aecb	85 10		sta $10				sta 	codePtr
.aecd	90 dc		bcc $aeab			bcc 	_CLILoop
.aecf	e6 11		inc $11				inc 	codePtr+1
.aed1	80 d8		bra $aeab			bra 	_CLILoop
.aed3					_CLIEnd:
.aed3	4c 33 a0	jmp $a033			jmp 	WarmStart
.aed6					ListCurrent:
.aed6	a9 05		lda #$05			lda 	#CTH_LINENO
.aed8	20 a1 a2	jsr $a2a1			jsr 	ExternColour 				; set colour
.aedb	a0 01		ldy #$01			ldy 	#1							; print line#
.aedd	b1 10		lda ($10),y			lda 	(codePtr),y
.aedf	48		pha				pha
.aee0	c8		iny				iny
.aee1	b1 10		lda ($10),y			lda 	(codePtr),y
.aee3	a8		tay				tay
.aee4	68		pla				pla
.aee5	20 12 a6	jsr $a612			jsr 	ErrorPrint16
.aee8	a8		tay				tay
.aee9					_LCPadOut:
.aee9	a9 20		lda #$20			lda 	#' '
.aeeb	20 97 a2	jsr $a297			jsr 	ExternPrint
.aeee	c8		iny				iny
.aeef	c0 05		cpy #$05			cpy 	#5
.aef1	d0 f6		bne $aee9			bne 	_LCPadOut
.aef3	a0 03		ldy #$03			ldy 	#3 							; start here
.aef5					_LCLoop:
.aef5	a9 20		lda #$20			lda 	#' '						; space
.aef7	20 97 a2	jsr $a297			jsr 	ExternPrint
.aefa					_LCLoopNoSpace:
.aefa	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.aefc	30 3e		bmi $af3c			bmi 	_LCIdentConst 				; identifier or constant
.aefe	d0 05		bne $af05			bne 	_LCStringToken
.af00	a9 0d		lda #$0d			lda 	#13
.af02	4c 97 a2	jmp $a297			jmp 	ExternPrint
.af05					_LCStringToken:
.af05	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af07	90 0c		bcc $af15			bcc		_LCString
.af09	20 7d af	jsr $af7d			jsr 	ListPrintToken
.af0c	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af0e	c8		iny				iny 								; advance pointer
.af0f	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af11	f0 e7		beq $aefa			beq 	_LCLoopNoSpace
.af13	80 e0		bra $aef5			bra 	_LCLoop 					; go round again.
.af15					_LCString:
.af15	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af16	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af18	a2 22		ldx #$22			ldx 	#'"'
.af1a	b0 04		bcs $af20			bcs 	_LCSSkip
.af1c	a9 07		lda #$07			lda 	#CTH_COMMENT
.af1e	a2 27		ldx #$27			ldx 	#"'"
.af20					_LCSSkip:
.af20	20 a1 a2	jsr $a2a1			jsr 	ExternColour 				; set colour
.af23	8a		txa				txa
.af24	48		pha				pha 								; save end quote on stack.
.af25	20 97 a2	jsr $a297			jsr 	ExternPrint
.af28	c8		iny				iny 								; skip type size
.af29	c8		iny				iny
.af2a					_LCSPrint:
.af2a	b1 10		lda ($10),y			lda 	(codePtr),y
.af2c	c8		iny				iny
.af2d	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af2f	f0 05		beq $af36			beq 	_LCSExit
.af31	20 97 a2	jsr $a297			jsr 	ExternPrint
.af34	80 f4		bra $af2a			bra 	_LCSPrint
.af36					_LCSExit:
.af36	68		pla				pla
.af37	20 97 a2	jsr $a297			jsr 	ExternPrint
.af3a	80 b9		bra $aef5			bra 	_LCLoop
.af3c					_LCIdentConst:
.af3c	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af3e	90 1e		bcc $af5e			bcc 	_LCConstant
.af40	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af42	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af45					_LCCIdLoop:
.af45	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af47	29 1f		and #$1f			and 	#$1F 						; convert
.af49	18		clc				clc
.af4a	69 41		adc #$41			adc 	#'A'
.af4c	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af4e	d0 02		bne $af52			bne 	_LCCNotDot
.af50	a9 2e		lda #$2e			lda 	#'.'
.af52					_LCCNotDot:
.af52	20 97 a2	jsr $a297			jsr 	ExternPrint
.af55	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af57	c8		iny				iny
.af58	c9 e0		cmp #$e0			cmp 	#$E0
.af5a	b0 99		bcs $aef5			bcs 	_LCLoop
.af5c	80 e7		bra $af45			bra 	_LCCIdLoop
.af5e					_LCConstant:
.af5e	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.af60	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af63	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.af65	20 e3 a3	jsr $a3e3			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.af68	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.af6b	48		pha				pha
.af6c	20 37 a6	jsr $a637			jsr 	IntegerToString 			; this could corrupt stack if full :)
.af6f	20 25 a6	jsr $a625			jsr 	ErrorPrintIntegerBuffer
.af72	68		pla				pla 								; sign back
.af73	10 80		bpl $aef5			bpl 	_LCLoop
.af75	a9 2d		lda #$2d			lda 	#"-"
.af77	20 97 a2	jsr $a297			jsr 	ExternPrint
.af7a	4c f5 ae	jmp $aef5			jmp 	_LCLoop
.af7d					ListPrintToken:
.af7d	5a		phy				phy
.af7e	48		pha				pha 								; token colour
.af7f	a9 02		lda #$02			lda 	#CTH_TOKEN
.af81	20 a1 a2	jsr $a2a1			jsr 	ExternColour
.af84	fa		plx				plx
.af85	a9 00		lda #$00			lda 	#KeywordText & $FF
.af87	85 14		sta $14				sta 	zTemp0
.af89	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.af8b	85 15		sta $15				sta 	zTemp0+1
.af8d					_LPTLoop:
.af8d	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.af8f	f0 0e		beq $af9f			beq 	_LPTFound
.af91	ca		dex				dex
.af92	b2 14		lda ($14)			lda 	(zTemp0)
.af94	38		sec				sec									; add 1, it's length+name
.af95	65 14		adc $14				adc 	zTemp0
.af97	85 14		sta $14				sta 	zTemp0
.af99	90 f2		bcc $af8d			bcc 	_LPTLoop
.af9b	e6 15		inc $15				inc 	zTemp0+1
.af9d	80 ee		bra $af8d			bra 	_LPTLoop
.af9f					_LPTFound:
.af9f	a0 01		ldy #$01			ldy 	#1 							; start here.
.afa1					_LPTShow:
.afa1	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afa3	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afa5	90 06		bcc $afad			bcc 	_LPTExit
.afa7	c8		iny				iny
.afa8	20 97 a2	jsr $a297			jsr 	ExternPrint
.afab	80 f4		bra $afa1			bra 	_LPTShow
.afad					_LPTExit:
.afad	7a		ply				ply
.afae	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.afaf					Cmd_Renumber:
.afaf	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.afb1	85 16		sta $16				sta 	zTemp1
.afb3	a9 11		lda #$11			lda 	#ProgramStart >> 8
.afb5	85 17		sta $17				sta 	zTemp1+1
.afb7	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.afb9	85 18		sta $18				sta 	zTemp2
.afbb	a9 03		lda #$03			lda 	#1000 >> 8
.afbd	85 19		sta $19				sta 	zTemp2+1
.afbf					_CRLoop:
.afbf	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.afc1	f0 23		beq $afe6			beq 	_CRExit
.afc3	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.afc5	a5 18		lda $18				lda 	zTemp2
.afc7	91 16		sta ($16),y			sta 	(zTemp1),y
.afc9	c8		iny				iny
.afca	a5 19		lda $19				lda 	zTemp2+1
.afcc	91 16		sta ($16),y			sta 	(zTemp1),y
.afce	18		clc				clc 								; add 10 to new number
.afcf	a5 18		lda $18				lda 	zTemp2
.afd1	69 0a		adc #$0a			adc 	#10
.afd3	85 18		sta $18				sta 	zTemp2
.afd5	90 02		bcc $afd9			bcc 	_CRNoCarry
.afd7	e6 19		inc $19				inc 	zTemp2+1
.afd9					_CRNoCarry:
.afd9	18		clc				clc 								; go to next line
.afda	b2 16		lda ($16)			lda 	(zTemp1)
.afdc	65 16		adc $16				adc 	zTemp1
.afde	85 16		sta $16				sta 	zTemp1
.afe0	90 dd		bcc $afbf			bcc 	_CRLoop
.afe2	e6 17		inc $17				inc 	zTemp1+1
.afe4	80 d9		bra $afbf			bra 	_CRLoop
.afe6					_CRExit:
.afe6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.afe7					System_RUN:
.afe7	20 22 a5	jsr $a522			jsr		ResetForRun 				; clear vars, stacks etc.
.afea	20 17 a5	jsr $a517			jsr 	ResetCodePointer 			; point to first thing to do.
.afed	4c 66 a3	jmp $a366			jmp 	Execute						; and run
.aff0					System_END:
.aff0	4c 33 a0	jmp $a033			jmp 	WarmStart
.aff3					System_STOP:
.aff3	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>aff6	53 54 4f 50 00					.text 	"STOP",0
.affb					System_Assert:
.affb	ca		dex				dex
.affc	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.afff	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b002	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b005	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b008	d0 0a		bne $b014			bne 	_SAOkay
.b00a	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b00d	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b014	60		rts		_SAOkay:rts
.b015					System_New:
.b015	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b018	20 22 a5	jsr $a522			jsr		ResetForRun 				; clear vars, stacks etc.
.b01b	4c 33 a0	jmp $a033			jmp 	WarmStart
.b01e					System_Old:
.b01e	20 17 a5	jsr $a517			jsr 	ResetCodePointer 			; start of first line.
.b021					_SOFindZero:
.b021	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b023	f0 15		beq $b03a			beq 	_SOFoundEnd
.b025	c8		iny				iny
.b026	d0 f9		bne $b021			bne 	_SOFindZero
.b028	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b02b	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b033	45 43 4f 56 45 52 00
.b03a					_SOFoundEnd:
.b03a	c8		iny				iny 								; update the offset
.b03b	8c 00 11	sty $1100			sty 	ProgramStart
.b03e	20 22 a5	jsr $a522			jsr 	ResetForRun 				; redo all stacks etc.
.b041	60		rts				rts
.b042					System_Sys:
.b042	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b045	85 14		sta $14				sta 	zTemp0
.b047	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b04a	85 15		sta $15				sta 	zTemp0+1
.b04c	ca		dex				dex
.b04d	da		phx				phx
.b04e	5a		phy				phy
.b04f	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b052	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b055	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b058	20 67 b0	jsr $b067			jsr 	_SSCall 					; effectively jsr (zTemp)
.b05b	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b05e	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b061	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b064	7a		ply				ply
.b065	fa		plx				plx
.b066	60		rts				rts
.b067	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b06a					System_ShowStack:
.b06a	da		phx				phx 								; save stack
.b06b	5a		phy				phy
.b06c	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b06e	a9 5b		lda #$5b			lda 	#"["
.b070	20 97 a2	jsr $a297			jsr 	ExternPrint
.b073	e0 00		cpx #$00			cpx 	#0 							; empty
.b075	f0 14		beq $b08b			beq 	_SSEnd
.b077	a2 01		ldx #$01			ldx 	#1 							; start here
.b079					_SSLoop:
.b079	20 37 a6	jsr $a637			jsr 	IntegerToString 			; print TOS
.b07c	20 25 a6	jsr $a625			jsr 	ErrorPrintIntegerBuffer
.b07f	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b081	f0 08		beq $b08b			beq 	_SSEnd
.b083	e8		inx				inx	 								; advance pointer print ,
.b084	a9 2c		lda #$2c			lda 	#','
.b086	20 97 a2	jsr $a297			jsr 	ExternPrint
.b089	80 ee		bra $b079			bra 	_SSLoop
.b08b					_SSEnd:
.b08b	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b08d	20 97 a2	jsr $a297			jsr 	ExternPrint
.b090	a9 0d		lda #$0d			lda 	#13
.b092	20 97 a2	jsr $a297			jsr 	ExternPrint
.b095	7a		ply				ply
.b096	fa		plx				plx
.b097	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b098					System_Save:
.b098	20 45 a5	jsr $a545			jsr 	ResetVarMemory 				; make sure start/end are right
.b09b	20 ae b0	jsr $b0ae			jsr 	SLGetFileName 				; get filename -> zTemp0
.b09e	20 dd a2	jsr $a2dd			jsr 	ExternSave
.b0a1	60		rts				rts
.b0a2					System_Load:
.b0a2	20 ae b0	jsr $b0ae			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0a5	20 17 a3	jsr $a317			jsr 	ExternLoad
.b0a8	20 22 a5	jsr $a522			jsr 	ResetForRun 				; re-initialise everything
.b0ab	4c 33 a0	jmp $a033			jmp 	WarmStart
.b0ae					SLGetFileName:
.b0ae	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0b0	f0 17		beq $b0c9			beq 	_SLFNFail
.b0b2	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0b5	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0b8	d0 0f		bne $b0c9			bne 	_SLFNFail
.b0ba	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b0bd	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b0bf	d0 08		bne $b0c9			bne 	_SLFNFail
.b0c1	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b0c3	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b0c6	85 14		sta $14				sta 	zTemp0
.b0c8	60		rts				rts
.b0c9					_SLFNFail:
.b0c9	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b0cc	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b0d4	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b0d9					Identifier:
.b0d9	88		dey				dey 								; wind back to identifier start
.b0da	20 35 a4	jsr $a435			jsr 	IdentifierSearch 			; try to find it.
.b0dd	90 2f		bcc $b10e			bcc 	_IDUnknown 					; not known, give up.
.b0df	48		pha				pha
.b0e0					_IDSkip:
.b0e0	b1 10		lda ($10),y			lda 	(codePtr),y
.b0e2	c8		iny				iny
.b0e3	c9 e0		cmp #$e0			cmp 	#$E0
.b0e5	90 f9		bcc $b0e0			bcc 	_IDSkip
.b0e7	68		pla				pla
.b0e8	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b0ea	d0 36		bne $b122			bne 	_IDCall
.b0ec	20 c2 b1	jsr $b1c2			jsr 	IndexCheck 					; check index/subscript
.b0ef	5a		phy				phy
.b0f0	e8		inx				inx 								; make space on stack
.b0f1	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b0f3	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b0f5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b0f8	c8		iny				iny
.b0f9	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b0fb	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b0fe	c8		iny				iny
.b0ff	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b101	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b104	c8		iny				iny
.b105	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b107	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b10a	7a		ply				ply
.b10b	4c 66 a3	jmp $a366			jmp 	Execute
.b10e					_IDUnknown:
.b10e	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b111	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b119	56 41 52 49 41 42 4c 45 00
.b122					_IDCall:
.b122	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b124	d0 1b		bne $b141			bne 	_IDCode
.b126	20 7d b3	jsr $b37d			jsr 	StructPushCurrent 			; push current on the stack.
.b129	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b12b	c6 12		dec $12				dec 	StructSP
.b12d	92 12		sta ($12)			sta 	(StructSP)
.b12f	a0 01		ldy #$01			ldy 	#1 							; line address
.b131	b2 22		lda ($22)			lda 	(idDataAddr)
.b133	85 10		sta $10				sta 	codePtr
.b135	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b137	85 11		sta $11				sta 	codePtr+1
.b139	a0 03		ldy #$03			ldy 	#3 							; line position
.b13b	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b13d	a8		tay				tay
.b13e	4c 66 a3	jmp $a366			jmp 	Execute
.b141					_IDCode:
>b141	ff						.byte 	$FF
.b142					ProcReturn:
.b142					ProcReturn2:
.b142	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b144	c9 43		cmp #$43			cmp 	#STM_CALL
.b146	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b148	20 b1 b3	jsr $b3b1			jsr 	StructPopCurrent
.b14b	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b14d	20 77 b3	jsr $b377			jsr 	StructPopCount
.b150	60		rts				rts
.b151					WriteVariable:
.b151	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b153	c9 c0		cmp #$c0			cmp 	#$C0
.b155	90 5d		bcc $b1b4			bcc 	_WVTypeError
.b157	20 35 a4	jsr $a435			jsr 	IdentifierSearch 			; does it exist
.b15a	90 06		bcc $b162			bcc 	_WVNoIdentifier
.b15c	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b15e	f0 12		beq $b172			beq 	_WVWriteTOS 				; if so write TOS to it.
.b160	80 52		bra $b1b4			bra 	_WVTypeError 				; not, then can't do anything.
.b162					_WVNoIdentifier:
.b162	5a		phy				phy 								; get current line number
.b163	a0 01		ldy #$01			ldy 	#1
.b165	b1 10		lda ($10),y			lda 	(codePtr),y
.b167	c8		iny				iny
.b168	11 10		ora ($10),y			ora 	(codePtr),y
.b16a	f0 2e		beq $b19a			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b16c	7a		ply				ply
.b16d	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b16f	20 9c a4	jsr $a49c			jsr 	IdentifierCreate 			; try to find it
.b172					_WVWriteTOS:
.b172	88		dey				dey 								; skip over identifier.
.b173					_WVSkipIdentifier:
.b173	b1 10		lda ($10),y			lda 	(codePtr),y
.b175	c8		iny				iny
.b176	c9 e0		cmp #$e0			cmp 	#$E0
.b178	90 f9		bcc $b173			bcc 	_WVSkipIdentifier
.b17a	20 c2 b1	jsr $b1c2			jsr 	IndexCheck 					; check index/subscript
.b17d	5a		phy				phy									; copy TOS in
.b17e	a0 00		ldy #$00			ldy 	#0
.b180	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b183	91 22		sta ($22),y			sta 	(idDataAddr),y
.b185	c8		iny				iny
.b186	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b189	91 22		sta ($22),y			sta 	(idDataAddr),y
.b18b	c8		iny				iny
.b18c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b18f	91 22		sta ($22),y			sta 	(idDataAddr),y
.b191	c8		iny				iny
.b192	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b195	91 22		sta ($22),y			sta 	(idDataAddr),y
.b197	7a		ply				ply
.b198	ca		dex				dex 								; drop
.b199	60		rts				rts									; go back and execute again.
.b19a					_WVCantCreate:
.b19a	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b19d	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b1a5	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b1b4					_WVTypeError:
.b1b4	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b1b7	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b1bf	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b1c2					IndexCheck:
.b1c2	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b1c4	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b1c6	d0 10		bne $b1d8			bne 	_ICExit
.b1c8	c8		iny				iny
.b1c9	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b1cb	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b1cd	f0 23		beq $b1f2			beq 	_ICArrayAccess
.b1cf	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b1d1	c9 80		cmp #$80			cmp 	#$80
.b1d3	f0 04		beq $b1d9			beq 	_ICConstAccess
.b1d5					_ICSyntax:
.b1d5	4c ad a5	jmp $a5ad			jmp 	SyntaxError
.b1d8					_ICExit:
.b1d8	60		rts				rts
.b1d9					_ICConstAccess:
.b1d9	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b1db	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b1dd	85 16		sta $16				sta 	zTemp1
.b1df	64 17		stz $17				stz 	zTemp1+1
.b1e1	c8		iny				iny
.b1e2	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b1e4	c8		iny				iny
.b1e5	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b1e7	d0 ec		bne $b1d5			bne 	_ICSyntax
.b1e9	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b1eb	c8		iny				iny
.b1ec	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b1ee	d0 e5		bne $b1d5			bne 	_ICSyntax
.b1f0	80 0c		bra $b1fe			bra 	_ICAddSubscript
.b1f2					_ICArrayAccess:
.b1f2	c8		iny				iny 								; point to next
.b1f3	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b1f6	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b1f8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1fb	85 17		sta $17				sta 	zTemp1+1
.b1fd	ca		dex				dex
.b1fe					_ICAddSubscript:
.b1fe	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b200	26 17		rol $17				rol 	zTemp1+1
.b202	06 16		asl $16				asl 	zTemp1
.b204	26 17		rol $17				rol 	zTemp1+1
.b206	5a		phy				phy
.b207	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b209	a0 01		ldy #$01			ldy 	#1
.b20b	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b20d	c8		iny				iny
.b20e	11 22		ora ($22),y			ora 	(idDataAddr),y
.b210	c8		iny				iny
.b211	11 22		ora ($22),y			ora 	(idDataAddr),y
.b213	f0 17		beq $b22c			beq 	_ICZero
.b215	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b216	b2 22		lda ($22)			lda 	(idDataAddr)
.b218	65 16		adc $16				adc 	zTemp1
.b21a	48		pha				pha
.b21b	a0 01		ldy #$01			ldy 	#1
.b21d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b21f	65 17		adc $17				adc 	zTemp1+1
.b221	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b223	68		pla				pla
.b224	85 22		sta $22				sta 	idDataAddr
.b226	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b228	64 25		stz $25				stz 	idDataAddr+3
.b22a	7a		ply				ply
.b22b	60		rts				rts
.b22c					_ICZero:
.b22c	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b22f	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b237	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b243					Struct_IF:
.b243	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check TOS
.b246	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b249	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b24c	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b24f	f0 01		beq $b252			beq 	_SIFSkipForward
.b251	60		rts				rts
.b252					_SIFSkipForward:
.b252	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b254	4c 5d b2	jmp $b25d			jmp 	StructSkipForward
.b257					Struct_ELSE:
.b257	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b259	4c 5d b2	jmp $b25d			jmp 	StructSkipForward
.b25c					Struct_ENDIF:
.b25c	60		rts				rts
.b25d					StructSkipForward:
.b25d	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b25f					_SSFLoop:
.b25f	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b261	f0 14		beq $b277			beq 	_SSFExit 					; if EOL then exit
.b263	c8		iny				iny 								; advance past it
.b264	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b266	f0 0f		beq $b277			beq 	_SSFExit
.b268	c5 14		cmp $14				cmp 	zTemp0
.b26a	f0 0b		beq $b277			beq 	_SSFExit
.b26c	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b26e	b0 ef		bcs $b25f			bcs 	_SSFLoop
.b270	98		tya				tya 								; add length offset
.b271	3a		dec a				dec 	a
.b272	71 10		adc ($10),y			adc 	(codePtr),y
.b274	a8		tay				tay
.b275	80 e8		bra $b25f			bra 	_SSFLoop
.b277					_SSFExit:
.b277	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b278					Command_For:
.b278	20 7d b3	jsr $b37d			jsr 	StructPushCurrent 			; push current on the stack.
.b27b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b27e	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b281	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b284	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b287	f0 34		beq $b2bd			beq 	_CFZero
.b289	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b28c	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b28e	c6 12		dec $12				dec 	StructSP
.b290	92 12		sta ($12)			sta 	(StructSP)
.b292	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b295	49 ff		eor #$ff			eor 	#$FF
.b297	c6 12		dec $12				dec 	StructSP
.b299	92 12		sta ($12)			sta 	(StructSP)
.b29b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b29e	49 ff		eor #$ff			eor 	#$FF
.b2a0	c6 12		dec $12				dec 	StructSP
.b2a2	92 12		sta ($12)			sta 	(StructSP)
.b2a4	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b2a7	49 ff		eor #$ff			eor 	#$FF
.b2a9	c6 12		dec $12				dec 	StructSP
.b2ab	92 12		sta ($12)			sta 	(StructSP)
.b2ad	ca		dex				dex 								; pop stack value
.b2ae	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b2b0	c6 12		dec $12				dec 	StructSP
.b2b2	92 12		sta ($12)			sta 	(StructSP)
.b2b4	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2b6	85 24		sta $24				sta 	ForAddr
.b2b8	a5 13		lda $13				lda 	StructSP+1
.b2ba	85 25		sta $25				sta 	ForAddr+1
.b2bc	60		rts				rts
.b2bd					_CFZero:
.b2bd	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b2c0	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b2c8	54 20 5a 45 52 4f 00
.b2cf					Command_Next:
.b2cf	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b2d1	c9 46		cmp #$46			cmp 	#STM_FOR
.b2d3	d0 30		bne $b305			bne 	_CNNoFor
.b2d5	5a		phy				phy
.b2d6	a0 00		ldy #$00			ldy 	#0
.b2d8					_CNIncrement:
.b2d8	c8		iny				iny
.b2d9	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b2db	1a		inc a				inc 	a
.b2dc	91 12		sta ($12),y			sta 	(StructSP),y
.b2de	f0 f8		beq $b2d8			beq		_CNIncrement 				; carry out.
.b2e0	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b2e2	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b2e4	c8		iny				iny 								; will all be $FF
.b2e5	31 12		and ($12),y			and 	(StructSP),y
.b2e7	c8		iny				iny
.b2e8	31 12		and ($12),y			and 	(StructSP),y
.b2ea	c8		iny				iny
.b2eb	31 12		and ($12),y			and 	(StructSP),y
.b2ed	7a		ply				ply 								; restore Y
.b2ee	1a		inc a				inc 	a 							; so this will be zero last time round
.b2ef	d0 06		bne $b2f7			bne 	_CNLoop 					; loop back if non-zero
.b2f1	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b2f3	20 77 b3	jsr $b377			jsr 	StructPopCount
.b2f6	60		rts				rts
.b2f7					_CNLoop:
.b2f7	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2f9	85 24		sta $24				sta 	ForAddr
.b2fb	a5 13		lda $13				lda 	StructSP+1
.b2fd	85 25		sta $25				sta 	ForAddr+1
.b2ff	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b301	20 b1 b3	jsr $b3b1			jsr 	StructPopCurrent
.b304	60		rts				rts
.b305					_CNNoFor:
.b305	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b308	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b310	46 4f 52 00
.b314					Command_Index:
.b314	5a		phy				phy
.b315	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b317	e8		inx				inx
.b318	38		sec				sec
.b319	a9 fe		lda #$fe			lda 	#$FE
.b31b	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b31d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b320	c8		iny				iny
.b321	a9 ff		lda #$ff			lda 	#$FF
.b323	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b325	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b328	c8		iny				iny
.b329	a9 ff		lda #$ff			lda 	#$FF
.b32b	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b32d	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b330	c8		iny				iny
.b331	a9 ff		lda #$ff			lda 	#$FF
.b333	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b335	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b338	7a		ply				ply
.b339	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b33a					Command_Repeat:
.b33a	20 7d b3	jsr $b37d			jsr 	StructPushCurrent 			; push current on the stack.
.b33d	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b33f	c6 12		dec $12				dec 	StructSP
.b341	92 12		sta ($12)			sta 	(StructSP)
.b343	60		rts				rts
.b344					Command_Until:
.b344	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b346	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b348	d0 1b		bne $b365			bne 	_CUNoRepeat
.b34a	ca		dex				dex 								; pop
.b34b	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b34e	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b351	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b354	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b357	f0 06		beq $b35f			beq 	_CULoop
.b359	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b35b	20 77 b3	jsr $b377			jsr 	StructPopCount
.b35e	60		rts				rts
.b35f					_CULoop:
.b35f	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b361	20 b1 b3	jsr $b3b1			jsr 	StructPopCurrent
.b364	60		rts				rts
.b365					_CUNoRepeat:
.b365	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b368	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b370	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b377					StructPopCount:
.b377	18		clc				clc
.b378	65 12		adc $12				adc 	StructSP
.b37a	85 12		sta $12				sta 	StructSP
.b37c	60		rts				rts
.b37d					StructPushCurrent:
.b37d	a5 12		lda $12				lda 	StructSP 					; check space for more
.b37f	c9 0a		cmp #$0a			cmp 	#10
.b381	90 18		bcc $b39b			bcc 	_SPCSpace
.b383	a9 00		lda #$00			lda 	#0							; push bank
.b385	c6 12		dec $12				dec 	StructSP
.b387	92 12		sta ($12)			sta 	(StructSP)
.b389	98		tya				tya									; y Offset
.b38a	c6 12		dec $12				dec 	StructSP
.b38c	92 12		sta ($12)			sta 	(StructSP)
.b38e	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b390	c6 12		dec $12				dec 	StructSP
.b392	92 12		sta ($12)			sta 	(StructSP)
.b394	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b396	c6 12		dec $12				dec 	StructSP
.b398	92 12		sta ($12)			sta 	(StructSP)
.b39a	60		rts				rts
.b39b					_SPCSpace:
.b39b	20 ce a5	jsr $a5ce			jsr 	ErrorHandler
>b39e	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b3a6	54 41 43 4b 20 53 50 41 43 45 00
.b3b1					StructPopCurrent:
.b3b1	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b3b3	85 10		sta $10				sta 	codePtr
.b3b5	c8		iny				iny
.b3b6	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b3b8	85 11		sta $11				sta 	codePtr+1
.b3ba	c8		iny				iny
.b3bb	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b3bd	a8		tay				tay
.b3be	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	08 64 00 83 80 b9 4e 00			.byte $08,$64,$00,$83,$80,$b9,$4e,$00,$07,$6e,$00,$8a,$4e,$2f,$00,$0a,$78,$00,$31,$c3,$c8,$c6,$c8,$f3,$00,$15,$82,$00,$31,$84,$4e,$19,$30,$d2,$d3,$c0,$f1,$2c,$a1,$4e,$c4,$cc,$c8,$f3,$2e,$00,$0a,$8c,$00,$8d,$4e,$c4,$cc,$c8,$f3,$00,$05,$96,$00,$37,$00,$08,$a0,$00,$8d,$90,$b1,$4e,$00,$06,$aa,$00,$16,$2d,$00,$12,$b4,$00,$29,$c3,$c8,$c6,$c8,$f3,$b0,$4e,$12,$c4,$cc,$c8,$f3,$18,$00,$10,$be,$00,$29,$d2,$d3,$c0,$f1,$aa,$4e,$c4,$cc,$c8,$f3,$18,$00,$11,$c8,$00,$29,$c4,$cc,$c8,$f3,$4d,$e0,$8f,$bf,$92,$4e,$46,$18,$00
>1108	07 6e 00 8a 4e 2f 00 0a 78 00 31 c3 c8 c6 c8 f3
>1118	00 15 82 00 31 84 4e 19 30 d2 d3 c0 f1 2c a1 4e
>1128	c4 cc c8 f3 2e 00 0a 8c 00 8d 4e c4 cc c8 f3 00
>1138	05 96 00 37 00 08 a0 00 8d 90 b1 4e 00 06 aa 00
>1148	16 2d 00 12 b4 00 29 c3 c8 c6 c8 f3 b0 4e 12 c4
>1158	cc c8 f3 18 00 10 be 00 29 d2 d3 c0 f1 aa 4e c4
>1168	cc c8 f3 18 00 11 c8 00 29 c4 cc c8 f3 4d e0 8f
>1178	bf 92 4e 46 18 00

;******  Return to file: main.asm

>117e	00						.byte 	0

;******  End of listing
