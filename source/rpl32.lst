
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Wed Oct  9 18:26:48 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9f00					MemoryEnd = $9F00 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=5					CTH_ERROR = COL_MAGENTA
=7					CTH_TOKEN = COL_WHITE
=3					CTH_IDENT = COL_YELLOW
=10					CTH_COMMENT = COL_GREEN|COL_RVS
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 7e a2	jsr $a27e			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a00b	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 8e		ldy #$8e			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 35 a6	jsr $a635			jsr 	ErrorPrint16
.a01d	a2 00		ldx #$00			ldx 	#0 							; clear extended data area
.a01f	9e 00 08	stz $0800,x	_ClearX:stz 	ExtDataArea,x 				; this is so any library data
.a022	e8		inx				inx 								; is zeroed on start up.
.a023	d0 fa		bne $a01f			bne 	_ClearX
.a025	a9 0d		lda #$0d			lda 	#13
.a027	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a02a	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a02d	a9 9f		lda #$9f			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a02f	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a032	9c 8a 10	stz $108a			stz 	AllocMemory
.a035	20 42 a5	jsr $a542			jsr 	ResetForRun
.a038	20 37 a5	jsr $a537			jsr 	ResetCodePointer
.a03b					WarmStart:
.a03b	a9 06		lda #$06			lda 	#COL_CYAN
.a03d	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a040	a9 4f		lda #$4f			lda 	#"O"
.a042	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a045	a9 4b		lda #$4b			lda 	#"K"
.a047	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a04a	a9 0d		lda #$0d			lda 	#13
.a04c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a04f					NewCommand:
.a04f	8a		txa				txa
.a050	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a052	9a		txs				txs
.a053	aa		tax				tax
.a054	a9 07		lda #$07			lda 	#COL_WHITE
.a056	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a059	20 cc a2	jsr $a2cc			jsr 	ExternInput 				; input text
.a05c	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a05e	85 10		sta $10				sta 	codePtr
.a060	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a062	85 11		sta $11				sta 	codePtr+1
.a064	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a066	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a068	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a06a	85 17		sta $17				sta 	zTemp1+1
.a06c	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a06f	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a072	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a075	20 a5 a7	jsr $a7a5			jsr 	Tokenise
.a078	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a07a					SkipSpaces:
.a07a	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a07d	c8		iny				iny
.a07e	c9 20		cmp #$20			cmp 	#' '
.a080	f0 f8		beq $a07a			beq 	SkipSpaces
.a082	c9 30		cmp #$30			cmp 	#'0'
.a084	90 0e		bcc $a094			bcc 	ExecuteCLI
.a086	c9 3a		cmp #$3a			cmp 	#'9'+1
.a088	b0 0a		bcs $a094			bcs 	ExecuteCLI
.a08a	ad 00 09	lda $0900			lda 	InputBuffer
.a08d	c9 20		cmp #$20			cmp 	#' '
.a08f	f0 03		beq $a094			beq 	ExecuteCLI
.a091	4c 16 a9	jmp $a916			jmp		EditProgram
.a094					ExecuteCLI:
.a094	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a096	85 10		sta $10				sta 	codePtr
.a098	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a09a	85 11		sta $11				sta 	codePtr+1
.a09c	a0 03		ldy #$03			ldy 	#3
.a09e	4c 7d a3	jmp $a37d			jmp 	Execute 					; and run it
.a0a1					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a0a1	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$37,$20,$44,$41,$54,$45,$3a,$30,$39,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a9	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b9	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c9	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d9	39 0d 0d 42 55 49 4c 44 3a 37 20 44 41 54 45 3a
>a0e9	30 39 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0f9	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a108					KeywordText:
>a108	01 21					.byte $01,$21                          ; $10 !
>a10a	01 2a					.byte $01,$2a                          ; $11 *
>a10c	01 2b					.byte $01,$2b                          ; $12 +
>a10e	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a111	01 2d					.byte $01,$2d                          ; $14 -
>a113	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a116	01 2e					.byte $01,$2e                          ; $16 .
>a118	01 2f					.byte $01,$2f                          ; $17 /
>a11a	01 3b					.byte $01,$3b                          ; $18 ;
>a11c	01 3c					.byte $01,$3c                          ; $19 <
>a11e	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a121	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a124	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a127	01 3d					.byte $01,$3d                          ; $1d =
>a129	01 3e					.byte $01,$3e                          ; $1e >
>a12b	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a12e	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a131	01 40					.byte $01,$40                          ; $21 @
>a133	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a137	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a13d	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a141	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a148	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a14b	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a14e	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a152	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a156	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a15b	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a15f	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a164	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a168	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a16e	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a172	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a175	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a17b	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a180	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a185	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a189	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a190	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a194	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a199	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a19d	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a1a1	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a1a5	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a8	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1ad	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1b5	52
>a1b6	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1bd	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1c4	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c8	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1cd	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1d1	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1d5	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1da	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1df	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1e3	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1e9	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1ec	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1ef	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1f3	01 5b					.byte $01,$5b                          ; $4b [
>a1f5	01 5d					.byte $01,$5d                          ; $4c ]
>a1f7	01 5e					.byte $01,$5e                          ; $4d ^
>a1f9	01 2b					.byte $01,$2b                          ; $4e {+}
>a1fb	01 2d					.byte $01,$2d                          ; $4f {-}
>a1fd	00					.byte $00
.a1fe					KeywordVectorTable:
>a1fe	d2 ab					.word Mem_DPoke                        ; $10 !
>a200	f0 ac					.word MulInteger32                     ; $11 *
>a202	f9 ab					.word Stack_Add                        ; $12 +
>a204	f9 aa					.word Unary_Increment                  ; $13 ++
>a206	20 ac					.word Stack_Sub                        ; $14 -
>a208	0c ab					.word Unary_Decrement                  ; $15 --
>a20a	8f b0					.word System_ShowStack                 ; $16 .
>a20c	39 ad					.word DivInteger32                     ; $17 /
>a20e	7b b1					.word ProcReturn                       ; $18 ;
>a210	20 ae					.word Comp_Less                        ; $19 <
>a212	2e ab					.word Unary_Shl                        ; $1a <<
>a214	4b ae					.word Comp_LessEqual                   ; $1b <=
>a216	e9 ad					.word Comp_NotEqual                    ; $1c <>
>a218	e6 ad					.word Comp_Equal                       ; $1d =
>a21a	4e ae					.word Comp_Greater                     ; $1e >
>a21c	23 ae					.word Comp_GreaterEqual                ; $1f >=
>a21e	3b ab					.word Unary_Shr                        ; $20 >>
>a220	80 ab					.word Mem_DPeek                        ; $21 @
>a222	b0 aa					.word Unary_Absolute                   ; $22 ABS
>a224	76 ae					.word Allocate                         ; $23 ALLOC
>a226	47 ac					.word Stack_And                        ; $24 AND
>a228	20 b0					.word System_Assert                    ; $25 ASSERT
>a22a	a5 ab					.word Mem_Poke                         ; $26 C!
>a22c	48 ab					.word Mem_Peek                         ; $27 C@
>a22e	22 aa					.word Stack_Empty                      ; $28 CLR
>a230	d0 a5					.word SyntaxError                      ; $29 DEF
>a232	25 aa					.word Stack_Drop                       ; $2a DROP
>a234	27 aa					.word Stack_Dup                        ; $2b DUP
>a236	91 b2					.word Struct_ELSE                      ; $2c ELSE
>a238	15 b0					.word System_END                       ; $2d END
>a23a	96 b2					.word Struct_ENDIF                     ; $2e ENDIF
>a23c	b2 b2					.word Command_For                      ; $2f FOR
>a23e	7c b2					.word Struct_IF                        ; $30 IF
>a240	4e b3					.word Command_Index                    ; $31 INDEX
>a242	b6 ae					.word Cmd_List                         ; $32 LIST
>a244	c7 b0					.word System_Load                      ; $33 LOAD
>a246	ce ad					.word ModInteger32                     ; $34 MOD
>a248	b6 aa					.word Unary_Negate                     ; $35 NEGATE
>a24a	3a b0					.word System_New                       ; $36 NEW
>a24c	09 b3					.word Command_Next                     ; $37 NEXT
>a24e	41 aa					.word Stack_Nip                        ; $38 NIP
>a250	d8 aa					.word Unary_Not                        ; $39 NOT
>a252	43 b0					.word System_Old                       ; $3a OLD
>a254	93 ac					.word Stack_Or                         ; $3b OR
>a256	5b aa					.word Stack_Over                       ; $3c OVER
>a258	d4 af					.word Cmd_Renumber                     ; $3d RENUMBER
>a25a	74 b3					.word Command_Repeat                   ; $3e REPEAT
>a25c	7b b1					.word ProcReturn2                      ; $3f RETURN
>a25e	0c b0					.word System_RUN                       ; $40 RUN
>a260	bd b0					.word System_Save                      ; $41 SAVE
>a262	b9 ac					.word Stack_Shl                        ; $42 SHL
>a264	bc ac					.word Stack_Shr                        ; $43 SHR
>a266	18 b0					.word System_STOP                      ; $44 STOP
>a268	75 aa					.word Stack_Swap                       ; $45 SWAP
>a26a	67 b0					.word System_Sys                       ; $46 SYS
>a26c	7e b3					.word Command_Until                    ; $47 UNTIL
>a26e	b7 ab					.word Mem_WPoke                        ; $48 W!
>a270	61 ab					.word Mem_WPeek                        ; $49 W@
>a272	6d ac					.word Stack_Xor                        ; $4a XOR
>a274	d0 a5					.word SyntaxError                      ; $4b [
>a276	d0 a5					.word SyntaxError                      ; $4c ]
>a278	8a b1					.word WriteVariable                    ; $4d ^
>a27a	d0 a5					.word SyntaxError                      ; $4e {+}
>a27c	d0 a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a27e					ExternInitialise:
.a27e	a9 07		lda #$07			lda 	#$07 						; set colour
.a280	8d 86 02	sta $0286			sta 	646
.a283	a9 0e		lda #$0e			lda 	#14							; lower case
.a285	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a288	a9 93		lda #$93			lda 	#147 						; clear screen
.a28a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a28d	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a28f	4c a9 a2	jmp $a2a9			jmp 	ExternColour
.a292					ExternCheckBreak:
.a292	da		phx				phx 								; make sure we keep XY
.a293	5a		phy				phy
.a294	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a297	f0 03		beq $a29c			beq		_ECBExit 					; stopped
.a299	7a		ply				ply 								; restore and exit.
.a29a	fa		plx				plx
.a29b	60		rts				rts
.a29c					_ECBExit:
.a29c	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a29f					ExternPrint:
.a29f	48		pha				pha
.a2a0	da		phx				phx
.a2a1	5a		phy				phy
.a2a2	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2a5	7a		ply				ply
.a2a6	fa		plx				plx
.a2a7	68		pla				pla
.a2a8	60		rts				rts
.a2a9					ExternColour:
.a2a9	48		pha				pha
.a2aa	da		phx				phx
.a2ab	48		pha				pha
.a2ac	29 08		and #$08			and 	#8
.a2ae	0a		asl a				asl 	a
.a2af	0a		asl a				asl 	a
.a2b0	0a		asl a				asl 	a
.a2b1	0a		asl a				asl 	a
.a2b2	49 92		eor #$92			eor 	#$92
.a2b4	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a2b7	68		pla				pla
.a2b8	29 07		and #$07			and 	#7
.a2ba	aa		tax				tax
.a2bb	bd c4 a2	lda $a2c4,x			lda 	_ECTable,x
.a2be	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a2c1	fa		plx				plx
.a2c2	68		pla				pla
.a2c3	60		rts				rts
.a2c4					_ECTable:
>a2c4	90						.byte 	144
>a2c5	1c						.byte 	28
>a2c6	1e						.byte 	30
>a2c7	9e						.byte 	158
>a2c8	1f						.byte 	31
>a2c9	9c						.byte 	156
>a2ca	9f						.byte 	159
>a2cb	05						.byte 	5
.a2cc					ExternInput:
.a2cc	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2ce	85 14		sta $14				sta 	zTemp0
.a2d0	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2d2	85 15		sta $15				sta 	zTemp0+1
.a2d4	a9 07		lda #$07			lda 	#COL_WHITE
.a2d6	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a2d9	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2dc	c9 0d		cmp #$0d			cmp 	#13
.a2de	f0 0a		beq $a2ea			beq 	_EIExit
.a2e0	92 14		sta ($14)			sta 	(zTemp0)
.a2e2	e6 14		inc $14				inc 	zTemp0
.a2e4	d0 f3		bne $a2d9			bne 	_EIRead
.a2e6	e6 15		inc $15				inc 	zTemp0+1
.a2e8	80 ef		bra $a2d9			bra 	_EIRead
.a2ea	a9 00		lda #$00	_EIExit:lda 	#0
.a2ec	92 14		sta ($14)			sta 	(zTemp0)
.a2ee	a9 0d		lda #$0d			lda 	#13
.a2f0	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a2f3	60		rts				rts
.a2f4					ExternSave:
.a2f4	da		phx				phx
.a2f5	5a		phy				phy
.a2f6	20 5e a3	jsr $a35e			jsr 	EXGetLength 				; get length of file into A
.a2f9	a6 14		ldx $14				ldx 	zTemp0
.a2fb	a4 15		ldy $15				ldy 	zTemp0+1
.a2fd	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a300	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a302	a0 00		ldy #$00			ldy 	#0
.a304	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a307	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a309	85 c1		sta $c1				sta 	$C1
.a30b	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a30d	85 c2		sta $c2				sta 	$C2
.a30f	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a312	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a315	a9 c1		lda #$c1			lda 	#$C1
.a317	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a31a	b0 03		bcs $a31f			bcs 	_ESSave
.a31c	7a		ply				ply
.a31d	fa		plx				plx
.a31e	60		rts				rts
.a31f					_ESSave:
.a31f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a322	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a32a	4c 45 44 00
.a32e					ExternLoad:
.a32e	da		phx				phx
.a32f	5a		phy				phy
.a330	20 5e a3	jsr $a35e			jsr 	EXGetLength 				; get length of file into A
.a333	a6 14		ldx $14				ldx 	zTemp0
.a335	a4 15		ldy $15				ldy 	zTemp0+1
.a337	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a33a	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a33c	a0 00		ldy #$00			ldy 	#0
.a33e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a341	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a343	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a345	a9 00		lda #$00			lda 	#0 							; load command
.a347	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a34a	b0 03		bcs $a34f			bcs 	_ESLoad
.a34c	7a		ply				ply
.a34d	fa		plx				plx
.a34e	60		rts				rts
.a34f					_ESLoad:
.a34f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a352	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a35a	4c 45 44 00
.a35e					EXGetLength:
.a35e	a0 ff		ldy #$ff			ldy 	#255
.a360	c8		iny		_EXGL:	iny
.a361	b1 14		lda ($14),y			lda 	(zTemp0),y
.a363	d0 fb		bne $a360			bne 	_EXGL
.a365	98		tya				tya
.a366	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a367					EXNextLine:
.a367	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a369	f0 0f		beq $a37a			beq 	_EXNLWarmStart
.a36b	18		clc				clc 								; advance code pointer to next line
.a36c	65 10		adc $10				adc 	codePtr
.a36e	85 10		sta $10				sta 	codePtr
.a370	90 02		bcc $a374			bcc 	_EXNLNoBump
.a372	e6 11		inc $11				inc 	codePtr+1
.a374					_EXNLNoBump:
.a374	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a376	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a378	d0 03		bne $a37d			bne 	Execute 					; not end of program
.a37a					_EXNLWarmStart:
.a37a	4c 15 b0	jmp $b015			jmp 	System_END
.a37d	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a37f	b0 1c		bcs $a39d			bcs 	EXStackOverflow
.a381	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a384	d0 03		bne $a389			bne 	_EXNoBreak
.a386	20 92 a2	jsr $a292			jsr 	ExternCheckBreak
.a389					_EXNoBreak:
.a389	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a38b	f0 da		beq $a367			beq 	EXNextLine 					; reached end of the line.
.a38d	c8		iny				iny 								; advance pointer.
.a38e	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a390	90 3b		bcc $a3cd			bcc 	EXStringComment
.a392	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a394	90 21		bcc $a3b7			bcc 	EXTokenExecute
.a396	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a398	90 17		bcc $a3b1			bcc 	EXPushConstant
.a39a	4c fe b0	jmp $b0fe			jmp 	Identifier 					; it's an identifier C0-FF
.a39d					EXStackOverflow:
.a39d	a2 00		ldx #$00			ldx 	#0 							; stack error clears stack otherwise doesn't work.
.a39f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a3a2	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a3aa	45 52 46 4c 4f 57 00
.a3b1					EXPushConstant:
.a3b1	88		dey				dey
.a3b2	20 fc a3	jsr $a3fc			jsr 	ExtractIntegerToTOS 		; extract integer
.a3b5	80 c6		bra $a37d			bra 	Execute
.a3b7					EXTokenExecute:
.a3b7	0a		asl a				asl 	a 							; double token, also clears carry
.a3b8	da		phx				phx 								; save X, put token x 2 in X
.a3b9	aa		tax				tax
.a3ba	bd de a1	lda $a1de,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3bd	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3bf	bd df a1	lda $a1df,x			lda 	KeywordVectorTable-$20+1,x
.a3c2	85 15		sta $15				sta 	zTemp0+1
.a3c4	fa		plx				plx 								; restore X
.a3c5	20 ca a3	jsr $a3ca			jsr 	_EXTCall 					; call the routine
.a3c8	80 b3		bra $a37d			bra 	Execute
.a3ca					_EXTCall:
.a3ca	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3cd					EXStringComment:
.a3cd	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3cf	f0 15		beq $a3e6			beq 	EXStringSkip 				; (comment), so just skip it.
.a3d1	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3d2	98		tya				tya
.a3d3	38		sec				sec
.a3d4	65 10		adc $10				adc 	codePtr
.a3d6	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3d9	a5 11		lda $11				lda 	codePtr+1
.a3db	69 00		adc #$00			adc 	#0
.a3dd	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3e0	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3e3	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3e6					EXStringSkip:
.a3e6	98		tya				tya 								; the current position in A
.a3e7	18		clc				clc
.a3e8	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3ea	a8		tay				tay 			 					; and make that the current position.
.a3eb	88		dey				dey 								; back one because of the initial skip
.a3ec	80 8f		bra $a37d			bra 	Execute
.a3ee					EXShiftTOSRight:
.a3ee	4a		lsr a				lsr 	a
.a3ef	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3f2	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3f5	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a3f8	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a3fb	60		rts				rts
.a3fc					ExtractIntegerToTOS:
.a3fc	b1 10		lda ($10),y			lda 	(codePtr),y
.a3fe	c8		iny				iny
.a3ff	e8		inx				inx 								; make stack space
.a400	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a402	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a405	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a408	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a40b	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a40e					_EXConstantLoop:
.a40e	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a410	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a412	c9 80		cmp #$80			cmp 	#$80
.a414	d0 2d		bne $a443			bne		_EXDone 					; no then exit
.a416	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a419	48		pha				pha
.a41a	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a41d	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a420	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a423	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a426	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a429	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a42c	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a42f	68		pla				pla
.a430	20 ee a3	jsr $a3ee			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a433	20 ee a3	jsr $a3ee			jsr 	EXShiftTOSRight				; which will be x64
.a436	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a438	c8		iny				iny
.a439	29 3f		and #$3f			and 	#$3F
.a43b	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a43e	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a441	80 cb		bra $a40e			bra 	_EXConstantLoop
.a443	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a445	c8		iny				iny 								; skip over unary constant + -
.a446	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a448	d0 03		bne $a44d			bne 	_EXPositive
.a44a	4c b6 aa	jmp $aab6			jmp 	Unary_Negate
.a44d					_EXPositive:
.a44d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a44e					IdentifierSearch:
.a44e	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a450	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a452	90 12		bcc $a466			bcc 	_ISSlow
.a454	c9 fa		cmp #$fa			cmp 	#$F9+1
.a456	b0 0e		bcs $a466			bcs 	_ISSlow
.a458	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a45a	0a		asl a				asl 	a
.a45b	0a		asl a				asl		a
.a45c	85 22		sta $22				sta 	idDataAddr					; set up addres
.a45e	a9 10		lda #$10			lda 	#AZVariables >> 8
.a460	85 23		sta $23				sta 	idDataAddr+1
.a462	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a464	38		sec				sec 								; return with CS.
.a465	60		rts				rts
.a466					_ISSlow:
.a466	20 22 a5	jsr $a522			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a469	98		tya				tya 								; set (zTemp1) to point to the
.a46a	18		clc				clc 	 							; identifier to be searched.
.a46b	65 10		adc $10				adc 	codePtr
.a46d	85 16		sta $16				sta 	zTemp1
.a46f	a5 11		lda $11				lda 	codePtr+1
.a471	69 00		adc #$00			adc 	#0
.a473	85 17		sta $17				sta 	zTemp1+1
.a475	5a		phy				phy 								; save Y
.a476	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a478	48		pha				pha
.a479	a0 01		ldy #$01			ldy 	#1
.a47b	b1 14		lda ($14),y			lda 	(zTemp0),y
.a47d	85 15		sta $15				sta 	zTemp0+1
.a47f	68		pla				pla
.a480	85 14		sta $14				sta 	zTemp0
.a482	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a484	f0 2c		beq $a4b2			beq 	_ISFail
.a486	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a488	b1 14		lda ($14),y			lda 	(zTemp0),y
.a48a	85 18		sta $18				sta 	zTemp2
.a48c	c8		iny				iny
.a48d	b1 14		lda ($14),y			lda 	(zTemp0),y
.a48f	85 19		sta $19				sta 	zTemp2+1
.a491	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a493					_ISCompare:
.a493	b1 16		lda ($16),y			lda 	(zTemp1),y
.a495	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a497	d0 dd		bne $a476			bne		_ISLoop 					; different ?
.a499	c8		iny				iny
.a49a	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a49c	90 f5		bcc $a493			bcc 	_ISCompare
.a49e	18		clc				clc 								; set up the data pointer
.a49f	a5 14		lda $14				lda 	zTemp0
.a4a1	69 02		adc #$02			adc 	#2
.a4a3	85 22		sta $22				sta 	idDataAddr
.a4a5	a5 15		lda $15				lda 	zTemp0+1
.a4a7	69 00		adc #$00			adc		#0
.a4a9	85 23		sta $23				sta 	idDataAddr+1
.a4ab	a0 09		ldy #$09			ldy 	#9 							; get the type
.a4ad	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4af	7a		ply				ply
.a4b0	38		sec				sec
.a4b1	60		rts				rts
.a4b2					_ISFail:
.a4b2	7a		ply				ply
.a4b3	18		clc				clc
.a4b4	60		rts				rts
.a4b5					IdentifierCreate:
.a4b5	5a		phy				phy 								; save Y
.a4b6	48		pha				pha 								; save type on stack
.a4b7	20 22 a5	jsr $a522			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4ba	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4bd	85 16		sta $16				sta 	zTemp1
.a4bf	ad 89 10	lda $1089			lda 	VarMemory+1
.a4c2	85 17		sta $17				sta 	zTemp1+1
.a4c4	5a		phy				phy 								; save Y (code offset)
.a4c5	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4c7	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4c9	91 16		sta ($16),y			sta 	(zTemp1),y
.a4cb	c8		iny				iny
.a4cc	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4ce	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d0	c8		iny				iny
.a4d1					_IDCErase:
.a4d1	a9 00		lda #$00			lda 	#0
.a4d3	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d5	c8		iny				iny
.a4d6	c0 06		cpy #$06			cpy 	#6
.a4d8	d0 f7		bne $a4d1			bne 	_IDCErase
.a4da	68		pla				pla 								; original Y
.a4db	18		clc				clc
.a4dc	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4de	91 16		sta ($16),y			sta 	(zTemp1),y
.a4e0	c8		iny				iny
.a4e1	a5 11		lda $11				lda 	codePtr+1
.a4e3	69 00		adc #$00			adc 	#0
.a4e5	91 16		sta ($16),y			sta 	(zTemp1),y
.a4e7	c8		iny				iny
.a4e8	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4ea	91 16		sta ($16),y			sta 	(zTemp1),y
.a4ec	68		pla				pla 								; restore type
.a4ed	c8		iny				iny
.a4ee	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4f0	c8		iny				iny
.a4f1	98		tya				tya									; add offset to VarMemory
.a4f2	18		clc				clc
.a4f3	6d 88 10	adc $1088			adc 	VarMemory
.a4f6	8d 88 10	sta $1088			sta 	VarMemory
.a4f9	ad 89 10	lda $1089			lda 	VarMemory+1
.a4fc	69 00		adc #$00			adc 	#0
.a4fe	8d 89 10	sta $1089			sta 	VarMemory+1
.a501	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a504	f0 19		beq $a51f			beq 	_IDCMemory
.a506	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a508	92 14		sta ($14)			sta 	(zTemp0)
.a50a	a0 01		ldy #$01			ldy 	#1
.a50c	a5 17		lda $17				lda 	zTemp1+1
.a50e	91 14		sta ($14),y			sta 	(zTemp0),y
.a510	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a512	18		clc				clc
.a513	69 02		adc #$02			adc 	#2
.a515	85 22		sta $22				sta 	idDataAddr
.a517	a5 17		lda $17				lda 	zTemp1+1
.a519	69 00		adc #$00			adc 	#0
.a51b	85 23		sta $23				sta 	idDataAddr+1
.a51d	7a		ply				ply 								; restore Y and exit
.a51e	60		rts				rts
.a51f					_IDCMemory:
.a51f	4c e0 a5	jmp $a5e0			jmp 	OutOfMemoryError
.a522					IdentifierSetUpHashPtr:
.a522	5a		phy				phy
.a523					_ISPLoop:
.a523	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the last identifier character
.a525	c8		iny				iny
.a526	c9 e0		cmp #$e0			cmp 	#$E0
.a528	90 f9		bcc $a523			bcc 	_ISPLoop
.a52a	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a52c	0a		asl a				asl 	a 							; convert to an offset, clc
.a52d	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a52f	85 14		sta $14				sta 	zTemp0
.a531	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a533	85 15		sta $15				sta 	zTemp0+1
.a535	7a		ply				ply
.a536	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a537					ResetCodePointer:
.a537	48		pha				pha
.a538	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a53a	85 11		sta $11				sta 	codePtr+1
.a53c	64 10		stz $10				stz 	codePtr
.a53e	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a540	68		pla				pla
.a541	60		rts				rts
.a542					ResetForRun:
.a542	48		pha				pha
.a543	5a		phy				phy
.a544	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a546					_RRErase:
.a546	bd c6 b4	lda $b4c6,x			lda 	DefaultHashTable,x
.a549	9d 68 10	sta $1068,x			sta		HashTable,x
.a54c	e8		inx				inx
.a54d	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a54f	d0 f5		bne $a546			bne 	_RRErase
.a551	20 68 a5	jsr $a568			jsr 	ResetVarMemory
.a554	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a556	85 12		sta $12				sta 	StructSP
.a558	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a55a	85 13		sta $13				sta 	StructSP+1
.a55c	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a55e	92 12		sta ($12)			sta 	(StructSP)
.a560	20 8f a5	jsr $a58f			jsr 	ProcedureScan
.a563	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a565	7a		ply				ply
.a566	68		pla				pla
.a567	60		rts				rts
.a568					ResetVarMemory:
.a568	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a56a	85 14		sta $14				sta 	zTemp0
.a56c	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a56e	85 15		sta $15				sta 	zTemp0+1
.a570					_RRFindEnd:
.a570	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a572	f0 0b		beq $a57f			beq 	_RRFoundEnd
.a574	18		clc				clc 								; no, add offset to pointer.
.a575	65 14		adc $14				adc 	zTemp0
.a577	85 14		sta $14				sta 	zTemp0
.a579	90 f5		bcc $a570			bcc 	_RRFindEnd
.a57b	e6 15		inc $15				inc 	zTemp0+1
.a57d	80 f1		bra $a570			bra 	_RRFindEnd
.a57f					_RRFoundEnd:
.a57f	18		clc				clc 								; add 1 to this, as it points to the last
.a580	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a582	69 01		adc #$01			adc 	#1
.a584	8d 88 10	sta $1088			sta 	VarMemory
.a587	a5 15		lda $15				lda 	zTemp0+1
.a589	69 00		adc #$00			adc 	#0
.a58b	8d 89 10	sta $1089			sta 	VarMemory+1
.a58e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a58f					ProcedureScan:
.a58f	20 37 a5	jsr $a537			jsr 	ResetCodePointer 			; reset the code pointer.
.a592	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a594	f0 39		beq $a5cf			beq 	_PSExit
.a596	a0 03		ldy #$03			ldy 	#3 							; start of line
.a598	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a59a	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a59c	d0 24		bne $a5c2			bne 	_PSNext
.a59e	c8		iny				iny 								; skip over def first
.a59f	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a5a1	29 e0		and #$e0			and 	#$E0
.a5a3	c9 c0		cmp #$c0			cmp 	#$C0
.a5a5	d0 1b		bne $a5c2			bne 	_PSNext 					; otherwise ignore it.
.a5a7	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a5a9	20 b5 a4	jsr $a4b5			jsr 	IdentifierCreate
.a5ac					_PSSkipIdentifier:
.a5ac	b1 10		lda ($10),y			lda 	(codePtr),y
.a5ae	c9 e0		cmp #$e0			cmp 	#$E0
.a5b0	c8		iny				iny
.a5b1	90 f9		bcc $a5ac			bcc 	_PSSkipIdentifier
.a5b3	98		tya				tya  								; save the address in the data slot.
.a5b4	a0 03		ldy #$03			ldy 	#3
.a5b6	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a5b8	a5 10		lda $10				lda 	codePtr
.a5ba	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a5bc	a5 11		lda $11				lda 	codePtr+1
.a5be	a0 01		ldy #$01			ldy 	#1
.a5c0	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a5c2					_PSNext:
.a5c2	18		clc				clc 								; go to next
.a5c3	b2 10		lda ($10)			lda 	(codePtr)
.a5c5	65 10		adc $10				adc 	codePtr
.a5c7	85 10		sta $10				sta 	codeptr
.a5c9	90 c7		bcc $a592			bcc 	_PSMain
.a5cb	e6 11		inc $11				inc 	codePtr+1
.a5cd	80 c3		bra $a592			bra 	_PSMain
.a5cf					_PSExit:
.a5cf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5d0					SyntaxError:
.a5d0	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a5d3	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5db	52 52 4f 52 00
.a5e0					OutOfMemoryError:
.a5e0	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a5e3	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5eb	45 4d 4f 52 59 00
.a5f1					ErrorHandler:
.a5f1	68		pla				pla 								; pop message address
.a5f2	85 14		sta $14				sta 	zTemp0
.a5f4	68		pla				pla
.a5f5	85 15		sta $15				sta 	zTemp0+1
.a5f7	a9 05		lda #$05			lda 	#CTH_ERROR
.a5f9	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.a5fc	a0 01		ldy #$01			ldy 	#1 							; print it
.a5fe					_ErrorPrint:
.a5fe	b1 14		lda ($14),y			lda 	(zTemp0),y
.a600	20 9f a2	jsr $a29f			jsr		ExternPrint
.a603	c8		iny				iny
.a604	b1 14		lda ($14),y			lda 	(zTemp0),y
.a606	d0 f6		bne $a5fe			bne 	_ErrorPrint
.a608	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a60a	b1 10		lda ($10),y			lda		(codePtr),y
.a60c	c8		iny				iny
.a60d	12 10		ora ($10)			ora 	(codePtr)
.a60f	f0 1c		beq $a62d			beq 	_ErrorNoLine 				; if so, skip
.a611	a9 20		lda #$20			lda 	#32
.a613	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a616	a9 40		lda #$40			lda 	#'@'
.a618	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a61b	a9 20		lda #$20			lda 	#32
.a61d	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a620	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a622	b1 10		lda ($10),y			lda 	(codePtr),y
.a624	48		pha				pha
.a625	c8		iny				iny
.a626	b1 10		lda ($10),y			lda 	(codePtr),y
.a628	a8		tay				tay
.a629	68		pla				pla
.a62a	20 35 a6	jsr $a635			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a62d					_ErrorNoLine:
.a62d	a9 0d		lda #$0d			lda 	#13							; new line
.a62f	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a632	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a635					ErrorPrint16:
.a635	da		phx				phx
.a636	e8		inx				inx 								; space on stack
.a637	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a63a	98		tya				tya
.a63b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a63e	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a641	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a644	20 5a a6	jsr $a65a			jsr 	IntegerToString 			; convert to string.
.a647	fa		plx				plx
.a648					ErrorPrintIntegerBuffer:
.a648	da		phx				phx
.a649	a2 00		ldx #$00			ldx 	#0
.a64b					_EP16Loop:
.a64b	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a64e	20 9f a2	jsr $a29f			jsr 	ExternPrint
.a651	e8		inx				inx
.a652	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a655	d0 f4		bne $a64b			bne 	_EP16Loop
.a657	8a		txa				txa
.a658	fa		plx				plx
.a659	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a65a					IntegerToString:
.a65a	48		pha				pha
.a65b	5a		phy				phy
.a65c	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a65f	48		pha				pha
.a660	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a663	48		pha				pha
.a664	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a667	48		pha				pha
.a668	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a66b	48		pha				pha
.a66c	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a66f	10 08		bpl $a679			bpl 		_ITSNotMinus
.a671	a9 2d		lda #$2d			lda 		#"-"
.a673	20 1b a7	jsr $a71b			jsr 		ITSOutputCharacter
.a676	20 b6 aa	jsr $aab6			jsr 		Unary_Negate
.a679					_ITSNotMinus:
.a679	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a67c	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a67f	8a		txa				txa 								; use Y for the integer index.
.a680	a8		tay				tay
.a681	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a683					_ITSNextSubtractor:
.a683	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a685	8d 21 08	sta $0821			sta 		NumConvCount
.a688					_ITSSubtract:
.a688	38		sec				sec
.a689	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a68c	fd f7 a6	sbc $a6f7,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a68f	48		pha				pha
.a690	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a693	fd f8 a6	sbc $a6f8,x			sbc 		_ITSSubtractors+1,x
.a696	48		pha				pha
.a697	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a69a	fd f9 a6	sbc $a6f9,x			sbc 		_ITSSubtractors+2,x
.a69d	48		pha				pha
.a69e	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a6a1	fd fa a6	sbc $a6fa,x			sbc 		_ITSSubtractors+3,x
.a6a4	90 14		bcc $a6ba			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a6a6	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a6a9	68		pla				pla
.a6aa	99 00 0e	sta $0e00,y			sta 		stack2,y
.a6ad	68		pla				pla
.a6ae	99 00 0d	sta $0d00,y			sta 		stack1,y
.a6b1	68		pla				pla
.a6b2	99 00 0c	sta $0c00,y			sta 		stack0,y
.a6b5	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a6b8	80 ce		bra $a688			bra 		_ITSSubtract 			; go round again.
.a6ba					_ITSCantSubtract:
.a6ba	68		pla				pla 								; throw away interim answers
.a6bb	68		pla				pla 								; (the subtraction that failed)
.a6bc	68		pla				pla
.a6bd	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a6c0	c9 30		cmp #$30			cmp 		#"0"
.a6c2	d0 05		bne $a6c9			bne 		_ITSOutputDigit
.a6c4	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6c7	f0 09		beq $a6d2			beq	 		_ITSGoNextSubtractor
.a6c9					_ITSOutputDigit:
.a6c9	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6cc	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6cf	20 1b a7	jsr $a71b			jsr 		ITSOutputCharacter 		; output it.
.a6d2					_ITSGoNextSubtractor:
.a6d2	e8		inx				inx 								; next dword in subtractor table.
.a6d3	e8		inx				inx
.a6d4	e8		inx				inx
.a6d5	e8		inx				inx
.a6d6	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6d8	d0 a9		bne $a683			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6da	98		tya				tya 								; X is back as the mantissa index
.a6db	aa		tax				tax
.a6dc	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6df	09 30		ora #$30			ora 		#"0"
.a6e1	20 1b a7	jsr $a71b			jsr 		ITSOutputCharacter
.a6e4	68		pla				pla
.a6e5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6e8	68		pla				pla
.a6e9	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6ec	68		pla				pla
.a6ed	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6f0	68		pla				pla
.a6f1	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6f4	7a		ply				ply 								; and exit
.a6f5	68		pla				pla
.a6f6	60		rts				rts
.a6f7					_ITSSubtractors:
>a6f7	00 ca 9a 3b					.dword 		1000000000
>a6fb	00 e1 f5 05					.dword 		100000000
>a6ff	80 96 98 00					.dword 		10000000
>a703	40 42 0f 00					.dword 		1000000
>a707	a0 86 01 00					.dword 		100000
>a70b	10 27 00 00					.dword 		10000
>a70f	e8 03 00 00					.dword 		1000
>a713	64 00 00 00					.dword 		100
>a717	0a 00 00 00					.dword 		10
.a71b					_ITSSubtractorsEnd:
.a71b					ITSOutputCharacter:
.a71b	48		pha				pha
.a71c	da		phx				phx
.a71d	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a720	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a723	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a726	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a729	fa		plx				plx
.a72a	68		pla				pla
.a72b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a72c					IntFromString:
.a72c	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a72e	8c 25 08	sty $0825			sty 	IFSHexFlag
.a731	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a733	c9 26		cmp #$26			cmp 	#"&"
.a735	d0 04		bne $a73b			bne 	_IFSNotHex
.a737	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a73a	c8		iny				iny 								; skip
.a73b					_IFSNotHex:
.a73b	e8		inx				inx 								; space on stack
.a73c	20 98 a7	jsr $a798			jsr 	IFSClearTOS
.a73f					_IFSLoop:
.a73f	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a742	f0 0a		beq $a74e			beq 	_IFSDecOnly
.a744	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a746	c9 41		cmp #$41			cmp 	#"A"
.a748	90 04		bcc $a74e			bcc 	_IFSDecOnly
.a74a	c9 47		cmp #$47			cmp 	#"F"+1
.a74c	90 0a		bcc $a758			bcc 	_IFSOkDigit
.a74e					_IFSDecOnly:
.a74e	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a750	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a752	90 3e		bcc $a792			bcc 	_IFSExit
.a754	c9 3a		cmp #$3a			cmp 	#"9"+1
.a756	b0 3a		bcs $a792			bcs 	_IFSExit
.a758					_IFSOkDigit:
.a758	ad 25 08	lda $0825			lda 	IFSHexFlag
.a75b	d0 11		bne $a76e			bne 	_IFSHexShift
.a75d	20 27 aa	jsr $aa27			jsr 	Stack_Dup 					; duplicate tos
.a760	20 2e ab	jsr $ab2e			jsr 	Unary_Shl	 				; x 2
.a763	20 2e ab	jsr $ab2e			jsr 	Unary_Shl 					; x 4
.a766	20 f9 ab	jsr $abf9			jsr 	Stack_Add 					; x 5
.a769	20 2e ab	jsr $ab2e			jsr 	Unary_Shl 					; x 10
.a76c	80 0c		bra $a77a			bra 	_IFSAddIn
.a76e					_IFSHexShift:
.a76e	20 2e ab	jsr $ab2e			jsr 	Unary_Shl	 				; x 2
.a771	20 2e ab	jsr $ab2e			jsr 	Unary_Shl	 				; x 4
.a774	20 2e ab	jsr $ab2e			jsr 	Unary_Shl	 				; x 8
.a777	20 2e ab	jsr $ab2e			jsr 	Unary_Shl	 				; x 16
.a77a					_IFSAddIn:
.a77a	e8		inx				inx  								; create space next up
.a77b	20 98 a7	jsr $a798			jsr 	IFSClearTOS
.a77e	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a780	c9 41		cmp #$41			cmp 	#"A"
.a782	90 03		bcc $a787			bcc 	_IFSDec
.a784	38		sec				sec 								; hex fixup.
.a785	e9 07		sbc #$07			sbc 	#7
.a787					_IFSDec:
.a787	29 0f		and #$0f			and 	#15
.a789	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a78c	20 f9 ab	jsr $abf9			jsr 	Stack_Add 					; add to tos
.a78f	c8		iny				iny
.a790	80 ad		bra $a73f			bra 	_IFSLoop
.a792					_IFSExit:
.a792	98		tya				tya
.a793	38		sec				sec
.a794	f0 01		beq $a797			beq 	_IFSSkipFail
.a796	18		clc				clc
.a797					_IFSSkipFail:
.a797	60		rts				rts
.a798					IFSClearTOS:
.a798	9e 00 0c	stz $0c00,x			stz		stack0,x
.a79b	9e 00 0d	stz $0d00,x			stz		stack1,x
.a79e	9e 00 0e	stz $0e00,x			stz		stack2,x
.a7a1	9e 00 0f	stz $0f00,x			stz		stack3,x
.a7a4	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a7a5					Tokenise:
.a7a5	da		phx				phx
.a7a6	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a7a8					_TKSkip:
.a7a8	c8		iny				iny
.a7a9					_TKMainLoop:
.a7a9	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a7ab	f0 06		beq $a7b3			beq 	_TKExit
.a7ad	c9 20		cmp #$20			cmp 	#" "
.a7af	f0 f7		beq $a7a8			beq 	_TKSkip
.a7b1	80 04		bra $a7b7			bra 	_TKNotEnd
.a7b3	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a7b5	fa		plx				plx
.a7b6	60		rts				rts
.a7b7					_TKNotEnd:
.a7b7	c9 22		cmp #$22			cmp 	#'"'
.a7b9	f0 04		beq $a7bf			beq 	_TKIsQuote
.a7bb	c9 27		cmp #$27			cmp 	#"'"
.a7bd	d0 05		bne $a7c4			bne 	_TKNotQuote
.a7bf					_TKIsQuote:
.a7bf	20 e3 a8	jsr $a8e3			jsr		TOKQuotedString
.a7c2	80 e5		bra $a7a9			bra 	_TKMainLoop
.a7c4					_TKNotQuote:
.a7c4	98		tya				tya 								; current pos -> zTemp0
.a7c5	18		clc				clc
.a7c6	65 10		adc $10				adc 	codePtr
.a7c8	85 14		sta $14				sta 	zTemp0
.a7ca	85 10		sta $10				sta 	codePtr
.a7cc	a5 11		lda $11				lda 	codePtr+1
.a7ce	69 00		adc #$00			adc 	#0
.a7d0	85 15		sta $15				sta 	zTemp0+1
.a7d2	85 11		sta $11				sta 	codePtr+1
.a7d4	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7d6	b1 10		lda ($10),y			lda 	(codePtr),y
.a7d8	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7da	f0 08		beq $a7e4			beq 	_TKIsNumber
.a7dc	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7de	90 23		bcc $a803			bcc 	_TKNotNumber
.a7e0	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7e2	b0 1f		bcs $a803			bcs 	_TKNotNumber
.a7e4					_TKIsNumber:
.a7e4	e8		inx				inx
.a7e5	20 2c a7	jsr $a72c			jsr 	IntFromString 				; convert to integer
.a7e8	48		pha				pha
.a7e9	20 bb a8	jsr $a8bb			jsr 	TokWriteConstant 			; do constant recursively.
.a7ec	7a		ply				ply
.a7ed	ca		dex				dex
.a7ee	b1 10		lda ($10),y			lda 	(codePtr),y
.a7f0	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7f2	d0 08		bne $a7fc			bne 	_TKIsPositive
.a7f4	c8		iny				iny									; skip it
.a7f5	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7f7	20 b2 a8	jsr $a8b2			jsr 	TokWriteToken 				; write token out
.a7fa	80 ad		bra $a7a9			bra 	_TKMainLoop 				; loop back.
.a7fc					_TKIsPositive:
.a7fc	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a7fe	20 b2 a8	jsr $a8b2			jsr 	TokWriteToken 				; write token out
.a801	80 a6		bra $a7a9			bra 	_TKMainLoop 				; loop back.
.a803					_TKNotNumber:
.a803	a9 08		lda #$08			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a805	85 18		sta $18				sta 	zTemp2
.a807	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a809	85 19		sta $19				sta 	zTemp2+1
.a80b	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a80d	a9 10		lda #$10			lda 	#$10
.a80f	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a811					_TKSearch:
.a811	a0 00		ldy #$00			ldy 	#0
.a813					_TKCompare:
.a813	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a815	c8		iny				iny
.a816	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a818	d0 07		bne $a821			bne 	_TKNext
.a81a	98		tya				tya
.a81b	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a81d	d0 f4		bne $a813			bne 	_TKCompare 					; found a match.
.a81f	80 13		bra $a834			bra 	_TKFound
.a821	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a823	38		sec				sec 								; add length+1 to current
.a824	65 18		adc $18				adc 	zTemp2
.a826	85 18		sta $18				sta 	zTemp2
.a828	90 02		bcc $a82c			bcc 	_TKNNC
.a82a	e6 19		inc $19				inc 	zTemp2+1
.a82c	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a82e	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a830	d0 df		bne $a811			bne 	_TKSearch 					; go try again.
.a832	80 0f		bra $a843			bra 	_TKComplete
.a834					_TKFound:
.a834	98		tya				tya
.a835	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a837	90 e8		bcc $a821			bcc 	_TKNext 					; if < best try next
.a839	f0 e6		beq $a821			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a83b	85 1a		sta $1a				sta 	zTemp3 						; update best
.a83d	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a83f	85 1c		sta $1c				sta 	zTemp4
.a841	80 de		bra $a821			bra 	_TKNext
.a843					_TKComplete:
.a843	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a845	f0 1a		beq $a861			beq		_TKTokenFail 				; if zero no match occurred
.a847	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a849	88		dey				dey
.a84a	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at last character
.a84c	c8		iny				iny
.a84d	20 a2 a8	jsr $a8a2			jsr 	TOKIsIdentifier 			; identifier character
.a850	90 07		bcc $a859			bcc 	_TKOutput 					; if not, then token is okay
.a852	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a854	20 a2 a8	jsr $a8a2			jsr 	TOKIsIdentifier 			; is that an identifier
.a857	b0 08		bcs $a861			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a859					_TKOutput:
.a859	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a85b	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken
.a85e	4c a9 a7	jmp $a7a9			jmp 	_TKMainLoop					; go round again
.a861					_TKTokenFail:
.a861	a0 00		ldy #$00			ldy 	#0
.a863	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a865	20 a2 a8	jsr $a8a2			jsr 	TOKIsIdentifier
.a868	b0 13		bcs $a87d			bcs 	_TKCopyIdent 				; if yes copy it
.a86a	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>a86d	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a875	4f 4b 45 4e 49 53 45 00
.a87d					_TKCopyIdent:
.a87d	c8		iny				iny 								; get next
.a87e	b1 10		lda ($10),y			lda 	(codePtr),y
.a880	20 a2 a8	jsr $a8a2			jsr 	TOKIsIdentifier 			; if identifier
.a883	08		php				php 								; save CS on stack
.a884	88		dey				dey 								; back to character
.a885	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a887	c8		iny				iny
.a888	c9 2e		cmp #$2e			cmp 	#"."
.a88a	d0 02		bne $a88e			bne 	_TKNotDot
.a88c	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a88e					_TKNotDot:
.a88e	38		sec				sec
.a88f	e9 41		sbc #$41			sbc		#'A'
.a891	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a893	28		plp				plp 								; CS if next is identifier
.a894	08		php				php
.a895	b0 02		bcs $a899			bcs 	_TKNotLast					; CC if next is not identifier
.a897	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a899					_TKNotLast:
.a899	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken 				; write out
.a89c	28		plp				plp 								; get test result
.a89d	b0 de		bcs $a87d			bcs 	_TKCopyIdent 				; get the next identifier.
.a89f	4c a9 a7	jmp $a7a9			jmp 	_TKMainLoop
.a8a2					TOKIsIdentifier:
.a8a2	c9 2e		cmp #$2e			cmp 	#"."
.a8a4	f0 08		beq $a8ae			beq 	_TIIYes
.a8a6	c9 41		cmp #$41			cmp 	#"A"
.a8a8	90 06		bcc $a8b0			bcc 	_TIINo
.a8aa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a8ac	b0 02		bcs $a8b0			bcs 	_TIINo
.a8ae					_TIIYes:
.a8ae	38		sec				sec
.a8af	60		rts				rts
.a8b0					_TIINo:
.a8b0	18		clc				clc
.a8b1	60		rts				rts
.a8b2					TokWriteToken:
.a8b2	92 16		sta ($16)			sta 	(zTemp1)
.a8b4	e6 16		inc $16				inc 	zTemp1
.a8b6	d0 02		bne $a8ba			bne 	_TWTExit
.a8b8	e6 17		inc $17				inc 	zTemp1+1
.a8ba					_TWTExit:
.a8ba	60		rts				rts
.a8bb					TokWriteConstant:
.a8bb	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8be	29 3f		and #$3f			and		#63
.a8c0	48		pha				pha 								; save on stack
.a8c1	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8c4	29 c0		and #$c0			and 	#$C0
.a8c6	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8c9	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8cc	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8cf	f0 0d		beq $a8de			beq 	_TWCNoCall 					; no, don't call.
.a8d1	5a		phy				phy
.a8d2	a0 06		ldy #$06			ldy 	#6
.a8d4					_TWCShift:
.a8d4	20 3b ab	jsr $ab3b			jsr 	Unary_Shr
.a8d7	88		dey				dey
.a8d8	d0 fa		bne $a8d4			bne 	_TWCShift
.a8da	7a		ply				ply
.a8db	20 bb a8	jsr $a8bb			jsr 	TokWriteConstant
.a8de					_TWCNoCall:
.a8de	68		pla				pla
.a8df	09 80		ora #$80			ora 	#$80						; make digit token
.a8e1	80 cf		bra $a8b2			bra 	TokWriteToken 				; and write it out.
.a8e3					TokQuotedString:
.a8e3	85 18		sta $18				sta 	zTemp2 						; save quote
.a8e5	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8e7	f0 02		beq $a8eb			beq 	_TQDouble
.a8e9	a9 01		lda #$01			lda 	#1
.a8eb					_TQDouble:
.a8eb	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8ec	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken 				; write out
.a8ef	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8f1	85 1a		sta $1a				sta 	zTemp3
.a8f3	a5 17		lda $17				lda 	zTemp1+1
.a8f5	85 1b		sta $1b				sta 	zTemp3+1
.a8f7	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8f9	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken
.a8fc					_TQLoop:
.a8fc	c8		iny				iny 								; next character
.a8fd	b1 10		lda ($10),y			lda 	(codePtr),y
.a8ff	f0 0f		beq $a910			beq 	_TQExit 					; if zero exit
.a901	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a903	f0 0a		beq $a90f			beq 	_TQSkipExit 				; skip it and exit
.a905	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken 				; write out
.a908	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a90a	1a		inc a				inc 	a
.a90b	92 1a		sta ($1a)			sta 	(zTemp3)
.a90d	80 ed		bra $a8fc			bra 	_TQLoop						; go round
.a90f					_TQSkipExit:
.a90f	c8		iny				iny
.a910					_TQExit:
.a910	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a912	20 b2 a8	jsr $a8b2			jsr 	TOKWriteToken
.a915	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a916					EditProgram:
.a916	ad 89 10	lda $1089			lda 	VarMemory+1
.a919	1a		inc a				inc 	a
.a91a	c9 9f		cmp #$9f			cmp 	#MemoryEnd >> 8
.a91c	b0 3c		bcs $a95a			bcs 	_EPMemory
.a91e	a2 00		ldx #$00			ldx 	#0
.a920	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a922	85 10		sta $10				sta 	codePtr
.a924	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a926	85 11		sta $11				sta 	codePtr+1
.a928	a0 00		ldy #$00			ldy 	#0
.a92a	a2 ff		ldx #$ff			ldx 	#255
.a92c	20 fc a3	jsr $a3fc			jsr 	ExtractIntegerToTOS
.a92f	98		tya				tya
.a930	18		clc				clc
.a931	65 10		adc $10				adc 	codePtr
.a933	85 10		sta $10				sta 	codePtr
.a935	90 02		bcc $a939			bcc 	_EPNoCarry
.a937	e6 11		inc $11				inc 	codePtr+1
.a939					_EPNoCarry:
.a939	20 5d a9	jsr $a95d			jsr 	EDFindLine
.a93c	90 0f		bcc $a94d			bcc 	_EPNotFound
.a93e	a5 16		lda $16				lda 	zTemp1
.a940	48		pha				pha
.a941	a5 17		lda $17				lda 	zTemp1+1
.a943	48		pha				pha
.a944	20 94 a9	jsr $a994			jsr 	EDDeleteLine
.a947	68		pla				pla
.a948	85 17		sta $17				sta 	zTemp1+1
.a94a	68		pla				pla
.a94b	85 16		sta $16				sta 	zTemp1
.a94d					_EPNotFound:
.a94d	b2 10		lda ($10)			lda 	(codePtr)
.a94f	f0 03		beq $a954			beq 	_EPNoInsert
.a951	20 b9 a9	jsr $a9b9			jsr 	EDInsertLine
.a954					_EPNoInsert:
.a954	20 42 a5	jsr $a542			jsr 	ResetForRun
.a957	4c 4f a0	jmp $a04f			jmp 	NewCommand
.a95a					_EPMemory:
.a95a	4c e0 a5	jmp $a5e0			jmp 	OutOfMemoryError
.a95d					EDFindLine:
.a95d	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a95f	85 16		sta $16				sta 	zTemp1
.a961	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a963	85 17		sta $17				sta 	zTemp1+1
.a965					_EDFLLoop:
.a965	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a967	b1 16		lda ($16),y			lda 	(zTemp1),y
.a969	f0 25		beq $a990			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a96b	c8		iny				iny
.a96c	38		sec				sec
.a96d	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a970	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a972	aa		tax				tax	 								; this will return 10.
.a973	ad 00 0d	lda $0d00			lda 	stack1
.a976	c8		iny				iny
.a977	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a979	90 15		bcc $a990			bcc 	_EDFLFail					; if target < current then failed.
.a97b	d0 04		bne $a981			bne 	_EDFLNext 					; if non-zero then goto next
.a97d	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a97f	f0 11		beq $a992			beq 	_EDFLFound
.a981					_EDFLNext:
.a981	a0 00		ldy #$00			ldy 	#0 							; get offset
.a983	18		clc				clc
.a984	b1 16		lda ($16),y			lda 	(zTemp1),y
.a986	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a988	85 16		sta $16				sta 	zTemp1
.a98a	90 d9		bcc $a965			bcc 	_EDFLLoop
.a98c	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a98e	80 d5		bra $a965			bra 	_EDFLLoop
.a990					_EDFLFail:
.a990	18		clc				clc
.a991	60		rts				rts
.a992					_EDFLFound:
.a992	38		sec				sec
.a993	60		rts				rts
.a994					EDDeleteLine:
.a994	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a996	a2 00		ldx #$00			ldx 	#0
.a998	b1 16		lda ($16),y			lda 	(zTemp1),y
.a99a	a8		tay				tay 								; put in Y
.a99b					_EDDelLoop:
.a99b	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a99d	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a99f	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a9a1	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a9a4	d0 07		bne $a9ad			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a9a6	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a9a8	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a9ab	f0 08		beq $a9b5			beq		_EDDelExit
.a9ad					_EDDelNext:
.a9ad	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a9af	d0 ea		bne $a99b			bne 	_EDDelLoop
.a9b1	e6 17		inc $17				inc 	zTemp1+1
.a9b3	80 e6		bra $a99b			bra 	_EDDelLoop
.a9b5					_EDDelExit:
.a9b5	20 68 a5	jsr $a568			jsr 	ResetVarMemory
.a9b8	60		rts				rts
.a9b9					EDInsertLine:
.a9b9	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a9bc	85 1a		sta $1a				sta 	zTemp3
.a9be	ad 89 10	lda $1089			lda 	VarMemory+1
.a9c1	85 1b		sta $1b				sta 	zTemp3+1
.a9c3	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9c5					_EDGetLength:
.a9c5	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9c7	f0 0d		beq $a9d6			beq 	_EDGotLength 				; if 0, Y is the length
.a9c9	c8		iny				iny
.a9ca	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9cc	b0 f7		bcs $a9c5			bcs 	_EDGetLength
.a9ce	98		tya				tya 								; get original position
.a9cf	3a		dec a				dec 	a
.a9d0	18		clc				clc
.a9d1	71 10		adc ($10),y			adc 	(codePtr),y
.a9d3	a8		tay				tay
.a9d4	80 ef		bra $a9c5			bra 	_EDGetLength
.a9d6					_EDGotLength:
.a9d6	98		tya				tya
.a9d7	18		clc				clc
.a9d8	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9da	48		pha				pha 								; save total size (e.g. offset)
.a9db	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9dd	a8		tay				tay 								; in Y
.a9de	a2 00		ldx #$00			ldx 	#0
.a9e0					_EDInsLoop:
.a9e0	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9e2	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9e4	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9e6	c5 16		cmp $16				cmp 	zTemp1
.a9e8	d0 06		bne $a9f0			bne 	_EDINextShift
.a9ea	a5 1b		lda $1b				lda 	zTemp3+1
.a9ec	c5 17		cmp $17				cmp 	zTemp1+1
.a9ee	f0 0a		beq $a9fa			beq 	_EDIShiftOver
.a9f0					_EDINextShift:
.a9f0	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9f2	d0 02		bne $a9f6			bne 	_EDINoBorrow
.a9f4	c6 1b		dec $1b				dec 	zTemp3+1
.a9f6					_EDINoBorrow:
.a9f6	c6 1a		dec $1a				dec 	zTemp3
.a9f8	80 e6		bra $a9e0			bra 	_EDInsLoop
.a9fa					_EDIShiftOver:
.a9fa	68		pla				pla 								; this is the size + others, e.g. offset
.a9fb	a0 00		ldy #$00			ldy 	#0
.a9fd	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.a9ff	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.aa02	c8		iny				iny
.aa03	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa05	ad 00 0d	lda $0d00			lda 	stack1
.aa08	c8		iny				iny
.aa09	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa0b	c8		iny				iny 								; where the code goes.
.aa0c	a2 00		ldx #$00			ldx 	#0 							; comes from
.aa0e					_EDICopyCode:
.aa0e	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.aa10	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.aa12	c8		iny				iny 								; bump pointers
.aa13	e6 10		inc $10				inc 	codePtr
.aa15	d0 02		bne $aa19			bne 	_EDINoCarry
.aa17	e6 11		inc $11				inc 	codePtr+1
.aa19					_EDINoCarry:
.aa19	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.aa1b	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.aa1d	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa1f	d0 ed		bne $aa0e			bne 	_EDICopyCode
.aa21	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa22					Stack_Empty:
.aa22	a2 00		ldx #$00			ldx 	#0
.aa24	60		rts				rts
.aa25					Stack_Drop:
.aa25	ca		dex				dex
.aa26	60		rts				rts
.aa27					Stack_Dup:
.aa27	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa2a	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa2d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa30	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa33	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa36	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa39	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa3c	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa3f	e8		inx				inx 								; bump stack pointer
.aa40	60		rts				rts
.aa41					Stack_Nip:
.aa41	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa44	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa47	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa4a	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa4d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa50	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa53	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa56	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa59	ca		dex				dex 								; drop tos
.aa5a	60		rts				rts
.aa5b					Stack_Over:
.aa5b	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa5e	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa61	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa64	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa67	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa6a	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa6d	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa70	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa73	e8		inx				inx 							; bump stack pointer
.aa74	60		rts				rts
.aa75					Stack_Swap:
.aa75	5a		phy				phy
.aa76	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa79	a8		tay				tay
.aa7a	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa7d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa80	98		tya				tya
.aa81	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa84	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa87	a8		tay				tay
.aa88	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa8b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa8e	98		tya				tya
.aa8f	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa92	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa95	a8		tay				tay
.aa96	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa99	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa9c	98		tya				tya
.aa9d	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aaa0	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaa3	a8		tay				tay
.aaa4	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aaa7	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aaaa	98		tya				tya
.aaab	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aaae	7a		ply				ply
.aaaf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aab0					Unary_Absolute:
.aab0	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aab3	30 01		bmi $aab6			bmi 	Unary_Negate
.aab5	60		rts				rts
.aab6					Unary_Negate:
.aab6	38		sec				sec
.aab7	a9 00		lda #$00			lda		#0
.aab9	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aabc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aabf	a9 00		lda #$00			lda		#0
.aac1	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aac4	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aac7	a9 00		lda #$00			lda		#0
.aac9	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aacc	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aacf	a9 00		lda #$00			lda		#0
.aad1	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aad4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aad7	60		rts				rts
.aad8					Unary_Not:
.aad8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aadb	49 ff		eor #$ff			eor 	#$FF
.aadd	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aae0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aae3	49 ff		eor #$ff			eor 	#$FF
.aae5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aae8	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aaeb	49 ff		eor #$ff			eor 	#$FF
.aaed	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaf0	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaf3	49 ff		eor #$ff			eor 	#$FF
.aaf5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aaf8	60		rts				rts
.aaf9					Unary_Increment:
.aaf9	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aafc	d0 0d		bne $ab0b			bne 	_UIExit
.aafe	fe 00 0d	inc $0d00,x			inc 	stack1,x
.ab01	d0 08		bne $ab0b			bne 	_UIExit
.ab03	fe 00 0e	inc $0e00,x			inc 	stack2,x
.ab06	d0 03		bne $ab0b			bne 	_UIExit
.ab08	fe 00 0f	inc $0f00,x			inc 	stack3,x
.ab0b					_UIExit:
.ab0b	60		rts				rts
.ab0c					Unary_Decrement:
.ab0c	38		sec				sec
.ab0d	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ab10	e9 01		sbc #$01			sbc 	#1
.ab12	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab15	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab18	e9 00		sbc #$00			sbc 	#0
.ab1a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab1d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab20	e9 00		sbc #$00			sbc 	#0
.ab22	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab25	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab28	e9 00		sbc #$00			sbc 	#0
.ab2a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab2d	60		rts				rts
.ab2e					Unary_Shl:
.ab2e	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab31	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab34	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab37	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab3a	60		rts				rts
.ab3b					Unary_Shr:
.ab3b	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab3e	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab41	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab44	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab47	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab48					Mem_Peek:
.ab48	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab4b	85 14		sta $14				sta 	zTemp0
.ab4d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab50	85 15		sta $15				sta 	zTemp0+1
.ab52	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab54	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab57	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab5a	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab5d	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab60	60		rts				rts
.ab61					Mem_WPeek:
.ab61	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab64	85 14		sta $14				sta 	zTemp0
.ab66	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab69	85 15		sta $15				sta 	zTemp0+1
.ab6b	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab6d	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab70	5a		phy				phy 								; read msb
.ab71	a0 01		ldy #$01			ldy 	#1
.ab73	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab75	7a		ply				ply
.ab76	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab79	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab7c	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab7f	60		rts				rts
.ab80					Mem_DPeek:
.ab80	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab83	85 14		sta $14				sta 	zTemp0
.ab85	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab88	85 15		sta $15				sta 	zTemp0+1
.ab8a	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab8c	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab8f	5a		phy				phy 								; read msb
.ab90	a0 01		ldy #$01			ldy 	#1
.ab92	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab94	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab97	c8		iny				iny
.ab98	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab9a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab9d	c8		iny				iny
.ab9e	b1 14		lda ($14),y			lda 	(zTemp0),y
.aba0	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aba3	7a		ply				ply
.aba4	60		rts				rts
.aba5					Mem_Poke:
.aba5	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aba8	85 14		sta $14				sta 	zTemp0
.abaa	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abad	85 15		sta $15				sta 	zTemp0+1
.abaf	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abb2	92 14		sta ($14)			sta 	(zTemp0)
.abb4	ca		dex				dex
.abb5	ca		dex				dex
.abb6	60		rts				rts
.abb7					Mem_WPoke:
.abb7	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abba	85 14		sta $14				sta 	zTemp0
.abbc	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abbf	85 15		sta $15				sta 	zTemp0+1
.abc1	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abc4	92 14		sta ($14)			sta 	(zTemp0)
.abc6	5a		phy				phy
.abc7	a0 01		ldy #$01			ldy 	#1
.abc9	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abcc	91 14		sta ($14),y			sta 	(zTemp0),y
.abce	7a		ply				ply
.abcf	ca		dex				dex
.abd0	ca		dex				dex
.abd1	60		rts				rts
.abd2					Mem_DPoke:
.abd2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abd5	85 14		sta $14				sta 	zTemp0
.abd7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abda	85 15		sta $15				sta 	zTemp0+1
.abdc	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abdf	92 14		sta ($14)			sta 	(zTemp0)
.abe1	5a		phy				phy
.abe2	a0 01		ldy #$01			ldy 	#1
.abe4	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abe7	91 14		sta ($14),y			sta 	(zTemp0),y
.abe9	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abec	c8		iny				iny
.abed	91 14		sta ($14),y			sta 	(zTemp0),y
.abef	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abf2	c8		iny				iny
.abf3	91 14		sta ($14),y			sta 	(zTemp0),y
.abf5	7a		ply				ply
.abf6	ca		dex				dex
.abf7	ca		dex				dex
.abf8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abf9					Stack_Add:
.abf9	ca		dex				dex
.abfa					Stack_Add_No_Dex:
.abfa	18		clc				clc
.abfb	bd 00 0c	lda $0c00,x			lda		stack0,x
.abfe	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.ac01	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac04	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac07	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.ac0a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac0d	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac10	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.ac13	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac16	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac19	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.ac1c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac1f	60		rts				rts
.ac20					Stack_Sub:
.ac20	ca		dex				dex
.ac21	38		sec				sec
.ac22	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac25	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac28	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac2b	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac2e	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac31	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac34	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac37	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac3a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac3d	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac40	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac43	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac46	60		rts				rts
.ac47					Stack_And:
.ac47	ca		dex				dex
.ac48	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac4b	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac4e	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac51	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac54	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac57	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac5a	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac5d	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac60	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac63	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac66	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac69	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac6c	60		rts				rts
.ac6d					Stack_Xor:
.ac6d	ca		dex				dex
.ac6e	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac71	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac74	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac77	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac7a	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac7d	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac80	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac83	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac86	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac89	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac8c	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac8f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac92	60		rts				rts
.ac93					Stack_Or:
.ac93	ca		dex				dex
.ac94	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac97	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac9a	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac9d	bd 00 0d	lda $0d00,x			lda		stack1,x
.aca0	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aca3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aca6	bd 00 0e	lda $0e00,x			lda		stack2,x
.aca9	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acac	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acaf	bd 00 0f	lda $0f00,x			lda		stack3,x
.acb2	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acb5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acb8	60		rts				rts
.acb9					Stack_Shl:
.acb9	38		sec				sec
.acba	80 01		bra $acbd			bra 	StackShift
.acbc					Stack_Shr:
.acbc	18		clc				clc
.acbd					StackShift:
.acbd	08		php				php
.acbe	ca		dex				dex
.acbf	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.acc2	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.acc4	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acc7	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acca	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.accd	d0 13		bne $ace2			bne 	_SSZero
.accf					_SSLoop:
.accf	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acd2	30 1a		bmi $acee			bmi 	_SSDone 					; completed ?
.acd4	28		plp				plp 								; restore flag
.acd5	08		php				php
.acd6	b0 05		bcs $acdd			bcs 	_SSLeft 					; do either shift.
.acd8	20 3b ab	jsr $ab3b			jsr 	Unary_Shr
.acdb	80 f2		bra $accf			bra 	_SSLoop
.acdd					_SSLeft:
.acdd	20 2e ab	jsr $ab2e			jsr 	Unary_Shl
.ace0	80 ed		bra $accf			bra 	_SSLoop
.ace2					_SSZero:
.ace2	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.ace5	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ace8	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aceb	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acee					_SSDone:
.acee	28		plp				plp 								; throw flag.
.acef	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acf0					MulInteger32:
.acf0	ca		dex				dex
.acf1	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.acf4	85 1e		sta $1e				sta 	zLTemp1
.acf6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.acf9	85 1f		sta $1f				sta 	zLTemp1+1
.acfb	bd 00 0e	lda $0e00,x			lda 	stack2,x
.acfe	85 20		sta $20				sta 	zLTemp1+2
.ad00	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ad03	85 21		sta $21				sta 	zLTemp1+3
.ad05	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ad08	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ad0b	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ad0e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ad11					_BFMMultiply:
.ad11	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.ad13	29 01		and #$01			and 	#1
.ad15	f0 03		beq $ad1a			beq 	_BFMNoAdd
.ad17	20 fa ab	jsr $abfa			jsr 	Stack_Add_No_Dex 			; co-opt this code
.ad1a					_BFMNoAdd:
.ad1a	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.ad1d	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad20	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad23	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad26	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad28	66 20		ror $20				ror 	zLTemp1+2
.ad2a	66 1f		ror $1f				ror 	zLTemp1+1
.ad2c	66 1e		ror $1e				ror 	zLTemp1
.ad2e	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad30	05 1f		ora $1f				ora 	zLTemp1+1
.ad32	05 20		ora $20				ora 	zLTemp1+2
.ad34	05 21		ora $21				ora 	zLTemp1+3
.ad36	d0 d9		bne $ad11			bne 	_BFMMultiply
.ad38	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad39					DivInteger32:
.ad39	ca		dex				dex
.ad3a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad3d	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad40	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad43	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad46	d0 14		bne $ad5c			bne 	_BFDOkay
.ad48	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>ad4b	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad53	20 42 59 20 5a 45 52 4f 00
.ad5c					_BFDOkay:
.ad5c	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad5e	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad60	64 20		stz $20				stz 	zLTemp1+2
.ad62	64 21		stz $21				stz 	zLTemp1+3
.ad64	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad67	20 c2 ad	jsr $adc2			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad6a	e8		inx				inx
.ad6b	20 c2 ad	jsr $adc2			jsr 	CheckIntegerNegate
.ad6e	ca		dex				dex
.ad6f	5a		phy				phy 								; Y is the counter
.ad70	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad72					_BFDLoop:
.ad72	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad75	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad78	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad7b	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad7e	26 1e		rol $1e				rol 	zLTemp1
.ad80	26 1f		rol $1f				rol 	zLTemp1+1
.ad82	26 20		rol $20				rol 	zLTemp1+2
.ad84	26 21		rol $21				rol 	zLTemp1+3
.ad86	38		sec				sec
.ad87	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad89	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad8c	48		pha				pha
.ad8d	a5 1f		lda $1f				lda 	zLTemp1+1
.ad8f	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad92	48		pha				pha
.ad93	a5 20		lda $20				lda 	zLTemp1+2
.ad95	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad98	48		pha				pha
.ad99	a5 21		lda $21				lda 	zLTemp1+3
.ad9b	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad9e	90 15		bcc $adb5			bcc 	_BFDNoAdd
.ada0	85 21		sta $21				sta 	zLTemp1+3 					; update A
.ada2	68		pla				pla
.ada3	85 20		sta $20				sta 	zLTemp1+2
.ada5	68		pla				pla
.ada6	85 1f		sta $1f				sta 	zLTemp1+1
.ada8	68		pla				pla
.ada9	85 1e		sta $1e				sta 	zLTemp1+0
.adab	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.adae	09 01		ora #$01			ora 	#1
.adb0	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adb3	80 03		bra $adb8			bra 	_BFDNext
.adb5					_BFDNoAdd:
.adb5	68		pla				pla 								; Throw away the intermediate calculations
.adb6	68		pla				pla
.adb7	68		pla				pla
.adb8					_BFDNext:
.adb8	88		dey				dey
.adb9	d0 b7		bne $ad72			bne 	_BFDLoop
.adbb	7a		ply				ply 								; restore Y
.adbc	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.adbf	b0 07		bcs $adc8			bcs		IntegerNegateAlways 		; negate the result
.adc1	60		rts				rts
.adc2					CheckIntegerNegate:
.adc2	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.adc5	30 01		bmi $adc8			bmi 	IntegerNegateAlways 		; if so negate it
.adc7	60		rts				rts
.adc8					IntegerNegateAlways:
.adc8	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.adcb	4c b6 aa	jmp $aab6			jmp 	Unary_Negate
.adce					ModInteger32:
.adce	20 39 ad	jsr $ad39			jsr 	DivInteger32
.add1	a5 1e		lda $1e				lda 	zLTemp1
.add3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.add6	a5 1f		lda $1f				lda 	zLTemp1+1
.add8	9d 00 0d	sta $0d00,x			sta 	stack1,x
.addb	a5 20		lda $20				lda 	zLTemp1+2
.addd	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ade0	a5 21		lda $21				lda 	zLTemp1+3
.ade2	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ade5	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.ade6					Comp_Equal:
.ade6	38		sec				sec
.ade7	80 01		bra $adea			bra 	Comp_CheckEqual
.ade9					Comp_NotEqual:
.ade9	18		clc				clc
.adea					Comp_CheckEqual:
.adea	08		php				php
.adeb	ca		dex				dex
.adec	bd 00 0c	lda $0c00,x			lda		stack0,x
.adef	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.adf2	d0 16		bne $ae0a			bne 	_CCENonZero
.adf4	bd 00 0d	lda $0d00,x			lda		stack1,x
.adf7	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.adfa	d0 0e		bne $ae0a			bne 	_CCENonZero
.adfc	bd 00 0e	lda $0e00,x			lda		stack2,x
.adff	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ae02	d0 06		bne $ae0a			bne 	_CCENonZero
.ae04	bd 00 0f	lda $0f00,x			lda		stack3,x
.ae07	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ae0a					_CCENonZero:
.ae0a	f0 02		beq $ae0e			beq 	_CCENotSet
.ae0c	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ae0e					_CCENotSet:
.ae0e					CompCheckFlip:
.ae0e	28		plp				plp 								; if carry set, we want $FF if equal
.ae0f	90 02		bcc $ae13			bcc 	CompReturn
.ae11	49 ff		eor #$ff			eor 	#$FF
.ae13					CompReturn:
.ae13	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.ae16	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae19	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae1c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae1f	60		rts				rts
.ae20					Comp_Less:
.ae20	18		clc				clc
.ae21	80 01		bra $ae24			bra 	Comp_LessCont
.ae23					Comp_GreaterEqual:
.ae23	38		sec				sec
.ae24					Comp_LessCont:
.ae24	08		php				php
.ae25	ca		dex				dex
.ae26	38		sec				sec
.ae27	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae2a	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae2d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae30	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae33	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae36	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae39	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae3c	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae3f	50 02		bvc $ae43			bvc 	_CLNoFlip 					; unsigned -> signed
.ae41	49 80		eor #$80			eor 	#$80
.ae43					_CLNoFlip:
.ae43	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae45	f0 c7		beq $ae0e			beq 	CompCheckFlip
.ae47	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae49	80 c3		bra $ae0e			bra 	CompCheckFlip
.ae4b					Comp_LessEqual:
.ae4b	38		sec				sec
.ae4c	80 01		bra $ae4f			bra 	Comp_LessEqualCont
.ae4e					Comp_Greater:
.ae4e	18		clc				clc
.ae4f					Comp_LessEqualCont:
.ae4f	08		php				php
.ae50	ca		dex				dex
.ae51	38		sec				sec
.ae52	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae55	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae58	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae5b	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae5e	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae61	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae64	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae67	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae6a	50 02		bvc $ae6e			bvc 	_CLENoFlip 					; unsigned -> signed
.ae6c	49 80		eor #$80			eor 	#$80
.ae6e					_CLENoFlip:
.ae6e	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae70	f0 9c		beq $ae0e			beq 	CompCheckFlip
.ae72	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae74	80 98		bra $ae0e			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae76					Allocate:
.ae76	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae79	29 80		and #$80			and 	#$80
.ae7b	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae7e	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae81	d0 26		bne $aea9			bne 	_ALBad
.ae83	18		clc				clc 								; add to varmemory pointer saving
.ae84	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae87	48		pha				pha
.ae88	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae8b	8d 88 10	sta $1088			sta 	VarMemory
.ae8e	ad 89 10	lda $1089			lda 	VarMemory+1
.ae91	48		pha				pha
.ae92	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae95	8d 89 10	sta $1089			sta 	VarMemory+1
.ae98	68		pla				pla 								; pop and save
.ae99	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae9c	68		pla				pla
.ae9d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aea0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aea3	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.aea6	b0 01		bcs $aea9			bcs 	_ALBad
.aea8	60		rts				rts
.aea9					_ALBad:
.aea9	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>aeac	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>aeb4	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.aeb6					Cmd_List:
.aeb6	20 37 a5	jsr $a537			jsr 	ResetCodePointer 			; back to the beginning
.aeb9	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.aebb	64 19		stz $19				stz 	zTemp2+1
.aebd	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.aebf	f0 0b		beq $aecc			beq 	_CLINone
.aec1	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.aec4	85 18		sta $18				sta 	zTemp2
.aec6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aec9	85 19		sta $19				sta 	zTemp2+1
.aecb	ca		dex				dex 								; and pop the tos
.aecc					_CLINone:
.aecc	a9 18		lda #$18			lda 	#24 						; list this many lines
.aece	85 16		sta $16				sta 	zTemp1
.aed0					_CLILoop
.aed0	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aed2	f0 24		beq $aef8			beq 	_CLIEnd
.aed4	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aed6	38		sec				sec
.aed7	b1 10		lda ($10),y			lda 	(codePtr),y
.aed9	e5 18		sbc $18				sbc 	zTemp2
.aedb	c8		iny				iny
.aedc	b1 10		lda ($10),y			lda 	(codePtr),y
.aede	e5 19		sbc $19				sbc 	zTemp2+1
.aee0	90 09		bcc $aeeb			bcc 	_CLISkip
.aee2	da		phx				phx
.aee3	20 fb ae	jsr $aefb			jsr 	ListCurrent 				; list the line.
.aee6	fa		plx				plx
.aee7	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aee9	f0 0d		beq $aef8			beq 	_CLIEnd
.aeeb					_CLISkip:
.aeeb	18		clc				clc
.aeec	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aeee	65 10		adc $10				adc 	codePtr
.aef0	85 10		sta $10				sta 	codePtr
.aef2	90 dc		bcc $aed0			bcc 	_CLILoop
.aef4	e6 11		inc $11				inc 	codePtr+1
.aef6	80 d8		bra $aed0			bra 	_CLILoop
.aef8					_CLIEnd:
.aef8	4c 3b a0	jmp $a03b			jmp 	WarmStart
.aefb					ListCurrent:
.aefb	a9 05		lda #$05			lda 	#CTH_LINENO
.aefd	20 a9 a2	jsr $a2a9			jsr 	ExternColour 				; set colour
.af00	a0 01		ldy #$01			ldy 	#1							; print line#
.af02	b1 10		lda ($10),y			lda 	(codePtr),y
.af04	48		pha				pha
.af05	c8		iny				iny
.af06	b1 10		lda ($10),y			lda 	(codePtr),y
.af08	a8		tay				tay
.af09	68		pla				pla
.af0a	20 35 a6	jsr $a635			jsr 	ErrorPrint16
.af0d	a8		tay				tay
.af0e					_LCPadOut:
.af0e	a9 20		lda #$20			lda 	#' '
.af10	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af13	c8		iny				iny
.af14	c0 05		cpy #$05			cpy 	#5
.af16	d0 f6		bne $af0e			bne 	_LCPadOut
.af18	a0 03		ldy #$03			ldy 	#3 							; start here
.af1a					_LCLoop:
.af1a	a9 20		lda #$20			lda 	#' '						; space
.af1c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af1f					_LCLoopNoSpace:
.af1f	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.af21	30 3e		bmi $af61			bmi 	_LCIdentConst 				; identifier or constant
.af23	d0 05		bne $af2a			bne 	_LCStringToken
.af25	a9 0d		lda #$0d			lda 	#13
.af27	4c 9f a2	jmp $a29f			jmp 	ExternPrint
.af2a					_LCStringToken:
.af2a	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af2c	90 0c		bcc $af3a			bcc		_LCString
.af2e	20 a2 af	jsr $afa2			jsr 	ListPrintToken
.af31	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af33	c8		iny				iny 								; advance pointer
.af34	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af36	f0 e7		beq $af1f			beq 	_LCLoopNoSpace
.af38	80 e0		bra $af1a			bra 	_LCLoop 					; go round again.
.af3a					_LCString:
.af3a	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af3b	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af3d	a2 22		ldx #$22			ldx 	#'"'
.af3f	b0 04		bcs $af45			bcs 	_LCSSkip
.af41	a9 0a		lda #$0a			lda 	#CTH_COMMENT
.af43	a2 27		ldx #$27			ldx 	#"'"
.af45					_LCSSkip:
.af45	20 a9 a2	jsr $a2a9			jsr 	ExternColour 				; set colour
.af48	8a		txa				txa
.af49	48		pha				pha 								; save end quote on stack.
.af4a	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af4d	c8		iny				iny 								; skip type size
.af4e	c8		iny				iny
.af4f					_LCSPrint:
.af4f	b1 10		lda ($10),y			lda 	(codePtr),y
.af51	c8		iny				iny
.af52	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af54	f0 05		beq $af5b			beq 	_LCSExit
.af56	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af59	80 f4		bra $af4f			bra 	_LCSPrint
.af5b					_LCSExit:
.af5b	68		pla				pla
.af5c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af5f	80 b9		bra $af1a			bra 	_LCLoop
.af61					_LCIdentConst:
.af61	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af63	90 1e		bcc $af83			bcc 	_LCConstant
.af65	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af67	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.af6a					_LCCIdLoop:
.af6a	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af6c	29 1f		and #$1f			and 	#$1F 						; convert
.af6e	18		clc				clc
.af6f	69 41		adc #$41			adc 	#'A'
.af71	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af73	d0 02		bne $af77			bne 	_LCCNotDot
.af75	a9 2e		lda #$2e			lda 	#'.'
.af77					_LCCNotDot:
.af77	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af7a	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af7c	c8		iny				iny
.af7d	c9 e0		cmp #$e0			cmp 	#$E0
.af7f	b0 99		bcs $af1a			bcs 	_LCLoop
.af81	80 e7		bra $af6a			bra 	_LCCIdLoop
.af83					_LCConstant:
.af83	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.af85	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.af88	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.af8a	20 fc a3	jsr $a3fc			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.af8d	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.af90	48		pha				pha
.af91	20 5a a6	jsr $a65a			jsr 	IntegerToString 			; this could corrupt stack if full :)
.af94	20 48 a6	jsr $a648			jsr 	ErrorPrintIntegerBuffer
.af97	68		pla				pla 								; sign back
.af98	10 80		bpl $af1a			bpl 	_LCLoop
.af9a	a9 2d		lda #$2d			lda 	#"-"
.af9c	20 9f a2	jsr $a29f			jsr 	ExternPrint
.af9f	4c 1a af	jmp $af1a			jmp 	_LCLoop
.afa2					ListPrintToken:
.afa2	5a		phy				phy
.afa3	48		pha				pha 								; token colour
.afa4	a9 07		lda #$07			lda 	#CTH_TOKEN
.afa6	20 a9 a2	jsr $a2a9			jsr 	ExternColour
.afa9	fa		plx				plx
.afaa	a9 08		lda #$08			lda 	#KeywordText & $FF
.afac	85 14		sta $14				sta 	zTemp0
.afae	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.afb0	85 15		sta $15				sta 	zTemp0+1
.afb2					_LPTLoop:
.afb2	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.afb4	f0 0e		beq $afc4			beq 	_LPTFound
.afb6	ca		dex				dex
.afb7	b2 14		lda ($14)			lda 	(zTemp0)
.afb9	38		sec				sec									; add 1, it's length+name
.afba	65 14		adc $14				adc 	zTemp0
.afbc	85 14		sta $14				sta 	zTemp0
.afbe	90 f2		bcc $afb2			bcc 	_LPTLoop
.afc0	e6 15		inc $15				inc 	zTemp0+1
.afc2	80 ee		bra $afb2			bra 	_LPTLoop
.afc4					_LPTFound:
.afc4	a0 01		ldy #$01			ldy 	#1 							; start here.
.afc6					_LPTShow:
.afc6	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afc8	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afca	90 06		bcc $afd2			bcc 	_LPTExit
.afcc	c8		iny				iny
.afcd	20 9f a2	jsr $a29f			jsr 	ExternPrint
.afd0	80 f4		bra $afc6			bra 	_LPTShow
.afd2					_LPTExit:
.afd2	7a		ply				ply
.afd3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.afd4					Cmd_Renumber:
.afd4	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.afd6	85 16		sta $16				sta 	zTemp1
.afd8	a9 11		lda #$11			lda 	#ProgramStart >> 8
.afda	85 17		sta $17				sta 	zTemp1+1
.afdc	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.afde	85 18		sta $18				sta 	zTemp2
.afe0	a9 03		lda #$03			lda 	#1000 >> 8
.afe2	85 19		sta $19				sta 	zTemp2+1
.afe4					_CRLoop:
.afe4	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.afe6	f0 23		beq $b00b			beq 	_CRExit
.afe8	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.afea	a5 18		lda $18				lda 	zTemp2
.afec	91 16		sta ($16),y			sta 	(zTemp1),y
.afee	c8		iny				iny
.afef	a5 19		lda $19				lda 	zTemp2+1
.aff1	91 16		sta ($16),y			sta 	(zTemp1),y
.aff3	18		clc				clc 								; add 10 to new number
.aff4	a5 18		lda $18				lda 	zTemp2
.aff6	69 0a		adc #$0a			adc 	#10
.aff8	85 18		sta $18				sta 	zTemp2
.affa	90 02		bcc $affe			bcc 	_CRNoCarry
.affc	e6 19		inc $19				inc 	zTemp2+1
.affe					_CRNoCarry:
.affe	18		clc				clc 								; go to next line
.afff	b2 16		lda ($16)			lda 	(zTemp1)
.b001	65 16		adc $16				adc 	zTemp1
.b003	85 16		sta $16				sta 	zTemp1
.b005	90 dd		bcc $afe4			bcc 	_CRLoop
.b007	e6 17		inc $17				inc 	zTemp1+1
.b009	80 d9		bra $afe4			bra 	_CRLoop
.b00b					_CRExit:
.b00b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.b00c					System_RUN:
.b00c	20 42 a5	jsr $a542			jsr		ResetForRun 				; clear vars, stacks etc.
.b00f	20 37 a5	jsr $a537			jsr 	ResetCodePointer 			; point to first thing to do.
.b012	4c 7d a3	jmp $a37d			jmp 	Execute						; and run
.b015					System_END:
.b015	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b018					System_STOP:
.b018	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b01b	53 54 4f 50 00					.text 	"STOP",0
.b020					System_Assert:
.b020	ca		dex				dex
.b021	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b024	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b027	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b02a	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b02d	d0 0a		bne $b039			bne 	_SAOkay
.b02f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b032	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b039	60		rts		_SAOkay:rts
.b03a					System_New:
.b03a	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b03d	20 42 a5	jsr $a542			jsr		ResetForRun 				; clear vars, stacks etc.
.b040	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b043					System_Old:
.b043	20 37 a5	jsr $a537			jsr 	ResetCodePointer 			; start of first line.
.b046					_SOFindZero:
.b046	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b048	f0 15		beq $b05f			beq 	_SOFoundEnd
.b04a	c8		iny				iny
.b04b	d0 f9		bne $b046			bne 	_SOFindZero
.b04d	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b050	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b058	45 43 4f 56 45 52 00
.b05f					_SOFoundEnd:
.b05f	c8		iny				iny 								; update the offset
.b060	8c 00 11	sty $1100			sty 	ProgramStart
.b063	20 42 a5	jsr $a542			jsr 	ResetForRun 				; redo all stacks etc.
.b066	60		rts				rts
.b067					System_Sys:
.b067	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b06a	85 14		sta $14				sta 	zTemp0
.b06c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b06f	85 15		sta $15				sta 	zTemp0+1
.b071	ca		dex				dex
.b072	da		phx				phx
.b073	5a		phy				phy
.b074	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b077	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b07a	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b07d	20 8c b0	jsr $b08c			jsr 	_SSCall 					; effectively jsr (zTemp)
.b080	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b083	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b086	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b089	7a		ply				ply
.b08a	fa		plx				plx
.b08b	60		rts				rts
.b08c	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b08f					System_ShowStack:
.b08f	da		phx				phx 								; save stack
.b090	5a		phy				phy
.b091	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b093	a9 5b		lda #$5b			lda 	#"["
.b095	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b098	e0 00		cpx #$00			cpx 	#0 							; empty
.b09a	f0 14		beq $b0b0			beq 	_SSEnd
.b09c	a2 01		ldx #$01			ldx 	#1 							; start here
.b09e					_SSLoop:
.b09e	20 5a a6	jsr $a65a			jsr 	IntegerToString 			; print TOS
.b0a1	20 48 a6	jsr $a648			jsr 	ErrorPrintIntegerBuffer
.b0a4	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b0a6	f0 08		beq $b0b0			beq 	_SSEnd
.b0a8	e8		inx				inx	 								; advance pointer print ,
.b0a9	a9 2c		lda #$2c			lda 	#','
.b0ab	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b0ae	80 ee		bra $b09e			bra 	_SSLoop
.b0b0					_SSEnd:
.b0b0	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b0b2	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b0b5	a9 0d		lda #$0d			lda 	#13
.b0b7	20 9f a2	jsr $a29f			jsr 	ExternPrint
.b0ba	7a		ply				ply
.b0bb	fa		plx				plx
.b0bc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b0bd					System_Save:
.b0bd	20 68 a5	jsr $a568			jsr 	ResetVarMemory 				; make sure start/end are right
.b0c0	20 d3 b0	jsr $b0d3			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0c3	20 f4 a2	jsr $a2f4			jsr 	ExternSave
.b0c6	60		rts				rts
.b0c7					System_Load:
.b0c7	20 d3 b0	jsr $b0d3			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0ca	20 2e a3	jsr $a32e			jsr 	ExternLoad
.b0cd	20 42 a5	jsr $a542			jsr 	ResetForRun 				; re-initialise everything
.b0d0	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b0d3					SLGetFileName:
.b0d3	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0d5	f0 17		beq $b0ee			beq 	_SLFNFail
.b0d7	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0da	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0dd	d0 0f		bne $b0ee			bne 	_SLFNFail
.b0df	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b0e2	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b0e4	d0 08		bne $b0ee			bne 	_SLFNFail
.b0e6	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b0e8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b0eb	85 14		sta $14				sta 	zTemp0
.b0ed	60		rts				rts
.b0ee					_SLFNFail:
.b0ee	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b0f1	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b0f9	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b0fe					Identifier:
.b0fe	88		dey				dey 								; wind back to identifier start
.b0ff	20 4e a4	jsr $a44e			jsr 	IdentifierSearch 			; try to find it.
.b102	90 2f		bcc $b133			bcc 	_IDUnknown 					; not known, give up.
.b104	48		pha				pha
.b105					_IDSkip:
.b105	b1 10		lda ($10),y			lda 	(codePtr),y
.b107	c8		iny				iny
.b108	c9 e0		cmp #$e0			cmp 	#$E0
.b10a	90 f9		bcc $b105			bcc 	_IDSkip
.b10c	68		pla				pla
.b10d	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b10f	d0 36		bne $b147			bne 	_IDCall
.b111	20 fb b1	jsr $b1fb			jsr 	IndexCheck 					; check index/subscript
.b114	5a		phy				phy
.b115	e8		inx				inx 								; make space on stack
.b116	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b118	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b11a	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b11d	c8		iny				iny
.b11e	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b120	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b123	c8		iny				iny
.b124	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b126	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b129	c8		iny				iny
.b12a	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b12c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b12f	7a		ply				ply
.b130	4c 7d a3	jmp $a37d			jmp 	Execute
.b133					_IDUnknown:
.b133	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b136	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b13e	56 41 52 49 41 42 4c 45 00
.b147					_IDCall:
.b147	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b149	d0 1b		bne $b166			bne 	_IDCode
.b14b	20 b7 b3	jsr $b3b7			jsr 	StructPushCurrent 			; push current on the stack.
.b14e	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b150	c6 12		dec $12				dec 	StructSP
.b152	92 12		sta ($12)			sta 	(StructSP)
.b154	a0 01		ldy #$01			ldy 	#1 							; line address
.b156	b2 22		lda ($22)			lda 	(idDataAddr)
.b158	85 10		sta $10				sta 	codePtr
.b15a	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b15c	85 11		sta $11				sta 	codePtr+1
.b15e	a0 03		ldy #$03			ldy 	#3 							; line position
.b160	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b162	a8		tay				tay
.b163	4c 7d a3	jmp $a37d			jmp 	Execute
.b166					_IDCode:
.b166	b2 22		lda ($22)			lda 	(idDataAddr) 				; copy the address
.b168	85 14		sta $14				sta 	zTemp0
.b16a	5a		phy				phy
.b16b	a0 01		ldy #$01			ldy 	#1
.b16d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b16f	85 15		sta $15				sta 	zTemp0+1
.b171	7a		ply				ply
.b172	20 78 b1	jsr $b178			jsr 	_IDCallZTemp0 				; call the routine
.b175	4c 7d a3	jmp $a37d			jmp 	Execute
.b178					_IDCallZTemp0:
.b178	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.b17b					ProcReturn:
.b17b					ProcReturn2:
.b17b	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b17d	c9 43		cmp #$43			cmp 	#STM_CALL
.b17f	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b181	20 eb b3	jsr $b3eb			jsr 	StructPopCurrent
.b184	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b186	20 b1 b3	jsr $b3b1			jsr 	StructPopCount
.b189	60		rts				rts
.b18a					WriteVariable:
.b18a	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b18c	c9 c0		cmp #$c0			cmp 	#$C0
.b18e	90 5d		bcc $b1ed			bcc 	_WVTypeError
.b190	20 4e a4	jsr $a44e			jsr 	IdentifierSearch 			; does it exist
.b193	90 06		bcc $b19b			bcc 	_WVNoIdentifier
.b195	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b197	f0 12		beq $b1ab			beq 	_WVWriteTOS 				; if so write TOS to it.
.b199	80 52		bra $b1ed			bra 	_WVTypeError 				; not, then can't do anything.
.b19b					_WVNoIdentifier:
.b19b	5a		phy				phy 								; get current line number
.b19c	a0 01		ldy #$01			ldy 	#1
.b19e	b1 10		lda ($10),y			lda 	(codePtr),y
.b1a0	c8		iny				iny
.b1a1	11 10		ora ($10),y			ora 	(codePtr),y
.b1a3	f0 2e		beq $b1d3			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b1a5	7a		ply				ply
.b1a6	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b1a8	20 b5 a4	jsr $a4b5			jsr 	IdentifierCreate 			; try to find it
.b1ab					_WVWriteTOS:
.b1ab	88		dey				dey 								; skip over identifier.
.b1ac					_WVSkipIdentifier:
.b1ac	b1 10		lda ($10),y			lda 	(codePtr),y
.b1ae	c8		iny				iny
.b1af	c9 e0		cmp #$e0			cmp 	#$E0
.b1b1	90 f9		bcc $b1ac			bcc 	_WVSkipIdentifier
.b1b3	20 fb b1	jsr $b1fb			jsr 	IndexCheck 					; check index/subscript
.b1b6	5a		phy				phy									; copy TOS in
.b1b7	a0 00		ldy #$00			ldy 	#0
.b1b9	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b1bc	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1be	c8		iny				iny
.b1bf	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1c2	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1c4	c8		iny				iny
.b1c5	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b1c8	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1ca	c8		iny				iny
.b1cb	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b1ce	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1d0	7a		ply				ply
.b1d1	ca		dex				dex 								; drop
.b1d2	60		rts				rts									; go back and execute again.
.b1d3					_WVCantCreate:
.b1d3	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b1d6	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b1de	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b1ed					_WVTypeError:
.b1ed	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b1f0	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b1f8	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b1fb					IndexCheck:
.b1fb	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b1fd	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b1ff	d0 10		bne $b211			bne 	_ICExit
.b201	c8		iny				iny
.b202	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b204	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b206	f0 23		beq $b22b			beq 	_ICArrayAccess
.b208	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b20a	c9 80		cmp #$80			cmp 	#$80
.b20c	f0 04		beq $b212			beq 	_ICConstAccess
.b20e					_ICSyntax:
.b20e	4c d0 a5	jmp $a5d0			jmp 	SyntaxError
.b211					_ICExit:
.b211	60		rts				rts
.b212					_ICConstAccess:
.b212	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b214	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b216	85 16		sta $16				sta 	zTemp1
.b218	64 17		stz $17				stz 	zTemp1+1
.b21a	c8		iny				iny
.b21b	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b21d	c8		iny				iny
.b21e	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b220	d0 ec		bne $b20e			bne 	_ICSyntax
.b222	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b224	c8		iny				iny
.b225	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b227	d0 e5		bne $b20e			bne 	_ICSyntax
.b229	80 0c		bra $b237			bra 	_ICAddSubscript
.b22b					_ICArrayAccess:
.b22b	c8		iny				iny 								; point to next
.b22c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b22f	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b231	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b234	85 17		sta $17				sta 	zTemp1+1
.b236	ca		dex				dex
.b237					_ICAddSubscript:
.b237	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b239	26 17		rol $17				rol 	zTemp1+1
.b23b	06 16		asl $16				asl 	zTemp1
.b23d	26 17		rol $17				rol 	zTemp1+1
.b23f	5a		phy				phy
.b240	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b242	a0 01		ldy #$01			ldy 	#1
.b244	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b246	c8		iny				iny
.b247	11 22		ora ($22),y			ora 	(idDataAddr),y
.b249	c8		iny				iny
.b24a	11 22		ora ($22),y			ora 	(idDataAddr),y
.b24c	f0 17		beq $b265			beq 	_ICZero
.b24e	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b24f	b2 22		lda ($22)			lda 	(idDataAddr)
.b251	65 16		adc $16				adc 	zTemp1
.b253	48		pha				pha
.b254	a0 01		ldy #$01			ldy 	#1
.b256	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b258	65 17		adc $17				adc 	zTemp1+1
.b25a	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b25c	68		pla				pla
.b25d	85 22		sta $22				sta 	idDataAddr
.b25f	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b261	64 25		stz $25				stz 	idDataAddr+3
.b263	7a		ply				ply
.b264	60		rts				rts
.b265					_ICZero:
.b265	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b268	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b270	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b27c					Struct_IF:
.b27c	ca		dex				dex 								; drop TOS
.b27d	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check TOS
.b280	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b283	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b286	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b289	f0 01		beq $b28c			beq 	_SIFSkipForward
.b28b	60		rts				rts
.b28c					_SIFSkipForward:
.b28c	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b28e	4c 97 b2	jmp $b297			jmp 	StructSkipForward
.b291					Struct_ELSE:
.b291	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b293	4c 97 b2	jmp $b297			jmp 	StructSkipForward
.b296					Struct_ENDIF:
.b296	60		rts				rts
.b297					StructSkipForward:
.b297	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b299					_SSFLoop:
.b299	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b29b	f0 14		beq $b2b1			beq 	_SSFExit 					; if EOL then exit
.b29d	c8		iny				iny 								; advance past it
.b29e	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b2a0	f0 0f		beq $b2b1			beq 	_SSFExit
.b2a2	c5 14		cmp $14				cmp 	zTemp0
.b2a4	f0 0b		beq $b2b1			beq 	_SSFExit
.b2a6	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b2a8	b0 ef		bcs $b299			bcs 	_SSFLoop
.b2aa	98		tya				tya 								; add length offset
.b2ab	3a		dec a				dec 	a
.b2ac	71 10		adc ($10),y			adc 	(codePtr),y
.b2ae	a8		tay				tay
.b2af	80 e8		bra $b299			bra 	_SSFLoop
.b2b1					_SSFExit:
.b2b1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b2b2					Command_For:
.b2b2	20 b7 b3	jsr $b3b7			jsr 	StructPushCurrent 			; push current on the stack.
.b2b5	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b2b8	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b2bb	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b2be	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b2c1	f0 34		beq $b2f7			beq 	_CFZero
.b2c3	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b2c6	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b2c8	c6 12		dec $12				dec 	StructSP
.b2ca	92 12		sta ($12)			sta 	(StructSP)
.b2cc	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b2cf	49 ff		eor #$ff			eor 	#$FF
.b2d1	c6 12		dec $12				dec 	StructSP
.b2d3	92 12		sta ($12)			sta 	(StructSP)
.b2d5	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b2d8	49 ff		eor #$ff			eor 	#$FF
.b2da	c6 12		dec $12				dec 	StructSP
.b2dc	92 12		sta ($12)			sta 	(StructSP)
.b2de	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b2e1	49 ff		eor #$ff			eor 	#$FF
.b2e3	c6 12		dec $12				dec 	StructSP
.b2e5	92 12		sta ($12)			sta 	(StructSP)
.b2e7	ca		dex				dex 								; pop stack value
.b2e8	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b2ea	c6 12		dec $12				dec 	StructSP
.b2ec	92 12		sta ($12)			sta 	(StructSP)
.b2ee	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b2f0	85 24		sta $24				sta 	ForAddr
.b2f2	a5 13		lda $13				lda 	StructSP+1
.b2f4	85 25		sta $25				sta 	ForAddr+1
.b2f6	60		rts				rts
.b2f7					_CFZero:
.b2f7	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b2fa	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b302	54 20 5a 45 52 4f 00
.b309					Command_Next:
.b309	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b30b	c9 46		cmp #$46			cmp 	#STM_FOR
.b30d	d0 30		bne $b33f			bne 	_CNNoFor
.b30f	5a		phy				phy
.b310	a0 00		ldy #$00			ldy 	#0
.b312					_CNIncrement:
.b312	c8		iny				iny
.b313	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b315	1a		inc a				inc 	a
.b316	91 12		sta ($12),y			sta 	(StructSP),y
.b318	f0 f8		beq $b312			beq		_CNIncrement 				; carry out.
.b31a	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b31c	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b31e	c8		iny				iny 								; will all be $FF
.b31f	31 12		and ($12),y			and 	(StructSP),y
.b321	c8		iny				iny
.b322	31 12		and ($12),y			and 	(StructSP),y
.b324	c8		iny				iny
.b325	31 12		and ($12),y			and 	(StructSP),y
.b327	7a		ply				ply 								; restore Y
.b328	1a		inc a				inc 	a 							; so this will be zero last time round
.b329	d0 06		bne $b331			bne 	_CNLoop 					; loop back if non-zero
.b32b	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b32d	20 b1 b3	jsr $b3b1			jsr 	StructPopCount
.b330	60		rts				rts
.b331					_CNLoop:
.b331	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b333	85 24		sta $24				sta 	ForAddr
.b335	a5 13		lda $13				lda 	StructSP+1
.b337	85 25		sta $25				sta 	ForAddr+1
.b339	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b33b	20 eb b3	jsr $b3eb			jsr 	StructPopCurrent
.b33e	60		rts				rts
.b33f					_CNNoFor:
.b33f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b342	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b34a	46 4f 52 00
.b34e					Command_Index:
.b34e	5a		phy				phy
.b34f	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b351	e8		inx				inx
.b352	38		sec				sec
.b353	a9 fe		lda #$fe			lda 	#$FE
.b355	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b357	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b35a	c8		iny				iny
.b35b	a9 ff		lda #$ff			lda 	#$FF
.b35d	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b35f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b362	c8		iny				iny
.b363	a9 ff		lda #$ff			lda 	#$FF
.b365	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b367	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b36a	c8		iny				iny
.b36b	a9 ff		lda #$ff			lda 	#$FF
.b36d	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b36f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b372	7a		ply				ply
.b373	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b374					Command_Repeat:
.b374	20 b7 b3	jsr $b3b7			jsr 	StructPushCurrent 			; push current on the stack.
.b377	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b379	c6 12		dec $12				dec 	StructSP
.b37b	92 12		sta ($12)			sta 	(StructSP)
.b37d	60		rts				rts
.b37e					Command_Until:
.b37e	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b380	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b382	d0 1b		bne $b39f			bne 	_CUNoRepeat
.b384	ca		dex				dex 								; pop
.b385	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b388	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b38b	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b38e	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b391	f0 06		beq $b399			beq 	_CULoop
.b393	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b395	20 b1 b3	jsr $b3b1			jsr 	StructPopCount
.b398	60		rts				rts
.b399					_CULoop:
.b399	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b39b	20 eb b3	jsr $b3eb			jsr 	StructPopCurrent
.b39e	60		rts				rts
.b39f					_CUNoRepeat:
.b39f	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b3a2	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b3aa	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b3b1					StructPopCount:
.b3b1	18		clc				clc
.b3b2	65 12		adc $12				adc 	StructSP
.b3b4	85 12		sta $12				sta 	StructSP
.b3b6	60		rts				rts
.b3b7					StructPushCurrent:
.b3b7	a5 12		lda $12				lda 	StructSP 					; check space for more
.b3b9	c9 0a		cmp #$0a			cmp 	#10
.b3bb	90 18		bcc $b3d5			bcc 	_SPCSpace
.b3bd	a9 00		lda #$00			lda 	#0							; push bank
.b3bf	c6 12		dec $12				dec 	StructSP
.b3c1	92 12		sta ($12)			sta 	(StructSP)
.b3c3	98		tya				tya									; y Offset
.b3c4	c6 12		dec $12				dec 	StructSP
.b3c6	92 12		sta ($12)			sta 	(StructSP)
.b3c8	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b3ca	c6 12		dec $12				dec 	StructSP
.b3cc	92 12		sta ($12)			sta 	(StructSP)
.b3ce	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b3d0	c6 12		dec $12				dec 	StructSP
.b3d2	92 12		sta ($12)			sta 	(StructSP)
.b3d4	60		rts				rts
.b3d5					_SPCSpace:
.b3d5	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b3d8	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b3e0	54 41 43 4b 20 53 50 41 43 45 00
.b3eb					StructPopCurrent:
.b3eb	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b3ed	85 10		sta $10				sta 	codePtr
.b3ef	c8		iny				iny
.b3f0	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b3f2	85 11		sta $11				sta 	codePtr+1
.b3f4	c8		iny				iny
.b3f5	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b3f7	a8		tay				tay
.b3f8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/hashes.inc

.b3f9					libfunc_1000:
>b3f9	00 00					.word 0
>b3fb	db b5 00 00				.dword Vera_Sprite
>b3ff	03 b4					.word libfunc_1000_name
>b401	00 43					.byte 0,'C'
.b403					libfunc_1000_name:
>b403	d5 c4 d1 c0 df f2			.byte $d5,$c4,$d1,$c0,$df,$f2
.b409					libfunc_1001:
>b409	00 00					.word 0
>b40b	e6 b4 00 00				.dword System_Random
>b40f	13 b4					.word libfunc_1001_name
>b411	00 43					.byte 0,'C'
.b413					libfunc_1001_name:
>b413	d1 cd e3				.byte $d1,$cd,$e3
.b416					libfunc_1002:
>b416	09 b4					.word libfunc_1001
>b418	86 b5 00 00				.dword Vera_SetAddress
>b41c	20 b4					.word libfunc_1002_name
>b41e	00 43					.byte 0,'C'
.b420					libfunc_1002_name:
>b420	d5 c4 d1 c0 df d2 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$d2,$c4,$f3
.b428					libfunc_1003:
>b428	16 b4					.word libfunc_1002
>b42a	a0 b5 00 00				.dword Vera_GetAddress
>b42e	32 b4					.word libfunc_1003_name
>b430	00 43					.byte 0,'C'
.b432					libfunc_1003_name:
>b432	d5 c4 d1 c0 df c6 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$c6,$c4,$f3
.b43a					libfunc_1004:
>b43a	00 00					.word 0
>b43c	b7 b5 00 00				.dword Vera_SetPalette
>b440	44 b4					.word libfunc_1004_name
>b442	00 43					.byte 0,'C'
.b444					libfunc_1004_name:
>b444	d5 c4 d1 c0 df cf c0 cb			.byte $d5,$c4,$d1,$c0,$df,$cf,$c0,$cb,$c4,$d3,$d3,$e4
>b44c	c4 d3 d3 e4
.b450					libfunc_1005:
>b450	3a b4					.word libfunc_1004
>b452	05 b6 00 00				.dword Vera_SpriteMove
>b456	5a b4					.word libfunc_1005_name
>b458	00 43					.byte 0,'C'
.b45a					libfunc_1005_name:
>b45a	d5 c4 d1 c0 df d2 df cc			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$cc,$ce,$d5,$e4
>b462	ce d5 e4
.b465					libfunc_1006:
>b465	50 b4					.word libfunc_1005
>b467	4d b6 00 00				.dword Vera_SetSize
>b46b	6f b4					.word libfunc_1006_name
>b46d	00 43					.byte 0,'C'
.b46f					libfunc_1006_name:
>b46f	d5 c4 d1 c0 df d2 df d2			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4
>b477	c8 d9 e4
.b47a					libfunc_1007:
>b47a	00 00					.word 0
>b47c	e9 b5 00 00				.dword Vera_SpriteDisable
>b480	84 b4					.word libfunc_1007_name
>b482	00 43					.byte 0,'C'
.b484					libfunc_1007_name:
>b484	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$c5,$e5
>b48c	c5 e5
.b48e					libfunc_1008:
>b48e	00 00					.word 0
>b490	1d b6 00 00				.dword Vera_SpriteSetup
>b494	98 b4					.word libfunc_1008_name
>b496	00 43					.byte 0,'C'
.b498					libfunc_1008_name:
>b498	d5 c4 d1 c0 df d2 df c6			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7
>b4a0	c5 f7
.b4a2					libfunc_1009:
>b4a2	00 00					.word 0
>b4a4	53 b5 00 00				.dword String_Len
>b4a8	ac b4					.word libfunc_1009_name
>b4aa	00 43					.byte 0,'C'
.b4ac					libfunc_1009_name:
>b4ac	d2 d3 d1 df cb c4 ed			.byte $d2,$d3,$d1,$df,$cb,$c4,$ed
.b4b3					libfunc_1010:
>b4b3	a2 b4					.word libfunc_1009
>b4b5	e5 b5 00 00				.dword Vera_SpriteEnable
>b4b9	bd b4					.word libfunc_1010_name
>b4bb	00 43					.byte 0,'C'
.b4bd					libfunc_1010_name:
>b4bd	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed
>b4c5	ed
.b4c6					DefaultHashTable:
>b4c6	00 00					.word 0
>b4c8	00 00					.word 0
>b4ca	f9 b3					.word libfunc_1000
>b4cc	28 b4					.word libfunc_1003
>b4ce	65 b4					.word libfunc_1006
>b4d0	7a b4					.word libfunc_1007
>b4d2	00 00					.word 0
>b4d4	8e b4					.word libfunc_1008
>b4d6	00 00					.word 0
>b4d8	00 00					.word 0
>b4da	00 00					.word 0
>b4dc	00 00					.word 0
>b4de	00 00					.word 0
>b4e0	b3 b4					.word libfunc_1010
>b4e2	00 00					.word 0
>b4e4	00 00					.word 0

;******  Return to file: main.asm


;******  Processing file: generated/library.inc

.0826					RandomSeed:
>0826							.dword 		?
.b4e6					System_Random:
.b4e6	ad 26 08	lda $0826		lda 	RandomSeed
.b4e9	0d 27 08	ora $0827		ora 	RandomSeed+1
.b4ec	0d 28 08	ora $0828		ora 	RandomSeed+2
.b4ef	0d 29 08	ora $0829		ora 	RandomSeed+3
.b4f2	d0 09		bne $b4fd		bne 	_SRSeeded
.b4f4	ee 27 08	inc $0827		inc 	RandomSeed+1
.b4f7	ce 29 08	dec $0829		dec 	RandomSeed+3
.b4fa	20 e6 b4	jsr $b4e6		jsr 	System_Random
.b4fd					_SRSeeded:
.b4fd	5a		phy			phy
.b4fe	ac 28 08	ldy $0828		ldy RandomSeed+2 ; will move to RandomSeed+3 at the end
.b501	ad 27 08	lda $0827		lda RandomSeed+1
.b504	8d 28 08	sta $0828		sta RandomSeed+2
.b507	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b50a	4a		lsr a			lsr
.b50b	8d 27 08	sta $0827		sta RandomSeed+1 ; reverse: 100011
.b50e	4a		lsr a			lsr
.b50f	4a		lsr a			lsr
.b510	4a		lsr a			lsr
.b511	4a		lsr a			lsr
.b512	4d 27 08	eor $0827		eor RandomSeed+1
.b515	4a		lsr a			lsr
.b516	4d 27 08	eor $0827		eor RandomSeed+1
.b519	4d 26 08	eor $0826		eor RandomSeed+0 ; combine with original low byte
.b51c	8d 27 08	sta $0827		sta RandomSeed+1
.b51f	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b522	0a		asl a			asl
.b523	4d 29 08	eor $0829		eor RandomSeed+3
.b526	0a		asl a			asl
.b527	0a		asl a			asl
.b528	0a		asl a			asl
.b529	0a		asl a			asl
.b52a	4d 29 08	eor $0829		eor RandomSeed+3
.b52d	0a		asl a			asl
.b52e	0a		asl a			asl
.b52f	4d 29 08	eor $0829		eor RandomSeed+3
.b532	8c 29 08	sty $0829		sty RandomSeed+3 ; finish rotating byte 2 into 3
.b535	8d 26 08	sta $0826		sta RandomSeed+0
.b538	e8		inx			inx
.b539	ad 26 08	lda $0826		lda	RandomSeed+0
.b53c	9d 00 0c	sta $0c00,x		sta stack0,x
.b53f	ad 27 08	lda $0827		lda	RandomSeed+1
.b542	9d 00 0d	sta $0d00,x		sta stack1,x
.b545	ad 28 08	lda $0828		lda	RandomSeed+2
.b548	9d 00 0e	sta $0e00,x		sta stack2,x
.b54b	ad 29 08	lda $0829		lda	RandomSeed+3
.b54e	9d 00 0f	sta $0f00,x		sta stack3,x
.b551	7a		ply			ply
.b552	60		rts			rts
.b553					String_Len:
.b553	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy string address
.b556	85 14		sta $14				sta 	zTemp0
.b558	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b55b	85 15		sta $15				sta 	zTemp0+1
.b55d	5a		phy				phy
.b55e	a0 ff		ldy #$ff			ldy 	#255 						; find string length
.b560	c8		iny		_SLLoop:iny
.b561	c0 ff		cpy #$ff			cpy 	#255 						; cant find EOS.
.b563	f0 13		beq $b578			beq 	_SLFail
.b565	b1 14		lda ($14),y			lda 	(zTemp0),y
.b567	d0 f7		bne $b560			bne 	_SLLoop
.b569	98		tya				tya
.b56a	7a		ply				ply
.b56b	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; return string
.b56e	9e 00 0d	stz $0d00,x			stz 	stack1,x
.b571	9e 00 0e	stz $0e00,x			stz 	stack2,x
.b574	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b577	60		rts				rts
.b578					_SLFail:
.b578	20 f1 a5	jsr $a5f1			jsr 	ErrorHandler
>b57b	4e 4f 54 20 53 54 52 49				.text 	"NOT STRING",0
>b583	4e 47 00
=$9f20					Vera_Base = $9F20
.082a					veraCurrentLayer:
>082a							.byte 		? 						; current layer (0-1)
.082b					veraCurrentSprite:
>082b							.byte 		?						; current sprite (0-127)
.082c					veraSpriteMode:
>082c							.byte 		? 						; 0 4 bit, 1 8 bit
.b586					Vera_SetAddress:
.b586	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b589	8d 20 9f	sta $9f20			sta 	Vera_Base
.b58c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b58f	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b592	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b595	c9 10		cmp #$10			cmp 	#16
.b597	b0 02		bcs $b59b			bcs 	_VSASetInc
.b599	09 10		ora #$10			ora 	#16
.b59b					_VSASetInc:
.b59b	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b59e	ca		dex				dex
.b59f	60		rts				rts
.b5a0					Vera_GetAddress:
.b5a0	e8		inx				inx
.b5a1	ad 20 9f	lda $9f20			lda 	Vera_Base
.b5a4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b5a7	ad 21 9f	lda $9f21			lda 	Vera_Base+1
.b5aa	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b5ad	ad 22 9f	lda $9f22			lda 	Vera_Base+2
.b5b0	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b5b3	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b5b6	60		rts				rts
.b5b7					Vera_SetPalette:
.b5b7	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5ba	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5bd	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5c0	29 01		and #$01			and 	#$01
.b5c2	09 10		ora #$10			ora 	#$10
.b5c4	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5c7	a9 1f		lda #$1f			lda 	#$1F
.b5c9	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5cc	ca		dex				dex
.b5cd	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5d0	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5d3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5d6	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5d9	ca		dex				dex
.b5da	60		rts				rts
.b5db					Vera_Sprite:
.b5db	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5de	29 7f		and #$7f			and 	#$7F
.b5e0	8d 2b 08	sta $082b			sta 	veraCurrentSprite
.b5e3	ca		dex				dex
.b5e4	60		rts				rts
.b5e5					Vera_SpriteEnable:
.b5e5	a9 01		lda #$01			lda 	#1
.b5e7	80 02		bra $b5eb			bra 	Vera_SpriteControl
.b5e9					Vera_SpriteDisable:
.b5e9	a9 00		lda #$00			lda 	#0
.b5eb					Vera_SpriteControl:
.b5eb	48		pha				pha
.b5ec	a9 00		lda #$00			lda 	#$00
.b5ee	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5f1	a9 40		lda #$40			lda 	#$40
.b5f3	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5f6	a9 1f		lda #$1f			lda 	#$1F
.b5f8	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5fb	68		pla				pla
.b5fc	29 01		and #$01			and 	#1
.b5fe	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b601	9c 23 9f	stz $9f23			stz 	Vera_Base+3
.b604	60		rts				rts
.b605					Vera_SpriteMove:
.b605	a9 02		lda #$02			lda 	#2 							; physical position
.b607	20 6b b6	jsr $b66b			jsr 	Vera_CurrentSprite
.b60a	20 0d b6	jsr $b60d			jsr 	_VSMOutPosition
.b60d					_VSMOutPosition:
.b60d	ca		dex				dex
.b60e	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b611	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b614	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b617	29 03		and #$03			and 	#$03
.b619	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b61c	60		rts				rts
.b61d					Vera_SpriteSetup:
.b61d	a9 00		lda #$00			lda 	#0
.b61f	20 6b b6	jsr $b66b			jsr 	Vera_CurrentSprite
.b622	ca		dex				dex
.b623	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b626	85 14		sta $14				sta 	zTemp0
.b628	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b62b	85 15		sta $15				sta 	zTemp0+1
.b62d	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.b630	85 16		sta $16				sta 	zTemp1
.b632	5a		phy				phy
.b633	a0 05		ldy #$05			ldy 	#5
.b635	46 16		lsr $16		_VSSS:	lsr 	zTemp1
.b637	66 15		ror $15				ror 	zTemp0+1
.b639	66 14		ror $14				ror 	zTemp0
.b63b	88		dey				dey
.b63c	d0 f7		bne $b635			bne 	_VSSS
.b63e	7a		ply				ply
.b63f	a5 14		lda $14				lda 	zTemp0
.b641	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b644	a5 15		lda $15				lda 	zTemp0+1
.b646	0d 2c 08	ora $082c			ora 	veraSpriteMode
.b649	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b64c	60		rts				rts
.b64d					Vera_SetSize:
.b64d	a9 06		lda #$06			lda 	#6
.b64f	20 6b b6	jsr $b66b			jsr 	Vera_CurrentSprite
.b652	a9 1c		lda #$1c			lda 	#$1C
.b654	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b657	ca		dex				dex
.b658	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b65b	29 03		and #$03			and 	#3
.b65d	85 14		sta $14				sta 	zTemp0
.b65f	0a		asl a				asl 	a
.b660	0a		asl a				asl 	a
.b661	05 14		ora $14				ora 	zTemp0
.b663	0a		asl a				asl 	a
.b664	0a		asl a				asl 	a
.b665	0a		asl a				asl 	a
.b666	0a		asl a				asl 	a
.b667	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b66a	60		rts				rts
.b66b					Vera_CurrentSprite:
.b66b	48		pha				pha 								; save offset
.b66c	ad 2b 08	lda $082b			lda 	veraCurrentSprite 			; address in zTemp0
.b66f	0a		asl a				asl 	a
.b670	85 14		sta $14				sta 	zTemp0		 				; sprite# x 2
.b672	64 15		stz $15				stz 	zTemp0+1
.b674	06 14		asl $14				asl 	zTemp0 						; x 8
.b676	26 15		rol $15				rol 	zTemp0+1
.b678	06 14		asl $14				asl 	zTemp0
.b67a	68		pla				pla 								; fix up address
.b67b	05 14		ora $14				ora 	zTemp0
.b67d	8d 20 9f	sta $9f20			sta  	Vera_Base+0
.b680	a5 15		lda $15				lda 	zTemp0+1
.b682	09 50		ora #$50			ora 	#$50
.b684	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b687	a9 1f		lda #$1f			lda 	#$1F
.b689	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b68c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	15 64 00 02 11 20 74 65			.byte $15,$64,$00,$02,$11,$20,$74,$65,$73,$74,$20,$70,$72,$6f,$67,$72,$61,$6d,$20,$00,$00,$0c,$6e,$00,$81,$4e,$d5,$c4,$d1,$c0,$df,$f2,$00,$0d,$78,$00,$d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed,$00,$12,$82,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7,$00,$11,$8c,$00,$83,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4,$00,$10,$96,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$00,$07,$a0,$00,$a0,$4e,$2f,$00,$11,$aa,$00,$81,$80,$4e,$2f,$31,$20,$20,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$b4,$00,$37,$37,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$06,$be,$00,$16,$2d,$00,$11,$c8,$00,$29,$d5,$d6,$d1,$c8,$d3,$e4,$89,$bc,$a3,$4e,$26,$18,$00,$0c,$d2,$00,$29,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$08,$dc,$00,$8f,$a8,$4e,$2f,$00,$08,$e6,$00,$83,$bf,$4e,$2f,$00,$05,$f0,$00,$37,$00,$06,$fa,$00,$37,$18,$00
>1108	73 74 20 70 72 6f 67 72 61 6d 20 00 00 0c 6e 00
>1118	81 4e d5 c4 d1 c0 df f2 00 0d 78 00 d5 c4 d1 c0
>1128	df d2 df ce ed 00 12 82 00 90 80 80 4e d5 c4 d1
>1138	c0 df d2 df c6 c5 f7 00 11 8c 00 83 4e d5 c4 d1
>1148	c0 df d2 df d2 c8 d9 e4 00 10 96 00 90 80 80 4e
>1158	d5 c4 d1 c0 df d2 c4 f3 00 07 a0 00 a0 4e 2f 00
>1168	11 aa 00 81 80 4e 2f 31 20 20 d5 d6 d1 c8 d3 e4
>1178	00 0d b4 00 37 37 c0 cd c8 cc c0 d3 e4 00 06 be
>1188	00 16 2d 00 11 c8 00 29 d5 d6 d1 c8 d3 e4 89 bc
>1198	a3 4e 26 18 00 0c d2 00 29 c0 cd c8 cc c0 d3 e4
>11a8	00 08 dc 00 8f a8 4e 2f 00 08 e6 00 83 bf 4e 2f
>11b8	00 05 f0 00 37 00 06 fa 00 37 18 00

;******  Return to file: main.asm

>11c4	00						.byte 	0

;******  End of listing
