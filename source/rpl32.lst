
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=0 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Mon Oct  7 14:09:02 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					debug=0

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					zTemp3: 		.word ?
>000c					zTemp4:			.word ?
>000e					zLTemp1:		.dword ?					; temporary longs
>0012					idDataAddr:		.word ? 					; data address.
>0014					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 fa a1	jsr $a1fa			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 6c a0	lda $a06c,x			lda 	BootMessage,x
.a00b	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 6c a0	lda $a06c,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	20 15 a4	jsr $a415			jsr 	ResetForRun
.a017	20 0a a4	jsr $a40a			jsr 	ResetCodePointer
.a01a					WarmStart:
.a01a	8a		txa				txa
.a01b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a01d	9a		txs				txs
.a01e	aa		tax				tax
.a01f	a9 07		lda #$07			lda 	#COL_WHITE
.a021	20 25 a2	jsr $a225			jsr 	ExternColour
.a024	20 39 a2	jsr $a239			jsr 	ExternInput 				; input text
.a027	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a029	85 00		sta $00				sta 	codePtr
.a02b	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a02d	85 01		sta $01				sta 	codePtr+1
.a02f	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a031	85 06		sta $06				sta 	zTemp1 						; with line number 0 by being
.a033	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a035	85 07		sta $07				sta 	zTemp1+1
.a037	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a03a	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a03d	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a040	20 8e a7	jsr $a78e			jsr 	Tokenise
.a043	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a045					SkipSpaces:
.a045	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a048	c8		iny				iny
.a049	c9 20		cmp #$20			cmp 	#' '
.a04b	f0 f8		beq $a045			beq 	SkipSpaces
.a04d	c9 30		cmp #$30			cmp 	#'0'
.a04f	90 0e		bcc $a05f			bcc 	ExecuteCLI
.a051	c9 3a		cmp #$3a			cmp 	#'9'+1
.a053	b0 0a		bcs $a05f			bcs 	ExecuteCLI
.a055	ad 00 09	lda $0900			lda 	InputBuffer
.a058	c9 20		cmp #$20			cmp 	#' '
.a05a	f0 03		beq $a05f			beq 	ExecuteCLI
.a05c	4c 02 a5	jmp $a502			jmp 	SyntaxError
.a05f					ExecuteCLI:
.a05f	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a061	85 00		sta $00				sta 	codePtr
.a063	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a065	85 01		sta $01				sta 	codePtr+1
.a067	a0 03		ldy #$03			ldy 	#3
.a069	4c 77 a2	jmp $a277			jmp 	Execute 					; and run it
.a06c					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a06c	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$31,$20,$44,$41,$54,$45,$3a,$30,$37,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$00
>a074	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a084	2a 2a 2a 2a 0d 0d 42 55 49 4c 44 3a 31 20 44 41
>a094	54 45 3a 30 37 2d 4f 43 54 2d 32 30 31 39 0d 0d
>a0a4	00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a0a5					KeywordText:
>a0a5	01 21					.byte $01,$21                          ; $10 !
>a0a7	01 26					.byte $01,$26                          ; $11 &
>a0a9	01 2a					.byte $01,$2a                          ; $12 *
>a0ab	01 2b					.byte $01,$2b                          ; $13 +
>a0ad	02 2b 2b				.byte $02,$2b,$2b                      ; $14 ++
>a0b0	01 2d					.byte $01,$2d                          ; $15 -
>a0b2	02 2d 2d				.byte $02,$2d,$2d                      ; $16 --
>a0b5	01 2e					.byte $01,$2e                          ; $17 .
>a0b7	01 2f					.byte $01,$2f                          ; $18 /
>a0b9	01 3b					.byte $01,$3b                          ; $19 ;
>a0bb	01 3c					.byte $01,$3c                          ; $1a <
>a0bd	02 3c 3c				.byte $02,$3c,$3c                      ; $1b <<
>a0c0	02 3c 3d				.byte $02,$3c,$3d                      ; $1c <=
>a0c3	02 3c 3e				.byte $02,$3c,$3e                      ; $1d <>
>a0c6	01 3d					.byte $01,$3d                          ; $1e =
>a0c8	01 3e					.byte $01,$3e                          ; $1f >
>a0ca	02 3e 3d				.byte $02,$3e,$3d                      ; $20 >=
>a0cd	02 3e 3e				.byte $02,$3e,$3e                      ; $21 >>
>a0d0	01 40					.byte $01,$40                          ; $22 @
>a0d2	03 41 42 53				.byte $03,$41,$42,$53                  ; $23 ABS
>a0d6	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $24 ALLOC
>a0dc	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $25 AND
>a0e0	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $26 ASSERT
>a0e7	02 43 21				.byte $02,$43,$21                      ; $27 C!
>a0ea	02 43 40				.byte $02,$43,$40                      ; $28 C@
>a0ed	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $29 CLR
>a0f1	03 44 45 46				.byte $03,$44,$45,$46                  ; $2a DEF
>a0f5	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2b DROP
>a0fa	03 44 55 50				.byte $03,$44,$55,$50                  ; $2c DUP
>a0fe	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2d ELSE
>a103	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2e END
>a107	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2f ENDIF
>a10d	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $30 FOR
>a111	02 49 46				.byte $02,$49,$46                      ; $31 IF
>a114	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $32 INDEX
>a11a	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $33 LIST
>a11f	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a123	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a12a	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a12e	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a133	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a137	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a13b	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a13f	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a142	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a147	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3d REPEAT
>a14e	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $3e RUN
>a152	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $3f SHL
>a156	03 53 48 52				.byte $03,$53,$48,$52                  ; $40 SHR
>a15a	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $41 STOP
>a15f	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $42 SWAP
>a164	03 53 59 53				.byte $03,$53,$59,$53                  ; $43 SYS
>a168	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $44 UNTIL
>a16e	02 57 21				.byte $02,$57,$21                      ; $45 W!
>a171	02 57 40				.byte $02,$57,$40                      ; $46 W@
>a174	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $47 XOR
>a178	02 5b 5d				.byte $02,$5b,$5d                      ; $48 []
>a17b	01 5e					.byte $01,$5e                          ; $49 ^
>a17d	01 2b					.byte $01,$2b                          ; $4a {+}
>a17f	01 2d					.byte $01,$2d                          ; $4b {-}
>a181	00					.byte $00
.a182					KeywordVectorTable:
>a182	a9 aa					.word Mem_DPoke                        ; $10 !
>a184	02 a5					.word SyntaxError                      ; $11 &
>a186	c7 ab					.word MulInteger32                     ; $12 *
>a188	d0 aa					.word Stack_Add                        ; $13 +
>a18a	d0 a9					.word Unary_Increment                  ; $14 ++
>a18c	f7 aa					.word Stack_Sub                        ; $15 -
>a18e	e3 a9					.word Unary_Decrement                  ; $16 --
>a190	d0 ad					.word System_ShowStack                 ; $17 .
>a192	10 ac					.word DivInteger32                     ; $18 /
>a194	02 a5					.word SyntaxError                      ; $19 ;
>a196	f7 ac					.word Comp_Less                        ; $1a <
>a198	05 aa					.word Unary_Shl                        ; $1b <<
>a19a	22 ad					.word Comp_LessEqual                   ; $1c <=
>a19c	c0 ac					.word Comp_NotEqual                    ; $1d <>
>a19e	bd ac					.word Comp_Equal                       ; $1e =
>a1a0	25 ad					.word Comp_Greater                     ; $1f >
>a1a2	fa ac					.word Comp_GreaterEqual                ; $20 >=
>a1a4	12 aa					.word Unary_Shr                        ; $21 >>
>a1a6	57 aa					.word Mem_DPeek                        ; $22 @
>a1a8	87 a9					.word Unary_Absolute                   ; $23 ABS
>a1aa	02 a5					.word SyntaxError                      ; $24 ALLOC
>a1ac	1e ab					.word Stack_And                        ; $25 AND
>a1ae	61 ad					.word System_Assert                    ; $26 ASSERT
>a1b0	7c aa					.word Mem_Poke                         ; $27 C!
>a1b2	1f aa					.word Mem_Peek                         ; $28 C@
>a1b4	f9 a8					.word Stack_Empty                      ; $29 CLR
>a1b6	02 a5					.word SyntaxError                      ; $2a DEF
>a1b8	fc a8					.word Stack_Drop                       ; $2b DROP
>a1ba	fe a8					.word Stack_Dup                        ; $2c DUP
>a1bc	02 a5					.word SyntaxError                      ; $2d ELSE
>a1be	56 ad					.word System_END                       ; $2e END
>a1c0	02 a5					.word SyntaxError                      ; $2f ENDIF
>a1c2	bc ae					.word Command_For                      ; $30 FOR
>a1c4	02 a5					.word SyntaxError                      ; $31 IF
>a1c6	58 af					.word Command_Index                    ; $32 INDEX
>a1c8	70 a6					.word Cmd_List                         ; $33 LIST
>a1ca	a5 ac					.word ModInteger32                     ; $34 MOD
>a1cc	8d a9					.word Unary_Negate                     ; $35 NEGATE
>a1ce	7b ad					.word System_New                       ; $36 NEW
>a1d0	13 af					.word Command_Next                     ; $37 NEXT
>a1d2	18 a9					.word Stack_Nip                        ; $38 NIP
>a1d4	af a9					.word Unary_Not                        ; $39 NOT
>a1d6	84 ad					.word System_Old                       ; $3a OLD
>a1d8	6a ab					.word Stack_Or                         ; $3b OR
>a1da	32 a9					.word Stack_Over                       ; $3c OVER
>a1dc	7e af					.word Command_Repeat                   ; $3d REPEAT
>a1de	4d ad					.word System_RUN                       ; $3e RUN
>a1e0	90 ab					.word Stack_Shl                        ; $3f SHL
>a1e2	93 ab					.word Stack_Shr                        ; $40 SHR
>a1e4	59 ad					.word System_STOP                      ; $41 STOP
>a1e6	4c a9					.word Stack_Swap                       ; $42 SWAP
>a1e8	a8 ad					.word System_Sys                       ; $43 SYS
>a1ea	88 af					.word Command_Until                    ; $44 UNTIL
>a1ec	8e aa					.word Mem_WPoke                        ; $45 W!
>a1ee	38 aa					.word Mem_WPeek                        ; $46 W@
>a1f0	44 ab					.word Stack_Xor                        ; $47 XOR
>a1f2	02 a5					.word SyntaxError                      ; $48 []
>a1f4	59 ae					.word WriteVariable                    ; $49 ^
>a1f6	02 a5					.word SyntaxError                      ; $4a {+}
>a1f8	02 a5					.word SyntaxError                      ; $4b {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_AMPERSAND = $11              ; $11 &
=$12					KWD_ASTERISK = $12               ; $12 *
=$13					KWD_PLUS = $13                   ; $13 +
=$14					KWD_PLUSPLUS = $14               ; $14 ++
=$15					KWD_MINUS = $15                  ; $15 -
=$16					KWD_MINUSMINUS = $16             ; $16 --
=$17					KWD_DOT = $17                    ; $17 .
=$18					KWD_SLASH = $18                  ; $18 /
=$19					KWD_SEMICOLON = $19              ; $19 ;
=$1a					KWD_LESS = $1a                   ; $1a <
=$1b					KWD_LESSLESS = $1b               ; $1b <<
=$1c					KWD_LESSEQUAL = $1c              ; $1c <=
=$1d					KWD_LESSGREATER = $1d            ; $1d <>
=$1e					KWD_EQUAL = $1e                  ; $1e =
=$1f					KWD_GREATER = $1f                ; $1f >
=$20					KWD_GREATEREQUAL = $20           ; $20 >=
=$21					KWD_GREATERGREATER = $21         ; $21 >>
=$22					KWD_AT = $22                     ; $22 @
=$23					KWD_ABS = $23                    ; $23 ABS
=$24					KWD_ALLOC = $24                  ; $24 ALLOC
=$25					KWD_AND = $25                    ; $25 AND
=$26					KWD_ASSERT = $26                 ; $26 ASSERT
=$27					KWD_CPLING = $27                 ; $27 C!
=$28					KWD_CAT = $28                    ; $28 C@
=$29					KWD_CLR = $29                    ; $29 CLR
=$2a					KWD_DEF = $2a                    ; $2a DEF
=$2b					KWD_DROP = $2b                   ; $2b DROP
=$2c					KWD_DUP = $2c                    ; $2c DUP
=$2d					KWD_ELSE = $2d                   ; $2d ELSE
=$2e					KWD_END = $2e                    ; $2e END
=$2f					KWD_ENDIF = $2f                  ; $2f ENDIF
=$30					KWD_FOR = $30                    ; $30 FOR
=$31					KWD_IF = $31                     ; $31 IF
=$32					KWD_INDEX = $32                  ; $32 INDEX
=$33					KWD_LIST = $33                   ; $33 LIST
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_REPEAT = $3d                 ; $3d REPEAT
=$3e					KWD_RUN = $3e                    ; $3e RUN
=$3f					KWD_SHL = $3f                    ; $3f SHL
=$40					KWD_SHR = $40                    ; $40 SHR
=$41					KWD_STOP = $41                   ; $41 STOP
=$42					KWD_SWAP = $42                   ; $42 SWAP
=$43					KWD_SYS = $43                    ; $43 SYS
=$44					KWD_UNTIL = $44                  ; $44 UNTIL
=$45					KWD_WPLING = $45                 ; $45 W!
=$46					KWD_WAT = $46                    ; $46 W@
=$47					KWD_XOR = $47                    ; $47 XOR
=$48					KWD_LSQPARENRSQPAREN = $48       ; $48 []
=$49					KWD_HAT = $49                    ; $49 ^
=$4a					KWD_CONSTANT_PLUS = $4a          ; $4a {+}
=$4b					KWD_CONSTANT_MINUS = $4b         ; $4b {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a1fa					ExternInitialise:
.a1fa	a9 07		lda #$07			lda 	#$07 						; set colour
.a1fc	8d 86 02	sta $0286			sta 	646
.a1ff	a9 0e		lda #$0e			lda 	#14							; lower case
.a201	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a204	a9 93		lda #$93			lda 	#147 						; clear screen
.a206	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a209	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a20b	4c 25 a2	jmp $a225			jmp 	ExternColour
.a20e					ExternCheckBreak:
.a20e	da		phx				phx 								; make sure we keep XY
.a20f	5a		phy				phy
.a210	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a213	f0 03		beq $a218			beq		_ECBExit 					; stopped
.a215	7a		ply				ply 								; restore and exit.
.a216	fa		plx				plx
.a217	60		rts				rts
.a218					_ECBExit:
.a218	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a21b					ExternPrint:
.a21b	48		pha				pha
.a21c	da		phx				phx
.a21d	5a		phy				phy
.a21e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a221	7a		ply				ply
.a222	fa		plx				plx
.a223	68		pla				pla
.a224	60		rts				rts
.a225					ExternColour:
.a225	48		pha				pha
.a226	da		phx				phx
.a227	aa		tax				tax
.a228	bd 31 a2	lda $a231,x			lda 	_ECTable,x
.a22b	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a22e	fa		plx				plx
.a22f	68		pla				pla
.a230	60		rts				rts
.a231					_ECTable:
>a231	90						.byte 	144
>a232	1c						.byte 	28
>a233	1e						.byte 	30
>a234	9e						.byte 	158
>a235	1f						.byte 	31
>a236	9c						.byte 	156
>a237	9f						.byte 	159
>a238	05						.byte 	5
.a239					ExternInput:
.a239	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a23b	85 04		sta $04				sta 	zTemp0
.a23d	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a23f	85 05		sta $05				sta 	zTemp0+1
.a241	a9 07		lda #$07			lda 	#COL_WHITE
.a243	20 25 a2	jsr $a225			jsr 	ExternColour
.a246	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a249	c9 0d		cmp #$0d			cmp 	#13
.a24b	f0 0a		beq $a257			beq 	_EIExit
.a24d	92 04		sta ($04)			sta 	(zTemp0)
.a24f	e6 04		inc $04				inc 	zTemp0
.a251	d0 f3		bne $a246			bne 	_EIRead
.a253	e6 05		inc $05				inc 	zTemp0+1
.a255	80 ef		bra $a246			bra 	_EIRead
.a257	a9 00		lda #$00	_EIExit:lda 	#0
.a259	92 04		sta ($04)			sta 	(zTemp0)
.a25b	a9 0d		lda #$0d			lda 	#13
.a25d	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a260	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a261					EXNextLine:
.a261	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a263	f0 0f		beq $a274			beq 	_EXNLWarmStart
.a265	18		clc				clc 								; advance code pointer to next line
.a266	65 00		adc $00				adc 	codePtr
.a268	85 00		sta $00				sta 	codePtr
.a26a	90 02		bcc $a26e			bcc 	_EXNLNoBump
.a26c	e6 01		inc $01				inc 	codePtr+1
.a26e					_EXNLNoBump:
.a26e	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a270	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a272	d0 03		bne $a277			bne 	Execute 					; not end of program
.a274					_EXNLWarmStart:
.a274	4c 56 ad	jmp $ad56			jmp 	System_END
.a277					Execute:
.a277	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a27a	d0 03		bne $a27f			bne 	_EXNoBreak
.a27c	20 0e a2	jsr $a20e			jsr 	ExternCheckBreak
.a27f					_EXNoBreak:
.a27f	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a281	f0 de		beq $a261			beq 	EXNextLine 					; reached end of the line.
.a283	c8		iny				iny 								; advance pointer.
.a284	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a286	90 27		bcc $a2af			bcc 	EXStringComment
.a288	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a28a	90 0d		bcc $a299			bcc 	EXTokenExecute
.a28c	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a28e	90 03		bcc $a293			bcc 	EXPushConstant
.a290	4c fe ad	jmp $adfe			jmp 	Identifier 					; it's an identifier C0-FF
.a293					EXPushConstant:
.a293	88		dey				dey
.a294	20 de a2	jsr $a2de			jsr 	ExtractIntegerToTOS 		; extract integer
.a297	80 de		bra $a277			bra 	Execute
.a299					EXTokenExecute:
.a299	0a		asl a				asl 	a 							; double token, also clears carry
.a29a	da		phx				phx 								; save X, put token x 2 in X
.a29b	aa		tax				tax
.a29c	bd 62 a1	lda $a162,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a29f	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a2a1	bd 63 a1	lda $a163,x			lda 	KeywordVectorTable-$20+1,x
.a2a4	85 05		sta $05				sta 	zTemp0+1
.a2a6	fa		plx				plx 								; restore X
.a2a7	20 ac a2	jsr $a2ac			jsr 	_EXTCall 					; call the routine
.a2aa	80 cb		bra $a277			bra 	Execute
.a2ac					_EXTCall:
.a2ac	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a2af					EXStringComment:
.a2af	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a2b1	f0 15		beq $a2c8			beq 	EXStringSkip 				; (comment), so just skip it.
.a2b3	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a2b4	98		tya				tya
.a2b5	38		sec				sec
.a2b6	65 00		adc $00				adc 	codePtr
.a2b8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2bb	a5 01		lda $01				lda 	codePtr+1
.a2bd	69 00		adc #$00			adc 	#0
.a2bf	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a2c2	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a2c5	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2c8					EXStringSkip:
.a2c8	98		tya				tya 								; the current position in A
.a2c9	18		clc				clc
.a2ca	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a2cc	a8		tay				tay 			 					; and make that the current position.
.a2cd	88		dey				dey 								; back one because of the initial skip
.a2ce	80 a7		bra $a277			bra 	Execute
.a2d0					EXShiftTOSRight:
.a2d0	4a		lsr a				lsr 	a
.a2d1	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a2d4	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a2d7	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a2da	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a2dd	60		rts				rts
.a2de					ExtractIntegerToTOS:
.a2de	b1 00		lda ($00),y			lda 	(codePtr),y
.a2e0	c8		iny				iny
.a2e1	e8		inx				inx 								; make stack space
.a2e2	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a2e4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2e7	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a2ea	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a2ed	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2f0					_EXConstantLoop:
.a2f0	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a2f2	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a2f4	c9 80		cmp #$80			cmp 	#$80
.a2f6	d0 2d		bne $a325			bne		_EXDone 					; no then exit
.a2f8	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a2fb	48		pha				pha
.a2fc	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a2ff	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a302	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a305	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a308	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a30b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a30e	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a311	68		pla				pla
.a312	20 d0 a2	jsr $a2d0			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a315	20 d0 a2	jsr $a2d0			jsr 	EXShiftTOSRight				; which will be x64
.a318	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a31a	c8		iny				iny
.a31b	29 3f		and #$3f			and 	#$3F
.a31d	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a320	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a323	80 cb		bra $a2f0			bra 	_EXConstantLoop
.a325	b1 00		lda ($00),y	_EXDone:lda 	(codePtr),y
.a327	c8		iny				iny 								; skip over unary constant + -
.a328	c9 4b		cmp #$4b			cmp 	#KWD_CONSTANT_MINUS
.a32a	d0 03		bne $a32f			bne 	_EXPositive
.a32c	4c 8d a9	jmp $a98d			jmp 	Unary_Negate
.a32f					_EXPositive:
.a32f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a330					IdentifierSearch:
.a330	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a332	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a334	90 12		bcc $a348			bcc 	_ISSlow
.a336	c9 fa		cmp #$fa			cmp 	#$F9+1
.a338	b0 0e		bcs $a348			bcs 	_ISSlow
.a33a	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a33c	0a		asl a				asl 	a
.a33d	0a		asl a				asl		a
.a33e	85 12		sta $12				sta 	idDataAddr					; set up addres
.a340	a9 10		lda #$10			lda 	#AZVariables >> 8
.a342	85 13		sta $13				sta 	idDataAddr+1
.a344	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a346	38		sec				sec 								; return with CS.
.a347	60		rts				rts
.a348					_ISSlow:
.a348	20 fc a3	jsr $a3fc			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a34b	98		tya				tya 								; set (zTemp1) to point to the
.a34c	18		clc				clc 	 							; identifier to be searched.
.a34d	65 00		adc $00				adc 	codePtr
.a34f	85 06		sta $06				sta 	zTemp1
.a351	a5 01		lda $01				lda 	codePtr+1
.a353	69 00		adc #$00			adc 	#0
.a355	85 07		sta $07				sta 	zTemp1+1
.a357	5a		phy				phy 								; save Y
.a358	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a35a	48		pha				pha
.a35b	a0 01		ldy #$01			ldy 	#1
.a35d	b1 04		lda ($04),y			lda 	(zTemp0),y
.a35f	85 05		sta $05				sta 	zTemp0+1
.a361	68		pla				pla
.a362	85 04		sta $04				sta 	zTemp0
.a364	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a366	f0 2c		beq $a394			beq 	_ISFail
.a368	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a36a	b1 04		lda ($04),y			lda 	(zTemp0),y
.a36c	85 08		sta $08				sta 	zTemp2
.a36e	c8		iny				iny
.a36f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a371	85 09		sta $09				sta 	zTemp2+1
.a373	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a375					_ISCompare:
.a375	b1 06		lda ($06),y			lda 	(zTemp1),y
.a377	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a379	d0 dd		bne $a358			bne		_ISLoop 					; different ?
.a37b	c8		iny				iny
.a37c	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a37e	90 f5		bcc $a375			bcc 	_ISCompare
.a380	18		clc				clc 								; set up the data pointer
.a381	a5 04		lda $04				lda 	zTemp0
.a383	69 02		adc #$02			adc 	#2
.a385	85 12		sta $12				sta 	idDataAddr
.a387	a5 05		lda $05				lda 	zTemp0+1
.a389	69 00		adc #$00			adc		#0
.a38b	85 13		sta $13				sta 	idDataAddr+1
.a38d	a0 09		ldy #$09			ldy 	#9 							; get the type
.a38f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a391	7a		ply				ply
.a392	38		sec				sec
.a393	60		rts				rts
.a394					_ISFail:
.a394	7a		ply				ply
.a395	18		clc				clc
.a396	60		rts				rts
.a397					IdentifierCreate:
.a397	5a		phy				phy 								; save Y
.a398	48		pha				pha 								; save type on stack
.a399	20 fc a3	jsr $a3fc			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a39c	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a39f	85 06		sta $06				sta 	zTemp1
.a3a1	ad 89 10	lda $1089			lda 	VarMemory+1
.a3a4	85 07		sta $07				sta 	zTemp1+1
.a3a6	5a		phy				phy 								; save Y (code offset)
.a3a7	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a3a9	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a3ab	91 06		sta ($06),y			sta 	(zTemp1),y
.a3ad	c8		iny				iny
.a3ae	b1 04		lda ($04),y			lda 	(zTemp0),y
.a3b0	91 06		sta ($06),y			sta 	(zTemp1),y
.a3b2	c8		iny				iny
.a3b3					_IDCErase:
.a3b3	a9 00		lda #$00			lda 	#0
.a3b5	91 06		sta ($06),y			sta 	(zTemp1),y
.a3b7	c8		iny				iny
.a3b8	c0 06		cpy #$06			cpy 	#6
.a3ba	d0 f7		bne $a3b3			bne 	_IDCErase
.a3bc	68		pla				pla 								; original Y
.a3bd	18		clc				clc
.a3be	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a3c0	91 06		sta ($06),y			sta 	(zTemp1),y
.a3c2	c8		iny				iny
.a3c3	a5 01		lda $01				lda 	codePtr+1
.a3c5	69 00		adc #$00			adc 	#0
.a3c7	91 06		sta ($06),y			sta 	(zTemp1),y
.a3c9	c8		iny				iny
.a3ca	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a3cc	91 06		sta ($06),y			sta 	(zTemp1),y
.a3ce	68		pla				pla 								; restore type
.a3cf	c8		iny				iny
.a3d0	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a3d2	c8		iny				iny
.a3d3	98		tya				tya									; add offset to VarMemory
.a3d4	18		clc				clc
.a3d5	6d 88 10	adc $1088			adc 	VarMemory
.a3d8	8d 88 10	sta $1088			sta 	VarMemory
.a3db	ad 89 10	lda $1089			lda 	VarMemory+1
.a3de	69 00		adc #$00			adc 	#0
.a3e0	8d 89 10	sta $1089			sta 	VarMemory+1
.a3e3	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a3e5	92 04		sta ($04)			sta 	(zTemp0)
.a3e7	a0 01		ldy #$01			ldy 	#1
.a3e9	a5 07		lda $07				lda 	zTemp1+1
.a3eb	91 04		sta ($04),y			sta 	(zTemp0),y
.a3ed	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a3ef	18		clc				clc
.a3f0	69 02		adc #$02			adc 	#2
.a3f2	85 12		sta $12				sta 	idDataAddr
.a3f4	a5 07		lda $07				lda 	zTemp1+1
.a3f6	69 00		adc #$00			adc 	#0
.a3f8	85 13		sta $13				sta 	idDataAddr+1
.a3fa	7a		ply				ply 								; restore Y and exit
.a3fb	60		rts				rts
.a3fc					IdentifierSetUpHashPtr:
.a3fc	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a3fe	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a400	0a		asl a				asl 	a 							; convert to an offset, clc
.a401	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a403	85 04		sta $04				sta 	zTemp0
.a405	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a407	85 05		sta $05				sta 	zTemp0+1
.a409	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a40a					ResetCodePointer:
.a40a	48		pha				pha
.a40b	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a40d	85 01		sta $01				sta 	codePtr+1
.a40f	64 00		stz $00				stz 	codePtr
.a411	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a413	68		pla				pla
.a414	60		rts				rts
.a415					ResetForRun:
.a415	48		pha				pha
.a416	5a		phy				phy
.a417	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a419					_RRErase:
.a419	9e 68 10	stz $1068,x			stz		HashTable,x
.a41c	e8		inx				inx
.a41d	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a41f	d0 f8		bne $a419			bne 	_RRErase
.a421	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; code Pointer to start of program
.a424					_RRFindEnd:
.a424	b2 00		lda ($00)			lda 	(codePtr)					; at end ?
.a426	f0 0b		beq $a433			beq 	_RRFoundEnd
.a428	18		clc				clc 								; no, add offset to pointer.
.a429	65 00		adc $00				adc 	codePtr
.a42b	85 00		sta $00				sta 	codePtr
.a42d	90 f5		bcc $a424			bcc 	_RRFindEnd
.a42f	e6 01		inc $01				inc 	codePtr+1
.a431	80 f1		bra $a424			bra 	_RRFindEnd
.a433					_RRFoundEnd:
.a433	18		clc				clc 								; add 1 to this, as it points to the last
.a434	a5 00		lda $00				lda 	codePtr 					; offset, and store in Variable Memory pointer
.a436	69 01		adc #$01			adc 	#1
.a438	8d 88 10	sta $1088			sta 	VarMemory
.a43b	a5 01		lda $01				lda 	codePtr+1
.a43d	69 00		adc #$00			adc 	#0
.a43f	8d 89 10	sta $1089			sta 	VarMemory+1
.a442	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a444	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a447	9c 8a 10	stz $108a			stz 	AllocMemory
.a44a	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a44c	85 02		sta $02				sta 	StructSP
.a44e	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a450	85 03		sta $03				sta 	StructSP+1
.a452	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a454	92 02		sta ($02)			sta 	(StructSP)
.a456	20 5e a4	jsr $a45e			jsr 	ProcedureScan
.a459	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a45b	7a		ply				ply
.a45c	68		pla				pla
.a45d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a45e					ProcedureScan:
.a45e	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; reset the code pointer.
.a461	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a463	f0 33		beq $a498			beq 	_PSExit
.a465	a0 03		ldy #$03			ldy 	#3 							; start of line
.a467	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a469	c9 2a		cmp #$2a			cmp 	#KWD_DEF 					; first thing is DEF ?
.a46b	d0 1e		bne $a48b			bne 	_PSNext
.a46d	c8		iny				iny 								; skip over def first, any following spaces
.a46e	b1 00		lda ($00),y			lda 	(codePtr),y
.a470	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a472	20 97 a3	jsr $a397			jsr 	IdentifierCreate
.a475					_PSSkipIdentifier:
.a475	b1 00		lda ($00),y			lda 	(codePtr),y
.a477	c8		iny				iny
.a478	c9 c0		cmp #$c0			cmp 	#$C0
.a47a	b0 f9		bcs $a475			bcs 	_PSSkipIdentifier
.a47c	88		dey				dey 								; undo last, points at first non ID
.a47d	98		tya				tya  								; save the address in the data slot.
.a47e	18		clc				clc 								; changing Y doesn't matter.
.a47f	65 00		adc $00				adc 	codePtr
.a481	92 12		sta ($12)			sta 	(idDataAddr)
.a483	a5 01		lda $01				lda 	codePtr+1
.a485	69 00		adc #$00			adc 	#0
.a487	a0 01		ldy #$01			ldy 	#1
.a489	91 12		sta ($12),y			sta 	(idDataAddr),y
.a48b					_PSNext:
.a48b	18		clc				clc 								; go to next
.a48c	b2 00		lda ($00)			lda 	(codePtr)
.a48e	65 00		adc $00				adc 	codePtr
.a490	85 00		sta $00				sta 	codeptr
.a492	90 cd		bcc $a461			bcc 	_PSMain
.a494	e6 01		inc $01				inc 	codePtr+1
.a496	80 c9		bra $a461			bra 	_PSMain
.a498					_PSExit:
.a498	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/indexing.asm

.a499					IndexCheck:
.a499	b1 00		lda ($00),y			lda 	(codePtr),y 				; check next character
.a49b	c9 48		cmp #$48			cmp 	#KWD_LSQPARENRSQPAREN 		; left/right square bracket ?
.a49d	f0 12		beq $a4b1			beq 	_ICArrayAccess
.a49f	29 c0		and #$c0			and 	#$C0 						; constant (e.g. 10xx xxxx)
.a4a1	c9 80		cmp #$80			cmp 	#$80
.a4a3	b0 01		bcs $a4a6			bcs 	_ICSubscript
.a4a5					_ICExit:
.a4a5	60		rts				rts
.a4a6					_ICSubscript:
.a4a6	b1 00		lda ($00),y			lda 	(codePtr),y
.a4a8	c8		iny				iny 								; skip over subscript
.a4a9	29 3f		and #$3f			and 	#$3F 						; lower 6 bits only.
.a4ab	85 06		sta $06				sta 	zTemp1 						; save in zTemp1
.a4ad	64 07		stz $07				stz 	zTemp1+1
.a4af	80 0c		bra $a4bd			bra 	_ICAddSubscript 			; double and add to value.
.a4b1					_ICArrayAccess:
.a4b1	c8		iny				iny 								; point to next
.a4b2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.a4b5	85 07		sta $07				sta 	zTemp1+1 					; no point in the rest !
.a4b7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a4ba	85 06		sta $06				sta 	zTemp1
.a4bc	ca		dex				dex
.a4bd					_ICAddSubscript:
.a4bd	06 06		asl $06				asl 	zTemp1 						; subscript x 4
.a4bf	26 07		rol $07				rol 	zTemp1+1
.a4c1	06 06		asl $06				asl 	zTemp1
.a4c3	26 07		rol $07				rol 	zTemp1+1
.a4c5	5a		phy				phy
.a4c6	b2 12		lda ($12)			lda 	(idDataAddr)				; check indirecting through 0
.a4c8	a0 01		ldy #$01			ldy 	#1
.a4ca	11 12		ora ($12),y			ora 	(idDataAddr),y 				; probably means uninitialised
.a4cc	c8		iny				iny
.a4cd	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4cf	c8		iny				iny
.a4d0	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4d2	f0 17		beq $a4eb			beq 	_ICZero
.a4d4	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.a4d5	b2 12		lda ($12)			lda 	(idDataAddr)
.a4d7	65 06		adc $06				adc 	zTemp1
.a4d9	48		pha				pha
.a4da	a0 01		ldy #$01			ldy 	#1
.a4dc	b1 12		lda ($12),y			lda 	(idDataAddr),y
.a4de	65 07		adc $07				adc 	zTemp1+1
.a4e0	85 13		sta $13				sta 	idDataAddr+1 				; write it out
.a4e2	68		pla				pla
.a4e3	85 12		sta $12				sta 	idDataAddr
.a4e5	64 14		stz $14				stz 	idDataAddr+2 				; extend to 32 bits
.a4e7	64 15		stz $15				stz 	idDataAddr+3
.a4e9	7a		ply				ply
.a4ea	60		rts				rts
.a4eb					_ICZero:
.a4eb	20 12 a5	jsr $a512			jsr 	ErrorHandler
>a4ee	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>a4f6	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a502					SyntaxError:
.a502	20 12 a5	jsr $a512			jsr 	ErrorHandler
>a505	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a50d	52 52 4f 52 00
.a512					ErrorHandler:
.a512	68		pla				pla 								; pop message address
.a513	85 04		sta $04				sta 	zTemp0
.a515	68		pla				pla
.a516	85 05		sta $05				sta 	zTemp0+1
.a518	a9 05		lda #$05			lda 	#CTH_ERROR
.a51a	20 25 a2	jsr $a225			jsr 	ExternColour
.a51d	a0 01		ldy #$01			ldy 	#1 							; print it
.a51f					_ErrorPrint:
.a51f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a521	20 1b a2	jsr $a21b			jsr		ExternPrint
.a524	c8		iny				iny
.a525	b1 04		lda ($04),y			lda 	(zTemp0),y
.a527	d0 f6		bne $a51f			bne 	_ErrorPrint
.a529	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a52b	b1 00		lda ($00),y			lda		(codePtr),y
.a52d	c8		iny				iny
.a52e	12 00		ora ($00)			ora 	(codePtr)
.a530	f0 1c		beq $a54e			beq 	_ErrorNoLine 				; if so, skip
.a532	a9 20		lda #$20			lda 	#32
.a534	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a537	a9 40		lda #$40			lda 	#'@'
.a539	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a53c	a9 20		lda #$20			lda 	#32
.a53e	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a541	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a543	b1 00		lda ($00),y			lda 	(codePtr),y
.a545	48		pha				pha
.a546	c8		iny				iny
.a547	b1 00		lda ($00),y			lda 	(codePtr),y
.a549	a8		tay				tay
.a54a	68		pla				pla
.a54b	20 56 a5	jsr $a556			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a54e					_ErrorNoLine:
.a54e	a9 0d		lda #$0d			lda 	#13							; new line
.a550	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a553	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a556					ErrorPrint16:
.a556	da		phx				phx
.a557	e8		inx				inx 								; space on stack
.a558	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a55b	98		tya				tya
.a55c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a55f	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a562	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a565	20 7b a5	jsr $a57b			jsr 	IntegerToString 			; convert to string.
.a568	fa		plx				plx
.a569					ErrorPrintIntegerBuffer:
.a569	da		phx				phx
.a56a	a2 00		ldx #$00			ldx 	#0
.a56c					_EP16Loop:
.a56c	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a56f	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a572	e8		inx				inx
.a573	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a576	d0 f4		bne $a56c			bne 	_EP16Loop
.a578	8a		txa				txa
.a579	fa		plx				plx
.a57a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a57b					IntegerToString:
.a57b	48		pha				pha
.a57c	5a		phy				phy
.a57d	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a580	10 08		bpl $a58a			bpl 		_ITSNotMinus
.a582	a9 2d		lda #$2d			lda 		#"-"
.a584	20 1c a6	jsr $a61c			jsr 		ITSOutputCharacter
.a587	20 8d a9	jsr $a98d			jsr 		Unary_Negate
.a58a					_ITSNotMinus:
.a58a	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a58d	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a590	8a		txa				txa 								; use Y for the integer index.
.a591	a8		tay				tay
.a592	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a594					_ITSNextSubtractor:
.a594	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a596	8d 21 08	sta $0821			sta 		NumConvCount
.a599					_ITSSubtract:
.a599	38		sec				sec
.a59a	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a59d	fd f8 a5	sbc $a5f8,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a5a0	48		pha				pha
.a5a1	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a5a4	fd f9 a5	sbc $a5f9,x			sbc 		_ITSSubtractors+1,x
.a5a7	48		pha				pha
.a5a8	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a5ab	fd fa a5	sbc $a5fa,x			sbc 		_ITSSubtractors+2,x
.a5ae	48		pha				pha
.a5af	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a5b2	fd fb a5	sbc $a5fb,x			sbc 		_ITSSubtractors+3,x
.a5b5	90 14		bcc $a5cb			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a5b7	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a5ba	68		pla				pla
.a5bb	99 00 0e	sta $0e00,y			sta 		stack2,y
.a5be	68		pla				pla
.a5bf	99 00 0d	sta $0d00,y			sta 		stack1,y
.a5c2	68		pla				pla
.a5c3	99 00 0c	sta $0c00,y			sta 		stack0,y
.a5c6	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a5c9	80 ce		bra $a599			bra 		_ITSSubtract 			; go round again.
.a5cb					_ITSCantSubtract:
.a5cb	68		pla				pla 								; throw away interim answers
.a5cc	68		pla				pla 								; (the subtraction that failed)
.a5cd	68		pla				pla
.a5ce	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a5d1	c9 30		cmp #$30			cmp 		#"0"
.a5d3	d0 05		bne $a5da			bne 		_ITSOutputDigit
.a5d5	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a5d8	f0 09		beq $a5e3			beq	 		_ITSGoNextSubtractor
.a5da					_ITSOutputDigit:
.a5da	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a5dd	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a5e0	20 1c a6	jsr $a61c			jsr 		ITSOutputCharacter 		; output it.
.a5e3					_ITSGoNextSubtractor:
.a5e3	e8		inx				inx 								; next dword in subtractor table.
.a5e4	e8		inx				inx
.a5e5	e8		inx				inx
.a5e6	e8		inx				inx
.a5e7	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a5e9	d0 a9		bne $a594			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a5eb	98		tya				tya 								; X is back as the mantissa index
.a5ec	aa		tax				tax
.a5ed	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a5f0	09 30		ora #$30			ora 		#"0"
.a5f2	20 1c a6	jsr $a61c			jsr 		ITSOutputCharacter
.a5f5	7a		ply				ply 								; and exit
.a5f6	68		pla				pla
.a5f7	60		rts				rts
.a5f8					_ITSSubtractors:
>a5f8	00 ca 9a 3b					.dword 		1000000000
>a5fc	00 e1 f5 05					.dword 		100000000
>a600	80 96 98 00					.dword 		10000000
>a604	40 42 0f 00					.dword 		1000000
>a608	a0 86 01 00					.dword 		100000
>a60c	10 27 00 00					.dword 		10000
>a610	e8 03 00 00					.dword 		1000
>a614	64 00 00 00					.dword 		100
>a618	0a 00 00 00					.dword 		10
.a61c					_ITSSubtractorsEnd:
.a61c					ITSOutputCharacter:
.a61c	48		pha				pha
.a61d	da		phx				phx
.a61e	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a621	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a624	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a627	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a62a	fa		plx				plx
.a62b	68		pla				pla
.a62c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a62d					IntFromString:
.a62d	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a62f	e8		inx				inx 								; space on stack
.a630	20 63 a6	jsr $a663			jsr 	IFSClearTOS
.a633					_IFSLoop:
.a633	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get next
.a635	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a637	90 24		bcc $a65d			bcc 	_IFSExit
.a639	c9 3a		cmp #$3a			cmp 	#"9"+1
.a63b	b0 20		bcs $a65d			bcs 	_IFSExit
.a63d	20 fe a8	jsr $a8fe			jsr 	Stack_Dup 					; duplicate tos
.a640	20 05 aa	jsr $aa05			jsr 	Unary_Shl	 				; x 2
.a643	20 05 aa	jsr $aa05			jsr 	Unary_Shl 					; x 4
.a646	20 d0 aa	jsr $aad0			jsr 	Stack_Add 					; x 5
.a649	20 05 aa	jsr $aa05			jsr 	Unary_Shl 					; x 10
.a64c	e8		inx				inx  								; create space next up
.a64d	20 63 a6	jsr $a663			jsr 	IFSClearTOS
.a650	b1 04		lda ($04),y			lda 	(zTemp0),y 					; add digit
.a652	29 0f		and #$0f			and 	#15
.a654	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a657	20 d0 aa	jsr $aad0			jsr 	Stack_Add 					; add to tos
.a65a	c8		iny				iny
.a65b	80 d6		bra $a633			bra 	_IFSLoop
.a65d					_IFSExit:
.a65d	98		tya				tya
.a65e	38		sec				sec
.a65f	f0 01		beq $a662			beq 	_IFSSkipFail
.a661	18		clc				clc
.a662					_IFSSkipFail:
.a662	60		rts				rts
.a663					IFSClearTOS:
.a663	9e 00 0c	stz $0c00,x			stz		stack0,x
.a666	9e 00 0d	stz $0d00,x			stz		stack1,x
.a669	9e 00 0e	stz $0e00,x			stz		stack2,x
.a66c	9e 00 0f	stz $0f00,x			stz		stack3,x
.a66f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/list.asm

.a670					Cmd_List:
.a670	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; back to the beginning
.a673	64 08		stz $08				stz 	zTemp2						; clear the lowest-number
.a675	64 09		stz $09				stz 	zTemp2+1
.a677	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.a679	f0 0b		beq $a686			beq 	_CLINone
.a67b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.a67e	85 08		sta $08				sta 	zTemp2
.a680	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a683	95 09		sta $09,x			sta 	zTemp2+1,x
.a685	ca		dex				dex 								; and pop the tos
.a686					_CLINone:
.a686	a9 10		lda #$10			lda 	#16 						; list this many lines
.a688	85 06		sta $06				sta 	zTemp1
.a68a					_CLILoop
.a68a	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a68c	f0 24		beq $a6b2			beq 	_CLIEnd
.a68e	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a690	38		sec				sec
.a691	b1 00		lda ($00),y			lda 	(codePtr),y
.a693	e5 08		sbc $08				sbc 	zTemp2
.a695	c8		iny				iny
.a696	b1 00		lda ($00),y			lda 	(codePtr),y
.a698	e5 09		sbc $09				sbc 	zTemp2+1
.a69a	90 09		bcc $a6a5			bcc 	_CLISkip
.a69c	da		phx				phx
.a69d	20 b5 a6	jsr $a6b5			jsr 	ListCurrent 				; list the line.
.a6a0	fa		plx				plx
.a6a1	c6 06		dec $06				dec 	zTemp1 						; done all lines
.a6a3	f0 0d		beq $a6b2			beq 	_CLIEnd
.a6a5					_CLISkip:
.a6a5	18		clc				clc
.a6a6	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a6a8	65 00		adc $00				adc 	codePtr
.a6aa	85 00		sta $00				sta 	codePtr
.a6ac	90 dc		bcc $a68a			bcc 	_CLILoop
.a6ae	e6 01		inc $01				inc 	codePtr+1
.a6b0	80 d8		bra $a68a			bra 	_CLILoop
.a6b2					_CLIEnd:
.a6b2	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a6b5					ListCurrent:
.a6b5	a9 06		lda #$06			lda 	#CTH_NUMBER
.a6b7	20 25 a2	jsr $a225			jsr 	ExternColour 				; set colour
.a6ba	a0 01		ldy #$01			ldy 	#1							; print line#
.a6bc	b1 00		lda ($00),y			lda 	(codePtr),y
.a6be	48		pha				pha
.a6bf	c8		iny				iny
.a6c0	b1 00		lda ($00),y			lda 	(codePtr),y
.a6c2	a8		tay				tay
.a6c3	68		pla				pla
.a6c4	20 56 a5	jsr $a556			jsr 	ErrorPrint16
.a6c7	a8		tay				tay
.a6c8					_LCPadOut:
.a6c8	a9 20		lda #$20			lda 	#' '
.a6ca	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a6cd	c8		iny				iny
.a6ce	c0 05		cpy #$05			cpy 	#5
.a6d0	d0 f6		bne $a6c8			bne 	_LCPadOut
.a6d2	a0 03		ldy #$03			ldy 	#3 							; start here
.a6d4					_LCLoop:
.a6d4	a9 20		lda #$20			lda 	#' '						; space
.a6d6	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a6d9					_LCLoopNoSpace:
.a6d9	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first
.a6db	30 3e		bmi $a71b			bmi 	_LCIdentConst 				; identifier or constant
.a6dd	d0 05		bne $a6e4			bne 	_LCStringToken
.a6df	a9 0d		lda #$0d			lda 	#13
.a6e1	4c 1b a2	jmp $a21b			jmp 	ExternPrint
.a6e4					_LCStringToken:
.a6e4	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.a6e6	90 0c		bcc $a6f4			bcc		_LCString
.a6e8	20 5c a7	jsr $a75c			jsr 	ListPrintToken
.a6eb	b1 00		lda ($00),y			lda 	(codePtr),y 				; no space if ^
.a6ed	c8		iny				iny 								; advance pointer
.a6ee	c9 49		cmp #$49			cmp 	#KWD_HAT
.a6f0	f0 e7		beq $a6d9			beq 	_LCLoopNoSpace
.a6f2	80 e0		bra $a6d4			bra 	_LCLoop 					; go round again.
.a6f4					_LCString:
.a6f4	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.a6f5	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.a6f7	a2 22		ldx #$22			ldx 	#'"'
.a6f9	b0 04		bcs $a6ff			bcs 	_LCSSkip
.a6fb	a9 07		lda #$07			lda 	#CTH_COMMENT
.a6fd	a2 27		ldx #$27			ldx 	#"'"
.a6ff					_LCSSkip:
.a6ff	20 25 a2	jsr $a225			jsr 	ExternColour 				; set colour
.a702	8a		txa				txa
.a703	48		pha				pha 								; save end quote on stack.
.a704	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a707	c8		iny				iny 								; skip type size
.a708	c8		iny				iny
.a709					_LCSPrint:
.a709	b1 00		lda ($00),y			lda 	(codePtr),y
.a70b	c8		iny				iny
.a70c	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.a70e	f0 05		beq $a715			beq 	_LCSExit
.a710	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a713	80 f4		bra $a709			bra 	_LCSPrint
.a715					_LCSExit:
.a715	68		pla				pla
.a716	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a719	80 b9		bra $a6d4			bra 	_LCLoop
.a71b					_LCIdentConst:
.a71b	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.a71d	90 1e		bcc $a73d			bcc 	_LCConstant
.a71f	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.a721	20 25 a2	jsr $a225			jsr 	ExternColour
.a724					_LCCIdLoop:
.a724	b1 00		lda ($00),y			lda 	(codePtr),y 				; read
.a726	c8		iny				iny
.a727	29 1f		and #$1f			and 	#$1F 						; convert
.a729	18		clc				clc
.a72a	69 41		adc #$41			adc 	#'A'
.a72c	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.a72e	d0 02		bne $a732			bne 	_LCCNotDot
.a730	a9 2e		lda #$2e			lda 	#'.'
.a732					_LCCNotDot:
.a732	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a735	b1 00		lda ($00),y			lda 	(codePtr),y 				; another
.a737	c9 c0		cmp #$c0			cmp 	#$C0
.a739	b0 e9		bcs $a724			bcs 	_LCCIdLoop
.a73b	80 97		bra $a6d4			bra 	_LCLoop
.a73d					_LCConstant:
.a73d	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.a73f	20 25 a2	jsr $a225			jsr 	ExternColour
.a742	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.a744	20 de a2	jsr $a2de			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.a747	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.a74a	48		pha				pha
.a74b	20 7b a5	jsr $a57b			jsr 	IntegerToString 			; this could corrupt stack if full :)
.a74e	20 69 a5	jsr $a569			jsr 	ErrorPrintIntegerBuffer
.a751	68		pla				pla 								; sign back
.a752	10 80		bpl $a6d4			bpl 	_LCLoop
.a754	a9 2d		lda #$2d			lda 	#"-"
.a756	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a759	4c d4 a6	jmp $a6d4			jmp 	_LCLoop
.a75c					ListPrintToken:
.a75c	5a		phy				phy
.a75d	48		pha				pha 								; token colour
.a75e	a9 02		lda #$02			lda 	#CTH_TOKEN
.a760	20 25 a2	jsr $a225			jsr 	ExternColour
.a763	fa		plx				plx
.a764	a9 a5		lda #$a5			lda 	#KeywordText & $FF
.a766	85 04		sta $04				sta 	zTemp0
.a768	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a76a	85 05		sta $05				sta 	zTemp0+1
.a76c					_LPTLoop:
.a76c	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.a76e	f0 0e		beq $a77e			beq 	_LPTFound
.a770	ca		dex				dex
.a771	b2 04		lda ($04)			lda 	(zTemp0)
.a773	38		sec				sec									; add 1, it's length+name
.a774	65 04		adc $04				adc 	zTemp0
.a776	85 04		sta $04				sta 	zTemp0
.a778	90 f2		bcc $a76c			bcc 	_LPTLoop
.a77a	e6 05		inc $05				inc 	zTemp0+1
.a77c	80 ee		bra $a76c			bra 	_LPTLoop
.a77e					_LPTFound:
.a77e	a0 01		ldy #$01			ldy 	#1 							; start here.
.a780					_LPTShow:
.a780	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get character
.a782	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.a784	90 06		bcc $a78c			bcc 	_LPTExit
.a786	c8		iny				iny
.a787	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a78a	80 f4		bra $a780			bra 	_LPTShow
.a78c					_LPTExit:
.a78c	7a		ply				ply
.a78d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a78e					Tokenise:
.a78e	da		phx				phx
.a78f	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a791					_TKSkip:
.a791	c8		iny				iny
.a792					_TKMainLoop:
.a792	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and check end.
.a794	f0 06		beq $a79c			beq 	_TKExit
.a796	c9 20		cmp #$20			cmp 	#" "
.a798	f0 f7		beq $a791			beq 	_TKSkip
.a79a	80 04		bra $a7a0			bra 	_TKNotEnd
.a79c	92 06		sta ($06)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a79e	fa		plx				plx
.a79f	60		rts				rts
.a7a0					_TKNotEnd:
.a7a0	c9 22		cmp #$22			cmp 	#'"'
.a7a2	f0 04		beq $a7a8			beq 	_TKIsQuote
.a7a4	c9 27		cmp #$27			cmp 	#"'"
.a7a6	d0 05		bne $a7ad			bne 	_TKNotQuote
.a7a8					_TKIsQuote:
.a7a8	20 c6 a8	jsr $a8c6			jsr		TOKQuotedString
.a7ab	80 e5		bra $a792			bra 	_TKMainLoop
.a7ad					_TKNotQuote:
.a7ad	98		tya				tya 								; current pos -> zTemp0
.a7ae	18		clc				clc
.a7af	65 00		adc $00				adc 	codePtr
.a7b1	85 04		sta $04				sta 	zTemp0
.a7b3	85 00		sta $00				sta 	codePtr
.a7b5	a5 01		lda $01				lda 	codePtr+1
.a7b7	69 00		adc #$00			adc 	#0
.a7b9	85 05		sta $05				sta 	zTemp0+1
.a7bb	85 01		sta $01				sta 	codePtr+1
.a7bd	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7bf	b1 00		lda ($00),y			lda 	(codePtr),y
.a7c1	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7c3	90 23		bcc $a7e8			bcc 	_TKNotNumber
.a7c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7c7	b0 1f		bcs $a7e8			bcs 	_TKNotNumber
.a7c9	e8		inx				inx
.a7ca	20 2d a6	jsr $a62d			jsr 	IntFromString 				; convert to integer
.a7cd	48		pha				pha
.a7ce	20 9e a8	jsr $a89e			jsr 	TokWriteConstant 			; do constant recursively.
.a7d1	7a		ply				ply
.a7d2	ca		dex				dex
.a7d3	b1 00		lda ($00),y			lda 	(codePtr),y
.a7d5	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7d7	d0 08		bne $a7e1			bne 	_TKIsPositive
.a7d9	c8		iny				iny									; skip it
.a7da	a9 4b		lda #$4b			lda 	#KWD_CONSTANT_MINUS
.a7dc	20 95 a8	jsr $a895			jsr 	TokWriteToken 				; write token out
.a7df	80 b1		bra $a792			bra 	_TKMainLoop 				; loop back.
.a7e1					_TKIsPositive:
.a7e1	a9 4a		lda #$4a			lda 	#KWD_CONSTANT_PLUS
.a7e3	20 95 a8	jsr $a895			jsr 	TokWriteToken 				; write token out
.a7e6	80 aa		bra $a792			bra 	_TKMainLoop 				; loop back.
.a7e8					_TKNotNumber:
.a7e8	a9 a5		lda #$a5			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7ea	85 08		sta $08				sta 	zTemp2
.a7ec	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a7ee	85 09		sta $09				sta 	zTemp2+1
.a7f0	64 0a		stz $0a				stz 	zTemp3 						; clear 'best'
.a7f2	a9 10		lda #$10			lda 	#$10
.a7f4	85 0b		sta $0b				sta 	zTemp3+1 					; set current token
.a7f6					_TKSearch:
.a7f6	a0 00		ldy #$00			ldy 	#0
.a7f8					_TKCompare:
.a7f8	b1 00		lda ($00),y			lda 	(codePtr),y 	 			; get char from buffer
.a7fa	c8		iny				iny
.a7fb	d1 08		cmp ($08),y			cmp 	(zTemp2),y 					; does it match.
.a7fd	d0 07		bne $a806			bne 	_TKNext
.a7ff	98		tya				tya
.a800	d2 08		cmp ($08)			cmp 	(zTemp2) 					; Y = length
.a802	d0 f4		bne $a7f8			bne 	_TKCompare 					; found a match.
.a804	80 13		bra $a819			bra 	_TKFound
.a806	b2 08		lda ($08)	_TKNext:lda 	(zTemp2)					; get length
.a808	38		sec				sec 								; add length+1 to current
.a809	65 08		adc $08				adc 	zTemp2
.a80b	85 08		sta $08				sta 	zTemp2
.a80d	90 02		bcc $a811			bcc 	_TKNNC
.a80f	e6 09		inc $09				inc 	zTemp2+1
.a811	e6 0b		inc $0b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a813	b2 08		lda ($08)			lda 	(zTemp2) 					; reached then end
.a815	d0 df		bne $a7f6			bne 	_TKSearch 					; go try again.
.a817	80 0f		bra $a828			bra 	_TKComplete
.a819					_TKFound:
.a819	98		tya				tya
.a81a	c5 0a		cmp $0a				cmp 	zTemp3 						; check best
.a81c	90 e8		bcc $a806			bcc 	_TKNext 					; if < best try next
.a81e	f0 e6		beq $a806			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a820	85 0a		sta $0a				sta 	zTemp3 						; update best
.a822	a5 0b		lda $0b				lda 	zTemp3+1 					; save current token.
.a824	85 0c		sta $0c				sta 	zTemp4
.a826	80 de		bra $a806			bra 	_TKNext
.a828					_TKComplete:
.a828	a5 0a		lda $0a				lda 	zTemp3 						; get "best score"
.a82a	f0 18		beq $a844			beq		_TKTokenFail 				; if zero no match occurred
.a82c	a4 0a		ldy $0a				ldy 	zTemp3 						; length in Y
.a82e	b2 00		lda ($00)			lda 	(codePtr) 					; look at first character
.a830	20 85 a8	jsr $a885			jsr 	TOKIsIdentifier 			; identifier character
.a833	90 07		bcc $a83c			bcc 	_TKOutput 					; if not, then token is okay
.a835	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at character after
.a837	20 85 a8	jsr $a885			jsr 	TOKIsIdentifier 			; is that an identifier
.a83a	b0 08		bcs $a844			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a83c					_TKOutput:
.a83c	a5 0c		lda $0c				lda 	zTemp4 						; output actual token
.a83e	20 95 a8	jsr $a895			jsr 	TOKWriteToken
.a841	4c 92 a7	jmp $a792			jmp 	_TKMainLoop					; go round again
.a844					_TKTokenFail:
.a844	a0 00		ldy #$00			ldy 	#0
.a846	b2 00		lda ($00)			lda 	(codePtr) 					; is the first an identifier ?
.a848	20 85 a8	jsr $a885			jsr 	TOKIsIdentifier
.a84b	b0 13		bcs $a860			bcs 	_TKCopyIdent 				; if yes copy it
.a84d	20 12 a5	jsr $a512			jsr 	ErrorHandler
>a850	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a858	4f 4b 45 4e 49 53 45 00
.a860					_TKCopyIdent:
.a860	c8		iny				iny 								; get next
.a861	b1 00		lda ($00),y			lda 	(codePtr),y
.a863	20 85 a8	jsr $a885			jsr 	TOKIsIdentifier 			; if identifier
.a866	08		php				php 								; save CS on stack
.a867	88		dey				dey 								; back to character
.a868	b1 00		lda ($00),y			lda 	(codePtr),y 				; get it
.a86a	c8		iny				iny
.a86b	c9 2e		cmp #$2e			cmp 	#"."
.a86d	d0 02		bne $a871			bne 	_TKNotDot
.a86f	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a871					_TKNotDot:
.a871	38		sec				sec
.a872	e9 41		sbc #$41			sbc		#'A'
.a874	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a876	28		plp				plp 								; CS if next is identifier
.a877	08		php				php
.a878	b0 02		bcs $a87c			bcs 	_TKNotLast					; CC if next is not identifier
.a87a	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a87c					_TKNotLast:
.a87c	20 95 a8	jsr $a895			jsr 	TOKWriteToken 				; write out
.a87f	28		plp				plp 								; get test result
.a880	b0 de		bcs $a860			bcs 	_TKCopyIdent 				; get the next identifier.
.a882	4c 92 a7	jmp $a792			jmp 	_TKMainLoop
.a885					TOKIsIdentifier:
.a885	c9 2e		cmp #$2e			cmp 	#"."
.a887	f0 08		beq $a891			beq 	_TIIYes
.a889	c9 41		cmp #$41			cmp 	#"A"
.a88b	90 06		bcc $a893			bcc 	_TIINo
.a88d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a88f	b0 02		bcs $a893			bcs 	_TIINo
.a891					_TIIYes:
.a891	38		sec				sec
.a892	60		rts				rts
.a893					_TIINo:
.a893	18		clc				clc
.a894	60		rts				rts
.a895					TokWriteToken:
.a895	92 06		sta ($06)			sta 	(zTemp1)
.a897	e6 06		inc $06				inc 	zTemp1
.a899	d0 02		bne $a89d			bne 	_TWTExit
.a89b	e6 07		inc $07				inc 	zTemp1+1
.a89d					_TWTExit:
.a89d	60		rts				rts
.a89e					TokWriteConstant:
.a89e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8a1	29 3f		and #$3f			and		#63
.a8a3	48		pha				pha 								; save on stack
.a8a4	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8a7	29 c0		and #$c0			and 	#$C0
.a8a9	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8ac	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8af	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8b2	f0 0d		beq $a8c1			beq 	_TWCNoCall 					; no, don't call.
.a8b4	5a		phy				phy
.a8b5	a0 06		ldy #$06			ldy 	#6
.a8b7					_TWCShift:
.a8b7	20 12 aa	jsr $aa12			jsr 	Unary_Shr
.a8ba	88		dey				dey
.a8bb	d0 fa		bne $a8b7			bne 	_TWCShift
.a8bd	7a		ply				ply
.a8be	20 9e a8	jsr $a89e			jsr 	TokWriteConstant
.a8c1					_TWCNoCall:
.a8c1	68		pla				pla
.a8c2	09 80		ora #$80			ora 	#$80						; make digit token
.a8c4	80 cf		bra $a895			bra 	TokWriteToken 				; and write it out.
.a8c6					TokQuotedString:
.a8c6	85 08		sta $08				sta 	zTemp2 						; save quote
.a8c8	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8ca	f0 02		beq $a8ce			beq 	_TQDouble
.a8cc	a9 01		lda #$01			lda 	#1
.a8ce					_TQDouble:
.a8ce	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8cf	20 95 a8	jsr $a895			jsr 	TOKWriteToken 				; write out
.a8d2	a5 06		lda $06				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8d4	85 0a		sta $0a				sta 	zTemp3
.a8d6	a5 07		lda $07				lda 	zTemp1+1
.a8d8	85 0b		sta $0b				sta 	zTemp3+1
.a8da	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8dc	20 95 a8	jsr $a895			jsr 	TOKWriteToken
.a8df					_TQLoop:
.a8df	c8		iny				iny 								; next character
.a8e0	b1 00		lda ($00),y			lda 	(codePtr),y
.a8e2	f0 0f		beq $a8f3			beq 	_TQExit 					; if zero exit
.a8e4	c5 08		cmp $08				cmp 	zTemp2 						; matching quote
.a8e6	f0 0a		beq $a8f2			beq 	_TQSkipExit 				; skip it and exit
.a8e8	20 95 a8	jsr $a895			jsr 	TOKWriteToken 				; write out
.a8eb	b2 0a		lda ($0a)			lda 	(zTemp3)					; inc char count
.a8ed	1a		inc a				inc 	a
.a8ee	92 0a		sta ($0a)			sta 	(zTemp3)
.a8f0	80 ed		bra $a8df			bra 	_TQLoop						; go round
.a8f2					_TQSkipExit:
.a8f2	c8		iny				iny
.a8f3					_TQExit:
.a8f3	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8f5	20 95 a8	jsr $a895			jsr 	TOKWriteToken
.a8f8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a8f9					Stack_Empty:
.a8f9	a2 00		ldx #$00			ldx 	#0
.a8fb	60		rts				rts
.a8fc					Stack_Drop:
.a8fc	ca		dex				dex
.a8fd	60		rts				rts
.a8fe					Stack_Dup:
.a8fe	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.a901	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a904	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a907	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a90a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a90d	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a910	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a913	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a916	e8		inx				inx 								; bump stack pointer
.a917	60		rts				rts
.a918					Stack_Nip:
.a918	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.a91b	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a91e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a921	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a924	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a927	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a92a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a92d	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a930	ca		dex				dex 								; drop tos
.a931	60		rts				rts
.a932					Stack_Over:
.a932	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.a935	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a938	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a93b	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a93e	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a941	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a944	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a947	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a94a	e8		inx				inx 							; bump stack pointer
.a94b	60		rts				rts
.a94c					Stack_Swap:
.a94c	5a		phy				phy
.a94d	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a950	a8		tay				tay
.a951	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.a954	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a957	98		tya				tya
.a958	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a95b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a95e	a8		tay				tay
.a95f	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a962	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a965	98		tya				tya
.a966	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a969	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a96c	a8		tay				tay
.a96d	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a970	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a973	98		tya				tya
.a974	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a977	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a97a	a8		tay				tay
.a97b	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a97e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a981	98		tya				tya
.a982	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a985	7a		ply				ply
.a986	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.a987					Unary_Absolute:
.a987	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a98a	30 01		bmi $a98d			bmi 	Unary_Negate
.a98c	60		rts				rts
.a98d					Unary_Negate:
.a98d	38		sec				sec
.a98e	a9 00		lda #$00			lda		#0
.a990	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a993	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a996	a9 00		lda #$00			lda		#0
.a998	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a99b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a99e	a9 00		lda #$00			lda		#0
.a9a0	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a9a3	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9a6	a9 00		lda #$00			lda		#0
.a9a8	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a9ab	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a9ae	60		rts				rts
.a9af					Unary_Not:
.a9af	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a9b2	49 ff		eor #$ff			eor 	#$FF
.a9b4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a9b7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a9ba	49 ff		eor #$ff			eor 	#$FF
.a9bc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a9bf	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a9c2	49 ff		eor #$ff			eor 	#$FF
.a9c4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9c7	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a9ca	49 ff		eor #$ff			eor 	#$FF
.a9cc	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a9cf	60		rts				rts
.a9d0					Unary_Increment:
.a9d0	fe 00 0c	inc $0c00,x			inc 	stack0,x
.a9d3	d0 0d		bne $a9e2			bne 	_UIExit
.a9d5	fe 00 0d	inc $0d00,x			inc 	stack1,x
.a9d8	d0 08		bne $a9e2			bne 	_UIExit
.a9da	fe 00 0e	inc $0e00,x			inc 	stack2,x
.a9dd	d0 03		bne $a9e2			bne 	_UIExit
.a9df	fe 00 0f	inc $0f00,x			inc 	stack3,x
.a9e2					_UIExit:
.a9e2	60		rts				rts
.a9e3					Unary_Decrement:
.a9e3	38		sec				sec
.a9e4	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a9e7	e9 01		sbc #$01			sbc 	#1
.a9e9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a9ec	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a9ef	e9 00		sbc #$00			sbc 	#0
.a9f1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a9f4	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a9f7	e9 00		sbc #$00			sbc 	#0
.a9f9	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9fc	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a9ff	e9 00		sbc #$00			sbc 	#0
.aa01	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa04	60		rts				rts
.aa05					Unary_Shl:
.aa05	1e 00 0c	asl $0c00,x			asl 	stack0,x
.aa08	3e 00 0d	rol $0d00,x			rol 	stack1,x
.aa0b	3e 00 0e	rol $0e00,x			rol 	stack2,x
.aa0e	3e 00 0f	rol $0f00,x			rol 	stack3,x
.aa11	60		rts				rts
.aa12					Unary_Shr:
.aa12	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.aa15	7e 00 0e	ror $0e00,x			ror 	stack2,x
.aa18	7e 00 0d	ror $0d00,x			ror 	stack1,x
.aa1b	7e 00 0c	ror $0c00,x			ror 	stack0,x
.aa1e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.aa1f					Mem_Peek:
.aa1f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa22	85 04		sta $04				sta 	zTemp0
.aa24	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa27	85 05		sta $05				sta 	zTemp0+1
.aa29	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa2b	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa2e	9e 00 0d	stz $0d00,x			stz 	stack1,x
.aa31	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aa34	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aa37	60		rts				rts
.aa38					Mem_WPeek:
.aa38	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa3b	85 04		sta $04				sta 	zTemp0
.aa3d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa40	85 05		sta $05				sta 	zTemp0+1
.aa42	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa44	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa47	5a		phy				phy 								; read msb
.aa48	a0 01		ldy #$01			ldy 	#1
.aa4a	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa4c	7a		ply				ply
.aa4d	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.aa50	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aa53	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aa56	60		rts				rts
.aa57					Mem_DPeek:
.aa57	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa5a	85 04		sta $04				sta 	zTemp0
.aa5c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa5f	85 05		sta $05				sta 	zTemp0+1
.aa61	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.aa63	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.aa66	5a		phy				phy 								; read msb
.aa67	a0 01		ldy #$01			ldy 	#1
.aa69	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa6b	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.aa6e	c8		iny				iny
.aa6f	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa71	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa74	c8		iny				iny
.aa75	b1 04		lda ($04),y			lda 	(zTemp0),y
.aa77	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa7a	7a		ply				ply
.aa7b	60		rts				rts
.aa7c					Mem_Poke:
.aa7c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa7f	85 04		sta $04				sta 	zTemp0
.aa81	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa84	85 05		sta $05				sta 	zTemp0+1
.aa86	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aa89	92 04		sta ($04)			sta 	(zTemp0)
.aa8b	ca		dex				dex
.aa8c	ca		dex				dex
.aa8d	60		rts				rts
.aa8e					Mem_WPoke:
.aa8e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aa91	85 04		sta $04				sta 	zTemp0
.aa93	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa96	85 05		sta $05				sta 	zTemp0+1
.aa98	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aa9b	92 04		sta ($04)			sta 	(zTemp0)
.aa9d	5a		phy				phy
.aa9e	a0 01		ldy #$01			ldy 	#1
.aaa0	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.aaa3	91 04		sta ($04),y			sta 	(zTemp0),y
.aaa5	7a		ply				ply
.aaa6	ca		dex				dex
.aaa7	ca		dex				dex
.aaa8	60		rts				rts
.aaa9					Mem_DPoke:
.aaa9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.aaac	85 04		sta $04				sta 	zTemp0
.aaae	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aab1	85 05		sta $05				sta 	zTemp0+1
.aab3	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.aab6	92 04		sta ($04)			sta 	(zTemp0)
.aab8	5a		phy				phy
.aab9	a0 01		ldy #$01			ldy 	#1
.aabb	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aabe	91 04		sta ($04),y			sta 	(zTemp0),y
.aac0	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aac3	c8		iny				iny
.aac4	91 04		sta ($04),y			sta 	(zTemp0),y
.aac6	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aac9	c8		iny				iny
.aaca	91 04		sta ($04),y			sta 	(zTemp0),y
.aacc	7a		ply				ply
.aacd	ca		dex				dex
.aace	ca		dex				dex
.aacf	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.aad0					Stack_Add:
.aad0	ca		dex				dex
.aad1					Stack_Add_No_Dex:
.aad1	18		clc				clc
.aad2	bd 00 0c	lda $0c00,x			lda		stack0,x
.aad5	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.aad8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aadb	bd 00 0d	lda $0d00,x			lda		stack1,x
.aade	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.aae1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aae4	bd 00 0e	lda $0e00,x			lda		stack2,x
.aae7	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.aaea	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaed	bd 00 0f	lda $0f00,x			lda		stack3,x
.aaf0	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.aaf3	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aaf6	60		rts				rts
.aaf7					Stack_Sub:
.aaf7	ca		dex				dex
.aaf8	38		sec				sec
.aaf9	bd 00 0c	lda $0c00,x			lda		stack0,x
.aafc	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.aaff	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab02	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab05	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ab08	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab0b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab0e	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ab11	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab14	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab17	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ab1a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab1d	60		rts				rts
.ab1e					Stack_And:
.ab1e	ca		dex				dex
.ab1f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab22	3d 01 0c	and $0c01,x			and		stack0+1,x
.ab25	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab28	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab2b	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ab2e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab31	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab34	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ab37	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab3a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab3d	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ab40	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab43	60		rts				rts
.ab44					Stack_Xor:
.ab44	ca		dex				dex
.ab45	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab48	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ab4b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab4e	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab51	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ab54	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab57	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab5a	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ab5d	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab60	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab63	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ab66	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab69	60		rts				rts
.ab6a					Stack_Or:
.ab6a	ca		dex				dex
.ab6b	bd 00 0c	lda $0c00,x			lda		stack0,x
.ab6e	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ab71	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab74	bd 00 0d	lda $0d00,x			lda		stack1,x
.ab77	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ab7a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab7d	bd 00 0e	lda $0e00,x			lda		stack2,x
.ab80	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ab83	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab86	bd 00 0f	lda $0f00,x			lda		stack3,x
.ab89	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ab8c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab8f	60		rts				rts
.ab90					Stack_Shl:
.ab90	38		sec				sec
.ab91	80 01		bra $ab94			bra 	StackShift
.ab93					Stack_Shr:
.ab93	18		clc				clc
.ab94					StackShift:
.ab94	08		php				php
.ab95	ca		dex				dex
.ab96	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.ab99	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.ab9b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ab9e	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.aba1	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aba4	d0 13		bne $abb9			bne 	_SSZero
.aba6					_SSLoop:
.aba6	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.aba9	30 1a		bmi $abc5			bmi 	_SSDone 					; completed ?
.abab	28		plp				plp 								; restore flag
.abac	08		php				php
.abad	b0 05		bcs $abb4			bcs 	_SSLeft 					; do either shift.
.abaf	20 12 aa	jsr $aa12			jsr 	Unary_Shr
.abb2	80 f2		bra $aba6			bra 	_SSLoop
.abb4					_SSLeft:
.abb4	20 05 aa	jsr $aa05			jsr 	Unary_Shl
.abb7	80 ed		bra $aba6			bra 	_SSLoop
.abb9					_SSZero:
.abb9	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.abbc	9e 00 0d	stz $0d00,x			stz 	stack1,x
.abbf	9e 00 0e	stz $0e00,x			stz 	stack2,x
.abc2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.abc5					_SSDone:
.abc5	28		plp				plp 								; throw flag.
.abc6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.abc7					MulInteger32:
.abc7	ca		dex				dex
.abc8	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.abcb	85 0e		sta $0e				sta 	zLTemp1
.abcd	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abd0	85 0f		sta $0f				sta 	zLTemp1+1
.abd2	bd 00 0e	lda $0e00,x			lda 	stack2,x
.abd5	85 10		sta $10				sta 	zLTemp1+2
.abd7	bd 00 0f	lda $0f00,x			lda 	stack3,x
.abda	85 11		sta $11				sta 	zLTemp1+3
.abdc	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.abdf	9e 00 0d	stz $0d00,x			stz 	stack1,x
.abe2	9e 00 0e	stz $0e00,x			stz 	stack2,x
.abe5	9e 00 0f	stz $0f00,x			stz 	stack3,x
.abe8					_BFMMultiply:
.abe8	a5 0e		lda $0e				lda 	zLTemp1 					; get LSBit of 8-11
.abea	29 01		and #$01			and 	#1
.abec	f0 03		beq $abf1			beq 	_BFMNoAdd
.abee	20 d1 aa	jsr $aad1			jsr 	Stack_Add_No_Dex 			; co-opt this code
.abf1					_BFMNoAdd:
.abf1	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.abf4	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.abf7	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.abfa	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.abfd	46 11		lsr $11				lsr 	zLTemp1+3 					; shift +8 right
.abff	66 10		ror $10				ror 	zLTemp1+2
.ac01	66 0f		ror $0f				ror 	zLTemp1+1
.ac03	66 0e		ror $0e				ror 	zLTemp1
.ac05	a5 0e		lda $0e				lda 	zLTemp1 					; continue if +8 is nonzero
.ac07	05 0f		ora $0f				ora 	zLTemp1+1
.ac09	05 10		ora $10				ora 	zLTemp1+2
.ac0b	05 11		ora $11				ora 	zLTemp1+3
.ac0d	d0 d9		bne $abe8			bne 	_BFMMultiply
.ac0f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ac10					DivInteger32:
.ac10	ca		dex				dex
.ac11	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ac14	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac17	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac1a	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac1d	d0 14		bne $ac33			bne 	_BFDOkay
.ac1f	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ac22	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ac2a	20 42 59 20 5a 45 52 4f 00
.ac33					_BFDOkay:
.ac33	64 0e		stz $0e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ac35	64 0f		stz $0f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ac37	64 10		stz $10				stz 	zLTemp1+2
.ac39	64 11		stz $11				stz 	zLTemp1+3
.ac3b	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ac3e	20 99 ac	jsr $ac99			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ac41	e8		inx				inx
.ac42	20 99 ac	jsr $ac99			jsr 	CheckIntegerNegate
.ac45	ca		dex				dex
.ac46	5a		phy				phy 								; Y is the counter
.ac47	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ac49					_BFDLoop:
.ac49	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ac4c	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ac4f	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ac52	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ac55	26 0e		rol $0e				rol 	zLTemp1
.ac57	26 0f		rol $0f				rol 	zLTemp1+1
.ac59	26 10		rol $10				rol 	zLTemp1+2
.ac5b	26 11		rol $11				rol 	zLTemp1+3
.ac5d	38		sec				sec
.ac5e	a5 0e		lda $0e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ac60	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac63	48		pha				pha
.ac64	a5 0f		lda $0f				lda 	zLTemp1+1
.ac66	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac69	48		pha				pha
.ac6a	a5 10		lda $10				lda 	zLTemp1+2
.ac6c	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac6f	48		pha				pha
.ac70	a5 11		lda $11				lda 	zLTemp1+3
.ac72	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac75	90 15		bcc $ac8c			bcc 	_BFDNoAdd
.ac77	85 11		sta $11				sta 	zLTemp1+3 					; update A
.ac79	68		pla				pla
.ac7a	85 10		sta $10				sta 	zLTemp1+2
.ac7c	68		pla				pla
.ac7d	85 0f		sta $0f				sta 	zLTemp1+1
.ac7f	68		pla				pla
.ac80	85 0e		sta $0e				sta 	zLTemp1+0
.ac82	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ac85	09 01		ora #$01			ora 	#1
.ac87	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac8a	80 03		bra $ac8f			bra 	_BFDNext
.ac8c					_BFDNoAdd:
.ac8c	68		pla				pla 								; Throw away the intermediate calculations
.ac8d	68		pla				pla
.ac8e	68		pla				pla
.ac8f					_BFDNext:
.ac8f	88		dey				dey
.ac90	d0 b7		bne $ac49			bne 	_BFDLoop
.ac92	7a		ply				ply 								; restore Y
.ac93	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ac96	b0 07		bcs $ac9f			bcs		IntegerNegateAlways 		; negate the result
.ac98	60		rts				rts
.ac99					CheckIntegerNegate:
.ac99	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ac9c	30 01		bmi $ac9f			bmi 	IntegerNegateAlways 		; if so negate it
.ac9e	60		rts				rts
.ac9f					IntegerNegateAlways:
.ac9f	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.aca2	4c 8d a9	jmp $a98d			jmp 	Unary_Negate
.aca5					ModInteger32:
.aca5	20 10 ac	jsr $ac10			jsr 	DivInteger32
.aca8	a5 0e		lda $0e				lda 	zLTemp1
.acaa	9d 00 0c	sta $0c00,x			sta 	stack0,x
.acad	a5 0f		lda $0f				lda 	zLTemp1+1
.acaf	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acb2	a5 10		lda $10				lda 	zLTemp1+2
.acb4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acb7	a5 11		lda $11				lda 	zLTemp1+3
.acb9	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acbc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.acbd					Comp_Equal:
.acbd	38		sec				sec
.acbe	80 01		bra $acc1			bra 	Comp_CheckEqual
.acc0					Comp_NotEqual:
.acc0	18		clc				clc
.acc1					Comp_CheckEqual:
.acc1	08		php				php
.acc2	ca		dex				dex
.acc3	bd 00 0c	lda $0c00,x			lda		stack0,x
.acc6	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.acc9	d0 16		bne $ace1			bne 	_CCENonZero
.accb	bd 00 0d	lda $0d00,x			lda		stack1,x
.acce	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.acd1	d0 0e		bne $ace1			bne 	_CCENonZero
.acd3	bd 00 0e	lda $0e00,x			lda		stack2,x
.acd6	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.acd9	d0 06		bne $ace1			bne 	_CCENonZero
.acdb	bd 00 0f	lda $0f00,x			lda		stack3,x
.acde	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ace1					_CCENonZero:
.ace1	f0 02		beq $ace5			beq 	_CCENotSet
.ace3	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ace5					_CCENotSet:
.ace5					CompCheckFlip:
.ace5	28		plp				plp 								; if carry set, we want $FF if equal
.ace6	90 02		bcc $acea			bcc 	CompReturn
.ace8	49 ff		eor #$ff			eor 	#$FF
.acea					CompReturn:
.acea	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.aced	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acf0	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acf3	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acf6	60		rts				rts
.acf7					Comp_Less:
.acf7	18		clc				clc
.acf8	80 01		bra $acfb			bra 	Comp_LessCont
.acfa					Comp_GreaterEqual:
.acfa	38		sec				sec
.acfb					Comp_LessCont:
.acfb	08		php				php
.acfc	ca		dex				dex
.acfd	38		sec				sec
.acfe	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ad01	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad04	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ad07	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad0a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ad0d	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad10	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ad13	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad16	50 02		bvc $ad1a			bvc 	_CLNoFlip 					; unsigned -> signed
.ad18	49 80		eor #$80			eor 	#$80
.ad1a					_CLNoFlip:
.ad1a	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ad1c	f0 c7		beq $ace5			beq 	CompCheckFlip
.ad1e	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ad20	80 c3		bra $ace5			bra 	CompCheckFlip
.ad22					Comp_LessEqual:
.ad22	38		sec				sec
.ad23	80 01		bra $ad26			bra 	Comp_LessEqualCont
.ad25					Comp_Greater:
.ad25	18		clc				clc
.ad26					Comp_LessEqualCont:
.ad26	08		php				php
.ad27	ca		dex				dex
.ad28	38		sec				sec
.ad29	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ad2c	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ad2f	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ad32	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ad35	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ad38	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ad3b	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ad3e	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ad41	50 02		bvc $ad45			bvc 	_CLENoFlip 					; unsigned -> signed
.ad43	49 80		eor #$80			eor 	#$80
.ad45					_CLENoFlip:
.ad45	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ad47	f0 9c		beq $ace5			beq 	CompCheckFlip
.ad49	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ad4b	80 98		bra $ace5			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.ad4d					System_RUN:
.ad4d	20 15 a4	jsr $a415			jsr		ResetForRun 				; clear vars, stacks etc.
.ad50	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; point to first thing to do.
.ad53	4c 77 a2	jmp $a277			jmp 	Execute						; and run
.ad56					System_END:
.ad56	4c 1a a0	jmp $a01a			jmp 	WarmStart
.ad59					System_STOP:
.ad59	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ad5c	53 54 4f 50 00					.text 	"STOP",0
.ad61					System_Assert:
.ad61	ca		dex				dex
.ad62	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.ad65	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad68	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.ad6b	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.ad6e	d0 0a		bne $ad7a			bne 	_SAOkay
.ad70	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ad73	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ad7a	60		rts		_SAOkay:rts
.ad7b					System_New:
.ad7b	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.ad7e	20 15 a4	jsr $a415			jsr		ResetForRun 				; clear vars, stacks etc.
.ad81	4c 1a a0	jmp $a01a			jmp 	WarmStart
.ad84					System_Old:
.ad84	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; start of first line.
.ad87					_SOFindZero:
.ad87	b1 00		lda ($00),y			lda 	(codePtr),y 				; look for trailing $00
.ad89	f0 15		beq $ada0			beq 	_SOFoundEnd
.ad8b	c8		iny				iny
.ad8c	d0 f9		bne $ad87			bne 	_SOFindZero
.ad8e	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ad91	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>ad99	45 43 4f 56 45 52 00
.ada0					_SOFoundEnd:
.ada0	c8		iny				iny 								; update the offset
.ada1	8c 00 11	sty $1100			sty 	ProgramStart
.ada4	20 15 a4	jsr $a415			jsr 	ResetForRun 				; redo all stacks etc.
.ada7	60		rts				rts
.ada8					System_Sys:
.ada8	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.adab	85 04		sta $04				sta 	zTemp0
.adad	bd 00 0d	lda $0d00,x			lda 	stack1,x
.adb0	85 05		sta $05				sta 	zTemp0+1
.adb2	ca		dex				dex
.adb3	da		phx				phx
.adb4	5a		phy				phy
.adb5	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.adb8	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.adbb	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.adbe	20 cd ad	jsr $adcd			jsr 	_SSCall 					; effectively jsr (zTemp)
.adc1	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.adc4	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.adc7	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.adca	7a		ply				ply
.adcb	fa		plx				plx
.adcc	60		rts				rts
.adcd	6c 04 00	jmp ($0004)	_SSCall:jmp 	(zTemp0)
.add0					System_ShowStack:
.add0	da		phx				phx 								; save stack
.add1	5a		phy				phy
.add2	86 08		stx $08				stx 	zTemp2 						; save old TOS
.add4	a9 5b		lda #$5b			lda 	#"["
.add6	20 1b a2	jsr $a21b			jsr 	ExternPrint
.add9	e0 00		cpx #$00			cpx 	#0 							; empty
.addb	f0 14		beq $adf1			beq 	_SSEnd
.addd	a2 01		ldx #$01			ldx 	#1 							; start here
.addf					_SSLoop:
.addf	20 7b a5	jsr $a57b			jsr 	IntegerToString 			; print TOS
.ade2	20 69 a5	jsr $a569			jsr 	ErrorPrintIntegerBuffer
.ade5	e4 08		cpx $08				cpx 	zTemp2 						; done TOS exit
.ade7	f0 08		beq $adf1			beq 	_SSEnd
.ade9	e8		inx				inx	 								; advance pointer print ,
.adea	a9 2c		lda #$2c			lda 	#','
.adec	20 1b a2	jsr $a21b			jsr 	ExternPrint
.adef	80 ee		bra $addf			bra 	_SSLoop
.adf1					_SSEnd:
.adf1	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.adf3	20 1b a2	jsr $a21b			jsr 	ExternPrint
.adf6	a9 0d		lda #$0d			lda 	#13
.adf8	20 1b a2	jsr $a21b			jsr 	ExternPrint
.adfb	7a		ply				ply
.adfc	fa		plx				plx
.adfd	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.adfe					Identifier:
.adfe	88		dey				dey 								; wind back to identifier start
.adff	20 30 a3	jsr $a330			jsr 	IdentifierSearch 			; try to find it.
.ae02	90 2d		bcc $ae31			bcc 	_IDUnknown 					; not known, give up.
.ae04	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ae06	d0 3d		bne $ae45			bne 	IDTypeError
.ae08	c8		iny		_IDSkip:iny
.ae09	b1 00		lda ($00),y			lda 	(codePtr),y
.ae0b	c9 c0		cmp #$c0			cmp 	#$C0
.ae0d	b0 f9		bcs $ae08			bcs 	_IDSkip
.ae0f	20 99 a4	jsr $a499			jsr 	IndexCheck 					; check index/subscript
.ae12	5a		phy				phy
.ae13	e8		inx				inx 								; make space on stack
.ae14	a0 00		ldy #$00			ldy 	#0 							; copy it back
.ae16	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae18	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae1b	c8		iny				iny
.ae1c	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae1e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae21	c8		iny				iny
.ae22	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae24	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae27	c8		iny				iny
.ae28	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ae2a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae2d	7a		ply				ply
.ae2e	4c 77 a2	jmp $a277			jmp 	Execute
.ae31					_IDUnknown:
.ae31	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ae34	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>ae3c	56 41 52 49 41 42 4c 45 00
.ae45					IDTypeError:
.ae45	20 12 a5	jsr $a512			jsr 	ErrorHandler
>ae48	4d 49 53 53 49 4e 47 20				.text 	"MISSING VARIABLE",0
>ae50	56 41 52 49 41 42 4c 45 00
.ae59					WriteVariable:
.ae59	b1 00		lda ($00),y			lda 	(codePtr),y 				; check variable
.ae5b	c9 c0		cmp #$c0			cmp 	#$C0
.ae5d	90 e6		bcc $ae45			bcc 	IDTypeError
.ae5f	20 30 a3	jsr $a330			jsr 	IdentifierSearch 			; does it exist
.ae62	90 06		bcc $ae6a			bcc 	_WVNoIdentifier
.ae64	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ae66	f0 12		beq $ae7a			beq 	_WVWriteTOS 				; if so write TOS to it.
.ae68	80 db		bra $ae45			bra 	IDTypeError 				; not, then can't do anything.
.ae6a					_WVNoIdentifier:
.ae6a	5a		phy				phy 								; get current line number
.ae6b	a0 01		ldy #$01			ldy 	#1
.ae6d	b1 00		lda ($00),y			lda 	(codePtr),y
.ae6f	c8		iny				iny
.ae70	11 00		ora ($00),y			ora 	(codePtr),y
.ae72	7a		ply				ply
.ae73	f0 2d		beq $aea2			beq 	_WVCantCreate 				; if zero (command line) no new vars
.ae75	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.ae77	20 97 a3	jsr $a397			jsr 	IdentifierCreate 			; try to find it
.ae7a					_WVWriteTOS:
.ae7a	88		dey				dey 								; skip over identifier.
.ae7b					_WVSkipIdentifier:
.ae7b	c8		iny				iny
.ae7c	b1 00		lda ($00),y			lda 	(codePtr),y
.ae7e	c9 c0		cmp #$c0			cmp 	#$C0
.ae80	b0 f9		bcs $ae7b			bcs 	_WVSkipIdentifier
.ae82	20 99 a4	jsr $a499			jsr 	IndexCheck 					; check index/subscript
.ae85	5a		phy				phy									; copy TOS in
.ae86	a0 00		ldy #$00			ldy 	#0
.ae88	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ae8b	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae8d	c8		iny				iny
.ae8e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae91	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae93	c8		iny				iny
.ae94	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae97	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae99	c8		iny				iny
.ae9a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae9d	91 12		sta ($12),y			sta 	(idDataAddr),y
.ae9f	7a		ply				ply
.aea0	ca		dex				dex 								; drop
.aea1	60		rts				rts									; go back and execute again.
.aea2					_WVCantCreate:
.aea2	20 12 a5	jsr $a512			jsr 	ErrorHandler
>aea5	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>aead	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.aebc					Command_For:
.aebc	20 c1 af	jsr $afc1			jsr 	StructPushCurrent 			; push current on the stack.
.aebf	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.aec2	1d 00 0d	ora $0d00,x			ora 	stack1,x
.aec5	1d 00 0e	ora $0e00,x			ora 	stack2,x
.aec8	1d 00 0f	ora $0f00,x			ora 	stack3,x
.aecb	f0 34		beq $af01			beq 	_CFZero
.aecd	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.aed0	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.aed2	c6 02		dec $02				dec 	StructSP
.aed4	92 02		sta ($02)			sta 	(StructSP)
.aed6	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aed9	49 ff		eor #$ff			eor 	#$FF
.aedb	c6 02		dec $02				dec 	StructSP
.aedd	92 02		sta ($02)			sta 	(StructSP)
.aedf	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aee2	49 ff		eor #$ff			eor 	#$FF
.aee4	c6 02		dec $02				dec 	StructSP
.aee6	92 02		sta ($02)			sta 	(StructSP)
.aee8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aeeb	49 ff		eor #$ff			eor 	#$FF
.aeed	c6 02		dec $02				dec 	StructSP
.aeef	92 02		sta ($02)			sta 	(StructSP)
.aef1	ca		dex				dex 								; pop stack value
.aef2	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.aef4	c6 02		dec $02				dec 	StructSP
.aef6	92 02		sta ($02)			sta 	(StructSP)
.aef8	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.aefa	85 14		sta $14				sta 	ForAddr
.aefc	a5 03		lda $03				lda 	StructSP+1
.aefe	85 15		sta $15				sta 	ForAddr+1
.af00	60		rts				rts
.af01					_CFZero:
.af01	20 12 a5	jsr $a512			jsr 	ErrorHandler
>af04	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>af0c	54 20 5a 45 52 4f 00
.af13					Command_Next:
.af13	b2 02		lda ($02)			lda 	(StructSP)					; check it's FOR.
.af15	c9 46		cmp #$46			cmp 	#STM_FOR
.af17	d0 30		bne $af49			bne 	_CNNoFor
.af19	5a		phy				phy
.af1a	a0 00		ldy #$00			ldy 	#0
.af1c					_CNIncrement:
.af1c	c8		iny				iny
.af1d	b1 02		lda ($02),y			lda 	(StructSP),y 				; increment the index
.af1f	1a		inc a				inc 	a
.af20	91 02		sta ($02),y			sta 	(StructSP),y
.af22	f0 f8		beq $af1c			beq		_CNIncrement 				; carry out.
.af24	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.af26	b1 02		lda ($02),y			lda 	(StructSP),y 				; on the last time round they
.af28	c8		iny				iny 								; will all be $FF
.af29	31 02		and ($02),y			and 	(StructSP),y
.af2b	c8		iny				iny
.af2c	31 02		and ($02),y			and 	(StructSP),y
.af2e	c8		iny				iny
.af2f	31 02		and ($02),y			and 	(StructSP),y
.af31	7a		ply				ply 								; restore Y
.af32	1a		inc a				inc 	a 							; so this will be zero last time round
.af33	d0 06		bne $af3b			bne 	_CNLoop 					; loop back if non-zero
.af35	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.af37	20 bb af	jsr $afbb			jsr 	StructPopCount
.af3a	60		rts				rts
.af3b					_CNLoop:
.af3b	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.af3d	85 14		sta $14				sta 	ForAddr
.af3f	a5 03		lda $03				lda 	StructSP+1
.af41	85 15		sta $15				sta 	ForAddr+1
.af43	a0 05		ldy #$05			ldy 	#5 							; restore the position
.af45	20 d9 af	jsr $afd9			jsr 	StructPopCurrent
.af48	60		rts				rts
.af49					_CNNoFor:
.af49	20 12 a5	jsr $a512			jsr 	ErrorHandler
>af4c	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>af54	46 4f 52 00
.af58					Command_Index:
.af58	5a		phy				phy
.af59	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.af5b	e8		inx				inx
.af5c	38		sec				sec
.af5d	a9 fe		lda #$fe			lda 	#$FE
.af5f	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af61	9d 00 0c	sta $0c00,x			sta 	stack0,x
.af64	c8		iny				iny
.af65	a9 ff		lda #$ff			lda 	#$FF
.af67	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af69	9d 00 0d	sta $0d00,x			sta 	stack1,x
.af6c	c8		iny				iny
.af6d	a9 ff		lda #$ff			lda 	#$FF
.af6f	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af71	9d 00 0e	sta $0e00,x			sta 	stack2,x
.af74	c8		iny				iny
.af75	a9 ff		lda #$ff			lda 	#$FF
.af77	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.af79	9d 00 0f	sta $0f00,x			sta 	stack3,x
.af7c	7a		ply				ply
.af7d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.af7e					Command_Repeat:
.af7e	20 c1 af	jsr $afc1			jsr 	StructPushCurrent 			; push current on the stack.
.af81	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.af83	c6 02		dec $02				dec 	StructSP
.af85	92 02		sta ($02)			sta 	(StructSP)
.af87	60		rts				rts
.af88					Command_Until:
.af88	b2 02		lda ($02)			lda 	(StructSP)					; check it's REPEAT
.af8a	c9 52		cmp #$52			cmp 	#STM_REPEAT
.af8c	d0 1b		bne $afa9			bne 	_CUNoRepeat
.af8e	ca		dex				dex 								; pop
.af8f	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.af92	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.af95	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.af98	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.af9b	f0 06		beq $afa3			beq 	_CULoop
.af9d	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.af9f	20 bb af	jsr $afbb			jsr 	StructPopCount
.afa2	60		rts				rts
.afa3					_CULoop:
.afa3	a0 01		ldy #$01			ldy 	#1 							; restore the position
.afa5	20 d9 af	jsr $afd9			jsr 	StructPopCurrent
.afa8	60		rts				rts
.afa9					_CUNoRepeat:
.afa9	20 12 a5	jsr $a512			jsr 	ErrorHandler
>afac	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>afb4	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.afbb					StructPopCount:
.afbb	18		clc				clc
.afbc	65 02		adc $02				adc 	StructSP
.afbe	85 02		sta $02				sta 	StructSP
.afc0	60		rts				rts
.afc1					StructPushCurrent:
.afc1	a9 00		lda #$00			lda 	#0							; push bank
.afc3	c6 02		dec $02				dec 	StructSP
.afc5	92 02		sta ($02)			sta 	(StructSP)
.afc7	98		tya				tya									; y Offset
.afc8	c6 02		dec $02				dec 	StructSP
.afca	92 02		sta ($02)			sta 	(StructSP)
.afcc	a5 01		lda $01				lda 	codePtr+1 					; codeptr high
.afce	c6 02		dec $02				dec 	StructSP
.afd0	92 02		sta ($02)			sta 	(StructSP)
.afd2	a5 00		lda $00				lda 	codePtr 					; codeptr low
.afd4	c6 02		dec $02				dec 	StructSP
.afd6	92 02		sta ($02)			sta 	(StructSP)
.afd8	60		rts				rts
.afd9					StructPopCurrent:
.afd9	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr low
.afdb	85 00		sta $00				sta 	codePtr
.afdd	c8		iny				iny
.afde	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr high
.afe0	85 01		sta $01				sta 	codePtr+1
.afe2	c8		iny				iny
.afe3	b1 02		lda ($02),y			lda 	(StructSP),y				; y offset
.afe5	a8		tay				tay
.afe6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	0c 64 00 84 4a 85 4a 86			.byte $0c,$64,$00,$84,$4a,$85,$4a,$86,$4a,$87,$4a,$00,$06,$6e,$00,$33,$41,$00
>1108	4a 87 4a 00 06 6e 00 33 41 00

;******  Return to file: main.asm

>1112	00						.byte 	0

;******  End of listing
