
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Thu Oct 10 15:40:02 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9f00					MemoryEnd = $9F00 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=5					CTH_ERROR = COL_MAGENTA
=7					CTH_TOKEN = COL_WHITE
=3					CTH_IDENT = COL_YELLOW
=10					CTH_COMMENT = COL_GREEN|COL_RVS
=9					CTH_LCOMMENT = COL_RED|COL_RVS
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA
=147					SCM_CLS = 147 								; clear screen

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 7f a2	jsr $a27f			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a00b	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 8e		ldy #$8e			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 3d a6	jsr $a63d			jsr 	ErrorPrint16
.a01d	a2 00		ldx #$00			ldx 	#0 							; clear extended data area
.a01f	9e 00 08	stz $0800,x	_ClearX:stz 	ExtDataArea,x 				; this is so any library data
.a022	e8		inx				inx 								; is zeroed on start up.
.a023	d0 fa		bne $a01f			bne 	_ClearX
.a025	a9 0d		lda #$0d			lda 	#13
.a027	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a02a	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a02d	a9 9f		lda #$9f			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a02f	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a032	9c 8a 10	stz $108a			stz 	AllocMemory
.a035	20 4a a5	jsr $a54a			jsr 	ResetForRun
.a038	20 3f a5	jsr $a53f			jsr 	ResetCodePointer
.a03b					WarmStart:
.a03b	a9 06		lda #$06			lda 	#COL_CYAN
.a03d	20 ac a2	jsr $a2ac			jsr 	ExternColour
.a040	a9 4f		lda #$4f			lda 	#"O"
.a042	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a045	a9 4b		lda #$4b			lda 	#"K"
.a047	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a04a	a9 0d		lda #$0d			lda 	#13
.a04c	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a04f					NewCommand:
.a04f	8a		txa				txa
.a050	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a052	9a		txs				txs
.a053	aa		tax				tax
.a054	a9 07		lda #$07			lda 	#COL_WHITE
.a056	20 ac a2	jsr $a2ac			jsr 	ExternColour
.a059	20 d4 a2	jsr $a2d4			jsr 	ExternInput 				; input text
.a05c	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a05e	85 10		sta $10				sta 	codePtr
.a060	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a062	85 11		sta $11				sta 	codePtr+1
.a064	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a066	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a068	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a06a	85 17		sta $17				sta 	zTemp1+1
.a06c	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a06f	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a072	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a075	20 ad a7	jsr $a7ad			jsr 	Tokenise
.a078	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a07a					SkipSpaces:
.a07a	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a07d	c8		iny				iny
.a07e	c9 20		cmp #$20			cmp 	#' '
.a080	f0 f8		beq $a07a			beq 	SkipSpaces
.a082	c9 30		cmp #$30			cmp 	#'0'
.a084	90 0e		bcc $a094			bcc 	ExecuteCLI
.a086	c9 3a		cmp #$3a			cmp 	#'9'+1
.a088	b0 0a		bcs $a094			bcs 	ExecuteCLI
.a08a	ad 00 09	lda $0900			lda 	InputBuffer
.a08d	c9 20		cmp #$20			cmp 	#' '
.a08f	f0 03		beq $a094			beq 	ExecuteCLI
.a091	4c 1e a9	jmp $a91e			jmp		EditProgram
.a094					ExecuteCLI:
.a094	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a096	85 10		sta $10				sta 	codePtr
.a098	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a09a	85 11		sta $11				sta 	codePtr+1
.a09c	a0 03		ldy #$03			ldy 	#3
.a09e	4c 85 a3	jmp $a385			jmp 	Execute 					; and run it
.a0a1					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a0a1	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$31,$30,$20,$44,$41,$54,$45,$3a,$31,$30,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a9	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b9	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c9	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d9	39 0d 0d 42 55 49 4c 44 3a 31 30 20 44 41 54 45
>a0e9	3a 31 30 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45
>a0f9	4d 4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a109					KeywordText:
>a109	01 21					.byte $01,$21                          ; $10 !
>a10b	01 2a					.byte $01,$2a                          ; $11 *
>a10d	01 2b					.byte $01,$2b                          ; $12 +
>a10f	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a112	01 2d					.byte $01,$2d                          ; $14 -
>a114	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a117	01 2e					.byte $01,$2e                          ; $16 .
>a119	01 2f					.byte $01,$2f                          ; $17 /
>a11b	01 3b					.byte $01,$3b                          ; $18 ;
>a11d	01 3c					.byte $01,$3c                          ; $19 <
>a11f	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a122	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a125	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a128	01 3d					.byte $01,$3d                          ; $1d =
>a12a	01 3e					.byte $01,$3e                          ; $1e >
>a12c	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a12f	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a132	01 40					.byte $01,$40                          ; $21 @
>a134	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a138	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a13e	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a142	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a149	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a14c	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a14f	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a153	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a157	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a15c	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a160	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a165	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a169	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a16f	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a173	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a176	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a17c	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a181	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a186	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a18a	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a191	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a195	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a19a	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a19e	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a1a2	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a1a6	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a9	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1ae	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1b6	52
>a1b7	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1be	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1c5	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c9	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1ce	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1d2	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1d6	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1db	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1e0	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1e4	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1ea	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1ed	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1f0	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1f4	01 5b					.byte $01,$5b                          ; $4b [
>a1f6	01 5d					.byte $01,$5d                          ; $4c ]
>a1f8	01 5e					.byte $01,$5e                          ; $4d ^
>a1fa	01 2b					.byte $01,$2b                          ; $4e {+}
>a1fc	01 2d					.byte $01,$2d                          ; $4f {-}
>a1fe	00					.byte $00
.a1ff					KeywordVectorTable:
>a1ff	da ab					.word Mem_DPoke                        ; $10 !
>a201	f8 ac					.word MulInteger32                     ; $11 *
>a203	01 ac					.word Stack_Add                        ; $12 +
>a205	01 ab					.word Unary_Increment                  ; $13 ++
>a207	28 ac					.word Stack_Sub                        ; $14 -
>a209	14 ab					.word Unary_Decrement                  ; $15 --
>a20b	b3 b0					.word System_ShowStack                 ; $16 .
>a20d	41 ad					.word DivInteger32                     ; $17 /
>a20f	f4 b1					.word ProcReturn                       ; $18 ;
>a211	28 ae					.word Comp_Less                        ; $19 <
>a213	36 ab					.word Unary_Shl                        ; $1a <<
>a215	53 ae					.word Comp_LessEqual                   ; $1b <=
>a217	f1 ad					.word Comp_NotEqual                    ; $1c <>
>a219	ee ad					.word Comp_Equal                       ; $1d =
>a21b	56 ae					.word Comp_Greater                     ; $1e >
>a21d	2b ae					.word Comp_GreaterEqual                ; $1f >=
>a21f	43 ab					.word Unary_Shr                        ; $20 >>
>a221	88 ab					.word Mem_DPeek                        ; $21 @
>a223	b8 aa					.word Unary_Absolute                   ; $22 ABS
>a225	7e ae					.word Allocate                         ; $23 ALLOC
>a227	4f ac					.word Stack_And                        ; $24 AND
>a229	44 b0					.word System_Assert                    ; $25 ASSERT
>a22b	ad ab					.word Mem_Poke                         ; $26 C!
>a22d	50 ab					.word Mem_Peek                         ; $27 C@
>a22f	2a aa					.word Stack_Empty                      ; $28 CLR
>a231	d8 a5					.word SyntaxError                      ; $29 DEF
>a233	2d aa					.word Stack_Drop                       ; $2a DROP
>a235	2f aa					.word Stack_Dup                        ; $2b DUP
>a237	0a b3					.word Struct_ELSE                      ; $2c ELSE
>a239	39 b0					.word System_END                       ; $2d END
>a23b	0f b3					.word Struct_ENDIF                     ; $2e ENDIF
>a23d	2b b3					.word Command_For                      ; $2f FOR
>a23f	f5 b2					.word Struct_IF                        ; $30 IF
>a241	b7 b3					.word Command_Index                    ; $31 INDEX
>a243	be ae					.word Cmd_List                         ; $32 LIST
>a245	ff b0					.word System_Load                      ; $33 LOAD
>a247	d6 ad					.word ModInteger32                     ; $34 MOD
>a249	be aa					.word Unary_Negate                     ; $35 NEGATE
>a24b	5e b0					.word System_New                       ; $36 NEW
>a24d	7a b3					.word Command_Next                     ; $37 NEXT
>a24f	49 aa					.word Stack_Nip                        ; $38 NIP
>a251	e0 aa					.word Unary_Not                        ; $39 NOT
>a253	67 b0					.word System_Old                       ; $3a OLD
>a255	9b ac					.word Stack_Or                         ; $3b OR
>a257	63 aa					.word Stack_Over                       ; $3c OVER
>a259	f8 af					.word Cmd_Renumber                     ; $3d RENUMBER
>a25b	e3 b3					.word Command_Repeat                   ; $3e REPEAT
>a25d	f4 b1					.word ProcReturn2                      ; $3f RETURN
>a25f	30 b0					.word System_RUN                       ; $40 RUN
>a261	e1 b0					.word System_Save                      ; $41 SAVE
>a263	c1 ac					.word Stack_Shl                        ; $42 SHL
>a265	c4 ac					.word Stack_Shr                        ; $43 SHR
>a267	3c b0					.word System_STOP                      ; $44 STOP
>a269	7d aa					.word Stack_Swap                       ; $45 SWAP
>a26b	8b b0					.word System_Sys                       ; $46 SYS
>a26d	ed b3					.word Command_Until                    ; $47 UNTIL
>a26f	bf ab					.word Mem_WPoke                        ; $48 W!
>a271	69 ab					.word Mem_WPeek                        ; $49 W@
>a273	75 ac					.word Stack_Xor                        ; $4a XOR
>a275	d8 a5					.word SyntaxError                      ; $4b [
>a277	d8 a5					.word SyntaxError                      ; $4c ]
>a279	03 b2					.word WriteVariable                    ; $4d ^
>a27b	d8 a5					.word SyntaxError                      ; $4e {+}
>a27d	d8 a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a27f					ExternInitialise:
.a27f	a9 07		lda #$07			lda 	#$07 						; set colour
.a281	8d 86 02	sta $0286			sta 	646
.a284	a9 93		lda #$93			lda 	#147 						; clear screen
.a286	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a289	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a28b	4c ac a2	jmp $a2ac			jmp 	ExternColour
.a28e					ExternCheckBreak:
.a28e	da		phx				phx 								; make sure we keep XY
.a28f	5a		phy				phy
.a290	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a293	f0 03		beq $a298			beq		_ECBExit 					; stopped
.a295	7a		ply				ply 								; restore and exit.
.a296	fa		plx				plx
.a297	60		rts				rts
.a298					_ECBExit:
.a298	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a29b	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.a2a2					ExternPrint:
.a2a2	48		pha				pha
.a2a3	da		phx				phx
.a2a4	5a		phy				phy
.a2a5	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2a8	7a		ply				ply
.a2a9	fa		plx				plx
.a2aa	68		pla				pla
.a2ab	60		rts				rts
.a2ac					ExternColour:
.a2ac	48		pha				pha
.a2ad	da		phx				phx
.a2ae	48		pha				pha
.a2af	29 08		and #$08			and 	#8
.a2b1	0a		asl a				asl 	a
.a2b2	0a		asl a				asl 	a
.a2b3	0a		asl a				asl 	a
.a2b4	0a		asl a				asl 	a
.a2b5	49 92		eor #$92			eor 	#$92
.a2b7	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a2ba	a9 0e		lda #$0e			lda 	#14							; lower case
.a2bc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2bf	68		pla				pla
.a2c0	29 07		and #$07			and 	#7
.a2c2	aa		tax				tax
.a2c3	bd cc a2	lda $a2cc,x			lda 	_ECTable,x
.a2c6	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a2c9	fa		plx				plx
.a2ca	68		pla				pla
.a2cb	60		rts				rts
.a2cc					_ECTable:
>a2cc	90						.byte 	144
>a2cd	1c						.byte 	28
>a2ce	1e						.byte 	30
>a2cf	9e						.byte 	158
>a2d0	1f						.byte 	31
>a2d1	9c						.byte 	156
>a2d2	9f						.byte 	159
>a2d3	05						.byte 	5
.a2d4					ExternInput:
.a2d4	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2d6	85 14		sta $14				sta 	zTemp0
.a2d8	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2da	85 15		sta $15				sta 	zTemp0+1
.a2dc	a9 07		lda #$07			lda 	#COL_WHITE
.a2de	20 ac a2	jsr $a2ac			jsr 	ExternColour
.a2e1	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2e4	29 7f		and #$7f			and 	#$7F
.a2e6	c9 0d		cmp #$0d			cmp 	#13
.a2e8	f0 0a		beq $a2f4			beq 	_EIExit
.a2ea	92 14		sta ($14)			sta 	(zTemp0)
.a2ec	e6 14		inc $14				inc 	zTemp0
.a2ee	d0 f1		bne $a2e1			bne 	_EIRead
.a2f0	e6 15		inc $15				inc 	zTemp0+1
.a2f2	80 ed		bra $a2e1			bra 	_EIRead
.a2f4	a9 00		lda #$00	_EIExit:lda 	#0
.a2f6	92 14		sta ($14)			sta 	(zTemp0)
.a2f8	a9 0d		lda #$0d			lda 	#13
.a2fa	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a2fd	60		rts				rts
.a2fe					ExternSave:
.a2fe	da		phx				phx
.a2ff	5a		phy				phy
.a300	85 18		sta $18				sta 	zTemp2 						; save start
.a302	84 19		sty $19				sty 	zTemp2+1
.a304	20 66 a3	jsr $a366			jsr 	EXGetLength 				; get length of file into A
.a307	a6 14		ldx $14				ldx 	zTemp0
.a309	a4 15		ldy $15				ldy 	zTemp0+1
.a30b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a30e	a9 01		lda #$01			lda 	#1
.a310	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a312	a0 00		ldy #$00			ldy 	#0
.a314	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a317	a6 16		ldx $16				ldx 	zTemp1 						; end address
.a319	a4 17		ldy $17				ldy 	zTemp1+1
.a31b	a9 18		lda #$18			lda 	#zTemp2
.a31d	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a320	b0 03		bcs $a325			bcs 	_ESSave
.a322	7a		ply				ply
.a323	fa		plx				plx
.a324	60		rts				rts
.a325					_ESSave:
.a325	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a328	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a330	4c 45 44 00
.a334					ExternLoad:
.a334	da		phx				phx 								; save XY
.a335	5a		phy				phy
.a336	48		pha				pha 								; save target
.a337	5a		phy				phy
.a338	20 66 a3	jsr $a366			jsr 	EXGetLength 				; get length of file into A
.a33b	a6 14		ldx $14				ldx 	zTemp0
.a33d	a4 15		ldy $15				ldy 	zTemp0+1
.a33f	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a342	a9 01		lda #$01			lda 	#1
.a344	a2 01		ldx #$01			ldx 	#1	 						; device #1
.a346	a0 00		ldy #$00			ldy 	#0
.a348	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a34b	7a		ply				ply 								; restore target to YX and call load
.a34c	fa		plx				plx
.a34d	a9 00		lda #$00			lda 	#0 							; load command
.a34f	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a352	b0 03		bcs $a357			bcs 	_ESLoad
.a354	7a		ply				ply
.a355	fa		plx				plx
.a356	60		rts				rts
.a357					_ESLoad:
.a357	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a35a	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a362	4c 45 44 00
.a366					EXGetLength:
.a366	a0 ff		ldy #$ff			ldy 	#255
.a368	c8		iny		_EXGL:	iny
.a369	b1 14		lda ($14),y			lda 	(zTemp0),y
.a36b	d0 fb		bne $a368			bne 	_EXGL
.a36d	98		tya				tya
.a36e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a36f					EXNextLine:
.a36f	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a371	f0 0f		beq $a382			beq 	_EXNLWarmStart
.a373	18		clc				clc 								; advance code pointer to next line
.a374	65 10		adc $10				adc 	codePtr
.a376	85 10		sta $10				sta 	codePtr
.a378	90 02		bcc $a37c			bcc 	_EXNLNoBump
.a37a	e6 11		inc $11				inc 	codePtr+1
.a37c					_EXNLNoBump:
.a37c	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a37e	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a380	d0 03		bne $a385			bne 	Execute 					; not end of program
.a382					_EXNLWarmStart:
.a382	4c 39 b0	jmp $b039			jmp 	System_END
.a385	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a387	b0 1c		bcs $a3a5			bcs 	EXStackOverflow
.a389	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a38c	d0 03		bne $a391			bne 	_EXNoBreak
.a38e	20 8e a2	jsr $a28e			jsr 	ExternCheckBreak
.a391					_EXNoBreak:
.a391	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a393	f0 da		beq $a36f			beq 	EXNextLine 					; reached end of the line.
.a395	c8		iny				iny 								; advance pointer.
.a396	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a398	90 3b		bcc $a3d5			bcc 	EXStringComment
.a39a	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a39c	90 21		bcc $a3bf			bcc 	EXTokenExecute
.a39e	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a3a0	90 17		bcc $a3b9			bcc 	EXPushConstant
.a3a2	4c 77 b1	jmp $b177			jmp 	Identifier 					; it's an identifier C0-FF
.a3a5					EXStackOverflow:
.a3a5	a2 00		ldx #$00			ldx 	#0 							; stack error clears stack otherwise doesn't work.
.a3a7	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a3aa	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a3b2	45 52 46 4c 4f 57 00
.a3b9					EXPushConstant:
.a3b9	88		dey				dey
.a3ba	20 04 a4	jsr $a404			jsr 	ExtractIntegerToTOS 		; extract integer
.a3bd	80 c6		bra $a385			bra 	Execute
.a3bf					EXTokenExecute:
.a3bf	0a		asl a				asl 	a 							; double token, also clears carry
.a3c0	da		phx				phx 								; save X, put token x 2 in X
.a3c1	aa		tax				tax
.a3c2	bd df a1	lda $a1df,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3c5	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3c7	bd e0 a1	lda $a1e0,x			lda 	KeywordVectorTable-$20+1,x
.a3ca	85 15		sta $15				sta 	zTemp0+1
.a3cc	fa		plx				plx 								; restore X
.a3cd	20 d2 a3	jsr $a3d2			jsr 	_EXTCall 					; call the routine
.a3d0	80 b3		bra $a385			bra 	Execute
.a3d2					_EXTCall:
.a3d2	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3d5					EXStringComment:
.a3d5	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3d7	f0 15		beq $a3ee			beq 	EXStringSkip 				; (comment), so just skip it.
.a3d9	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3da	98		tya				tya
.a3db	38		sec				sec
.a3dc	65 10		adc $10				adc 	codePtr
.a3de	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3e1	a5 11		lda $11				lda 	codePtr+1
.a3e3	69 00		adc #$00			adc 	#0
.a3e5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3e8	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3eb	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3ee					EXStringSkip:
.a3ee	98		tya				tya 								; the current position in A
.a3ef	18		clc				clc
.a3f0	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3f2	a8		tay				tay 			 					; and make that the current position.
.a3f3	88		dey				dey 								; back one because of the initial skip
.a3f4	80 8f		bra $a385			bra 	Execute
.a3f6					EXShiftTOSRight:
.a3f6	4a		lsr a				lsr 	a
.a3f7	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3fa	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3fd	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a400	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a403	60		rts				rts
.a404					ExtractIntegerToTOS:
.a404	b1 10		lda ($10),y			lda 	(codePtr),y
.a406	c8		iny				iny
.a407	e8		inx				inx 								; make stack space
.a408	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a40a	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a40d	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a410	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a413	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a416					_EXConstantLoop:
.a416	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a418	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a41a	c9 80		cmp #$80			cmp 	#$80
.a41c	d0 2d		bne $a44b			bne		_EXDone 					; no then exit
.a41e	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a421	48		pha				pha
.a422	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a425	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a428	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a42b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a42e	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a431	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a434	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a437	68		pla				pla
.a438	20 f6 a3	jsr $a3f6			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a43b	20 f6 a3	jsr $a3f6			jsr 	EXShiftTOSRight				; which will be x64
.a43e	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a440	c8		iny				iny
.a441	29 3f		and #$3f			and 	#$3F
.a443	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a446	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a449	80 cb		bra $a416			bra 	_EXConstantLoop
.a44b	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a44d	c8		iny				iny 								; skip over unary constant + -
.a44e	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a450	d0 03		bne $a455			bne 	_EXPositive
.a452	4c be aa	jmp $aabe			jmp 	Unary_Negate
.a455					_EXPositive:
.a455	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a456					IdentifierSearch:
.a456	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a458	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a45a	90 12		bcc $a46e			bcc 	_ISSlow
.a45c	c9 fa		cmp #$fa			cmp 	#$F9+1
.a45e	b0 0e		bcs $a46e			bcs 	_ISSlow
.a460	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a462	0a		asl a				asl 	a
.a463	0a		asl a				asl		a
.a464	85 22		sta $22				sta 	idDataAddr					; set up addres
.a466	a9 10		lda #$10			lda 	#AZVariables >> 8
.a468	85 23		sta $23				sta 	idDataAddr+1
.a46a	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a46c	38		sec				sec 								; return with CS.
.a46d	60		rts				rts
.a46e					_ISSlow:
.a46e	20 2a a5	jsr $a52a			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a471	98		tya				tya 								; set (zTemp1) to point to the
.a472	18		clc				clc 	 							; identifier to be searched.
.a473	65 10		adc $10				adc 	codePtr
.a475	85 16		sta $16				sta 	zTemp1
.a477	a5 11		lda $11				lda 	codePtr+1
.a479	69 00		adc #$00			adc 	#0
.a47b	85 17		sta $17				sta 	zTemp1+1
.a47d	5a		phy				phy 								; save Y
.a47e	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a480	48		pha				pha
.a481	a0 01		ldy #$01			ldy 	#1
.a483	b1 14		lda ($14),y			lda 	(zTemp0),y
.a485	85 15		sta $15				sta 	zTemp0+1
.a487	68		pla				pla
.a488	85 14		sta $14				sta 	zTemp0
.a48a	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a48c	f0 2c		beq $a4ba			beq 	_ISFail
.a48e	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a490	b1 14		lda ($14),y			lda 	(zTemp0),y
.a492	85 18		sta $18				sta 	zTemp2
.a494	c8		iny				iny
.a495	b1 14		lda ($14),y			lda 	(zTemp0),y
.a497	85 19		sta $19				sta 	zTemp2+1
.a499	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a49b					_ISCompare:
.a49b	b1 16		lda ($16),y			lda 	(zTemp1),y
.a49d	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a49f	d0 dd		bne $a47e			bne		_ISLoop 					; different ?
.a4a1	c8		iny				iny
.a4a2	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a4a4	90 f5		bcc $a49b			bcc 	_ISCompare
.a4a6	18		clc				clc 								; set up the data pointer
.a4a7	a5 14		lda $14				lda 	zTemp0
.a4a9	69 02		adc #$02			adc 	#2
.a4ab	85 22		sta $22				sta 	idDataAddr
.a4ad	a5 15		lda $15				lda 	zTemp0+1
.a4af	69 00		adc #$00			adc		#0
.a4b1	85 23		sta $23				sta 	idDataAddr+1
.a4b3	a0 09		ldy #$09			ldy 	#9 							; get the type
.a4b5	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4b7	7a		ply				ply
.a4b8	38		sec				sec
.a4b9	60		rts				rts
.a4ba					_ISFail:
.a4ba	7a		ply				ply
.a4bb	18		clc				clc
.a4bc	60		rts				rts
.a4bd					IdentifierCreate:
.a4bd	5a		phy				phy 								; save Y
.a4be	48		pha				pha 								; save type on stack
.a4bf	20 2a a5	jsr $a52a			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4c2	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4c5	85 16		sta $16				sta 	zTemp1
.a4c7	ad 89 10	lda $1089			lda 	VarMemory+1
.a4ca	85 17		sta $17				sta 	zTemp1+1
.a4cc	5a		phy				phy 								; save Y (code offset)
.a4cd	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4cf	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4d1	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d3	c8		iny				iny
.a4d4	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4d6	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d8	c8		iny				iny
.a4d9					_IDCErase:
.a4d9	a9 00		lda #$00			lda 	#0
.a4db	91 16		sta ($16),y			sta 	(zTemp1),y
.a4dd	c8		iny				iny
.a4de	c0 06		cpy #$06			cpy 	#6
.a4e0	d0 f7		bne $a4d9			bne 	_IDCErase
.a4e2	68		pla				pla 								; original Y
.a4e3	18		clc				clc
.a4e4	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4e6	91 16		sta ($16),y			sta 	(zTemp1),y
.a4e8	c8		iny				iny
.a4e9	a5 11		lda $11				lda 	codePtr+1
.a4eb	69 00		adc #$00			adc 	#0
.a4ed	91 16		sta ($16),y			sta 	(zTemp1),y
.a4ef	c8		iny				iny
.a4f0	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4f2	91 16		sta ($16),y			sta 	(zTemp1),y
.a4f4	68		pla				pla 								; restore type
.a4f5	c8		iny				iny
.a4f6	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4f8	c8		iny				iny
.a4f9	98		tya				tya									; add offset to VarMemory
.a4fa	18		clc				clc
.a4fb	6d 88 10	adc $1088			adc 	VarMemory
.a4fe	8d 88 10	sta $1088			sta 	VarMemory
.a501	ad 89 10	lda $1089			lda 	VarMemory+1
.a504	69 00		adc #$00			adc 	#0
.a506	8d 89 10	sta $1089			sta 	VarMemory+1
.a509	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a50c	f0 19		beq $a527			beq 	_IDCMemory
.a50e	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a510	92 14		sta ($14)			sta 	(zTemp0)
.a512	a0 01		ldy #$01			ldy 	#1
.a514	a5 17		lda $17				lda 	zTemp1+1
.a516	91 14		sta ($14),y			sta 	(zTemp0),y
.a518	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a51a	18		clc				clc
.a51b	69 02		adc #$02			adc 	#2
.a51d	85 22		sta $22				sta 	idDataAddr
.a51f	a5 17		lda $17				lda 	zTemp1+1
.a521	69 00		adc #$00			adc 	#0
.a523	85 23		sta $23				sta 	idDataAddr+1
.a525	7a		ply				ply 								; restore Y and exit
.a526	60		rts				rts
.a527					_IDCMemory:
.a527	4c e8 a5	jmp $a5e8			jmp 	OutOfMemoryError
.a52a					IdentifierSetUpHashPtr:
.a52a	5a		phy				phy
.a52b					_ISPLoop:
.a52b	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the last identifier character
.a52d	c8		iny				iny
.a52e	c9 e0		cmp #$e0			cmp 	#$E0
.a530	90 f9		bcc $a52b			bcc 	_ISPLoop
.a532	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a534	0a		asl a				asl 	a 							; convert to an offset, clc
.a535	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a537	85 14		sta $14				sta 	zTemp0
.a539	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a53b	85 15		sta $15				sta 	zTemp0+1
.a53d	7a		ply				ply
.a53e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a53f					ResetCodePointer:
.a53f	48		pha				pha
.a540	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a542	85 11		sta $11				sta 	codePtr+1
.a544	64 10		stz $10				stz 	codePtr
.a546	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a548	68		pla				pla
.a549	60		rts				rts
.a54a					ResetForRun:
.a54a	48		pha				pha
.a54b	5a		phy				phy
.a54c	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a54e					_RRErase:
.a54e	bd 73 b5	lda $b573,x			lda 	DefaultHashTable,x
.a551	9d 68 10	sta $1068,x			sta		HashTable,x
.a554	e8		inx				inx
.a555	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a557	d0 f5		bne $a54e			bne 	_RRErase
.a559	20 70 a5	jsr $a570			jsr 	ResetVarMemory
.a55c	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a55e	85 12		sta $12				sta 	StructSP
.a560	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a562	85 13		sta $13				sta 	StructSP+1
.a564	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a566	92 12		sta ($12)			sta 	(StructSP)
.a568	20 97 a5	jsr $a597			jsr 	ProcedureScan
.a56b	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a56d	7a		ply				ply
.a56e	68		pla				pla
.a56f	60		rts				rts
.a570					ResetVarMemory:
.a570	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a572	85 14		sta $14				sta 	zTemp0
.a574	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a576	85 15		sta $15				sta 	zTemp0+1
.a578					_RRFindEnd:
.a578	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a57a	f0 0b		beq $a587			beq 	_RRFoundEnd
.a57c	18		clc				clc 								; no, add offset to pointer.
.a57d	65 14		adc $14				adc 	zTemp0
.a57f	85 14		sta $14				sta 	zTemp0
.a581	90 f5		bcc $a578			bcc 	_RRFindEnd
.a583	e6 15		inc $15				inc 	zTemp0+1
.a585	80 f1		bra $a578			bra 	_RRFindEnd
.a587					_RRFoundEnd:
.a587	18		clc				clc 								; add 1 to this, as it points to the last
.a588	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a58a	69 01		adc #$01			adc 	#1
.a58c	8d 88 10	sta $1088			sta 	VarMemory
.a58f	a5 15		lda $15				lda 	zTemp0+1
.a591	69 00		adc #$00			adc 	#0
.a593	8d 89 10	sta $1089			sta 	VarMemory+1
.a596	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a597					ProcedureScan:
.a597	20 3f a5	jsr $a53f			jsr 	ResetCodePointer 			; reset the code pointer.
.a59a	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a59c	f0 39		beq $a5d7			beq 	_PSExit
.a59e	a0 03		ldy #$03			ldy 	#3 							; start of line
.a5a0	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a5a2	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a5a4	d0 24		bne $a5ca			bne 	_PSNext
.a5a6	c8		iny				iny 								; skip over def first
.a5a7	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a5a9	29 e0		and #$e0			and 	#$E0
.a5ab	c9 c0		cmp #$c0			cmp 	#$C0
.a5ad	d0 1b		bne $a5ca			bne 	_PSNext 					; otherwise ignore it.
.a5af	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a5b1	20 bd a4	jsr $a4bd			jsr 	IdentifierCreate
.a5b4					_PSSkipIdentifier:
.a5b4	b1 10		lda ($10),y			lda 	(codePtr),y
.a5b6	c9 e0		cmp #$e0			cmp 	#$E0
.a5b8	c8		iny				iny
.a5b9	90 f9		bcc $a5b4			bcc 	_PSSkipIdentifier
.a5bb	98		tya				tya  								; save the address in the data slot.
.a5bc	a0 03		ldy #$03			ldy 	#3
.a5be	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a5c0	a5 10		lda $10				lda 	codePtr
.a5c2	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a5c4	a5 11		lda $11				lda 	codePtr+1
.a5c6	a0 01		ldy #$01			ldy 	#1
.a5c8	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a5ca					_PSNext:
.a5ca	18		clc				clc 								; go to next
.a5cb	b2 10		lda ($10)			lda 	(codePtr)
.a5cd	65 10		adc $10				adc 	codePtr
.a5cf	85 10		sta $10				sta 	codeptr
.a5d1	90 c7		bcc $a59a			bcc 	_PSMain
.a5d3	e6 11		inc $11				inc 	codePtr+1
.a5d5	80 c3		bra $a59a			bra 	_PSMain
.a5d7					_PSExit:
.a5d7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5d8					SyntaxError:
.a5d8	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a5db	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5e3	52 52 4f 52 00
.a5e8					OutOfMemoryError:
.a5e8	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a5eb	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5f3	45 4d 4f 52 59 00
.a5f9					ErrorHandler:
.a5f9	68		pla				pla 								; pop message address
.a5fa	85 14		sta $14				sta 	zTemp0
.a5fc	68		pla				pla
.a5fd	85 15		sta $15				sta 	zTemp0+1
.a5ff	a9 05		lda #$05			lda 	#CTH_ERROR
.a601	20 ac a2	jsr $a2ac			jsr 	ExternColour
.a604	a0 01		ldy #$01			ldy 	#1 							; print it
.a606					_ErrorPrint:
.a606	b1 14		lda ($14),y			lda 	(zTemp0),y
.a608	20 a2 a2	jsr $a2a2			jsr		ExternPrint
.a60b	c8		iny				iny
.a60c	b1 14		lda ($14),y			lda 	(zTemp0),y
.a60e	d0 f6		bne $a606			bne 	_ErrorPrint
.a610	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a612	b1 10		lda ($10),y			lda		(codePtr),y
.a614	c8		iny				iny
.a615	12 10		ora ($10)			ora 	(codePtr)
.a617	f0 1c		beq $a635			beq 	_ErrorNoLine 				; if so, skip
.a619	a9 20		lda #$20			lda 	#32
.a61b	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a61e	a9 40		lda #$40			lda 	#'@'
.a620	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a623	a9 20		lda #$20			lda 	#32
.a625	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a628	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a62a	b1 10		lda ($10),y			lda 	(codePtr),y
.a62c	48		pha				pha
.a62d	c8		iny				iny
.a62e	b1 10		lda ($10),y			lda 	(codePtr),y
.a630	a8		tay				tay
.a631	68		pla				pla
.a632	20 3d a6	jsr $a63d			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a635					_ErrorNoLine:
.a635	a9 0d		lda #$0d			lda 	#13							; new line
.a637	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a63a	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a63d					ErrorPrint16:
.a63d	da		phx				phx
.a63e	e8		inx				inx 								; space on stack
.a63f	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a642	98		tya				tya
.a643	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a646	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a649	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a64c	20 62 a6	jsr $a662			jsr 	IntegerToString 			; convert to string.
.a64f	fa		plx				plx
.a650					ErrorPrintIntegerBuffer:
.a650	da		phx				phx
.a651	a2 00		ldx #$00			ldx 	#0
.a653					_EP16Loop:
.a653	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a656	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.a659	e8		inx				inx
.a65a	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a65d	d0 f4		bne $a653			bne 	_EP16Loop
.a65f	8a		txa				txa
.a660	fa		plx				plx
.a661	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a662					IntegerToString:
.a662	48		pha				pha
.a663	5a		phy				phy
.a664	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a667	48		pha				pha
.a668	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a66b	48		pha				pha
.a66c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a66f	48		pha				pha
.a670	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a673	48		pha				pha
.a674	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a677	10 08		bpl $a681			bpl 		_ITSNotMinus
.a679	a9 2d		lda #$2d			lda 		#"-"
.a67b	20 23 a7	jsr $a723			jsr 		ITSOutputCharacter
.a67e	20 be aa	jsr $aabe			jsr 		Unary_Negate
.a681					_ITSNotMinus:
.a681	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a684	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a687	8a		txa				txa 								; use Y for the integer index.
.a688	a8		tay				tay
.a689	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a68b					_ITSNextSubtractor:
.a68b	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a68d	8d 21 08	sta $0821			sta 		NumConvCount
.a690					_ITSSubtract:
.a690	38		sec				sec
.a691	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a694	fd ff a6	sbc $a6ff,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a697	48		pha				pha
.a698	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a69b	fd 00 a7	sbc $a700,x			sbc 		_ITSSubtractors+1,x
.a69e	48		pha				pha
.a69f	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a6a2	fd 01 a7	sbc $a701,x			sbc 		_ITSSubtractors+2,x
.a6a5	48		pha				pha
.a6a6	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a6a9	fd 02 a7	sbc $a702,x			sbc 		_ITSSubtractors+3,x
.a6ac	90 14		bcc $a6c2			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a6ae	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a6b1	68		pla				pla
.a6b2	99 00 0e	sta $0e00,y			sta 		stack2,y
.a6b5	68		pla				pla
.a6b6	99 00 0d	sta $0d00,y			sta 		stack1,y
.a6b9	68		pla				pla
.a6ba	99 00 0c	sta $0c00,y			sta 		stack0,y
.a6bd	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a6c0	80 ce		bra $a690			bra 		_ITSSubtract 			; go round again.
.a6c2					_ITSCantSubtract:
.a6c2	68		pla				pla 								; throw away interim answers
.a6c3	68		pla				pla 								; (the subtraction that failed)
.a6c4	68		pla				pla
.a6c5	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a6c8	c9 30		cmp #$30			cmp 		#"0"
.a6ca	d0 05		bne $a6d1			bne 		_ITSOutputDigit
.a6cc	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6cf	f0 09		beq $a6da			beq	 		_ITSGoNextSubtractor
.a6d1					_ITSOutputDigit:
.a6d1	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6d4	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6d7	20 23 a7	jsr $a723			jsr 		ITSOutputCharacter 		; output it.
.a6da					_ITSGoNextSubtractor:
.a6da	e8		inx				inx 								; next dword in subtractor table.
.a6db	e8		inx				inx
.a6dc	e8		inx				inx
.a6dd	e8		inx				inx
.a6de	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6e0	d0 a9		bne $a68b			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6e2	98		tya				tya 								; X is back as the mantissa index
.a6e3	aa		tax				tax
.a6e4	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6e7	09 30		ora #$30			ora 		#"0"
.a6e9	20 23 a7	jsr $a723			jsr 		ITSOutputCharacter
.a6ec	68		pla				pla
.a6ed	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6f0	68		pla				pla
.a6f1	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6f4	68		pla				pla
.a6f5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6f8	68		pla				pla
.a6f9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6fc	7a		ply				ply 								; and exit
.a6fd	68		pla				pla
.a6fe	60		rts				rts
.a6ff					_ITSSubtractors:
>a6ff	00 ca 9a 3b					.dword 		1000000000
>a703	00 e1 f5 05					.dword 		100000000
>a707	80 96 98 00					.dword 		10000000
>a70b	40 42 0f 00					.dword 		1000000
>a70f	a0 86 01 00					.dword 		100000
>a713	10 27 00 00					.dword 		10000
>a717	e8 03 00 00					.dword 		1000
>a71b	64 00 00 00					.dword 		100
>a71f	0a 00 00 00					.dword 		10
.a723					_ITSSubtractorsEnd:
.a723					ITSOutputCharacter:
.a723	48		pha				pha
.a724	da		phx				phx
.a725	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a728	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a72b	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a72e	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a731	fa		plx				plx
.a732	68		pla				pla
.a733	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a734					IntFromString:
.a734	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a736	8c 25 08	sty $0825			sty 	IFSHexFlag
.a739	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a73b	c9 26		cmp #$26			cmp 	#"&"
.a73d	d0 04		bne $a743			bne 	_IFSNotHex
.a73f	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a742	c8		iny				iny 								; skip
.a743					_IFSNotHex:
.a743	e8		inx				inx 								; space on stack
.a744	20 a0 a7	jsr $a7a0			jsr 	IFSClearTOS
.a747					_IFSLoop:
.a747	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a74a	f0 0a		beq $a756			beq 	_IFSDecOnly
.a74c	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a74e	c9 41		cmp #$41			cmp 	#"A"
.a750	90 04		bcc $a756			bcc 	_IFSDecOnly
.a752	c9 47		cmp #$47			cmp 	#"F"+1
.a754	90 0a		bcc $a760			bcc 	_IFSOkDigit
.a756					_IFSDecOnly:
.a756	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a758	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a75a	90 3e		bcc $a79a			bcc 	_IFSExit
.a75c	c9 3a		cmp #$3a			cmp 	#"9"+1
.a75e	b0 3a		bcs $a79a			bcs 	_IFSExit
.a760					_IFSOkDigit:
.a760	ad 25 08	lda $0825			lda 	IFSHexFlag
.a763	d0 11		bne $a776			bne 	_IFSHexShift
.a765	20 2f aa	jsr $aa2f			jsr 	Stack_Dup 					; duplicate tos
.a768	20 36 ab	jsr $ab36			jsr 	Unary_Shl	 				; x 2
.a76b	20 36 ab	jsr $ab36			jsr 	Unary_Shl 					; x 4
.a76e	20 01 ac	jsr $ac01			jsr 	Stack_Add 					; x 5
.a771	20 36 ab	jsr $ab36			jsr 	Unary_Shl 					; x 10
.a774	80 0c		bra $a782			bra 	_IFSAddIn
.a776					_IFSHexShift:
.a776	20 36 ab	jsr $ab36			jsr 	Unary_Shl	 				; x 2
.a779	20 36 ab	jsr $ab36			jsr 	Unary_Shl	 				; x 4
.a77c	20 36 ab	jsr $ab36			jsr 	Unary_Shl	 				; x 8
.a77f	20 36 ab	jsr $ab36			jsr 	Unary_Shl	 				; x 16
.a782					_IFSAddIn:
.a782	e8		inx				inx  								; create space next up
.a783	20 a0 a7	jsr $a7a0			jsr 	IFSClearTOS
.a786	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a788	c9 41		cmp #$41			cmp 	#"A"
.a78a	90 03		bcc $a78f			bcc 	_IFSDec
.a78c	38		sec				sec 								; hex fixup.
.a78d	e9 07		sbc #$07			sbc 	#7
.a78f					_IFSDec:
.a78f	29 0f		and #$0f			and 	#15
.a791	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a794	20 01 ac	jsr $ac01			jsr 	Stack_Add 					; add to tos
.a797	c8		iny				iny
.a798	80 ad		bra $a747			bra 	_IFSLoop
.a79a					_IFSExit:
.a79a	98		tya				tya
.a79b	38		sec				sec
.a79c	f0 01		beq $a79f			beq 	_IFSSkipFail
.a79e	18		clc				clc
.a79f					_IFSSkipFail:
.a79f	60		rts				rts
.a7a0					IFSClearTOS:
.a7a0	9e 00 0c	stz $0c00,x			stz		stack0,x
.a7a3	9e 00 0d	stz $0d00,x			stz		stack1,x
.a7a6	9e 00 0e	stz $0e00,x			stz		stack2,x
.a7a9	9e 00 0f	stz $0f00,x			stz		stack3,x
.a7ac	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a7ad					Tokenise:
.a7ad	da		phx				phx
.a7ae	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a7b0					_TKSkip:
.a7b0	c8		iny				iny
.a7b1					_TKMainLoop:
.a7b1	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a7b3	f0 06		beq $a7bb			beq 	_TKExit
.a7b5	c9 20		cmp #$20			cmp 	#" "
.a7b7	f0 f7		beq $a7b0			beq 	_TKSkip
.a7b9	80 04		bra $a7bf			bra 	_TKNotEnd
.a7bb	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a7bd	fa		plx				plx
.a7be	60		rts				rts
.a7bf					_TKNotEnd:
.a7bf	c9 22		cmp #$22			cmp 	#'"'
.a7c1	f0 04		beq $a7c7			beq 	_TKIsQuote
.a7c3	c9 27		cmp #$27			cmp 	#"'"
.a7c5	d0 05		bne $a7cc			bne 	_TKNotQuote
.a7c7					_TKIsQuote:
.a7c7	20 eb a8	jsr $a8eb			jsr		TOKQuotedString
.a7ca	80 e5		bra $a7b1			bra 	_TKMainLoop
.a7cc					_TKNotQuote:
.a7cc	98		tya				tya 								; current pos -> zTemp0
.a7cd	18		clc				clc
.a7ce	65 10		adc $10				adc 	codePtr
.a7d0	85 14		sta $14				sta 	zTemp0
.a7d2	85 10		sta $10				sta 	codePtr
.a7d4	a5 11		lda $11				lda 	codePtr+1
.a7d6	69 00		adc #$00			adc 	#0
.a7d8	85 15		sta $15				sta 	zTemp0+1
.a7da	85 11		sta $11				sta 	codePtr+1
.a7dc	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7de	b1 10		lda ($10),y			lda 	(codePtr),y
.a7e0	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7e2	f0 08		beq $a7ec			beq 	_TKIsNumber
.a7e4	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7e6	90 23		bcc $a80b			bcc 	_TKNotNumber
.a7e8	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7ea	b0 1f		bcs $a80b			bcs 	_TKNotNumber
.a7ec					_TKIsNumber:
.a7ec	e8		inx				inx
.a7ed	20 34 a7	jsr $a734			jsr 	IntFromString 				; convert to integer
.a7f0	48		pha				pha
.a7f1	20 c3 a8	jsr $a8c3			jsr 	TokWriteConstant 			; do constant recursively.
.a7f4	7a		ply				ply
.a7f5	ca		dex				dex
.a7f6	b1 10		lda ($10),y			lda 	(codePtr),y
.a7f8	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7fa	d0 08		bne $a804			bne 	_TKIsPositive
.a7fc	c8		iny				iny									; skip it
.a7fd	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a7ff	20 ba a8	jsr $a8ba			jsr 	TokWriteToken 				; write token out
.a802	80 ad		bra $a7b1			bra 	_TKMainLoop 				; loop back.
.a804					_TKIsPositive:
.a804	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a806	20 ba a8	jsr $a8ba			jsr 	TokWriteToken 				; write token out
.a809	80 a6		bra $a7b1			bra 	_TKMainLoop 				; loop back.
.a80b					_TKNotNumber:
.a80b	a9 09		lda #$09			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a80d	85 18		sta $18				sta 	zTemp2
.a80f	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a811	85 19		sta $19				sta 	zTemp2+1
.a813	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a815	a9 10		lda #$10			lda 	#$10
.a817	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a819					_TKSearch:
.a819	a0 00		ldy #$00			ldy 	#0
.a81b					_TKCompare:
.a81b	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a81d	c8		iny				iny
.a81e	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a820	d0 07		bne $a829			bne 	_TKNext
.a822	98		tya				tya
.a823	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a825	d0 f4		bne $a81b			bne 	_TKCompare 					; found a match.
.a827	80 13		bra $a83c			bra 	_TKFound
.a829	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a82b	38		sec				sec 								; add length+1 to current
.a82c	65 18		adc $18				adc 	zTemp2
.a82e	85 18		sta $18				sta 	zTemp2
.a830	90 02		bcc $a834			bcc 	_TKNNC
.a832	e6 19		inc $19				inc 	zTemp2+1
.a834	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a836	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a838	d0 df		bne $a819			bne 	_TKSearch 					; go try again.
.a83a	80 0f		bra $a84b			bra 	_TKComplete
.a83c					_TKFound:
.a83c	98		tya				tya
.a83d	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a83f	90 e8		bcc $a829			bcc 	_TKNext 					; if < best try next
.a841	f0 e6		beq $a829			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a843	85 1a		sta $1a				sta 	zTemp3 						; update best
.a845	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a847	85 1c		sta $1c				sta 	zTemp4
.a849	80 de		bra $a829			bra 	_TKNext
.a84b					_TKComplete:
.a84b	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a84d	f0 1a		beq $a869			beq		_TKTokenFail 				; if zero no match occurred
.a84f	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a851	88		dey				dey
.a852	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at last character
.a854	c8		iny				iny
.a855	20 aa a8	jsr $a8aa			jsr 	TOKIsIdentifier 			; identifier character
.a858	90 07		bcc $a861			bcc 	_TKOutput 					; if not, then token is okay
.a85a	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a85c	20 aa a8	jsr $a8aa			jsr 	TOKIsIdentifier 			; is that an identifier
.a85f	b0 08		bcs $a869			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a861					_TKOutput:
.a861	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a863	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken
.a866	4c b1 a7	jmp $a7b1			jmp 	_TKMainLoop					; go round again
.a869					_TKTokenFail:
.a869	a0 00		ldy #$00			ldy 	#0
.a86b	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a86d	20 aa a8	jsr $a8aa			jsr 	TOKIsIdentifier
.a870	b0 13		bcs $a885			bcs 	_TKCopyIdent 				; if yes copy it
.a872	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>a875	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a87d	4f 4b 45 4e 49 53 45 00
.a885					_TKCopyIdent:
.a885	c8		iny				iny 								; get next
.a886	b1 10		lda ($10),y			lda 	(codePtr),y
.a888	20 aa a8	jsr $a8aa			jsr 	TOKIsIdentifier 			; if identifier
.a88b	08		php				php 								; save CS on stack
.a88c	88		dey				dey 								; back to character
.a88d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a88f	c8		iny				iny
.a890	c9 2e		cmp #$2e			cmp 	#"."
.a892	d0 02		bne $a896			bne 	_TKNotDot
.a894	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a896					_TKNotDot:
.a896	38		sec				sec
.a897	e9 41		sbc #$41			sbc		#'A'
.a899	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a89b	28		plp				plp 								; CS if next is identifier
.a89c	08		php				php
.a89d	b0 02		bcs $a8a1			bcs 	_TKNotLast					; CC if next is not identifier
.a89f	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a8a1					_TKNotLast:
.a8a1	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken 				; write out
.a8a4	28		plp				plp 								; get test result
.a8a5	b0 de		bcs $a885			bcs 	_TKCopyIdent 				; get the next identifier.
.a8a7	4c b1 a7	jmp $a7b1			jmp 	_TKMainLoop
.a8aa					TOKIsIdentifier:
.a8aa	c9 2e		cmp #$2e			cmp 	#"."
.a8ac	f0 08		beq $a8b6			beq 	_TIIYes
.a8ae	c9 41		cmp #$41			cmp 	#"A"
.a8b0	90 06		bcc $a8b8			bcc 	_TIINo
.a8b2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a8b4	b0 02		bcs $a8b8			bcs 	_TIINo
.a8b6					_TIIYes:
.a8b6	38		sec				sec
.a8b7	60		rts				rts
.a8b8					_TIINo:
.a8b8	18		clc				clc
.a8b9	60		rts				rts
.a8ba					TokWriteToken:
.a8ba	92 16		sta ($16)			sta 	(zTemp1)
.a8bc	e6 16		inc $16				inc 	zTemp1
.a8be	d0 02		bne $a8c2			bne 	_TWTExit
.a8c0	e6 17		inc $17				inc 	zTemp1+1
.a8c2					_TWTExit:
.a8c2	60		rts				rts
.a8c3					TokWriteConstant:
.a8c3	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8c6	29 3f		and #$3f			and		#63
.a8c8	48		pha				pha 								; save on stack
.a8c9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8cc	29 c0		and #$c0			and 	#$C0
.a8ce	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8d1	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8d4	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8d7	f0 0d		beq $a8e6			beq 	_TWCNoCall 					; no, don't call.
.a8d9	5a		phy				phy
.a8da	a0 06		ldy #$06			ldy 	#6
.a8dc					_TWCShift:
.a8dc	20 43 ab	jsr $ab43			jsr 	Unary_Shr
.a8df	88		dey				dey
.a8e0	d0 fa		bne $a8dc			bne 	_TWCShift
.a8e2	7a		ply				ply
.a8e3	20 c3 a8	jsr $a8c3			jsr 	TokWriteConstant
.a8e6					_TWCNoCall:
.a8e6	68		pla				pla
.a8e7	09 80		ora #$80			ora 	#$80						; make digit token
.a8e9	80 cf		bra $a8ba			bra 	TokWriteToken 				; and write it out.
.a8eb					TokQuotedString:
.a8eb	85 18		sta $18				sta 	zTemp2 						; save quote
.a8ed	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8ef	f0 02		beq $a8f3			beq 	_TQDouble
.a8f1	a9 01		lda #$01			lda 	#1
.a8f3					_TQDouble:
.a8f3	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8f4	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken 				; write out
.a8f7	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8f9	85 1a		sta $1a				sta 	zTemp3
.a8fb	a5 17		lda $17				lda 	zTemp1+1
.a8fd	85 1b		sta $1b				sta 	zTemp3+1
.a8ff	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a901	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken
.a904					_TQLoop:
.a904	c8		iny				iny 								; next character
.a905	b1 10		lda ($10),y			lda 	(codePtr),y
.a907	f0 0f		beq $a918			beq 	_TQExit 					; if zero exit
.a909	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a90b	f0 0a		beq $a917			beq 	_TQSkipExit 				; skip it and exit
.a90d	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken 				; write out
.a910	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a912	1a		inc a				inc 	a
.a913	92 1a		sta ($1a)			sta 	(zTemp3)
.a915	80 ed		bra $a904			bra 	_TQLoop						; go round
.a917					_TQSkipExit:
.a917	c8		iny				iny
.a918					_TQExit:
.a918	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a91a	20 ba a8	jsr $a8ba			jsr 	TOKWriteToken
.a91d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a91e					EditProgram:
.a91e	ad 89 10	lda $1089			lda 	VarMemory+1
.a921	1a		inc a				inc 	a
.a922	c9 9f		cmp #$9f			cmp 	#MemoryEnd >> 8
.a924	b0 3c		bcs $a962			bcs 	_EPMemory
.a926	a2 00		ldx #$00			ldx 	#0
.a928	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a92a	85 10		sta $10				sta 	codePtr
.a92c	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a92e	85 11		sta $11				sta 	codePtr+1
.a930	a0 00		ldy #$00			ldy 	#0
.a932	a2 ff		ldx #$ff			ldx 	#255
.a934	20 04 a4	jsr $a404			jsr 	ExtractIntegerToTOS
.a937	98		tya				tya
.a938	18		clc				clc
.a939	65 10		adc $10				adc 	codePtr
.a93b	85 10		sta $10				sta 	codePtr
.a93d	90 02		bcc $a941			bcc 	_EPNoCarry
.a93f	e6 11		inc $11				inc 	codePtr+1
.a941					_EPNoCarry:
.a941	20 65 a9	jsr $a965			jsr 	EDFindLine
.a944	90 0f		bcc $a955			bcc 	_EPNotFound
.a946	a5 16		lda $16				lda 	zTemp1
.a948	48		pha				pha
.a949	a5 17		lda $17				lda 	zTemp1+1
.a94b	48		pha				pha
.a94c	20 9c a9	jsr $a99c			jsr 	EDDeleteLine
.a94f	68		pla				pla
.a950	85 17		sta $17				sta 	zTemp1+1
.a952	68		pla				pla
.a953	85 16		sta $16				sta 	zTemp1
.a955					_EPNotFound:
.a955	b2 10		lda ($10)			lda 	(codePtr)
.a957	f0 03		beq $a95c			beq 	_EPNoInsert
.a959	20 c1 a9	jsr $a9c1			jsr 	EDInsertLine
.a95c					_EPNoInsert:
.a95c	20 4a a5	jsr $a54a			jsr 	ResetForRun
.a95f	4c 4f a0	jmp $a04f			jmp 	NewCommand
.a962					_EPMemory:
.a962	4c e8 a5	jmp $a5e8			jmp 	OutOfMemoryError
.a965					EDFindLine:
.a965	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a967	85 16		sta $16				sta 	zTemp1
.a969	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a96b	85 17		sta $17				sta 	zTemp1+1
.a96d					_EDFLLoop:
.a96d	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a96f	b1 16		lda ($16),y			lda 	(zTemp1),y
.a971	f0 25		beq $a998			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a973	c8		iny				iny
.a974	38		sec				sec
.a975	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a978	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a97a	aa		tax				tax	 								; this will return 10.
.a97b	ad 00 0d	lda $0d00			lda 	stack1
.a97e	c8		iny				iny
.a97f	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a981	90 15		bcc $a998			bcc 	_EDFLFail					; if target < current then failed.
.a983	d0 04		bne $a989			bne 	_EDFLNext 					; if non-zero then goto next
.a985	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a987	f0 11		beq $a99a			beq 	_EDFLFound
.a989					_EDFLNext:
.a989	a0 00		ldy #$00			ldy 	#0 							; get offset
.a98b	18		clc				clc
.a98c	b1 16		lda ($16),y			lda 	(zTemp1),y
.a98e	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a990	85 16		sta $16				sta 	zTemp1
.a992	90 d9		bcc $a96d			bcc 	_EDFLLoop
.a994	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a996	80 d5		bra $a96d			bra 	_EDFLLoop
.a998					_EDFLFail:
.a998	18		clc				clc
.a999	60		rts				rts
.a99a					_EDFLFound:
.a99a	38		sec				sec
.a99b	60		rts				rts
.a99c					EDDeleteLine:
.a99c	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a99e	a2 00		ldx #$00			ldx 	#0
.a9a0	b1 16		lda ($16),y			lda 	(zTemp1),y
.a9a2	a8		tay				tay 								; put in Y
.a9a3					_EDDelLoop:
.a9a3	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a9a5	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a9a7	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a9a9	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a9ac	d0 07		bne $a9b5			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a9ae	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a9b0	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a9b3	f0 08		beq $a9bd			beq		_EDDelExit
.a9b5					_EDDelNext:
.a9b5	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a9b7	d0 ea		bne $a9a3			bne 	_EDDelLoop
.a9b9	e6 17		inc $17				inc 	zTemp1+1
.a9bb	80 e6		bra $a9a3			bra 	_EDDelLoop
.a9bd					_EDDelExit:
.a9bd	20 70 a5	jsr $a570			jsr 	ResetVarMemory
.a9c0	60		rts				rts
.a9c1					EDInsertLine:
.a9c1	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a9c4	85 1a		sta $1a				sta 	zTemp3
.a9c6	ad 89 10	lda $1089			lda 	VarMemory+1
.a9c9	85 1b		sta $1b				sta 	zTemp3+1
.a9cb	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9cd					_EDGetLength:
.a9cd	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9cf	f0 0d		beq $a9de			beq 	_EDGotLength 				; if 0, Y is the length
.a9d1	c8		iny				iny
.a9d2	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9d4	b0 f7		bcs $a9cd			bcs 	_EDGetLength
.a9d6	98		tya				tya 								; get original position
.a9d7	3a		dec a				dec 	a
.a9d8	18		clc				clc
.a9d9	71 10		adc ($10),y			adc 	(codePtr),y
.a9db	a8		tay				tay
.a9dc	80 ef		bra $a9cd			bra 	_EDGetLength
.a9de					_EDGotLength:
.a9de	98		tya				tya
.a9df	18		clc				clc
.a9e0	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9e2	48		pha				pha 								; save total size (e.g. offset)
.a9e3	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9e5	a8		tay				tay 								; in Y
.a9e6	a2 00		ldx #$00			ldx 	#0
.a9e8					_EDInsLoop:
.a9e8	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9ea	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9ec	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9ee	c5 16		cmp $16				cmp 	zTemp1
.a9f0	d0 06		bne $a9f8			bne 	_EDINextShift
.a9f2	a5 1b		lda $1b				lda 	zTemp3+1
.a9f4	c5 17		cmp $17				cmp 	zTemp1+1
.a9f6	f0 0a		beq $aa02			beq 	_EDIShiftOver
.a9f8					_EDINextShift:
.a9f8	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9fa	d0 02		bne $a9fe			bne 	_EDINoBorrow
.a9fc	c6 1b		dec $1b				dec 	zTemp3+1
.a9fe					_EDINoBorrow:
.a9fe	c6 1a		dec $1a				dec 	zTemp3
.aa00	80 e6		bra $a9e8			bra 	_EDInsLoop
.aa02					_EDIShiftOver:
.aa02	68		pla				pla 								; this is the size + others, e.g. offset
.aa03	a0 00		ldy #$00			ldy 	#0
.aa05	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.aa07	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.aa0a	c8		iny				iny
.aa0b	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa0d	ad 00 0d	lda $0d00			lda 	stack1
.aa10	c8		iny				iny
.aa11	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa13	c8		iny				iny 								; where the code goes.
.aa14	a2 00		ldx #$00			ldx 	#0 							; comes from
.aa16					_EDICopyCode:
.aa16	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.aa18	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.aa1a	c8		iny				iny 								; bump pointers
.aa1b	e6 10		inc $10				inc 	codePtr
.aa1d	d0 02		bne $aa21			bne 	_EDINoCarry
.aa1f	e6 11		inc $11				inc 	codePtr+1
.aa21					_EDINoCarry:
.aa21	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.aa23	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.aa25	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa27	d0 ed		bne $aa16			bne 	_EDICopyCode
.aa29	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa2a					Stack_Empty:
.aa2a	a2 00		ldx #$00			ldx 	#0
.aa2c	60		rts				rts
.aa2d					Stack_Drop:
.aa2d	ca		dex				dex
.aa2e	60		rts				rts
.aa2f					Stack_Dup:
.aa2f	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa32	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa35	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa38	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa3b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa3e	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa41	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa44	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa47	e8		inx				inx 								; bump stack pointer
.aa48	60		rts				rts
.aa49					Stack_Nip:
.aa49	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa4c	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa4f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa52	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa55	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa58	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa5b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa5e	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa61	ca		dex				dex 								; drop tos
.aa62	60		rts				rts
.aa63					Stack_Over:
.aa63	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa66	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa69	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa6c	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa6f	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa72	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa75	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa78	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa7b	e8		inx				inx 							; bump stack pointer
.aa7c	60		rts				rts
.aa7d					Stack_Swap:
.aa7d	5a		phy				phy
.aa7e	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa81	a8		tay				tay
.aa82	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa85	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa88	98		tya				tya
.aa89	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa8c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa8f	a8		tay				tay
.aa90	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa93	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa96	98		tya				tya
.aa97	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa9a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa9d	a8		tay				tay
.aa9e	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aaa1	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaa4	98		tya				tya
.aaa5	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aaa8	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaab	a8		tay				tay
.aaac	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aaaf	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aab2	98		tya				tya
.aab3	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aab6	7a		ply				ply
.aab7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aab8					Unary_Absolute:
.aab8	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aabb	30 01		bmi $aabe			bmi 	Unary_Negate
.aabd	60		rts				rts
.aabe					Unary_Negate:
.aabe	38		sec				sec
.aabf	a9 00		lda #$00			lda		#0
.aac1	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aac4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aac7	a9 00		lda #$00			lda		#0
.aac9	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aacc	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aacf	a9 00		lda #$00			lda		#0
.aad1	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aad4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aad7	a9 00		lda #$00			lda		#0
.aad9	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aadc	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aadf	60		rts				rts
.aae0					Unary_Not:
.aae0	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aae3	49 ff		eor #$ff			eor 	#$FF
.aae5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aae8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaeb	49 ff		eor #$ff			eor 	#$FF
.aaed	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaf0	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aaf3	49 ff		eor #$ff			eor 	#$FF
.aaf5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaf8	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aafb	49 ff		eor #$ff			eor 	#$FF
.aafd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab00	60		rts				rts
.ab01					Unary_Increment:
.ab01	fe 00 0c	inc $0c00,x			inc 	stack0,x
.ab04	d0 0d		bne $ab13			bne 	_UIExit
.ab06	fe 00 0d	inc $0d00,x			inc 	stack1,x
.ab09	d0 08		bne $ab13			bne 	_UIExit
.ab0b	fe 00 0e	inc $0e00,x			inc 	stack2,x
.ab0e	d0 03		bne $ab13			bne 	_UIExit
.ab10	fe 00 0f	inc $0f00,x			inc 	stack3,x
.ab13					_UIExit:
.ab13	60		rts				rts
.ab14					Unary_Decrement:
.ab14	38		sec				sec
.ab15	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ab18	e9 01		sbc #$01			sbc 	#1
.ab1a	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab1d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab20	e9 00		sbc #$00			sbc 	#0
.ab22	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab25	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab28	e9 00		sbc #$00			sbc 	#0
.ab2a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab2d	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab30	e9 00		sbc #$00			sbc 	#0
.ab32	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab35	60		rts				rts
.ab36					Unary_Shl:
.ab36	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab39	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab3c	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab3f	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab42	60		rts				rts
.ab43					Unary_Shr:
.ab43	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab46	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab49	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab4c	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab4f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab50					Mem_Peek:
.ab50	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab53	85 14		sta $14				sta 	zTemp0
.ab55	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab58	85 15		sta $15				sta 	zTemp0+1
.ab5a	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab5c	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab5f	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab62	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab65	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab68	60		rts				rts
.ab69					Mem_WPeek:
.ab69	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab6c	85 14		sta $14				sta 	zTemp0
.ab6e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab71	85 15		sta $15				sta 	zTemp0+1
.ab73	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab75	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab78	5a		phy				phy 								; read msb
.ab79	a0 01		ldy #$01			ldy 	#1
.ab7b	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab7d	7a		ply				ply
.ab7e	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab81	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab84	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab87	60		rts				rts
.ab88					Mem_DPeek:
.ab88	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab8b	85 14		sta $14				sta 	zTemp0
.ab8d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab90	85 15		sta $15				sta 	zTemp0+1
.ab92	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab94	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab97	5a		phy				phy 								; read msb
.ab98	a0 01		ldy #$01			ldy 	#1
.ab9a	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab9c	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab9f	c8		iny				iny
.aba0	b1 14		lda ($14),y			lda 	(zTemp0),y
.aba2	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aba5	c8		iny				iny
.aba6	b1 14		lda ($14),y			lda 	(zTemp0),y
.aba8	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abab	7a		ply				ply
.abac	60		rts				rts
.abad					Mem_Poke:
.abad	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abb0	85 14		sta $14				sta 	zTemp0
.abb2	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abb5	85 15		sta $15				sta 	zTemp0+1
.abb7	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abba	92 14		sta ($14)			sta 	(zTemp0)
.abbc	ca		dex				dex
.abbd	ca		dex				dex
.abbe	60		rts				rts
.abbf					Mem_WPoke:
.abbf	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abc2	85 14		sta $14				sta 	zTemp0
.abc4	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abc7	85 15		sta $15				sta 	zTemp0+1
.abc9	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abcc	92 14		sta ($14)			sta 	(zTemp0)
.abce	5a		phy				phy
.abcf	a0 01		ldy #$01			ldy 	#1
.abd1	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abd4	91 14		sta ($14),y			sta 	(zTemp0),y
.abd6	7a		ply				ply
.abd7	ca		dex				dex
.abd8	ca		dex				dex
.abd9	60		rts				rts
.abda					Mem_DPoke:
.abda	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abdd	85 14		sta $14				sta 	zTemp0
.abdf	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abe2	85 15		sta $15				sta 	zTemp0+1
.abe4	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abe7	92 14		sta ($14)			sta 	(zTemp0)
.abe9	5a		phy				phy
.abea	a0 01		ldy #$01			ldy 	#1
.abec	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abef	91 14		sta ($14),y			sta 	(zTemp0),y
.abf1	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abf4	c8		iny				iny
.abf5	91 14		sta ($14),y			sta 	(zTemp0),y
.abf7	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abfa	c8		iny				iny
.abfb	91 14		sta ($14),y			sta 	(zTemp0),y
.abfd	7a		ply				ply
.abfe	ca		dex				dex
.abff	ca		dex				dex
.ac00	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.ac01					Stack_Add:
.ac01	ca		dex				dex
.ac02					Stack_Add_No_Dex:
.ac02	18		clc				clc
.ac03	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac06	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.ac09	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac0c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac0f	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.ac12	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac15	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac18	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.ac1b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac1e	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac21	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.ac24	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac27	60		rts				rts
.ac28					Stack_Sub:
.ac28	ca		dex				dex
.ac29	38		sec				sec
.ac2a	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac2d	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac30	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac33	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac36	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac39	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac3c	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac3f	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac42	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac45	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac48	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac4b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac4e	60		rts				rts
.ac4f					Stack_And:
.ac4f	ca		dex				dex
.ac50	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac53	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac56	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac59	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac5c	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac5f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac62	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac65	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac68	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac6b	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac6e	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac71	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac74	60		rts				rts
.ac75					Stack_Xor:
.ac75	ca		dex				dex
.ac76	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac79	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac7c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac7f	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac82	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac85	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac88	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac8b	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac8e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac91	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac94	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac97	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac9a	60		rts				rts
.ac9b					Stack_Or:
.ac9b	ca		dex				dex
.ac9c	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac9f	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.aca2	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aca5	bd 00 0d	lda $0d00,x			lda		stack1,x
.aca8	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acab	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acae	bd 00 0e	lda $0e00,x			lda		stack2,x
.acb1	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acb4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acb7	bd 00 0f	lda $0f00,x			lda		stack3,x
.acba	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acbd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acc0	60		rts				rts
.acc1					Stack_Shl:
.acc1	38		sec				sec
.acc2	80 01		bra $acc5			bra 	StackShift
.acc4					Stack_Shr:
.acc4	18		clc				clc
.acc5					StackShift:
.acc5	08		php				php
.acc6	ca		dex				dex
.acc7	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.acca	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.accc	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.accf	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acd2	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acd5	d0 13		bne $acea			bne 	_SSZero
.acd7					_SSLoop:
.acd7	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acda	30 1a		bmi $acf6			bmi 	_SSDone 					; completed ?
.acdc	28		plp				plp 								; restore flag
.acdd	08		php				php
.acde	b0 05		bcs $ace5			bcs 	_SSLeft 					; do either shift.
.ace0	20 43 ab	jsr $ab43			jsr 	Unary_Shr
.ace3	80 f2		bra $acd7			bra 	_SSLoop
.ace5					_SSLeft:
.ace5	20 36 ab	jsr $ab36			jsr 	Unary_Shl
.ace8	80 ed		bra $acd7			bra 	_SSLoop
.acea					_SSZero:
.acea	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.aced	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acf0	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acf3	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acf6					_SSDone:
.acf6	28		plp				plp 								; throw flag.
.acf7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acf8					MulInteger32:
.acf8	ca		dex				dex
.acf9	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.acfc	85 1e		sta $1e				sta 	zLTemp1
.acfe	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ad01	85 1f		sta $1f				sta 	zLTemp1+1
.ad03	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ad06	85 20		sta $20				sta 	zLTemp1+2
.ad08	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ad0b	85 21		sta $21				sta 	zLTemp1+3
.ad0d	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ad10	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ad13	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ad16	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ad19					_BFMMultiply:
.ad19	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.ad1b	29 01		and #$01			and 	#1
.ad1d	f0 03		beq $ad22			beq 	_BFMNoAdd
.ad1f	20 02 ac	jsr $ac02			jsr 	Stack_Add_No_Dex 			; co-opt this code
.ad22					_BFMNoAdd:
.ad22	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.ad25	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad28	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad2b	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad2e	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad30	66 20		ror $20				ror 	zLTemp1+2
.ad32	66 1f		ror $1f				ror 	zLTemp1+1
.ad34	66 1e		ror $1e				ror 	zLTemp1
.ad36	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad38	05 1f		ora $1f				ora 	zLTemp1+1
.ad3a	05 20		ora $20				ora 	zLTemp1+2
.ad3c	05 21		ora $21				ora 	zLTemp1+3
.ad3e	d0 d9		bne $ad19			bne 	_BFMMultiply
.ad40	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad41					DivInteger32:
.ad41	ca		dex				dex
.ad42	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad45	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad48	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad4b	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad4e	d0 14		bne $ad64			bne 	_BFDOkay
.ad50	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>ad53	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad5b	20 42 59 20 5a 45 52 4f 00
.ad64					_BFDOkay:
.ad64	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad66	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad68	64 20		stz $20				stz 	zLTemp1+2
.ad6a	64 21		stz $21				stz 	zLTemp1+3
.ad6c	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad6f	20 ca ad	jsr $adca			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad72	e8		inx				inx
.ad73	20 ca ad	jsr $adca			jsr 	CheckIntegerNegate
.ad76	ca		dex				dex
.ad77	5a		phy				phy 								; Y is the counter
.ad78	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad7a					_BFDLoop:
.ad7a	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad7d	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad80	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad83	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad86	26 1e		rol $1e				rol 	zLTemp1
.ad88	26 1f		rol $1f				rol 	zLTemp1+1
.ad8a	26 20		rol $20				rol 	zLTemp1+2
.ad8c	26 21		rol $21				rol 	zLTemp1+3
.ad8e	38		sec				sec
.ad8f	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad91	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad94	48		pha				pha
.ad95	a5 1f		lda $1f				lda 	zLTemp1+1
.ad97	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad9a	48		pha				pha
.ad9b	a5 20		lda $20				lda 	zLTemp1+2
.ad9d	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ada0	48		pha				pha
.ada1	a5 21		lda $21				lda 	zLTemp1+3
.ada3	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ada6	90 15		bcc $adbd			bcc 	_BFDNoAdd
.ada8	85 21		sta $21				sta 	zLTemp1+3 					; update A
.adaa	68		pla				pla
.adab	85 20		sta $20				sta 	zLTemp1+2
.adad	68		pla				pla
.adae	85 1f		sta $1f				sta 	zLTemp1+1
.adb0	68		pla				pla
.adb1	85 1e		sta $1e				sta 	zLTemp1+0
.adb3	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.adb6	09 01		ora #$01			ora 	#1
.adb8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adbb	80 03		bra $adc0			bra 	_BFDNext
.adbd					_BFDNoAdd:
.adbd	68		pla				pla 								; Throw away the intermediate calculations
.adbe	68		pla				pla
.adbf	68		pla				pla
.adc0					_BFDNext:
.adc0	88		dey				dey
.adc1	d0 b7		bne $ad7a			bne 	_BFDLoop
.adc3	7a		ply				ply 								; restore Y
.adc4	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.adc7	b0 07		bcs $add0			bcs		IntegerNegateAlways 		; negate the result
.adc9	60		rts				rts
.adca					CheckIntegerNegate:
.adca	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.adcd	30 01		bmi $add0			bmi 	IntegerNegateAlways 		; if so negate it
.adcf	60		rts				rts
.add0					IntegerNegateAlways:
.add0	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.add3	4c be aa	jmp $aabe			jmp 	Unary_Negate
.add6					ModInteger32:
.add6	20 41 ad	jsr $ad41			jsr 	DivInteger32
.add9	a5 1e		lda $1e				lda 	zLTemp1
.addb	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adde	a5 1f		lda $1f				lda 	zLTemp1+1
.ade0	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ade3	a5 20		lda $20				lda 	zLTemp1+2
.ade5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ade8	a5 21		lda $21				lda 	zLTemp1+3
.adea	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aded	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adee					Comp_Equal:
.adee	38		sec				sec
.adef	80 01		bra $adf2			bra 	Comp_CheckEqual
.adf1					Comp_NotEqual:
.adf1	18		clc				clc
.adf2					Comp_CheckEqual:
.adf2	08		php				php
.adf3	ca		dex				dex
.adf4	bd 00 0c	lda $0c00,x			lda		stack0,x
.adf7	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.adfa	d0 16		bne $ae12			bne 	_CCENonZero
.adfc	bd 00 0d	lda $0d00,x			lda		stack1,x
.adff	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ae02	d0 0e		bne $ae12			bne 	_CCENonZero
.ae04	bd 00 0e	lda $0e00,x			lda		stack2,x
.ae07	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ae0a	d0 06		bne $ae12			bne 	_CCENonZero
.ae0c	bd 00 0f	lda $0f00,x			lda		stack3,x
.ae0f	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ae12					_CCENonZero:
.ae12	f0 02		beq $ae16			beq 	_CCENotSet
.ae14	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ae16					_CCENotSet:
.ae16					CompCheckFlip:
.ae16	28		plp				plp 								; if carry set, we want $FF if equal
.ae17	90 02		bcc $ae1b			bcc 	CompReturn
.ae19	49 ff		eor #$ff			eor 	#$FF
.ae1b					CompReturn:
.ae1b	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.ae1e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae21	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae24	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae27	60		rts				rts
.ae28					Comp_Less:
.ae28	18		clc				clc
.ae29	80 01		bra $ae2c			bra 	Comp_LessCont
.ae2b					Comp_GreaterEqual:
.ae2b	38		sec				sec
.ae2c					Comp_LessCont:
.ae2c	08		php				php
.ae2d	ca		dex				dex
.ae2e	38		sec				sec
.ae2f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae32	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae35	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae38	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae3b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae3e	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae41	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae44	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae47	50 02		bvc $ae4b			bvc 	_CLNoFlip 					; unsigned -> signed
.ae49	49 80		eor #$80			eor 	#$80
.ae4b					_CLNoFlip:
.ae4b	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae4d	f0 c7		beq $ae16			beq 	CompCheckFlip
.ae4f	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae51	80 c3		bra $ae16			bra 	CompCheckFlip
.ae53					Comp_LessEqual:
.ae53	38		sec				sec
.ae54	80 01		bra $ae57			bra 	Comp_LessEqualCont
.ae56					Comp_Greater:
.ae56	18		clc				clc
.ae57					Comp_LessEqualCont:
.ae57	08		php				php
.ae58	ca		dex				dex
.ae59	38		sec				sec
.ae5a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae5d	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae60	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae63	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae66	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae69	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae6c	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae6f	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae72	50 02		bvc $ae76			bvc 	_CLENoFlip 					; unsigned -> signed
.ae74	49 80		eor #$80			eor 	#$80
.ae76					_CLENoFlip:
.ae76	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae78	f0 9c		beq $ae16			beq 	CompCheckFlip
.ae7a	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae7c	80 98		bra $ae16			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae7e					Allocate:
.ae7e	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae81	29 80		and #$80			and 	#$80
.ae83	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae86	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae89	d0 26		bne $aeb1			bne 	_ALBad
.ae8b	18		clc				clc 								; add to varmemory pointer saving
.ae8c	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae8f	48		pha				pha
.ae90	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae93	8d 88 10	sta $1088			sta 	VarMemory
.ae96	ad 89 10	lda $1089			lda 	VarMemory+1
.ae99	48		pha				pha
.ae9a	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae9d	8d 89 10	sta $1089			sta 	VarMemory+1
.aea0	68		pla				pla 								; pop and save
.aea1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aea4	68		pla				pla
.aea5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aea8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aeab	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.aeae	b0 01		bcs $aeb1			bcs 	_ALBad
.aeb0	60		rts				rts
.aeb1					_ALBad:
.aeb1	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>aeb4	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>aebc	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.aebe					Cmd_List:
.aebe	20 3f a5	jsr $a53f			jsr 	ResetCodePointer 			; back to the beginning
.aec1	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.aec3	64 19		stz $19				stz 	zTemp2+1
.aec5	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.aec7	f0 0b		beq $aed4			beq 	_CLINone
.aec9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.aecc	85 18		sta $18				sta 	zTemp2
.aece	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aed1	85 19		sta $19				sta 	zTemp2+1
.aed3	ca		dex				dex 								; and pop the tos
.aed4					_CLINone:
.aed4	a9 1e		lda #$1e			lda 	#30 						; list this many lines
.aed6	85 16		sta $16				sta 	zTemp1
.aed8					_CLILoop
.aed8	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aeda	f0 24		beq $af00			beq 	_CLIEnd
.aedc	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aede	38		sec				sec
.aedf	b1 10		lda ($10),y			lda 	(codePtr),y
.aee1	e5 18		sbc $18				sbc 	zTemp2
.aee3	c8		iny				iny
.aee4	b1 10		lda ($10),y			lda 	(codePtr),y
.aee6	e5 19		sbc $19				sbc 	zTemp2+1
.aee8	90 09		bcc $aef3			bcc 	_CLISkip
.aeea	da		phx				phx
.aeeb	20 03 af	jsr $af03			jsr 	ListCurrent 				; list the line.
.aeee	fa		plx				plx
.aeef	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aef1	f0 0d		beq $af00			beq 	_CLIEnd
.aef3					_CLISkip:
.aef3	18		clc				clc
.aef4	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aef6	65 10		adc $10				adc 	codePtr
.aef8	85 10		sta $10				sta 	codePtr
.aefa	90 dc		bcc $aed8			bcc 	_CLILoop
.aefc	e6 11		inc $11				inc 	codePtr+1
.aefe	80 d8		bra $aed8			bra 	_CLILoop
.af00					_CLIEnd:
.af00	4c 3b a0	jmp $a03b			jmp 	WarmStart
.af03					ListCurrent:
.af03	a0 03		ldy #$03			ldy 	#3
.af05	b1 10		lda ($10),y			lda 	(codePtr),y
.af07	c9 02		cmp #$02			cmp 	#2
.af09	d0 0e		bne $af19			bne 	_LCList
.af0b	a9 0d		lda #$0d			lda 	#13
.af0d	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af10	20 19 af	jsr $af19			jsr 	_LCList
.af13	a9 0d		lda #$0d			lda 	#13
.af15	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af18	60		rts				rts
.af19					_LCList:
.af19	a9 05		lda #$05			lda 	#CTH_LINENO
.af1b	20 ac a2	jsr $a2ac			jsr 	ExternColour 				; set colour
.af1e	a0 01		ldy #$01			ldy 	#1							; print line#
.af20	b1 10		lda ($10),y			lda 	(codePtr),y
.af22	48		pha				pha
.af23	c8		iny				iny
.af24	b1 10		lda ($10),y			lda 	(codePtr),y
.af26	a8		tay				tay
.af27	68		pla				pla
.af28	20 3d a6	jsr $a63d			jsr 	ErrorPrint16
.af2b	a8		tay				tay
.af2c					_LCPadOut:
.af2c	a9 20		lda #$20			lda 	#' '
.af2e	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af31	c8		iny				iny
.af32	c0 05		cpy #$05			cpy 	#5
.af34	d0 f6		bne $af2c			bne 	_LCPadOut
.af36	a0 03		ldy #$03			ldy 	#3 							; start here
.af38					_LCLoop:
.af38	a9 20		lda #$20			lda 	#' '						; space
.af3a	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af3d					_LCLoopNoSpace:
.af3d	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.af3f	30 44		bmi $af85			bmi 	_LCIdentConst 				; identifier or constant
.af41	d0 05		bne $af48			bne 	_LCStringToken
.af43	a9 0d		lda #$0d			lda 	#13
.af45	4c a2 a2	jmp $a2a2			jmp 	ExternPrint
.af48					_LCStringToken:
.af48	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af4a	90 0c		bcc $af58			bcc		_LCString
.af4c	20 c6 af	jsr $afc6			jsr 	ListPrintToken
.af4f	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af51	c8		iny				iny 								; advance pointer
.af52	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af54	f0 e7		beq $af3d			beq 	_LCLoopNoSpace
.af56	80 e0		bra $af38			bra 	_LCLoop 					; go round again.
.af58					_LCString:
.af58	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af59	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af5b	a2 22		ldx #$22			ldx 	#'"'
.af5d	b0 0a		bcs $af69			bcs 	_LCSSkip
.af5f	a9 0a		lda #$0a			lda 	#CTH_COMMENT
.af61	a2 27		ldx #$27			ldx 	#"'"
.af63	c0 03		cpy #$03			cpy 	#3
.af65	f0 02		beq $af69			beq 	_LCSSkip
.af67	a9 09		lda #$09			lda 	#CTH_LCOMMENT
.af69					_LCSSkip:
.af69	20 ac a2	jsr $a2ac			jsr 	ExternColour 				; set colour
.af6c	8a		txa				txa
.af6d	48		pha				pha 								; save end quote on stack.
.af6e	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af71	c8		iny				iny 								; skip type size
.af72	c8		iny				iny
.af73					_LCSPrint:
.af73	b1 10		lda ($10),y			lda 	(codePtr),y
.af75	c8		iny				iny
.af76	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af78	f0 05		beq $af7f			beq 	_LCSExit
.af7a	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af7d	80 f4		bra $af73			bra 	_LCSPrint
.af7f					_LCSExit:
.af7f	68		pla				pla
.af80	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af83	80 b3		bra $af38			bra 	_LCLoop
.af85					_LCIdentConst:
.af85	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af87	90 1e		bcc $afa7			bcc 	_LCConstant
.af89	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af8b	20 ac a2	jsr $a2ac			jsr 	ExternColour
.af8e					_LCCIdLoop:
.af8e	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af90	29 1f		and #$1f			and 	#$1F 						; convert
.af92	18		clc				clc
.af93	69 41		adc #$41			adc 	#'A'
.af95	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af97	d0 02		bne $af9b			bne 	_LCCNotDot
.af99	a9 2e		lda #$2e			lda 	#'.'
.af9b					_LCCNotDot:
.af9b	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.af9e	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.afa0	c8		iny				iny
.afa1	c9 e0		cmp #$e0			cmp 	#$E0
.afa3	b0 93		bcs $af38			bcs 	_LCLoop
.afa5	80 e7		bra $af8e			bra 	_LCCIdLoop
.afa7					_LCConstant:
.afa7	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.afa9	20 ac a2	jsr $a2ac			jsr 	ExternColour
.afac	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.afae	20 04 a4	jsr $a404			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.afb1	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.afb4	48		pha				pha
.afb5	20 62 a6	jsr $a662			jsr 	IntegerToString 			; this could corrupt stack if full :)
.afb8	20 50 a6	jsr $a650			jsr 	ErrorPrintIntegerBuffer
.afbb	68		pla				pla 								; sign back
.afbc	10 05		bpl $afc3			bpl 	_LCLoop2
.afbe	a9 2d		lda #$2d			lda 	#"-"
.afc0	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.afc3					_LCLoop2:
.afc3	4c 38 af	jmp $af38			jmp 	_LCLoop
.afc6					ListPrintToken:
.afc6	5a		phy				phy
.afc7	48		pha				pha 								; token colour
.afc8	a9 07		lda #$07			lda 	#CTH_TOKEN
.afca	20 ac a2	jsr $a2ac			jsr 	ExternColour
.afcd	fa		plx				plx
.afce	a9 09		lda #$09			lda 	#KeywordText & $FF
.afd0	85 14		sta $14				sta 	zTemp0
.afd2	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.afd4	85 15		sta $15				sta 	zTemp0+1
.afd6					_LPTLoop:
.afd6	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.afd8	f0 0e		beq $afe8			beq 	_LPTFound
.afda	ca		dex				dex
.afdb	b2 14		lda ($14)			lda 	(zTemp0)
.afdd	38		sec				sec									; add 1, it's length+name
.afde	65 14		adc $14				adc 	zTemp0
.afe0	85 14		sta $14				sta 	zTemp0
.afe2	90 f2		bcc $afd6			bcc 	_LPTLoop
.afe4	e6 15		inc $15				inc 	zTemp0+1
.afe6	80 ee		bra $afd6			bra 	_LPTLoop
.afe8					_LPTFound:
.afe8	a0 01		ldy #$01			ldy 	#1 							; start here.
.afea					_LPTShow:
.afea	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afec	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afee	90 06		bcc $aff6			bcc 	_LPTExit
.aff0	c8		iny				iny
.aff1	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.aff4	80 f4		bra $afea			bra 	_LPTShow
.aff6					_LPTExit:
.aff6	7a		ply				ply
.aff7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.aff8					Cmd_Renumber:
.aff8	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.affa	85 16		sta $16				sta 	zTemp1
.affc	a9 11		lda #$11			lda 	#ProgramStart >> 8
.affe	85 17		sta $17				sta 	zTemp1+1
.b000	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.b002	85 18		sta $18				sta 	zTemp2
.b004	a9 03		lda #$03			lda 	#1000 >> 8
.b006	85 19		sta $19				sta 	zTemp2+1
.b008					_CRLoop:
.b008	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.b00a	f0 23		beq $b02f			beq 	_CRExit
.b00c	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.b00e	a5 18		lda $18				lda 	zTemp2
.b010	91 16		sta ($16),y			sta 	(zTemp1),y
.b012	c8		iny				iny
.b013	a5 19		lda $19				lda 	zTemp2+1
.b015	91 16		sta ($16),y			sta 	(zTemp1),y
.b017	18		clc				clc 								; add 10 to new number
.b018	a5 18		lda $18				lda 	zTemp2
.b01a	69 0a		adc #$0a			adc 	#10
.b01c	85 18		sta $18				sta 	zTemp2
.b01e	90 02		bcc $b022			bcc 	_CRNoCarry
.b020	e6 19		inc $19				inc 	zTemp2+1
.b022					_CRNoCarry:
.b022	18		clc				clc 								; go to next line
.b023	b2 16		lda ($16)			lda 	(zTemp1)
.b025	65 16		adc $16				adc 	zTemp1
.b027	85 16		sta $16				sta 	zTemp1
.b029	90 dd		bcc $b008			bcc 	_CRLoop
.b02b	e6 17		inc $17				inc 	zTemp1+1
.b02d	80 d9		bra $b008			bra 	_CRLoop
.b02f					_CRExit:
.b02f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.b030					System_RUN:
.b030	20 4a a5	jsr $a54a			jsr		ResetForRun 				; clear vars, stacks etc.
.b033	20 3f a5	jsr $a53f			jsr 	ResetCodePointer 			; point to first thing to do.
.b036	4c 85 a3	jmp $a385			jmp 	Execute						; and run
.b039					System_END:
.b039	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b03c					System_STOP:
.b03c	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b03f	53 54 4f 50 00					.text 	"STOP",0
.b044					System_Assert:
.b044	ca		dex				dex
.b045	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b048	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b04b	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b04e	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b051	d0 0a		bne $b05d			bne 	_SAOkay
.b053	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b056	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b05d	60		rts		_SAOkay:rts
.b05e					System_New:
.b05e	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b061	20 4a a5	jsr $a54a			jsr		ResetForRun 				; clear vars, stacks etc.
.b064	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b067					System_Old:
.b067	20 3f a5	jsr $a53f			jsr 	ResetCodePointer 			; start of first line.
.b06a					_SOFindZero:
.b06a	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b06c	f0 15		beq $b083			beq 	_SOFoundEnd
.b06e	c8		iny				iny
.b06f	d0 f9		bne $b06a			bne 	_SOFindZero
.b071	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b074	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b07c	45 43 4f 56 45 52 00
.b083					_SOFoundEnd:
.b083	c8		iny				iny 								; update the offset
.b084	8c 00 11	sty $1100			sty 	ProgramStart
.b087	20 4a a5	jsr $a54a			jsr 	ResetForRun 				; redo all stacks etc.
.b08a	60		rts				rts
.b08b					System_Sys:
.b08b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b08e	85 14		sta $14				sta 	zTemp0
.b090	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b093	85 15		sta $15				sta 	zTemp0+1
.b095	ca		dex				dex
.b096	da		phx				phx
.b097	5a		phy				phy
.b098	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b09b	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b09e	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b0a1	20 b0 b0	jsr $b0b0			jsr 	_SSCall 					; effectively jsr (zTemp)
.b0a4	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b0a7	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b0aa	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b0ad	7a		ply				ply
.b0ae	fa		plx				plx
.b0af	60		rts				rts
.b0b0	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b0b3					System_ShowStack:
.b0b3	da		phx				phx 								; save stack
.b0b4	5a		phy				phy
.b0b5	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b0b7	a9 5b		lda #$5b			lda 	#"["
.b0b9	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.b0bc	e0 00		cpx #$00			cpx 	#0 							; empty
.b0be	f0 14		beq $b0d4			beq 	_SSEnd
.b0c0	a2 01		ldx #$01			ldx 	#1 							; start here
.b0c2					_SSLoop:
.b0c2	20 62 a6	jsr $a662			jsr 	IntegerToString 			; print TOS
.b0c5	20 50 a6	jsr $a650			jsr 	ErrorPrintIntegerBuffer
.b0c8	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b0ca	f0 08		beq $b0d4			beq 	_SSEnd
.b0cc	e8		inx				inx	 								; advance pointer print ,
.b0cd	a9 2c		lda #$2c			lda 	#','
.b0cf	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.b0d2	80 ee		bra $b0c2			bra 	_SSLoop
.b0d4					_SSEnd:
.b0d4	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b0d6	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.b0d9	a9 0d		lda #$0d			lda 	#13
.b0db	20 a2 a2	jsr $a2a2			jsr 	ExternPrint
.b0de	7a		ply				ply
.b0df	fa		plx				plx
.b0e0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b0e1					System_Save:
.b0e1	da		phx				phx
.b0e2	5a		phy				phy
.b0e3	20 70 a5	jsr $a570			jsr 	ResetVarMemory 				; make sure start/end are right
.b0e6	20 11 b1	jsr $b111			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0e9	ad 88 10	lda $1088			lda 	VarMemory 					; end address
.b0ec	85 16		sta $16				sta 	zTemp1
.b0ee	ad 89 10	lda $1089			lda 	VarMemory+1
.b0f1	85 17		sta $17				sta 	zTemp1+1
.b0f3	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; program start to YA
.b0f5	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.b0f7	20 fe a2	jsr $a2fe			jsr 	ExternSave
.b0fa	7a		ply				ply
.b0fb	fa		plx				plx
.b0fc	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b0ff					System_Load:
.b0ff	5a		phy				phy
.b100	20 11 b1	jsr $b111			jsr 	SLGetFileName 				; get filename -> zTemp0
.b103	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; program start to YA
.b105	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.b107	20 34 a3	jsr $a334			jsr 	ExternLoad
.b10a	20 4a a5	jsr $a54a			jsr 	ResetForRun 				; re-initialise everything
.b10d	7a		ply				ply
.b10e	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b111					SLGetFileName:
.b111	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b113	f0 4d		beq $b162			beq 	_SLFNFail
.b115	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b118	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b11b	d0 45		bne $b162			bne 	_SLFNFail
.b11d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b120	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b122	d0 3e		bne $b162			bne 	_SLFNFail
.b124	85 17		sta $17				sta 	zTemp1+1 					; copy the filename address to zTemp0/1
.b126	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b129	85 16		sta $16				sta 	zTemp1
.b12b	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; f/n in input buffer.
.b12d	85 14		sta $14				sta 	zTemp0
.b12f	a9 09		lda #$09			lda 	#InputBuffer >> 8
.b131	85 15		sta $15				sta 	zTemp0+1
.b133	da		phx				phx 								; save XY
.b134	5a		phy				phy
.b135	a0 ff		ldy #$ff			ldy 	#255 						; go to the end, copying into input buffer
.b137					_SLCheckEnd:
.b137	c8		iny				iny
.b138	b1 16		lda ($16),y			lda 	(zTemp1),y
.b13a	99 00 09	sta $0900,y			sta 	InputBuffer,y
.b13d	d0 f8		bne $b137			bne 	_SLCheckEnd
.b13f	84 18		sty $18				sty 	zTemp2 						; save end position
.b141	a2 03		ldx #$03			ldx 	#3 							; check to see if ends in .RPL
.b143					_SLCheckDotRPL:
.b143	88		dey				dey
.b144	bd 72 b1	lda $b172,x			lda 	_SLEXT,x
.b147	d1 16		cmp ($16),y			cmp 	(zTemp1),y
.b149	d0 05		bne $b150			bne 	_SLNotMatch
.b14b	ca		dex				dex
.b14c	10 f5		bpl $b143			bpl 	_SLCheckDotRPL
.b14e	80 0f		bra $b15f			bra 	_SLExit 					; yes it does
.b150					_SLNotMatch:
.b150	a2 00		ldx #$00			ldx 	#0
.b152	a4 18		ldy $18				ldy 	zTemp2
.b154					_SLAppend:
.b154	bd 72 b1	lda $b172,x			lda 	_SLEXT,x
.b157	91 14		sta ($14),y			sta 	(zTemp0),y
.b159	f0 04		beq $b15f			beq 	_SLExit
.b15b	e8		inx				inx
.b15c	c8		iny				iny
.b15d	80 f5		bra $b154			bra 	_SLAppend
.b15f					_SLExit:
.b15f	7a		ply				ply
.b160	fa		plx				plx
.b161	60		rts				rts
.b162					_SLFNFail:
.b162	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b165	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b16d	4e 41 4d 45 00
.b172					_SLEXT:
>b172	2e 52 50 4c 00					.text 	".RPL",0

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b177					Identifier:
.b177	88		dey				dey 								; wind back to identifier start
.b178	20 56 a4	jsr $a456			jsr 	IdentifierSearch 			; try to find it.
.b17b	90 2f		bcc $b1ac			bcc 	_IDUnknown 					; not known, give up.
.b17d	48		pha				pha
.b17e					_IDSkip:
.b17e	b1 10		lda ($10),y			lda 	(codePtr),y
.b180	c8		iny				iny
.b181	c9 e0		cmp #$e0			cmp 	#$E0
.b183	90 f9		bcc $b17e			bcc 	_IDSkip
.b185	68		pla				pla
.b186	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b188	d0 36		bne $b1c0			bne 	_IDCall
.b18a	20 74 b2	jsr $b274			jsr 	IndexCheck 					; check index/subscript
.b18d	5a		phy				phy
.b18e	e8		inx				inx 								; make space on stack
.b18f	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b191	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b193	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b196	c8		iny				iny
.b197	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b199	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b19c	c8		iny				iny
.b19d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b19f	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b1a2	c8		iny				iny
.b1a3	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b1a5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b1a8	7a		ply				ply
.b1a9	4c 85 a3	jmp $a385			jmp 	Execute
.b1ac					_IDUnknown:
.b1ac	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b1af	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b1b7	56 41 52 49 41 42 4c 45 00
.b1c0					_IDCall:
.b1c0	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b1c2	d0 1b		bne $b1df			bne 	_IDCode
.b1c4	20 26 b4	jsr $b426			jsr 	StructPushCurrent 			; push current on the stack.
.b1c7	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b1c9	c6 12		dec $12				dec 	StructSP
.b1cb	92 12		sta ($12)			sta 	(StructSP)
.b1cd	a0 01		ldy #$01			ldy 	#1 							; line address
.b1cf	b2 22		lda ($22)			lda 	(idDataAddr)
.b1d1	85 10		sta $10				sta 	codePtr
.b1d3	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b1d5	85 11		sta $11				sta 	codePtr+1
.b1d7	a0 03		ldy #$03			ldy 	#3 							; line position
.b1d9	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b1db	a8		tay				tay
.b1dc	4c 85 a3	jmp $a385			jmp 	Execute
.b1df					_IDCode:
.b1df	b2 22		lda ($22)			lda 	(idDataAddr) 				; copy the address
.b1e1	85 14		sta $14				sta 	zTemp0
.b1e3	5a		phy				phy
.b1e4	a0 01		ldy #$01			ldy 	#1
.b1e6	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b1e8	85 15		sta $15				sta 	zTemp0+1
.b1ea	7a		ply				ply
.b1eb	20 f1 b1	jsr $b1f1			jsr 	_IDCallZTemp0 				; call the routine
.b1ee	4c 85 a3	jmp $a385			jmp 	Execute
.b1f1					_IDCallZTemp0:
.b1f1	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.b1f4					ProcReturn:
.b1f4					ProcReturn2:
.b1f4	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b1f6	c9 43		cmp #$43			cmp 	#STM_CALL
.b1f8	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b1fa	20 5a b4	jsr $b45a			jsr 	StructPopCurrent
.b1fd	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b1ff	20 20 b4	jsr $b420			jsr 	StructPopCount
.b202	60		rts				rts
.b203					WriteVariable:
.b203	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b205	c9 c0		cmp #$c0			cmp 	#$C0
.b207	90 5d		bcc $b266			bcc 	_WVTypeError
.b209	20 56 a4	jsr $a456			jsr 	IdentifierSearch 			; does it exist
.b20c	90 06		bcc $b214			bcc 	_WVNoIdentifier
.b20e	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b210	f0 12		beq $b224			beq 	_WVWriteTOS 				; if so write TOS to it.
.b212	80 52		bra $b266			bra 	_WVTypeError 				; not, then can't do anything.
.b214					_WVNoIdentifier:
.b214	5a		phy				phy 								; get current line number
.b215	a0 01		ldy #$01			ldy 	#1
.b217	b1 10		lda ($10),y			lda 	(codePtr),y
.b219	c8		iny				iny
.b21a	11 10		ora ($10),y			ora 	(codePtr),y
.b21c	f0 2e		beq $b24c			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b21e	7a		ply				ply
.b21f	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b221	20 bd a4	jsr $a4bd			jsr 	IdentifierCreate 			; try to find it
.b224					_WVWriteTOS:
.b224	88		dey				dey 								; skip over identifier.
.b225					_WVSkipIdentifier:
.b225	b1 10		lda ($10),y			lda 	(codePtr),y
.b227	c8		iny				iny
.b228	c9 e0		cmp #$e0			cmp 	#$E0
.b22a	90 f9		bcc $b225			bcc 	_WVSkipIdentifier
.b22c	20 74 b2	jsr $b274			jsr 	IndexCheck 					; check index/subscript
.b22f	5a		phy				phy									; copy TOS in
.b230	a0 00		ldy #$00			ldy 	#0
.b232	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b235	91 22		sta ($22),y			sta 	(idDataAddr),y
.b237	c8		iny				iny
.b238	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b23b	91 22		sta ($22),y			sta 	(idDataAddr),y
.b23d	c8		iny				iny
.b23e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b241	91 22		sta ($22),y			sta 	(idDataAddr),y
.b243	c8		iny				iny
.b244	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b247	91 22		sta ($22),y			sta 	(idDataAddr),y
.b249	7a		ply				ply
.b24a	ca		dex				dex 								; drop
.b24b	60		rts				rts									; go back and execute again.
.b24c					_WVCantCreate:
.b24c	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b24f	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b257	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b266					_WVTypeError:
.b266	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b269	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b271	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b274					IndexCheck:
.b274	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b276	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b278	d0 10		bne $b28a			bne 	_ICExit
.b27a	c8		iny				iny
.b27b	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b27d	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b27f	f0 23		beq $b2a4			beq 	_ICArrayAccess
.b281	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b283	c9 80		cmp #$80			cmp 	#$80
.b285	f0 04		beq $b28b			beq 	_ICConstAccess
.b287					_ICSyntax:
.b287	4c d8 a5	jmp $a5d8			jmp 	SyntaxError
.b28a					_ICExit:
.b28a	60		rts				rts
.b28b					_ICConstAccess:
.b28b	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b28d	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b28f	85 16		sta $16				sta 	zTemp1
.b291	64 17		stz $17				stz 	zTemp1+1
.b293	c8		iny				iny
.b294	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b296	c8		iny				iny
.b297	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b299	d0 ec		bne $b287			bne 	_ICSyntax
.b29b	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b29d	c8		iny				iny
.b29e	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b2a0	d0 e5		bne $b287			bne 	_ICSyntax
.b2a2	80 0c		bra $b2b0			bra 	_ICAddSubscript
.b2a4					_ICArrayAccess:
.b2a4	c8		iny				iny 								; point to next
.b2a5	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b2a8	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b2aa	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b2ad	85 17		sta $17				sta 	zTemp1+1
.b2af	ca		dex				dex
.b2b0					_ICAddSubscript:
.b2b0	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b2b2	26 17		rol $17				rol 	zTemp1+1
.b2b4	06 16		asl $16				asl 	zTemp1
.b2b6	26 17		rol $17				rol 	zTemp1+1
.b2b8	5a		phy				phy
.b2b9	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b2bb	a0 01		ldy #$01			ldy 	#1
.b2bd	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b2bf	c8		iny				iny
.b2c0	11 22		ora ($22),y			ora 	(idDataAddr),y
.b2c2	c8		iny				iny
.b2c3	11 22		ora ($22),y			ora 	(idDataAddr),y
.b2c5	f0 17		beq $b2de			beq 	_ICZero
.b2c7	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b2c8	b2 22		lda ($22)			lda 	(idDataAddr)
.b2ca	65 16		adc $16				adc 	zTemp1
.b2cc	48		pha				pha
.b2cd	a0 01		ldy #$01			ldy 	#1
.b2cf	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b2d1	65 17		adc $17				adc 	zTemp1+1
.b2d3	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b2d5	68		pla				pla
.b2d6	85 22		sta $22				sta 	idDataAddr
.b2d8	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b2da	64 25		stz $25				stz 	idDataAddr+3
.b2dc	7a		ply				ply
.b2dd	60		rts				rts
.b2de					_ICZero:
.b2de	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b2e1	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b2e9	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b2f5					Struct_IF:
.b2f5	ca		dex				dex 								; drop TOS
.b2f6	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check TOS
.b2f9	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b2fc	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b2ff	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b302	f0 01		beq $b305			beq 	_SIFSkipForward
.b304	60		rts				rts
.b305					_SIFSkipForward:
.b305	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b307	4c 10 b3	jmp $b310			jmp 	StructSkipForward
.b30a					Struct_ELSE:
.b30a	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b30c	4c 10 b3	jmp $b310			jmp 	StructSkipForward
.b30f					Struct_ENDIF:
.b30f	60		rts				rts
.b310					StructSkipForward:
.b310	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b312					_SSFLoop:
.b312	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b314	f0 14		beq $b32a			beq 	_SSFExit 					; if EOL then exit
.b316	c8		iny				iny 								; advance past it
.b317	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b319	f0 0f		beq $b32a			beq 	_SSFExit
.b31b	c5 14		cmp $14				cmp 	zTemp0
.b31d	f0 0b		beq $b32a			beq 	_SSFExit
.b31f	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b321	b0 ef		bcs $b312			bcs 	_SSFLoop
.b323	98		tya				tya 								; add length offset
.b324	3a		dec a				dec 	a
.b325	71 10		adc ($10),y			adc 	(codePtr),y
.b327	a8		tay				tay
.b328	80 e8		bra $b312			bra 	_SSFLoop
.b32a					_SSFExit:
.b32a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b32b					Command_For:
.b32b	20 26 b4	jsr $b426			jsr 	StructPushCurrent 			; push current on the stack.
.b32e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b331	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b334	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b337	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b33a	f0 2c		beq $b368			beq 	_CFZero
.b33c	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b33f	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b341	c6 12		dec $12				dec 	StructSP
.b343	92 12		sta ($12)			sta 	(StructSP)
.b345	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b348	49 ff		eor #$ff			eor 	#$FF
.b34a	c6 12		dec $12				dec 	StructSP
.b34c	92 12		sta ($12)			sta 	(StructSP)
.b34e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b351	49 ff		eor #$ff			eor 	#$FF
.b353	c6 12		dec $12				dec 	StructSP
.b355	92 12		sta ($12)			sta 	(StructSP)
.b357	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b35a	49 ff		eor #$ff			eor 	#$FF
.b35c	c6 12		dec $12				dec 	StructSP
.b35e	92 12		sta ($12)			sta 	(StructSP)
.b360	ca		dex				dex 								; pop stack value
.b361	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b363	c6 12		dec $12				dec 	StructSP
.b365	92 12		sta ($12)			sta 	(StructSP)
.b367	60		rts				rts
.b368					_CFZero:
.b368	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b36b	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b373	54 20 5a 45 52 4f 00
.b37a					Command_Next:
.b37a	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b37c	c9 46		cmp #$46			cmp 	#STM_FOR
.b37e	d0 28		bne $b3a8			bne 	CNNoFor
.b380	5a		phy				phy
.b381	a0 00		ldy #$00			ldy 	#0
.b383					_CNIncrement:
.b383	c8		iny				iny
.b384	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b386	1a		inc a				inc 	a
.b387	91 12		sta ($12),y			sta 	(StructSP),y
.b389	f0 f8		beq $b383			beq		_CNIncrement 				; carry out.
.b38b	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b38d	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b38f	c8		iny				iny 								; will all be $FF
.b390	31 12		and ($12),y			and 	(StructSP),y
.b392	c8		iny				iny
.b393	31 12		and ($12),y			and 	(StructSP),y
.b395	c8		iny				iny
.b396	31 12		and ($12),y			and 	(StructSP),y
.b398	7a		ply				ply 								; restore Y
.b399	1a		inc a				inc 	a 							; so this will be zero last time round
.b39a	d0 06		bne $b3a2			bne 	_CNLoop 					; loop back if non-zero
.b39c	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b39e	20 20 b4	jsr $b420			jsr 	StructPopCount
.b3a1	60		rts				rts
.b3a2					_CNLoop:
.b3a2	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b3a4	20 5a b4	jsr $b45a			jsr 	StructPopCurrent
.b3a7	60		rts				rts
.b3a8					CNNoFor:
.b3a8	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b3ab	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b3b3	46 4f 52 00
.b3b7					Command_Index:
.b3b7	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b3b9	c9 46		cmp #$46			cmp 	#STM_FOR
.b3bb	d0 eb		bne $b3a8			bne 	CNNoFor
.b3bd	5a		phy				phy
.b3be	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b3c0	e8		inx				inx
.b3c1	38		sec				sec
.b3c2	a9 fe		lda #$fe			lda 	#$FE
.b3c4	f1 12		sbc ($12),y			sbc 	(StructSP),y
.b3c6	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b3c9	c8		iny				iny
.b3ca	a9 ff		lda #$ff			lda 	#$FF
.b3cc	f1 12		sbc ($12),y			sbc 	(StructSP),y
.b3ce	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b3d1	c8		iny				iny
.b3d2	a9 ff		lda #$ff			lda 	#$FF
.b3d4	f1 12		sbc ($12),y			sbc 	(StructSP),y
.b3d6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b3d9	c8		iny				iny
.b3da	a9 ff		lda #$ff			lda 	#$FF
.b3dc	f1 12		sbc ($12),y			sbc 	(StructSP),y
.b3de	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b3e1	7a		ply				ply
.b3e2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b3e3					Command_Repeat:
.b3e3	20 26 b4	jsr $b426			jsr 	StructPushCurrent 			; push current on the stack.
.b3e6	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b3e8	c6 12		dec $12				dec 	StructSP
.b3ea	92 12		sta ($12)			sta 	(StructSP)
.b3ec	60		rts				rts
.b3ed					Command_Until:
.b3ed	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b3ef	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b3f1	d0 1b		bne $b40e			bne 	_CUNoRepeat
.b3f3	ca		dex				dex 								; pop
.b3f4	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b3f7	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b3fa	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b3fd	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b400	f0 06		beq $b408			beq 	_CULoop
.b402	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b404	20 20 b4	jsr $b420			jsr 	StructPopCount
.b407	60		rts				rts
.b408					_CULoop:
.b408	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b40a	20 5a b4	jsr $b45a			jsr 	StructPopCurrent
.b40d	60		rts				rts
.b40e					_CUNoRepeat:
.b40e	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b411	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b419	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b420					StructPopCount:
.b420	18		clc				clc
.b421	65 12		adc $12				adc 	StructSP
.b423	85 12		sta $12				sta 	StructSP
.b425	60		rts				rts
.b426					StructPushCurrent:
.b426	a5 12		lda $12				lda 	StructSP 					; check space for more
.b428	c9 0a		cmp #$0a			cmp 	#10
.b42a	90 18		bcc $b444			bcc 	_SPCSpace
.b42c	a9 00		lda #$00			lda 	#0							; push bank
.b42e	c6 12		dec $12				dec 	StructSP
.b430	92 12		sta ($12)			sta 	(StructSP)
.b432	98		tya				tya									; y Offset
.b433	c6 12		dec $12				dec 	StructSP
.b435	92 12		sta ($12)			sta 	(StructSP)
.b437	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b439	c6 12		dec $12				dec 	StructSP
.b43b	92 12		sta ($12)			sta 	(StructSP)
.b43d	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b43f	c6 12		dec $12				dec 	StructSP
.b441	92 12		sta ($12)			sta 	(StructSP)
.b443	60		rts				rts
.b444					_SPCSpace:
.b444	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b447	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b44f	54 41 43 4b 20 53 50 41 43 45 00
.b45a					StructPopCurrent:
.b45a	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b45c	85 10		sta $10				sta 	codePtr
.b45e	c8		iny				iny
.b45f	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b461	85 11		sta $11				sta 	codePtr+1
.b463	c8		iny				iny
.b464	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b466	a8		tay				tay
.b467	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/hashes.inc

.b468					libfunc_1000:
>b468	00 00					.word 0
>b46a	00 b6 00 00				.dword IO_Clear
>b46e	72 b4					.word libfunc_1000_name
>b470	00 43					.byte 0,'C'
.b472					libfunc_1000_name:
>b472	c2 cb f2				.byte $c2,$cb,$f2
.b475					libfunc_1001:
>b475	68 b4					.word libfunc_1000
>b477	94 b6 00 00				.dword Vera_Sprite
>b47b	7f b4					.word libfunc_1001_name
>b47d	00 43					.byte 0,'C'
.b47f					libfunc_1001_name:
>b47f	d5 c4 d1 c0 df f2			.byte $d5,$c4,$d1,$c0,$df,$f2
.b485					libfunc_1002:
>b485	00 00					.word 0
>b487	93 b5 00 00				.dword System_Random
>b48b	8f b4					.word libfunc_1002_name
>b48d	00 43					.byte 0,'C'
.b48f					libfunc_1002_name:
>b48f	d1 cd e3				.byte $d1,$cd,$e3
.b492					libfunc_1003:
>b492	85 b4					.word libfunc_1002
>b494	05 b6 00 00				.dword IO_Emit
>b498	9c b4					.word libfunc_1003_name
>b49a	00 43					.byte 0,'C'
.b49c					libfunc_1003_name:
>b49c	c4 cc c8 f3				.byte $c4,$cc,$c8,$f3
.b4a0					libfunc_1004:
>b4a0	92 b4					.word libfunc_1003
>b4a2	3f b6 00 00				.dword Vera_SetAddress
>b4a6	aa b4					.word libfunc_1004_name
>b4a8	00 43					.byte 0,'C'
.b4aa					libfunc_1004_name:
>b4aa	d5 c4 d1 c0 df d2 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$d2,$c4,$f3
.b4b2					libfunc_1005:
>b4b2	a0 b4					.word libfunc_1004
>b4b4	59 b6 00 00				.dword Vera_GetAddress
>b4b8	bc b4					.word libfunc_1005_name
>b4ba	00 43					.byte 0,'C'
.b4bc					libfunc_1005_name:
>b4bc	d5 c4 d1 c0 df c6 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$c6,$c4,$f3
.b4c4					libfunc_1006:
>b4c4	b2 b4					.word libfunc_1005
>b4c6	4e b7 00 00				.dword Vera_Load
>b4ca	ce b4					.word libfunc_1006_name
>b4cc	00 43					.byte 0,'C'
.b4ce					libfunc_1006_name:
>b4ce	d5 c4 d1 c0 df cb ce c0			.byte $d5,$c4,$d1,$c0,$df,$cb,$ce,$c0,$e3
>b4d6	e3
.b4d7					libfunc_1007:
>b4d7	00 00					.word 0
>b4d9	70 b6 00 00				.dword Vera_SetPalette
>b4dd	e1 b4					.word libfunc_1007_name
>b4df	00 43					.byte 0,'C'
.b4e1					libfunc_1007_name:
>b4e1	d5 c4 d1 c0 df cf c0 cb			.byte $d5,$c4,$d1,$c0,$df,$cf,$c0,$cb,$c4,$d3,$d3,$e4
>b4e9	c4 d3 d3 e4
.b4ed					libfunc_1008:
>b4ed	d7 b4					.word libfunc_1007
>b4ef	be b6 00 00				.dword Vera_SpriteMove
>b4f3	f7 b4					.word libfunc_1008_name
>b4f5	00 43					.byte 0,'C'
.b4f7					libfunc_1008_name:
>b4f7	d5 c4 d1 c0 df d2 df cc			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$cc,$ce,$d5,$e4
>b4ff	ce d5 e4
.b502					libfunc_1009:
>b502	ed b4					.word libfunc_1008
>b504	06 b7 00 00				.dword Vera_SetSize
>b508	0c b5					.word libfunc_1009_name
>b50a	00 43					.byte 0,'C'
.b50c					libfunc_1009_name:
>b50c	d5 c4 d1 c0 df d2 df d2			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4
>b514	c8 d9 e4
.b517					libfunc_1010:
>b517	00 00					.word 0
>b519	a2 b6 00 00				.dword Vera_SpriteDisable
>b51d	21 b5					.word libfunc_1010_name
>b51f	00 43					.byte 0,'C'
.b521					libfunc_1010_name:
>b521	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$c5,$e5
>b529	c5 e5
.b52b					libfunc_1011:
>b52b	00 00					.word 0
>b52d	24 b7 00 00				.dword Vera_ByteW
>b531	35 b5					.word libfunc_1011_name
>b533	00 43					.byte 0,'C'
.b535					libfunc_1011_name:
>b535	d5 c4 d1 c0 df f6			.byte $d5,$c4,$d1,$c0,$df,$f6
.b53b					libfunc_1012:
>b53b	00 00					.word 0
>b53d	d6 b6 00 00				.dword Vera_SpriteSetup
>b541	45 b5					.word libfunc_1012_name
>b543	00 43					.byte 0,'C'
.b545					libfunc_1012_name:
>b545	d5 c4 d1 c0 df d2 df c6			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7
>b54d	c5 f7
.b54f					libfunc_1013:
>b54f	00 00					.word 0
>b551	0c b6 00 00				.dword String_Len
>b555	59 b5					.word libfunc_1013_name
>b557	00 43					.byte 0,'C'
.b559					libfunc_1013_name:
>b559	d2 d3 d1 df cb c4 ed			.byte $d2,$d3,$d1,$df,$cb,$c4,$ed
.b560					libfunc_1014:
>b560	4f b5					.word libfunc_1013
>b562	9e b6 00 00				.dword Vera_SpriteEnable
>b566	6a b5					.word libfunc_1014_name
>b568	00 43					.byte 0,'C'
.b56a					libfunc_1014_name:
>b56a	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed
>b572	ed
.b573					DefaultHashTable:
>b573	00 00					.word 0
>b575	00 00					.word 0
>b577	75 b4					.word libfunc_1001
>b579	c4 b4					.word libfunc_1006
>b57b	02 b5					.word libfunc_1009
>b57d	17 b5					.word libfunc_1010
>b57f	2b b5					.word libfunc_1011
>b581	3b b5					.word libfunc_1012
>b583	00 00					.word 0
>b585	00 00					.word 0
>b587	00 00					.word 0
>b589	00 00					.word 0
>b58b	00 00					.word 0
>b58d	60 b5					.word libfunc_1014
>b58f	00 00					.word 0
>b591	00 00					.word 0

;******  Return to file: main.asm


;******  Processing file: generated/library.inc

.0826					RandomSeed:
>0826							.dword 		?
.b593					System_Random:
.b593	ad 26 08	lda $0826		lda 	RandomSeed
.b596	0d 27 08	ora $0827		ora 	RandomSeed+1
.b599	0d 28 08	ora $0828		ora 	RandomSeed+2
.b59c	0d 29 08	ora $0829		ora 	RandomSeed+3
.b59f	d0 09		bne $b5aa		bne 	_SRSeeded
.b5a1	ee 27 08	inc $0827		inc 	RandomSeed+1
.b5a4	ce 29 08	dec $0829		dec 	RandomSeed+3
.b5a7	20 93 b5	jsr $b593		jsr 	System_Random
.b5aa					_SRSeeded:
.b5aa	5a		phy			phy
.b5ab	ac 28 08	ldy $0828		ldy RandomSeed+2 ; will move to RandomSeed+3 at the end
.b5ae	ad 27 08	lda $0827		lda RandomSeed+1
.b5b1	8d 28 08	sta $0828		sta RandomSeed+2
.b5b4	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b5b7	4a		lsr a			lsr
.b5b8	8d 27 08	sta $0827		sta RandomSeed+1 ; reverse: 100011
.b5bb	4a		lsr a			lsr
.b5bc	4a		lsr a			lsr
.b5bd	4a		lsr a			lsr
.b5be	4a		lsr a			lsr
.b5bf	4d 27 08	eor $0827		eor RandomSeed+1
.b5c2	4a		lsr a			lsr
.b5c3	4d 27 08	eor $0827		eor RandomSeed+1
.b5c6	4d 26 08	eor $0826		eor RandomSeed+0 ; combine with original low byte
.b5c9	8d 27 08	sta $0827		sta RandomSeed+1
.b5cc	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b5cf	0a		asl a			asl
.b5d0	4d 29 08	eor $0829		eor RandomSeed+3
.b5d3	0a		asl a			asl
.b5d4	0a		asl a			asl
.b5d5	0a		asl a			asl
.b5d6	0a		asl a			asl
.b5d7	4d 29 08	eor $0829		eor RandomSeed+3
.b5da	0a		asl a			asl
.b5db	0a		asl a			asl
.b5dc	4d 29 08	eor $0829		eor RandomSeed+3
.b5df	8c 29 08	sty $0829		sty RandomSeed+3 ; finish rotating byte 2 into 3
.b5e2	8d 26 08	sta $0826		sta RandomSeed+0
.b5e5	e8		inx			inx
.b5e6	ad 26 08	lda $0826		lda	RandomSeed+0
.b5e9	9d 00 0c	sta $0c00,x		sta stack0,x
.b5ec	ad 27 08	lda $0827		lda	RandomSeed+1
.b5ef	9d 00 0d	sta $0d00,x		sta stack1,x
.b5f2	ad 28 08	lda $0828		lda	RandomSeed+2
.b5f5	9d 00 0e	sta $0e00,x		sta stack2,x
.b5f8	ad 29 08	lda $0829		lda	RandomSeed+3
.b5fb	9d 00 0f	sta $0f00,x		sta stack3,x
.b5fe	7a		ply			ply
.b5ff	60		rts			rts
.b600					IO_Clear:
.b600	a9 93		lda #$93		lda 	#SCM_CLS
.b602	4c a2 a2	jmp $a2a2		jmp 	ExternPrint
.b605					IO_Emit:
.b605	bd 00 0c	lda $0c00,x		lda 	stack0,x
.b608	ca		dex			dex
.b609	4c a2 a2	jmp $a2a2		jmp 	ExternPrint
.b60c					String_Len:
.b60c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy string address
.b60f	85 14		sta $14				sta 	zTemp0
.b611	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b614	85 15		sta $15				sta 	zTemp0+1
.b616	5a		phy				phy
.b617	a0 ff		ldy #$ff			ldy 	#255 						; find string length
.b619	c8		iny		_SLLoop:iny
.b61a	c0 ff		cpy #$ff			cpy 	#255 						; cant find EOS.
.b61c	f0 13		beq $b631			beq 	_SLFail
.b61e	b1 14		lda ($14),y			lda 	(zTemp0),y
.b620	d0 f7		bne $b619			bne 	_SLLoop
.b622	98		tya				tya
.b623	7a		ply				ply
.b624	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; return string
.b627	9e 00 0d	stz $0d00,x			stz 	stack1,x
.b62a	9e 00 0e	stz $0e00,x			stz 	stack2,x
.b62d	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b630	60		rts				rts
.b631					_SLFail:
.b631	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b634	4e 4f 54 20 53 54 52 49				.text 	"NOT STRING",0
>b63c	4e 47 00
=$9f20					Vera_Base = $9F20
.082a					veraCurrentLayer:
>082a							.byte 		? 						; current layer (0-1)
.082b					veraCurrentSprite:
>082b							.byte 		?						; current sprite (0-127)
.082c					veraSpriteMode:
>082c							.byte 		? 						; 0 4 bit, 1 8 bit
.b63f					Vera_SetAddress:
.b63f	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b642	8d 20 9f	sta $9f20			sta 	Vera_Base
.b645	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b648	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b64b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b64e	c9 10		cmp #$10			cmp 	#16
.b650	b0 02		bcs $b654			bcs 	_VSASetInc
.b652	09 10		ora #$10			ora 	#16
.b654					_VSASetInc:
.b654	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b657	ca		dex				dex
.b658	60		rts				rts
.b659					Vera_GetAddress:
.b659	e8		inx				inx
.b65a	ad 20 9f	lda $9f20			lda 	Vera_Base
.b65d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b660	ad 21 9f	lda $9f21			lda 	Vera_Base+1
.b663	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b666	ad 22 9f	lda $9f22			lda 	Vera_Base+2
.b669	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b66c	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b66f	60		rts				rts
.b670					Vera_SetPalette:
.b670	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b673	8d 20 9f	sta $9f20			sta 	Vera_Base
.b676	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b679	29 01		and #$01			and 	#$01
.b67b	09 10		ora #$10			ora 	#$10
.b67d	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b680	a9 1f		lda #$1f			lda 	#$1F
.b682	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b685	ca		dex				dex
.b686	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b689	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b68c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b68f	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b692	ca		dex				dex
.b693	60		rts				rts
.b694					Vera_Sprite:
.b694	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b697	29 7f		and #$7f			and 	#$7F
.b699	8d 2b 08	sta $082b			sta 	veraCurrentSprite
.b69c	ca		dex				dex
.b69d	60		rts				rts
.b69e					Vera_SpriteEnable:
.b69e	a9 01		lda #$01			lda 	#1
.b6a0	80 02		bra $b6a4			bra 	Vera_SpriteControl
.b6a2					Vera_SpriteDisable:
.b6a2	a9 00		lda #$00			lda 	#0
.b6a4					Vera_SpriteControl:
.b6a4	48		pha				pha
.b6a5	a9 00		lda #$00			lda 	#$00
.b6a7	8d 20 9f	sta $9f20			sta 	Vera_Base
.b6aa	a9 40		lda #$40			lda 	#$40
.b6ac	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b6af	a9 1f		lda #$1f			lda 	#$1F
.b6b1	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b6b4	68		pla				pla
.b6b5	29 01		and #$01			and 	#1
.b6b7	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b6ba	9c 23 9f	stz $9f23			stz 	Vera_Base+3
.b6bd	60		rts				rts
.b6be					Vera_SpriteMove:
.b6be	a9 02		lda #$02			lda 	#2 							; physical position
.b6c0	20 2c b7	jsr $b72c			jsr 	Vera_CurrentSprite
.b6c3	20 c6 b6	jsr $b6c6			jsr 	_VSMOutPosition
.b6c6					_VSMOutPosition:
.b6c6	ca		dex				dex
.b6c7	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b6ca	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b6cd	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b6d0	29 03		and #$03			and 	#$03
.b6d2	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b6d5	60		rts				rts
.b6d6					Vera_SpriteSetup:
.b6d6	a9 00		lda #$00			lda 	#0
.b6d8	20 2c b7	jsr $b72c			jsr 	Vera_CurrentSprite
.b6db	ca		dex				dex
.b6dc	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b6df	85 14		sta $14				sta 	zTemp0
.b6e1	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b6e4	85 15		sta $15				sta 	zTemp0+1
.b6e6	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.b6e9	85 16		sta $16				sta 	zTemp1
.b6eb	5a		phy				phy
.b6ec	a0 05		ldy #$05			ldy 	#5
.b6ee	46 16		lsr $16		_VSSS:	lsr 	zTemp1
.b6f0	66 15		ror $15				ror 	zTemp0+1
.b6f2	66 14		ror $14				ror 	zTemp0
.b6f4	88		dey				dey
.b6f5	d0 f7		bne $b6ee			bne 	_VSSS
.b6f7	7a		ply				ply
.b6f8	a5 14		lda $14				lda 	zTemp0
.b6fa	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b6fd	a5 15		lda $15				lda 	zTemp0+1
.b6ff	0d 2c 08	ora $082c			ora 	veraSpriteMode
.b702	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b705	60		rts				rts
.b706					Vera_SetSize:
.b706	a9 06		lda #$06			lda 	#6
.b708	20 2c b7	jsr $b72c			jsr 	Vera_CurrentSprite
.b70b	a9 1c		lda #$1c			lda 	#$1C
.b70d	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b710	ca		dex				dex
.b711	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b714	29 03		and #$03			and 	#3
.b716	85 14		sta $14				sta 	zTemp0
.b718	0a		asl a				asl 	a
.b719	0a		asl a				asl 	a
.b71a	05 14		ora $14				ora 	zTemp0
.b71c	0a		asl a				asl 	a
.b71d	0a		asl a				asl 	a
.b71e	0a		asl a				asl 	a
.b71f	0a		asl a				asl 	a
.b720	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b723	60		rts				rts
.b724					Vera_ByteW:
.b724	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b727	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b72a	ca		dex				dex
.b72b	60		rts				rts
.b72c					Vera_CurrentSprite:
.b72c	48		pha				pha 								; save offset
.b72d	ad 2b 08	lda $082b			lda 	veraCurrentSprite 			; address in zTemp0
.b730	0a		asl a				asl 	a
.b731	85 14		sta $14				sta 	zTemp0		 				; sprite# x 2
.b733	64 15		stz $15				stz 	zTemp0+1
.b735	06 14		asl $14				asl 	zTemp0 						; x 8
.b737	26 15		rol $15				rol 	zTemp0+1
.b739	06 14		asl $14				asl 	zTemp0
.b73b	68		pla				pla 								; fix up address
.b73c	05 14		ora $14				ora 	zTemp0
.b73e	8d 20 9f	sta $9f20			sta  	Vera_Base+0
.b741	a5 15		lda $15				lda 	zTemp0+1
.b743	09 50		ora #$50			ora 	#$50
.b745	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b748	a9 1f		lda #$1f			lda 	#$1F
.b74a	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b74d	60		rts				rts
.b74e					Vera_Load:
.b74e	da		phx				phx
.b74f	5a		phy				phy
.b750	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; filename in XY
.b753	85 14		sta $14				sta 	zTemp0
.b755	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b758	85 15		sta $15				sta 	zTemp0+1
.b75a	a2 00		ldx #$00			ldx 	#0
.b75c	bd 85 b7	lda $b785,x	_VLCopy:lda 	_VLCopiableCode,x
.b75f	9d 00 09	sta $0900,x			sta 	InputBuffer,x
.b762	e8		inx				inx
.b763	e0 42		cpx #$42			cpx 	#_VLCopiableEnd-_VLCopiableCode
.b765	d0 f5		bne $b75c			bne 	_VLCopy
.b767	20 66 a3	jsr $a366			jsr 	EXGetLength 				; get file name length -> A
.b76a	20 00 09	jsr $0900			jsr 	InputBuffer
.b76d	b0 04		bcs $b773			bcs 	_VLError
.b76f	7a		ply				ply
.b770	fa		plx				plx
.b771	ca		dex				dex 								; drop tos
.b772	60		rts				rts
.b773					_VLError:
.b773	20 f9 a5	jsr $a5f9			jsr 	ErrorHandler
>b776	56 45 52 41 20 4c 4f 41				.text 	"VERA LOAD FAIL",0
>b77e	44 20 46 41 49 4c 00
.b785					_VLCopiableCode:
.b785	aa		tax				tax 								; length in X
.b786	ad 61 9f	lda $9f61			lda 	$9F61 						; save current bank
.b789	48		pha				pha
.b78a	a9 fe		lda #$fe			lda 	#254 						; switch to useable buffer
.b78c	8d 61 9f	sta $9f61			sta 	$9F61
.b78f	8a		txa				txa
.b790	a6 14		ldx $14				ldx 	zTemp0
.b792	a4 15		ldy $15				ldy 	zTemp0+1
.b794	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.b797	a9 01		lda #$01			lda 	#1
.b799	a2 01		ldx #$01			ldx 	#1	 						; device #1
.b79b	a0 00		ldy #$00			ldy 	#0
.b79d	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.b7a0	a0 a0		ldy #$a0			ldy 	#$A0 						; restore target to YX and call load
.b7a2	a9 00		lda #$00			lda 	#$00
.b7a4	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.b7a7	b0 19		bcs $b7c2			bcs 	_VLExit
.b7a9	a9 a0		lda #$a0			lda 	#$A0 						; send it all to VERA
.b7ab	85 15		sta $15				sta 	zTemp0+1
.b7ad	64 14		stz $14				stz 	zTemp0
.b7af	a0 00		ldy #$00			ldy 	#0
.b7b1					_VLSendVera:
.b7b1	b1 14		lda ($14),y			lda 	(zTemp0),y
.b7b3	8d 23 9f	sta $9f23			sta 	$9F23
.b7b6	c8		iny				iny
.b7b7	d0 f8		bne $b7b1			bne 	_VLSendVera
.b7b9	e6 15		inc $15				inc 	zTemp0+1
.b7bb	a5 15		lda $15				lda 	zTemp0+1
.b7bd	c9 c0		cmp #$c0			cmp 	#$C0
.b7bf	d0 f0		bne $b7b1			bne 	_VLSendVera
.b7c1	18		clc				clc
.b7c2					_VLExit:
.b7c2	68		pla				pla 								; restore original bank
.b7c3	8d 61 9f	sta $9f61			sta 	$9F61
.b7c6	60		rts				rts
.b7c7					_VLCopiableEnd:

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	15 64 00 02 11 20 74 65			.byte $15,$64,$00,$02,$11,$20,$74,$65,$73,$74,$20,$70,$72,$6f,$67,$72,$61,$6d,$20,$00,$00,$14,$6e,$00,$01,$07,$44,$45,$4d,$4f,$00,$d5,$c4,$d1,$c0,$df,$cb,$ce,$c0,$e3,$00,$06,$78,$00,$16,$2d,$00
>1108	73 74 20 70 72 6f 67 72 61 6d 20 00 00 14 6e 00
>1118	01 07 44 45 4d 4f 00 d5 c4 d1 c0 df cb ce c0 e3
>1128	00 06 78 00 16 2d 00

;******  Return to file: main.asm

>112f	00						.byte 	0

;******  End of listing
