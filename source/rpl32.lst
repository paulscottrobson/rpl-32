
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o rpl32.prg -L rpl32.lst main.asm
; Fri Oct  4 17:17:32 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					breakCount:		.byte ? 					; used to stop break firing every execution.
>000b					idDataAddr:		.word ? 					; data address.
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
>108c	00				CurrentBase:	.byte 	0 					; base used for printing and tokenising constants.
>108d	00 00 00 00			CurrentIndex:	.dword 	0 					; value of the current index used in FOR/NEXT.
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	a9 0a		lda #$0a			lda 	#10 						; reset the base
.a005	8d 8c 10	sta $108c			sta 	CurrentBase
.a008	20 ff a2	jsr $a2ff			jsr 	ResetForRun
.a00b	20 f4 a2	jsr $a2f4			jsr 	ResetCodePointer
.a00e	4c b4 a6	jmp $a6b4			jmp 	System_RUN

;******  Processing file: generated/tables.inc

.a011					KeywordText:
>a011	01 20					.byte $01,$20                          ; $10
>a013	01 21					.byte $01,$21                          ; $11 !
>a015	01 26					.byte $01,$26                          ; $12 &
>a017	01 2a					.byte $01,$2a                          ; $13 *
>a019	01 2b					.byte $01,$2b                          ; $14 +
>a01b	02 2b 2b				.byte $02,$2b,$2b                      ; $15 ++
>a01e	01 2d					.byte $01,$2d                          ; $16 -
>a020	02 2d 2d				.byte $02,$2d,$2d                      ; $17 --
>a023	01 2f					.byte $01,$2f                          ; $18 /
>a025	01 3b					.byte $01,$3b                          ; $19 ;
>a027	01 3c					.byte $01,$3c                          ; $1a <
>a029	02 3c 3c				.byte $02,$3c,$3c                      ; $1b <<
>a02c	02 3c 3d				.byte $02,$3c,$3d                      ; $1c <=
>a02f	02 3c 3e				.byte $02,$3c,$3e                      ; $1d <>
>a032	01 3d					.byte $01,$3d                          ; $1e =
>a034	01 3e					.byte $01,$3e                          ; $1f >
>a036	02 3e 3d				.byte $02,$3e,$3d                      ; $20 >=
>a039	02 3e 3e				.byte $02,$3e,$3e                      ; $21 >>
>a03c	01 00					.byte $01,$00                          ; $22 @
>a03e	03 01 02 13				.byte $03,$01,$02,$13                  ; $23 ABS
>a042	05 01 0c 0c 0f 03			.byte $05,$01,$0c,$0c,$0f,$03          ; $24 ALLOC
>a048	03 01 0e 04				.byte $03,$01,$0e,$04                  ; $25 AND
>a04c	02 03 21				.byte $02,$03,$21                      ; $26 C!
>a04f	02 03 00				.byte $02,$03,$00                      ; $27 C@
>a052	03 04 05 06				.byte $03,$04,$05,$06                  ; $28 DEF
>a056	04 04 12 0f 10				.byte $04,$04,$12,$0f,$10              ; $29 DROP
>a05b	03 04 15 10				.byte $03,$04,$15,$10                  ; $2a DUP
>a05f	04 05 0c 13 05				.byte $04,$05,$0c,$13,$05              ; $2b ELSE
>a064	05 05 0d 10 14 19			.byte $05,$05,$0d,$10,$14,$19          ; $2c EMPTY
>a06a	03 05 0e 04				.byte $03,$05,$0e,$04                  ; $2d END
>a06e	03 06 0f 12				.byte $03,$06,$0f,$12                  ; $2e FOR
>a072	02 09 06				.byte $02,$09,$06                      ; $2f IF
>a075	05 09 0e 04 05 18			.byte $05,$09,$0e,$04,$05,$18          ; $30 INDEX
>a07b	04 0c 09 13 14				.byte $04,$0c,$09,$13,$14              ; $31 LIST
>a080	03 0d 0f 04				.byte $03,$0d,$0f,$04                  ; $32 MOD
>a084	06 0e 05 07 01 14 05			.byte $06,$0e,$05,$07,$01,$14,$05      ; $33 NEGATE
>a08b	03 0e 05 17				.byte $03,$0e,$05,$17                  ; $34 NEW
>a08f	04 0e 05 18 14				.byte $04,$0e,$05,$18,$14              ; $35 NEXT
>a094	03 0e 09 10				.byte $03,$0e,$09,$10                  ; $36 NIP
>a098	03 0e 0f 14				.byte $03,$0e,$0f,$14                  ; $37 NOT
>a09c	03 0f 0c 04				.byte $03,$0f,$0c,$04                  ; $38 OLD
>a0a0	02 0f 12				.byte $02,$0f,$12                      ; $39 OR
>a0a3	04 0f 16 05 12				.byte $04,$0f,$16,$05,$12              ; $3a OVER
>a0a8	06 12 05 10 05 01 14			.byte $06,$12,$05,$10,$05,$01,$14      ; $3b REPEAT
>a0af	03 12 15 0e				.byte $03,$12,$15,$0e                  ; $3c RUN
>a0b3	04 13 14 0f 10				.byte $04,$13,$14,$0f,$10              ; $3d STOP
>a0b8	04 13 17 01 10				.byte $04,$13,$17,$01,$10              ; $3e SWAP
>a0bd	03 13 19 13				.byte $03,$13,$19,$13                  ; $3f SYS
>a0c1	04 14 08 05 0e				.byte $04,$14,$08,$05,$0e              ; $40 THEN
>a0c6	05 15 0e 14 09 0c			.byte $05,$15,$0e,$14,$09,$0c          ; $41 UNTIL
>a0cc	02 17 21				.byte $02,$17,$21                      ; $42 W!
>a0cf	02 17 00				.byte $02,$17,$00                      ; $43 W@
>a0d2	03 18 0f 12				.byte $03,$18,$0f,$12                  ; $44 XOR
>a0d6	02 1b 1d				.byte $02,$1b,$1d                      ; $45 []
>a0d9	01 1e					.byte $01,$1e                          ; $46 ^
>a0db	01 2d					.byte $01,$2d                          ; $47 {-}
>a0dd	00					.byte $00
.a0de					KeywordVectorTable:
>a0de	3c a7					.word SyntaxError                      ; $10
>a0e0	3c a5					.word Mem_DPoke                        ; $11 !
>a0e2	3c a7					.word SyntaxError                      ; $12 &
>a0e4	3c a7					.word SyntaxError                      ; $13 *
>a0e6	64 a5					.word Stack_Add                        ; $14 +
>a0e8	63 a4					.word Unary_Increment                  ; $15 ++
>a0ea	8b a5					.word Stack_Sub                        ; $16 -
>a0ec	76 a4					.word Unary_Decrement                  ; $17 --
>a0ee	3c a7					.word SyntaxError                      ; $18 /
>a0f0	3c a7					.word SyntaxError                      ; $19 ;
>a0f2	5e a6					.word Comp_Less                        ; $1a <
>a0f4	98 a4					.word Unary_Shl                        ; $1b <<
>a0f6	89 a6					.word Comp_LessEqual                   ; $1c <=
>a0f8	27 a6					.word Comp_NotEqual                    ; $1d <>
>a0fa	24 a6					.word Comp_Equal                       ; $1e =
>a0fc	8c a6					.word Comp_Greater                     ; $1f >
>a0fe	61 a6					.word Comp_GreaterEqual                ; $20 >=
>a100	a5 a4					.word Unary_Shr                        ; $21 >>
>a102	ea a4					.word Mem_DPeek                        ; $22 @
>a104	1a a4					.word Unary_Absolute                   ; $23 ABS
>a106	3c a7					.word SyntaxError                      ; $24 ALLOC
>a108	b2 a5					.word Stack_And                        ; $25 AND
>a10a	0f a5					.word Mem_Poke                         ; $26 C!
>a10c	b2 a4					.word Mem_Peek                         ; $27 C@
>a10e	3c a7					.word SyntaxError                      ; $28 DEF
>a110	8f a3					.word Stack_Drop                       ; $29 DROP
>a112	91 a3					.word Stack_Dup                        ; $2a DUP
>a114	3c a7					.word SyntaxError                      ; $2b ELSE
>a116	8c a3					.word Stack_Empty                      ; $2c EMPTY
>a118	bd a6					.word System_END                       ; $2d END
>a11a	3c a7					.word SyntaxError                      ; $2e FOR
>a11c	3c a7					.word SyntaxError                      ; $2f IF
>a11e	3c a7					.word SyntaxError                      ; $30 INDEX
>a120	3c a7					.word SyntaxError                      ; $31 LIST
>a122	3c a7					.word SyntaxError                      ; $32 MOD
>a124	20 a4					.word Unary_Negate                     ; $33 NEGATE
>a126	cc a6					.word System_New                       ; $34 NEW
>a128	3c a7					.word SyntaxError                      ; $35 NEXT
>a12a	ab a3					.word Stack_Nip                        ; $36 NIP
>a12c	42 a4					.word Unary_Not                        ; $37 NOT
>a12e	3c a7					.word SyntaxError                      ; $38 OLD
>a130	fe a5					.word Stack_Or                         ; $39 OR
>a132	c5 a3					.word Stack_Over                       ; $3a OVER
>a134	3c a7					.word SyntaxError                      ; $3b REPEAT
>a136	b4 a6					.word System_RUN                       ; $3c RUN
>a138	c1 a6					.word System_STOP                      ; $3d STOP
>a13a	df a3					.word Stack_Swap                       ; $3e SWAP
>a13c	3c a7					.word SyntaxError                      ; $3f SYS
>a13e	3c a7					.word SyntaxError                      ; $40 THEN
>a140	3c a7					.word SyntaxError                      ; $41 UNTIL
>a142	21 a5					.word Mem_WPoke                        ; $42 W!
>a144	cb a4					.word Mem_WPeek                        ; $43 W@
>a146	d8 a5					.word Stack_Xor                        ; $44 XOR
>a148	3c a7					.word SyntaxError                      ; $45 []
>a14a	d3 a6					.word WriteVariable                    ; $46 ^
>a14c	20 a4					.word Unary_Const_Minus                ; $47 {-}
=$10					KWD_SPACE = $10                  ; $10
=$11					KWD_PLING = $11                  ; $11 !
=$12					KWD_AMPERSAND = $12              ; $12 &
=$13					KWD_ASTERISK = $13               ; $13 *
=$14					KWD_PLUS = $14                   ; $14 +
=$15					KWD_PLUSPLUS = $15               ; $15 ++
=$16					KWD_MINUS = $16                  ; $16 -
=$17					KWD_MINUSMINUS = $17             ; $17 --
=$18					KWD_SLASH = $18                  ; $18 /
=$19					KWD_SEMICOLON = $19              ; $19 ;
=$1a					KWD_LESS = $1a                   ; $1a <
=$1b					KWD_LESSLESS = $1b               ; $1b <<
=$1c					KWD_LESSEQUAL = $1c              ; $1c <=
=$1d					KWD_LESSGREATER = $1d            ; $1d <>
=$1e					KWD_EQUAL = $1e                  ; $1e =
=$1f					KWD_GREATER = $1f                ; $1f >
=$20					KWD_GREATEREQUAL = $20           ; $20 >=
=$21					KWD_GREATERGREATER = $21         ; $21 >>
=$22					KWD_AT = $22                     ; $22 @
=$23					KWD_ABS = $23                    ; $23 ABS
=$24					KWD_ALLOC = $24                  ; $24 ALLOC
=$25					KWD_AND = $25                    ; $25 AND
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_DEF = $28                    ; $28 DEF
=$29					KWD_DROP = $29                   ; $29 DROP
=$2a					KWD_DUP = $2a                    ; $2a DUP
=$2b					KWD_ELSE = $2b                   ; $2b ELSE
=$2c					KWD_EMPTY = $2c                  ; $2c EMPTY
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_FOR = $2e                    ; $2e FOR
=$2f					KWD_IF = $2f                     ; $2f IF
=$30					KWD_INDEX = $30                  ; $30 INDEX
=$31					KWD_LIST = $31                   ; $31 LIST
=$32					KWD_MOD = $32                    ; $32 MOD
=$33					KWD_NEGATE = $33                 ; $33 NEGATE
=$34					KWD_NEW = $34                    ; $34 NEW
=$35					KWD_NEXT = $35                   ; $35 NEXT
=$36					KWD_NIP = $36                    ; $36 NIP
=$37					KWD_NOT = $37                    ; $37 NOT
=$38					KWD_OLD = $38                    ; $38 OLD
=$39					KWD_OR = $39                     ; $39 OR
=$3a					KWD_OVER = $3a                   ; $3a OVER
=$3b					KWD_REPEAT = $3b                 ; $3b REPEAT
=$3c					KWD_RUN = $3c                    ; $3c RUN
=$3d					KWD_STOP = $3d                   ; $3d STOP
=$3e					KWD_SWAP = $3e                   ; $3e SWAP
=$3f					KWD_SYS = $3f                    ; $3f SYS
=$40					KWD_THEN = $40                   ; $40 THEN
=$41					KWD_UNTIL = $41                  ; $41 UNTIL
=$42					KWD_WPLING = $42                 ; $42 W!
=$43					KWD_WAT = $43                    ; $43 W@
=$44					KWD_XOR = $44                    ; $44 XOR
=$45					KWD_LSQPARENRSQPAREN = $45       ; $45 []
=$46					KWD_HAT = $46                    ; $46 ^
=$47					KWD_CONSTANT_MINUS = $47         ; $47 {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a14e					ExternCheckBreak:
.a14e	da		phx				phx 								; make sure we keep XY
.a14f	5a		phy				phy
.a150	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a153	f0 03		beq $a158			beq		_ECBExit 					; stopped
.a155	7a		ply				ply 								; restore and exit.
.a156	fa		plx				plx
.a157	60		rts				rts
.a158					_ECBExit:
.a158	4c 3f a7	jmp $a73f			jmp 	WarmStart

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a15b					EXNextLine:
.a15b	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a15d	f0 0f		beq $a16e			beq 	_EXNLWarmStart
.a15f	18		clc				clc 								; advance code pointer to next line
.a160	65 00		adc $00				adc 	codePtr
.a162	85 00		sta $00				sta 	codePtr
.a164	90 02		bcc $a168			bcc 	_EXNLNoBump
.a166	e6 00		inc $00				inc 	codePtr
.a168					_EXNLNoBump:
.a168	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a16a	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a16c	d0 03		bne $a171			bne 	Execute 					; not end of program
.a16e					_EXNLWarmStart:
.a16e	4c bd a6	jmp $a6bd			jmp 	System_END
.a171					Execute:
.a171	e6 0a		inc $0a				inc 	BreakCount 					; break occasionally. too slow otherwise.
.a173	d0 03		bne $a178			bne 	_EXNoBreak
.a175	20 4e a1	jsr $a14e			jsr 	ExternCheckBreak
.a178					_EXNoBreak:
.a178					_EXGetNext:
.a178	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a17a	f0 df		beq $a15b			beq 	EXNextLine 					; reached end of the line.
.a17c	c8		iny				iny 								; advance pointer.
.a17d	c9 10		cmp #$10			cmp 	#KWD_SPACE 					; skip spaces
.a17f	f0 f7		beq $a178			beq 	_ExGetNext
.a181	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a183	90 65		bcc $a1ea			bcc 	EXStringComment
.a185	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a187	90 4b		bcc $a1d4			bcc 	EXTokenExecute
.a189	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a18b	90 03		bcc $a190			bcc 	EXPushConstant
.a18d	4c 45 a7	jmp $a745			jmp 	Identifier 					; it's an identifier C0-FF
.a190					EXPushConstant:
.a190	e8		inx				inx 								; make stack space
.a191	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a193	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a196	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a199	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a19c	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a19f					_EXConstantLoop:
.a19f	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a1a1	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a1a3	c9 80		cmp #$80			cmp 	#$80
.a1a5	d0 ca		bne $a171			bne		Execute 					; no do the next.
.a1a7	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a1aa	48		pha				pha
.a1ab	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a1ae	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a1b1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a1b4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a1b7	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a1ba	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a1bd	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a1c0	68		pla				pla
.a1c1	20 0c a2	jsr $a20c			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a1c4	20 0c a2	jsr $a20c			jsr 	EXShiftTOSRight				; which will be x64
.a1c7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a1c9	c8		iny				iny
.a1ca	29 3f		and #$3f			and 	#$3F
.a1cc	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a1cf	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a1d2	80 cb		bra $a19f			bra 	_EXConstantLoop
.a1d4					EXTokenExecute:
.a1d4	0a		asl a				asl 	a 							; double token, also clears carry
.a1d5	da		phx				phx 								; save X, put token x 2 in X
.a1d6	aa		tax				tax
.a1d7	bd be a0	lda $a0be,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a1da	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a1dc	bd bf a0	lda $a0bf,x			lda 	KeywordVectorTable-$20+1,x
.a1df	85 05		sta $05				sta 	zTemp0+1
.a1e1	fa		plx				plx 								; restore X
.a1e2	20 e7 a1	jsr $a1e7			jsr 	_EXTCall 					; call the routine
.a1e5	80 8a		bra $a171			bra 	Execute
.a1e7					_EXTCall:
.a1e7	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a1ea					EXStringComment:
.a1ea	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a1ec	f0 15		beq $a203			beq 	EXStringSkip 				; (comment), so just skip it.
.a1ee	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a1ef	98		tya				tya
.a1f0	38		sec				sec
.a1f1	65 00		adc $00				adc 	codePtr
.a1f3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a1f6	a5 01		lda $01				lda 	codePtr+1
.a1f8	69 00		adc #$00			adc 	#0
.a1fa	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a1fd	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a200	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a203					EXStringSkip:
.a203	98		tya				tya 								; the current position in A
.a204	18		clc				clc
.a205	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a207	a8		tay				tay 			 					; and make that the current position.
.a208	88		dey				dey 								; back one because of the initial skip
.a209	4c 71 a1	jmp $a171			jmp 	Execute
.a20c					EXShiftTOSRight:
.a20c	4a		lsr a				lsr 	a
.a20d	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a210	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a213	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a216	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a219	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a21a					IdentifierSearch:
.a21a	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a21c	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a21e	90 12		bcc $a232			bcc 	_ISSlow
.a220	c9 fa		cmp #$fa			cmp 	#$F9+1
.a222	b0 0e		bcs $a232			bcs 	_ISSlow
.a224	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a226	0a		asl a				asl 	a
.a227	0a		asl a				asl		a
.a228	85 0b		sta $0b				sta 	idDataAddr					; set up addres
.a22a	a9 10		lda #$10			lda 	#AZVariables >> 8
.a22c	85 0c		sta $0c				sta 	idDataAddr+1
.a22e	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a230	38		sec				sec 								; return with CS.
.a231	60		rts				rts
.a232					_ISSlow:
.a232	20 e6 a2	jsr $a2e6			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a235	98		tya				tya 								; set (zTemp1) to point to the
.a236	18		clc				clc 	 							; identifier to be searched.
.a237	65 00		adc $00				adc 	codePtr
.a239	85 06		sta $06				sta 	zTemp1
.a23b	a5 01		lda $01				lda 	codePtr+1
.a23d	69 00		adc #$00			adc 	#0
.a23f	85 07		sta $07				sta 	zTemp1+1
.a241	5a		phy				phy 								; save Y
.a242	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a244	48		pha				pha
.a245	a0 01		ldy #$01			ldy 	#1
.a247	b1 04		lda ($04),y			lda 	(zTemp0),y
.a249	85 05		sta $05				sta 	zTemp0+1
.a24b	68		pla				pla
.a24c	85 04		sta $04				sta 	zTemp0
.a24e	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a250	f0 2c		beq $a27e			beq 	_ISFail
.a252	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a254	b1 04		lda ($04),y			lda 	(zTemp0),y
.a256	85 08		sta $08				sta 	zTemp2
.a258	c8		iny				iny
.a259	b1 04		lda ($04),y			lda 	(zTemp0),y
.a25b	85 09		sta $09				sta 	zTemp2+1
.a25d	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a25f					_ISCompare:
.a25f	b1 06		lda ($06),y			lda 	(zTemp1),y
.a261	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a263	d0 dd		bne $a242			bne		_ISLoop 					; different ?
.a265	c8		iny				iny
.a266	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a268	90 f5		bcc $a25f			bcc 	_ISCompare
.a26a	18		clc				clc 								; set up the data pointer
.a26b	a5 04		lda $04				lda 	zTemp0
.a26d	69 02		adc #$02			adc 	#2
.a26f	85 0b		sta $0b				sta 	idDataAddr
.a271	a5 05		lda $05				lda 	zTemp0+1
.a273	69 00		adc #$00			adc		#0
.a275	85 0c		sta $0c				sta 	idDataAddr+1
.a277	a0 09		ldy #$09			ldy 	#9 							; get the type
.a279	b1 04		lda ($04),y			lda 	(zTemp0),y
.a27b	7a		ply				ply
.a27c	38		sec				sec
.a27d	60		rts				rts
.a27e					_ISFail:
.a27e	7a		ply				ply
.a27f	18		clc				clc
.a280	60		rts				rts
.a281					IdentifierCreate:
.a281	5a		phy				phy 								; save Y
.a282	48		pha				pha 								; save type on stack
.a283	20 e6 a2	jsr $a2e6			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a286	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a289	85 06		sta $06				sta 	zTemp1
.a28b	ad 89 10	lda $1089			lda 	VarMemory+1
.a28e	85 07		sta $07				sta 	zTemp1+1
.a290	5a		phy				phy 								; save Y (code offset)
.a291	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a293	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a295	91 06		sta ($06),y			sta 	(zTemp1),y
.a297	c8		iny				iny
.a298	b1 04		lda ($04),y			lda 	(zTemp0),y
.a29a	91 06		sta ($06),y			sta 	(zTemp1),y
.a29c	c8		iny				iny
.a29d					_IDCErase:
.a29d	a9 00		lda #$00			lda 	#0
.a29f	91 06		sta ($06),y			sta 	(zTemp1),y
.a2a1	c8		iny				iny
.a2a2	c0 06		cpy #$06			cpy 	#6
.a2a4	d0 f7		bne $a29d			bne 	_IDCErase
.a2a6	68		pla				pla 								; original Y
.a2a7	18		clc				clc
.a2a8	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a2aa	91 06		sta ($06),y			sta 	(zTemp1),y
.a2ac	c8		iny				iny
.a2ad	a5 01		lda $01				lda 	codePtr+1
.a2af	69 00		adc #$00			adc 	#0
.a2b1	91 06		sta ($06),y			sta 	(zTemp1),y
.a2b3	c8		iny				iny
.a2b4	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a2b6	91 06		sta ($06),y			sta 	(zTemp1),y
.a2b8	68		pla				pla 								; restore type
.a2b9	c8		iny				iny
.a2ba	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a2bc	c8		iny				iny
.a2bd	98		tya				tya									; add offset to VarMemory
.a2be	18		clc				clc
.a2bf	6d 88 10	adc $1088			adc 	VarMemory
.a2c2	8d 88 10	sta $1088			sta 	VarMemory
.a2c5	ad 89 10	lda $1089			lda 	VarMemory+1
.a2c8	69 00		adc #$00			adc 	#0
.a2ca	8d 89 10	sta $1089			sta 	VarMemory+1
.a2cd	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a2cf	92 04		sta ($04)			sta 	(zTemp0)
.a2d1	a0 01		ldy #$01			ldy 	#1
.a2d3	a5 07		lda $07				lda 	zTemp1+1
.a2d5	91 04		sta ($04),y			sta 	(zTemp0),y
.a2d7	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a2d9	18		clc				clc
.a2da	69 02		adc #$02			adc 	#2
.a2dc	85 0b		sta $0b				sta 	idDataAddr
.a2de	a5 07		lda $07				lda 	zTemp1+1
.a2e0	69 00		adc #$00			adc 	#0
.a2e2	85 0c		sta $0c				sta 	idDataAddr+1
.a2e4	7a		ply				ply 								; restore Y and exit
.a2e5	60		rts				rts
.a2e6					IdentifierSetUpHashPtr:
.a2e6	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a2e8	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a2ea	0a		asl a				asl 	a 							; convert to an offset, clc
.a2eb	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a2ed	85 04		sta $04				sta 	zTemp0
.a2ef	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a2f1	85 05		sta $05				sta 	zTemp0+1
.a2f3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a2f4					ResetCodePointer:
.a2f4	48		pha				pha
.a2f5	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a2f7	85 01		sta $01				sta 	codePtr+1
.a2f9	64 00		stz $00				stz 	codePtr
.a2fb	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a2fd	68		pla				pla
.a2fe	60		rts				rts
.a2ff					ResetForRun:
.a2ff	48		pha				pha
.a300	5a		phy				phy
.a301	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a303					_RRErase:
.a303	9e 68 10	stz $1068,x			stz		HashTable,x
.a306	e8		inx				inx
.a307	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a309	d0 f8		bne $a303			bne 	_RRErase
.a30b	20 f4 a2	jsr $a2f4			jsr 	ResetCodePointer 			; code Pointer to start of program
.a30e					_RRFindEnd:
.a30e	b2 00		lda ($00)			lda 	(codePtr)					; at end ?
.a310	f0 0b		beq $a31d			beq 	_RRFoundEnd
.a312	18		clc				clc 								; no, add offset to pointer.
.a313	65 00		adc $00				adc 	codePtr
.a315	85 00		sta $00				sta 	codePtr
.a317	90 f5		bcc $a30e			bcc 	_RRFindEnd
.a319	e6 01		inc $01				inc 	codePtr+1
.a31b	80 f1		bra $a30e			bra 	_RRFindEnd
.a31d					_RRFoundEnd:
.a31d	18		clc				clc 								; add 1 to this, as it points to the last
.a31e	a5 00		lda $00				lda 	codePtr 					; offset, and store in Variable Memory pointer
.a320	69 01		adc #$01			adc 	#1
.a322	8d 88 10	sta $1088			sta 	VarMemory
.a325	a5 01		lda $01				lda 	codePtr+1
.a327	69 00		adc #$00			adc 	#0
.a329	8d 89 10	sta $1089			sta 	VarMemory+1
.a32c	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a32e	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a331	9c 8a 10	stz $108a			stz 	AllocMemory
.a334	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a336	85 02		sta $02				sta 	StructSP
.a338	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a33a	85 03		sta $03				sta 	StructSP+1
.a33c	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a33e	92 02		sta ($02)			sta 	(StructSP)
.a340	20 48 a3	jsr $a348			jsr 	ProcedureScan
.a343	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a345	7a		ply				ply
.a346	68		pla				pla
.a347	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a348					ProcedureScan:
.a348	20 f4 a2	jsr $a2f4			jsr 	ResetCodePointer 			; reset the code pointer.
.a34b	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a34d	f0 3c		beq $a38b			beq 	_PSExit
.a34f	a0 03		ldy #$03			ldy 	#3 							; start of line
.a351					_PSSkipSpace:
.a351	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a353	c8		iny				iny
.a354	c9 10		cmp #$10			cmp 	#KWD_SPACE
.a356	f0 f9		beq $a351			beq 	_PSSkipSpace
.a358	c9 28		cmp #$28			cmp 	#KWD_DEF 					; first thing is DEF ?
.a35a	d0 22		bne $a37e			bne 	_PSNext
.a35c					_PSSkipSpace2:
.a35c	c8		iny				iny 								; skip over def first, any following spaces
.a35d	b1 00		lda ($00),y			lda 	(codePtr),y
.a35f	c9 10		cmp #$10			cmp 	#KWD_SPACE
.a361	f0 f9		beq $a35c			beq 	_PSSkipSpace2
.a363	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a365	20 81 a2	jsr $a281			jsr 	IdentifierCreate
.a368					_PSSkipIdentifier:
.a368	b1 00		lda ($00),y			lda 	(codePtr),y
.a36a	c8		iny				iny
.a36b	c9 c0		cmp #$c0			cmp 	#$C0
.a36d	b0 f9		bcs $a368			bcs 	_PSSkipIdentifier
.a36f	88		dey				dey 								; undo last, points at first non ID
.a370	98		tya				tya  								; save the address in the data slot.
.a371	18		clc				clc 								; changing Y doesn't matter.
.a372	65 00		adc $00				adc 	codePtr
.a374	92 0b		sta ($0b)			sta 	(idDataAddr)
.a376	a5 01		lda $01				lda 	codePtr+1
.a378	69 00		adc #$00			adc 	#0
.a37a	a0 01		ldy #$01			ldy 	#1
.a37c	91 0b		sta ($0b),y			sta 	(idDataAddr),y
.a37e					_PSNext:
.a37e	18		clc				clc 								; go to next
.a37f	b2 00		lda ($00)			lda 	(codePtr)
.a381	65 00		adc $00				adc 	codePtr
.a383	85 00		sta $00				sta 	codeptr
.a385	90 c4		bcc $a34b			bcc 	_PSMain
.a387	e6 01		inc $01				inc 	codePtr+1
.a389	80 c0		bra $a34b			bra 	_PSMain
.a38b					_PSExit:
.a38b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a38c					Stack_Empty:
.a38c	a2 00		ldx #$00			ldx 	#0
.a38e	60		rts				rts
.a38f					Stack_Drop:
.a38f	ca		dex				dex
.a390	60		rts				rts
.a391					Stack_Dup:
.a391	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.a394	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a397	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a39a	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a39d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a3a0	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a3a3	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a3a6	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a3a9	e8		inx				inx 								; bump stack pointer
.a3aa	60		rts				rts
.a3ab					Stack_Nip:
.a3ab	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.a3ae	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a3b1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a3b4	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a3b7	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a3ba	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a3bd	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a3c0	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a3c3	ca		dex				dex 								; drop tos
.a3c4	60		rts				rts
.a3c5					Stack_Over:
.a3c5	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.a3c8	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a3cb	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a3ce	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a3d1	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a3d4	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a3d7	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a3da	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a3dd	e8		inx				inx 							; bump stack pointer
.a3de	60		rts				rts
.a3df					Stack_Swap:
.a3df	5a		phy				phy
.a3e0	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a3e3	a8		tay				tay
.a3e4	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.a3e7	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3ea	98		tya				tya
.a3eb	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a3ee	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a3f1	a8		tay				tay
.a3f2	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a3f5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3f8	98		tya				tya
.a3f9	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a3fc	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a3ff	a8		tay				tay
.a400	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a403	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a406	98		tya				tya
.a407	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a40a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a40d	a8		tay				tay
.a40e	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a411	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a414	98		tya				tya
.a415	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a418	7a		ply				ply
.a419	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.a41a					Unary_Absolute:
.a41a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a41d	30 01		bmi $a420			bmi 	Unary_Negate
.a41f	60		rts				rts
.a420					Unary_Negate:
.a420					Unary_Const_Minus:
.a420	38		sec				sec
.a421	a9 00		lda #$00			lda		#0
.a423	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a426	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a429	a9 00		lda #$00			lda		#0
.a42b	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a42e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a431	a9 00		lda #$00			lda		#0
.a433	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a436	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a439	a9 00		lda #$00			lda		#0
.a43b	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a43e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a441	60		rts				rts
.a442					Unary_Not:
.a442	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a445	49 ff		eor #$ff			eor 	#$FF
.a447	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a44a	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a44d	49 ff		eor #$ff			eor 	#$FF
.a44f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a452	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a455	49 ff		eor #$ff			eor 	#$FF
.a457	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a45a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a45d	49 ff		eor #$ff			eor 	#$FF
.a45f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a462	60		rts				rts
.a463					Unary_Increment:
.a463	fe 00 0c	inc $0c00,x			inc 	stack0,x
.a466	d0 0d		bne $a475			bne 	_UIExit
.a468	fe 00 0d	inc $0d00,x			inc 	stack1,x
.a46b	d0 08		bne $a475			bne 	_UIExit
.a46d	fe 00 0e	inc $0e00,x			inc 	stack2,x
.a470	d0 03		bne $a475			bne 	_UIExit
.a472	fe 00 0f	inc $0f00,x			inc 	stack3,x
.a475					_UIExit:
.a475	60		rts				rts
.a476					Unary_Decrement:
.a476	38		sec				sec
.a477	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a47a	e9 01		sbc #$01			sbc 	#1
.a47c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a47f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a482	e9 00		sbc #$00			sbc 	#0
.a484	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a487	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a48a	e9 00		sbc #$00			sbc 	#0
.a48c	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a48f	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a492	e9 00		sbc #$00			sbc 	#0
.a494	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a497	60		rts				rts
.a498					Unary_Shl:
.a498	1e 00 0c	asl $0c00,x			asl 	stack0,x
.a49b	3e 00 0d	rol $0d00,x			rol 	stack1,x
.a49e	3e 00 0e	rol $0e00,x			rol 	stack2,x
.a4a1	3e 00 0f	rol $0f00,x			rol 	stack3,x
.a4a4	60		rts				rts
.a4a5					Unary_Shr:
.a4a5	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.a4a8	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a4ab	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a4ae	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a4b1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.a4b2					Mem_Peek:
.a4b2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a4b5	85 04		sta $04				sta 	zTemp0
.a4b7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a4ba	85 05		sta $05				sta 	zTemp0+1
.a4bc	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a4be	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a4c1	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a4c4	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a4c7	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a4ca	60		rts				rts
.a4cb					Mem_WPeek:
.a4cb	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a4ce	85 04		sta $04				sta 	zTemp0
.a4d0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a4d3	85 05		sta $05				sta 	zTemp0+1
.a4d5	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a4d7	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a4da	5a		phy				phy 								; read msb
.a4db	a0 01		ldy #$01			ldy 	#1
.a4dd	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4df	7a		ply				ply
.a4e0	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.a4e3	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a4e6	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a4e9	60		rts				rts
.a4ea					Mem_DPeek:
.a4ea	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a4ed	85 04		sta $04				sta 	zTemp0
.a4ef	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a4f2	85 05		sta $05				sta 	zTemp0+1
.a4f4	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a4f6	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a4f9	5a		phy				phy 								; read msb
.a4fa	a0 01		ldy #$01			ldy 	#1
.a4fc	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4fe	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.a501	c8		iny				iny
.a502	b1 04		lda ($04),y			lda 	(zTemp0),y
.a504	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a507	c8		iny				iny
.a508	b1 04		lda ($04),y			lda 	(zTemp0),y
.a50a	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a50d	7a		ply				ply
.a50e	60		rts				rts
.a50f					Mem_Poke:
.a50f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a512	85 04		sta $04				sta 	zTemp0
.a514	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a517	85 05		sta $05				sta 	zTemp0+1
.a519	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a51c	92 04		sta ($04)			sta 	(zTemp0)
.a51e	ca		dex				dex
.a51f	ca		dex				dex
.a520	60		rts				rts
.a521					Mem_WPoke:
.a521	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a524	85 04		sta $04				sta 	zTemp0
.a526	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a529	85 05		sta $05				sta 	zTemp0+1
.a52b	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a52e	92 04		sta ($04)			sta 	(zTemp0)
.a530	5a		phy				phy
.a531	a0 01		ldy #$01			ldy 	#1
.a533	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.a536	91 04		sta ($04),y			sta 	(zTemp0),y
.a538	7a		ply				ply
.a539	ca		dex				dex
.a53a	ca		dex				dex
.a53b	60		rts				rts
.a53c					Mem_DPoke:
.a53c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a53f	85 04		sta $04				sta 	zTemp0
.a541	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a544	85 05		sta $05				sta 	zTemp0+1
.a546	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.a549	92 04		sta ($04)			sta 	(zTemp0)
.a54b	5a		phy				phy
.a54c	a0 01		ldy #$01			ldy 	#1
.a54e	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a551	c8		iny				iny
.a552	91 04		sta ($04),y			sta 	(zTemp0),y
.a554	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a557	c8		iny				iny
.a558	91 04		sta ($04),y			sta 	(zTemp0),y
.a55a	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a55d	c8		iny				iny
.a55e	91 04		sta ($04),y			sta 	(zTemp0),y
.a560	7a		ply				ply
.a561	ca		dex				dex
.a562	ca		dex				dex
.a563	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.a564					Stack_Add:
.a564	ca		dex				dex
.a565	18		clc				clc
.a566	bd 00 0c	lda $0c00,x			lda		stack0,x
.a569	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.a56c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a56f	bd 00 0d	lda $0d00,x			lda		stack1,x
.a572	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.a575	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a578	bd 00 0e	lda $0e00,x			lda		stack2,x
.a57b	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.a57e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a581	bd 00 0f	lda $0f00,x			lda		stack3,x
.a584	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.a587	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a58a	60		rts				rts
.a58b					Stack_Sub:
.a58b	ca		dex				dex
.a58c	38		sec				sec
.a58d	bd 00 0c	lda $0c00,x			lda		stack0,x
.a590	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.a593	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a596	bd 00 0d	lda $0d00,x			lda		stack1,x
.a599	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.a59c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a59f	bd 00 0e	lda $0e00,x			lda		stack2,x
.a5a2	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.a5a5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a5a8	bd 00 0f	lda $0f00,x			lda		stack3,x
.a5ab	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.a5ae	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a5b1	60		rts				rts
.a5b2					Stack_And:
.a5b2	ca		dex				dex
.a5b3	bd 00 0c	lda $0c00,x			lda		stack0,x
.a5b6	3d 01 0c	and $0c01,x			and		stack0+1,x
.a5b9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a5bc	bd 00 0d	lda $0d00,x			lda		stack1,x
.a5bf	3d 01 0d	and $0d01,x			and 	stack1+1,x
.a5c2	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a5c5	bd 00 0e	lda $0e00,x			lda		stack2,x
.a5c8	3d 01 0e	and $0e01,x			and 	stack2+1,x
.a5cb	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a5ce	bd 00 0f	lda $0f00,x			lda		stack3,x
.a5d1	3d 01 0f	and $0f01,x			and 	stack3+1,x
.a5d4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a5d7	60		rts				rts
.a5d8					Stack_Xor:
.a5d8	ca		dex				dex
.a5d9	bd 00 0c	lda $0c00,x			lda		stack0,x
.a5dc	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.a5df	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a5e2	bd 00 0d	lda $0d00,x			lda		stack1,x
.a5e5	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.a5e8	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a5eb	bd 00 0e	lda $0e00,x			lda		stack2,x
.a5ee	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.a5f1	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a5f4	bd 00 0f	lda $0f00,x			lda		stack3,x
.a5f7	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.a5fa	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a5fd	60		rts				rts
.a5fe					Stack_Or:
.a5fe	ca		dex				dex
.a5ff	bd 00 0c	lda $0c00,x			lda		stack0,x
.a602	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.a605	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a608	bd 00 0d	lda $0d00,x			lda		stack1,x
.a60b	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.a60e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a611	bd 00 0e	lda $0e00,x			lda		stack2,x
.a614	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.a617	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a61a	bd 00 0f	lda $0f00,x			lda		stack3,x
.a61d	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.a620	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a623	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.a624					Comp_Equal:
.a624	38		sec				sec
.a625	80 01		bra $a628			bra 	Comp_CheckEqual
.a627					Comp_NotEqual:
.a627	18		clc				clc
.a628					Comp_CheckEqual:
.a628	08		php				php
.a629	ca		dex				dex
.a62a	bd 00 0c	lda $0c00,x			lda		stack0,x
.a62d	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.a630	d0 16		bne $a648			bne 	_CCENonZero
.a632	bd 00 0d	lda $0d00,x			lda		stack1,x
.a635	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.a638	d0 0e		bne $a648			bne 	_CCENonZero
.a63a	bd 00 0e	lda $0e00,x			lda		stack2,x
.a63d	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.a640	d0 06		bne $a648			bne 	_CCENonZero
.a642	bd 00 0f	lda $0f00,x			lda		stack3,x
.a645	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.a648					_CCENonZero:
.a648	f0 02		beq $a64c			beq 	_CCENotSet
.a64a	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.a64c					_CCENotSet:
.a64c					CompCheckFlip:
.a64c	28		plp				plp 								; if carry set, we want $FF if equal
.a64d	90 02		bcc $a651			bcc 	CompReturn
.a64f	49 ff		eor #$ff			eor 	#$FF
.a651					CompReturn:
.a651	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.a654	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a657	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a65a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a65d	60		rts				rts
.a65e					Comp_Less:
.a65e	18		clc				clc
.a65f	80 01		bra $a662			bra 	Comp_LessCont
.a661					Comp_GreaterEqual:
.a661	38		sec				sec
.a662					Comp_LessCont:
.a662	08		php				php
.a663	ca		dex				dex
.a664	38		sec				sec
.a665	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.a668	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.a66b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a66e	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.a671	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a674	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.a677	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a67a	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.a67d	50 02		bvc $a681			bvc 	_CLNoFlip 					; unsigned -> signed
.a67f	49 80		eor #$80			eor 	#$80
.a681					_CLNoFlip:
.a681	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.a683	f0 c7		beq $a64c			beq 	CompCheckFlip
.a685	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.a687	80 c3		bra $a64c			bra 	CompCheckFlip
.a689					Comp_LessEqual:
.a689	38		sec				sec
.a68a	80 01		bra $a68d			bra 	Comp_LessEqualCont
.a68c					Comp_Greater:
.a68c	18		clc				clc
.a68d					Comp_LessEqualCont:
.a68d	08		php				php
.a68e	ca		dex				dex
.a68f	38		sec				sec
.a690	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.a693	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a696	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.a699	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a69c	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.a69f	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a6a2	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.a6a5	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a6a8	50 02		bvc $a6ac			bvc 	_CLENoFlip 					; unsigned -> signed
.a6aa	49 80		eor #$80			eor 	#$80
.a6ac					_CLENoFlip:
.a6ac	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.a6ae	f0 9c		beq $a64c			beq 	CompCheckFlip
.a6b0	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.a6b2	80 98		bra $a64c			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.a6b4					System_RUN:
.a6b4	20 ff a2	jsr $a2ff			jsr		ResetForRun 				; clear vars, stacks etc.
.a6b7	20 f4 a2	jsr $a2f4			jsr 	ResetCodePointer 			; point to first thing to do.
.a6ba	4c 71 a1	jmp $a171			jmp 	Execute						; and run
.a6bd					System_END:
>a6bd	ff						.byte 	$FF
.a6be	4c 3f a7	jmp $a73f			jmp 	WarmStart
.a6c1					System_STOP:
.a6c1	4c ff ff	jmp $ffff			jmp 	$FFFF
.a6c4	20 42 a7	jsr $a742			jsr 	ErrorHandler
>a6c7	53 54 4f 50 00					.text 	"STOP",0
.a6cc					System_New:
.a6cc	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.a6cf	20 ff a2	jsr $a2ff			jsr		ResetForRun 				; clear vars, stacks etc.
.a6d2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.a6d3					WriteVariable:
.a6d3	20 1a a2	jsr $a21a			jsr 	IdentifierSearch 			; does it exist
.a6d6	90 16		bcc $a6ee			bcc 	_WVNoIdentifier
.a6d8	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.a6da	f0 22		beq $a6fe			beq 	_WVWriteTOS 				; if found write TOS to it.
.a6dc	20 42 a7	jsr $a742			jsr 	ErrorHandler
>a6df	4e 6f 74 20 61 20 76 61				.text 	'Not a variable',0
>a6e7	72 69 61 62 6c 65 00
.a6ee					_WVNoIdentifier:
.a6ee	5a		phy				phy 								; get current line number
.a6ef	a0 01		ldy #$01			ldy 	#1
.a6f1	b1 00		lda ($00),y			lda 	(codePtr),y
.a6f3	c8		iny				iny
.a6f4	11 00		ora ($00),y			ora 	(codePtr),y
.a6f6	7a		ply				ply
.a6f7	f0 29		beq $a722			beq 	_WVCantCreate 				; if zero (command line) no new vars
.a6f9	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.a6fb	20 81 a2	jsr $a281			jsr 	IdentifierCreate 			; try to find it
.a6fe					_WVWriteTOS:
.a6fe	5a		phy				phy									; copy TOS in
.a6ff	a0 00		ldy #$00			ldy 	#0
.a701	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a704	91 0b		sta ($0b),y			sta 	(idDataAddr),y
.a706	c8		iny				iny
.a707	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a70a	91 0b		sta ($0b),y			sta 	(idDataAddr),y
.a70c	c8		iny				iny
.a70d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a710	91 0b		sta ($0b),y			sta 	(idDataAddr),y
.a712	c8		iny				iny
.a713	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a716	91 0b		sta ($0b),y			sta 	(idDataAddr),y
.a718	7a		ply				ply
.a719	ca		dex				dex 								; drop
.a71a					_WVSkipIdentifier:
.a71a	c8		iny				iny
.a71b	b1 00		lda ($00),y			lda 	(codePtr),y
.a71d	c9 c0		cmp #$c0			cmp 	#$C0
.a71f	b0 f9		bcs $a71a			bcs 	_WVSkipIdentifier
.a721	60		rts				rts
.a722					_WVCantCreate:
.a722	20 42 a7	jsr $a742			jsr 	ErrorHandler
>a725	43 61 6e 6e 6f 74 20 63				.text 	"Cannot create variable",0
>a72d	72 65 61 74 65 20 76 61 72 69 61 62 6c 65 00

;******  Return to file: main.asm

.a73c					SyntaxError:
>a73c	ff						.byte 	$FF
.a73d	a2 02		ldx #$02			ldx 	#2
.a73f					WarmStart:
>a73f	ff						.byte 	$FF
.a740	a2 03		ldx #$03			ldx 	#3
.a742					ErrorHandler:
>a742	ff						.byte 	$FF
.a743	a2 04		ldx #$04			ldx 	#4
.a745					Identifier:
>a745	ff						.byte 	$FF
.a746	a2 05		ldx #$05			ldx 	#5

;******  Processing file: generated/testcode.inc

>1100	13 e8 03 83 80 b9 10 82			.byte $13,$e8,$03,$83,$80,$b9,$10,$82,$90,$10,$46,$f9,$10,$8f,$9f,$10,$46,$e0,$00,$1c,$f2,$03,$aa,$10,$46,$c3,$c4,$cd,$cd,$c8,$f2,$10,$82,$47,$10,$46,$d3,$c7,$c4,$df,$cc,$c4,$cd,$c0,$c2,$e4,$00,$25,$fc,$03,$88,$82,$10,$46,$c3,$c4,$cd,$cd,$c8,$f2,$10,$88,$80,$47,$10,$2a,$10,$46,$d3,$c7,$e4,$10,$46,$d3,$c7,$c4,$df,$cc,$c4,$cd,$c0,$c2,$e4,$00,$09,$06,$04,$8d,$90,$b1,$10,$3d,$00,$0f,$10,$04,$28,$10,$c1,$c2,$e3,$10,$81,$10,$82,$10,$83,$00,$12,$1a,$04,$28,$10,$c1,$c0,$d3,$df,$c2,$e2,$10,$84,$10,$85,$10,$86,$00,$11,$24,$04,$28,$10,$c7,$c4,$cb,$cb,$ce,$df,$d6,$ce,$d1,$cb,$e3,$00
>1108	90 10 46 f9 10 8f 9f 10 46 e0 00 1c f2 03 aa 10
>1118	46 c3 c4 cd cd c8 f2 10 82 47 10 46 d3 c7 c4 df
>1128	cc c4 cd c0 c2 e4 00 25 fc 03 88 82 10 46 c3 c4
>1138	cd cd c8 f2 10 88 80 47 10 2a 10 46 d3 c7 e4 10
>1148	46 d3 c7 c4 df cc c4 cd c0 c2 e4 00 09 06 04 8d
>1158	90 b1 10 3d 00 0f 10 04 28 10 c1 c2 e3 10 81 10
>1168	82 10 83 00 12 1a 04 28 10 c1 c0 d3 df c2 e2 10
>1178	84 10 85 10 86 00 11 24 04 28 10 c7 c4 cb cb ce
>1188	df d6 ce d1 cb e3 00

;******  Return to file: main.asm

>118f	00						.byte 	0

;******  End of listing
