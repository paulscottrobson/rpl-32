
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o rpl32.prg -L rpl32.lst main.asm
; Sat Oct  5 18:39:31 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0a00					ExtDataArea = $0A00 						; space where non zp data goes
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					zLTemp1:		.dword ?					; temporary longs
>000e					idDataAddr:		.word ? 					; data address.
>0010					ForAddr:		.byte ? 					; points to current FOR structure
>0a00					SBuffer:		.fill 32 					; string buffer
>0a20					SBPosition:		.byte ? 					; position in String Buffer
>0a21					NumConvCount:	.byte ? 					; used in int to string
>0a22					breakCount:		.byte ? 					; used to stop break firing every execution.
>0a23					SignCount:		.byte ?						; sign count for divide
>0a24					NumSuppress:	.byte ? 					; zero suppression flag
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 a7 a1	jsr $a1a7			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 1d a0	lda $a01d,x			lda 	BootMessage,x
.a00b	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 1d a0	lda $a01d,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	20 94 a3	jsr $a394			jsr 	ResetForRun
.a017	20 89 a3	jsr $a389			jsr 	ResetCodePointer
.a01a	4c db aa	jmp $aadb			jmp 	System_RUN
.a01d					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a01d	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$31,$34,$32,$20,$44,$41,$54,$45,$3a,$30,$35,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$00
>a025	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a035	2a 2a 2a 2a 0d 0d 42 55 49 4c 44 3a 31 34 32 20
>a045	44 41 54 45 3a 30 35 2d 4f 43 54 2d 32 30 31 39
>a055	0d 0d 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a058					KeywordText:
>a058	01 20					.byte $01,$20                          ; $10
>a05a	01 21					.byte $01,$21                          ; $11 !
>a05c	01 26					.byte $01,$26                          ; $12 &
>a05e	01 2a					.byte $01,$2a                          ; $13 *
>a060	01 2b					.byte $01,$2b                          ; $14 +
>a062	02 2b 2b				.byte $02,$2b,$2b                      ; $15 ++
>a065	01 2d					.byte $01,$2d                          ; $16 -
>a067	02 2d 2d				.byte $02,$2d,$2d                      ; $17 --
>a06a	01 2f					.byte $01,$2f                          ; $18 /
>a06c	01 3b					.byte $01,$3b                          ; $19 ;
>a06e	01 3c					.byte $01,$3c                          ; $1a <
>a070	02 3c 3c				.byte $02,$3c,$3c                      ; $1b <<
>a073	02 3c 3d				.byte $02,$3c,$3d                      ; $1c <=
>a076	02 3c 3e				.byte $02,$3c,$3e                      ; $1d <>
>a079	01 3d					.byte $01,$3d                          ; $1e =
>a07b	01 3e					.byte $01,$3e                          ; $1f >
>a07d	02 3e 3d				.byte $02,$3e,$3d                      ; $20 >=
>a080	02 3e 3e				.byte $02,$3e,$3e                      ; $21 >>
>a083	01 40					.byte $01,$40                          ; $22 @
>a085	03 41 42 53				.byte $03,$41,$42,$53                  ; $23 ABS
>a089	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $24 ALLOC
>a08f	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $25 AND
>a093	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $26 ASSERT
>a09a	02 43 21				.byte $02,$43,$21                      ; $27 C!
>a09d	02 43 40				.byte $02,$43,$40                      ; $28 C@
>a0a0	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a0a4	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a0a9	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a0ad	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a0b2	05 45 4d 50 54 59			.byte $05,$45,$4d,$50,$54,$59          ; $2d EMPTY
>a0b8	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2e END
>a0bc	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2f ENDIF
>a0c2	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $30 FOR
>a0c6	02 49 46				.byte $02,$49,$46                      ; $31 IF
>a0c9	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $32 INDEX
>a0cf	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $33 LIST
>a0d4	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a0d8	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a0df	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a0e3	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a0e8	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a0ec	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a0f0	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a0f4	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a0f7	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a0fc	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3d REPEAT
>a103	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $3e RUN
>a107	05 53 54 41 43 4b			.byte $05,$53,$54,$41,$43,$4b          ; $3f STACK
>a10d	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $40 STOP
>a112	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $41 SWAP
>a117	03 53 59 53				.byte $03,$53,$59,$53                  ; $42 SYS
>a11b	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $43 UNTIL
>a121	02 57 21				.byte $02,$57,$21                      ; $44 W!
>a124	02 57 40				.byte $02,$57,$40                      ; $45 W@
>a127	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $46 XOR
>a12b	02 5b 5d				.byte $02,$5b,$5d                      ; $47 []
>a12e	01 5e					.byte $01,$5e                          ; $48 ^
>a130	01 2d					.byte $01,$2d                          ; $49 {-}
>a132	00					.byte $00
.a133					KeywordVectorTable:
>a133	8a a4					.word SyntaxError                      ; $10
>a135	6e a8					.word Mem_DPoke                        ; $11 !
>a137	8a a4					.word SyntaxError                      ; $12 &
>a139	55 a9					.word MulInteger32                     ; $13 *
>a13b	95 a8					.word Stack_Add                        ; $14 +
>a13d	95 a7					.word Unary_Increment                  ; $15 ++
>a13f	bc a8					.word Stack_Sub                        ; $16 -
>a141	a8 a7					.word Unary_Decrement                  ; $17 --
>a143	9e a9					.word DivInteger32                     ; $18 /
>a145	8a a4					.word SyntaxError                      ; $19 ;
>a147	85 aa					.word Comp_Less                        ; $1a <
>a149	ca a7					.word Unary_Shl                        ; $1b <<
>a14b	b0 aa					.word Comp_LessEqual                   ; $1c <=
>a14d	4e aa					.word Comp_NotEqual                    ; $1d <>
>a14f	4b aa					.word Comp_Equal                       ; $1e =
>a151	b3 aa					.word Comp_Greater                     ; $1f >
>a153	88 aa					.word Comp_GreaterEqual                ; $20 >=
>a155	d7 a7					.word Unary_Shr                        ; $21 >>
>a157	1c a8					.word Mem_DPeek                        ; $22 @
>a159	4c a7					.word Unary_Absolute                   ; $23 ABS
>a15b	8a a4					.word SyntaxError                      ; $24 ALLOC
>a15d	e3 a8					.word Stack_And                        ; $25 AND
>a15f	f3 aa					.word System_Assert                    ; $26 ASSERT
>a161	41 a8					.word Mem_Poke                         ; $27 C!
>a163	e4 a7					.word Mem_Peek                         ; $28 C@
>a165	8a a4					.word SyntaxError                      ; $29 DEF
>a167	c1 a6					.word Stack_Drop                       ; $2a DROP
>a169	c3 a6					.word Stack_Dup                        ; $2b DUP
>a16b	8a a4					.word SyntaxError                      ; $2c ELSE
>a16d	be a6					.word Stack_Empty                      ; $2d EMPTY
>a16f	e4 aa					.word System_END                       ; $2e END
>a171	8a a4					.word SyntaxError                      ; $2f ENDIF
>a173	4c ac					.word Command_For                      ; $30 FOR
>a175	8a a4					.word SyntaxError                      ; $31 IF
>a177	e8 ac					.word Command_Index                    ; $32 INDEX
>a179	be a5					.word Cmd_List                         ; $33 LIST
>a17b	33 aa					.word ModInteger32                     ; $34 MOD
>a17d	52 a7					.word Unary_Negate                     ; $35 NEGATE
>a17f	0d ab					.word System_New                       ; $36 NEW
>a181	a3 ac					.word Command_Next                     ; $37 NEXT
>a183	dd a6					.word Stack_Nip                        ; $38 NIP
>a185	74 a7					.word Unary_Not                        ; $39 NOT
>a187	14 ab					.word System_Old                       ; $3a OLD
>a189	2f a9					.word Stack_Or                         ; $3b OR
>a18b	f7 a6					.word Stack_Over                       ; $3c OVER
>a18d	8a a4					.word SyntaxError                      ; $3d REPEAT
>a18f	db aa					.word System_RUN                       ; $3e RUN
>a191	60 ab					.word System_Stack                     ; $3f STACK
>a193	e8 aa					.word System_STOP                      ; $40 STOP
>a195	11 a7					.word Stack_Swap                       ; $41 SWAP
>a197	38 ab					.word System_Sys                       ; $42 SYS
>a199	8a a4					.word SyntaxError                      ; $43 UNTIL
>a19b	53 a8					.word Mem_WPoke                        ; $44 W!
>a19d	fd a7					.word Mem_WPeek                        ; $45 W@
>a19f	09 a9					.word Stack_Xor                        ; $46 XOR
>a1a1	8a a4					.word SyntaxError                      ; $47 []
>a1a3	e9 ab					.word WriteVariable                    ; $48 ^
>a1a5	52 a7					.word Unary_Const_Minus                ; $49 {-}
=$10					KWD_SPACE = $10                  ; $10
=$11					KWD_PLING = $11                  ; $11 !
=$12					KWD_AMPERSAND = $12              ; $12 &
=$13					KWD_ASTERISK = $13               ; $13 *
=$14					KWD_PLUS = $14                   ; $14 +
=$15					KWD_PLUSPLUS = $15               ; $15 ++
=$16					KWD_MINUS = $16                  ; $16 -
=$17					KWD_MINUSMINUS = $17             ; $17 --
=$18					KWD_SLASH = $18                  ; $18 /
=$19					KWD_SEMICOLON = $19              ; $19 ;
=$1a					KWD_LESS = $1a                   ; $1a <
=$1b					KWD_LESSLESS = $1b               ; $1b <<
=$1c					KWD_LESSEQUAL = $1c              ; $1c <=
=$1d					KWD_LESSGREATER = $1d            ; $1d <>
=$1e					KWD_EQUAL = $1e                  ; $1e =
=$1f					KWD_GREATER = $1f                ; $1f >
=$20					KWD_GREATEREQUAL = $20           ; $20 >=
=$21					KWD_GREATERGREATER = $21         ; $21 >>
=$22					KWD_AT = $22                     ; $22 @
=$23					KWD_ABS = $23                    ; $23 ABS
=$24					KWD_ALLOC = $24                  ; $24 ALLOC
=$25					KWD_AND = $25                    ; $25 AND
=$26					KWD_ASSERT = $26                 ; $26 ASSERT
=$27					KWD_CPLING = $27                 ; $27 C!
=$28					KWD_CAT = $28                    ; $28 C@
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_EMPTY = $2d                  ; $2d EMPTY
=$2e					KWD_END = $2e                    ; $2e END
=$2f					KWD_ENDIF = $2f                  ; $2f ENDIF
=$30					KWD_FOR = $30                    ; $30 FOR
=$31					KWD_IF = $31                     ; $31 IF
=$32					KWD_INDEX = $32                  ; $32 INDEX
=$33					KWD_LIST = $33                   ; $33 LIST
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_REPEAT = $3d                 ; $3d REPEAT
=$3e					KWD_RUN = $3e                    ; $3e RUN
=$3f					KWD_STACK = $3f                  ; $3f STACK
=$40					KWD_STOP = $40                   ; $40 STOP
=$41					KWD_SWAP = $41                   ; $41 SWAP
=$42					KWD_SYS = $42                    ; $42 SYS
=$43					KWD_UNTIL = $43                  ; $43 UNTIL
=$44					KWD_WPLING = $44                 ; $44 W!
=$45					KWD_WAT = $45                    ; $45 W@
=$46					KWD_XOR = $46                    ; $46 XOR
=$47					KWD_LSQPARENRSQPAREN = $47       ; $47 []
=$48					KWD_HAT = $48                    ; $48 ^
=$49					KWD_CONSTANT_MINUS = $49         ; $49 {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a1a7					ExternInitialise:
.a1a7	a9 07		lda #$07			lda 	#$07 						; set colour
.a1a9	8d 86 02	sta $0286			sta 	646
.a1ac	a9 0e		lda #$0e			lda 	#14							; lower case
.a1ae	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1b1	a9 93		lda #$93			lda 	#147 						; clear screen
.a1b3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1b6	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a1b8	4c d2 a1	jmp $a1d2			jmp 	ExternColour
.a1bb					ExternCheckBreak:
.a1bb	da		phx				phx 								; make sure we keep XY
.a1bc	5a		phy				phy
.a1bd	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a1c0	f0 03		beq $a1c5			beq		_ECBExit 					; stopped
.a1c2	7a		ply				ply 								; restore and exit.
.a1c3	fa		plx				plx
.a1c4	60		rts				rts
.a1c5					_ECBExit:
.a1c5	4c de a4	jmp $a4de			jmp 	WarmStart
.a1c8					ExternPrint:
.a1c8	48		pha				pha
.a1c9	da		phx				phx
.a1ca	5a		phy				phy
.a1cb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1ce	7a		ply				ply
.a1cf	fa		plx				plx
.a1d0	68		pla				pla
.a1d1	60		rts				rts
.a1d2					ExternColour:
.a1d2	48		pha				pha
.a1d3	da		phx				phx
.a1d4	aa		tax				tax
.a1d5	bd de a1	lda $a1de,x			lda 	_ECTable,x
.a1d8	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a1db	fa		plx				plx
.a1dc	68		pla				pla
.a1dd	60		rts				rts
.a1de					_ECTable:
>a1de	90						.byte 	144
>a1df	1c						.byte 	28
>a1e0	1e						.byte 	30
>a1e1	9e						.byte 	158
>a1e2	1f						.byte 	31
>a1e3	9c						.byte 	156
>a1e4	9f						.byte 	159
>a1e5	05						.byte 	5

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a1e6					EXNextLine:
.a1e6	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a1e8	f0 0f		beq $a1f9			beq 	_EXNLWarmStart
.a1ea	18		clc				clc 								; advance code pointer to next line
.a1eb	65 00		adc $00				adc 	codePtr
.a1ed	85 00		sta $00				sta 	codePtr
.a1ef	90 02		bcc $a1f3			bcc 	_EXNLNoBump
.a1f1	e6 01		inc $01				inc 	codePtr+1
.a1f3					_EXNLNoBump:
.a1f3	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a1f5	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a1f7	d0 03		bne $a1fc			bne 	Execute 					; not end of program
.a1f9					_EXNLWarmStart:
.a1f9	4c e4 aa	jmp $aae4			jmp 	System_END
.a1fc					Execute:
.a1fc	ee 22 0a	inc $0a22			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a1ff	d0 03		bne $a204			bne 	_EXNoBreak
.a201	20 bb a1	jsr $a1bb			jsr 	ExternCheckBreak
.a204					_EXNoBreak:
.a204					_EXGetNext:
.a204	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a206	f0 de		beq $a1e6			beq 	EXNextLine 					; reached end of the line.
.a208	c8		iny				iny 								; advance pointer.
.a209	c9 10		cmp #$10			cmp 	#KWD_SPACE 					; skip spaces
.a20b	f0 f7		beq $a204			beq 	_ExGetNext
.a20d	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a20f	90 27		bcc $a238			bcc 	EXStringComment
.a211	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a213	90 0d		bcc $a222			bcc 	EXTokenExecute
.a215	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a217	90 03		bcc $a21c			bcc 	EXPushConstant
.a219	4c 8e ab	jmp $ab8e			jmp 	Identifier 					; it's an identifier C0-FF
.a21c					EXPushConstant:
.a21c	88		dey				dey
.a21d	20 67 a2	jsr $a267			jsr 	ExtractIntegerToTOS 		; extract integer
.a220	80 da		bra $a1fc			bra 	Execute
.a222					EXTokenExecute:
.a222	0a		asl a				asl 	a 							; double token, also clears carry
.a223	da		phx				phx 								; save X, put token x 2 in X
.a224	aa		tax				tax
.a225	bd 13 a1	lda $a113,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a228	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a22a	bd 14 a1	lda $a114,x			lda 	KeywordVectorTable-$20+1,x
.a22d	85 05		sta $05				sta 	zTemp0+1
.a22f	fa		plx				plx 								; restore X
.a230	20 35 a2	jsr $a235			jsr 	_EXTCall 					; call the routine
.a233	80 c7		bra $a1fc			bra 	Execute
.a235					_EXTCall:
.a235	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a238					EXStringComment:
.a238	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a23a	f0 15		beq $a251			beq 	EXStringSkip 				; (comment), so just skip it.
.a23c	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a23d	98		tya				tya
.a23e	38		sec				sec
.a23f	65 00		adc $00				adc 	codePtr
.a241	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a244	a5 01		lda $01				lda 	codePtr+1
.a246	69 00		adc #$00			adc 	#0
.a248	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a24b	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a24e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a251					EXStringSkip:
.a251	98		tya				tya 								; the current position in A
.a252	18		clc				clc
.a253	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a255	a8		tay				tay 			 					; and make that the current position.
.a256	88		dey				dey 								; back one because of the initial skip
.a257	80 a3		bra $a1fc			bra 	Execute
.a259					EXShiftTOSRight:
.a259	4a		lsr a				lsr 	a
.a25a	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a25d	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a260	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a263	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a266	60		rts				rts
.a267					ExtractIntegerToTOS:
.a267	b1 00		lda ($00),y			lda 	(codePtr),y
.a269	c8		iny				iny
.a26a	e8		inx				inx 								; make stack space
.a26b	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a26d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a270	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a273	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a276	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a279					_EXConstantLoop:
.a279	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a27b	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a27d	c9 80		cmp #$80			cmp 	#$80
.a27f	d0 2d		bne $a2ae			bne		_EXDone 					; no then exit
.a281	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a284	48		pha				pha
.a285	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a288	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a28b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a28e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a291	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a294	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a297	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a29a	68		pla				pla
.a29b	20 59 a2	jsr $a259			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a29e	20 59 a2	jsr $a259			jsr 	EXShiftTOSRight				; which will be x64
.a2a1	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a2a3	c8		iny				iny
.a2a4	29 3f		and #$3f			and 	#$3F
.a2a6	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a2a9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2ac	80 cb		bra $a279			bra 	_EXConstantLoop
.a2ae					_EXDone:
.a2ae	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a2af					IdentifierSearch:
.a2af	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a2b1	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a2b3	90 12		bcc $a2c7			bcc 	_ISSlow
.a2b5	c9 fa		cmp #$fa			cmp 	#$F9+1
.a2b7	b0 0e		bcs $a2c7			bcs 	_ISSlow
.a2b9	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a2bb	0a		asl a				asl 	a
.a2bc	0a		asl a				asl		a
.a2bd	85 0e		sta $0e				sta 	idDataAddr					; set up addres
.a2bf	a9 10		lda #$10			lda 	#AZVariables >> 8
.a2c1	85 0f		sta $0f				sta 	idDataAddr+1
.a2c3	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a2c5	38		sec				sec 								; return with CS.
.a2c6	60		rts				rts
.a2c7					_ISSlow:
.a2c7	20 7b a3	jsr $a37b			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a2ca	98		tya				tya 								; set (zTemp1) to point to the
.a2cb	18		clc				clc 	 							; identifier to be searched.
.a2cc	65 00		adc $00				adc 	codePtr
.a2ce	85 06		sta $06				sta 	zTemp1
.a2d0	a5 01		lda $01				lda 	codePtr+1
.a2d2	69 00		adc #$00			adc 	#0
.a2d4	85 07		sta $07				sta 	zTemp1+1
.a2d6	5a		phy				phy 								; save Y
.a2d7	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a2d9	48		pha				pha
.a2da	a0 01		ldy #$01			ldy 	#1
.a2dc	b1 04		lda ($04),y			lda 	(zTemp0),y
.a2de	85 05		sta $05				sta 	zTemp0+1
.a2e0	68		pla				pla
.a2e1	85 04		sta $04				sta 	zTemp0
.a2e3	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a2e5	f0 2c		beq $a313			beq 	_ISFail
.a2e7	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a2e9	b1 04		lda ($04),y			lda 	(zTemp0),y
.a2eb	85 08		sta $08				sta 	zTemp2
.a2ed	c8		iny				iny
.a2ee	b1 04		lda ($04),y			lda 	(zTemp0),y
.a2f0	85 09		sta $09				sta 	zTemp2+1
.a2f2	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a2f4					_ISCompare:
.a2f4	b1 06		lda ($06),y			lda 	(zTemp1),y
.a2f6	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a2f8	d0 dd		bne $a2d7			bne		_ISLoop 					; different ?
.a2fa	c8		iny				iny
.a2fb	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a2fd	90 f5		bcc $a2f4			bcc 	_ISCompare
.a2ff	18		clc				clc 								; set up the data pointer
.a300	a5 04		lda $04				lda 	zTemp0
.a302	69 02		adc #$02			adc 	#2
.a304	85 0e		sta $0e				sta 	idDataAddr
.a306	a5 05		lda $05				lda 	zTemp0+1
.a308	69 00		adc #$00			adc		#0
.a30a	85 0f		sta $0f				sta 	idDataAddr+1
.a30c	a0 09		ldy #$09			ldy 	#9 							; get the type
.a30e	b1 04		lda ($04),y			lda 	(zTemp0),y
.a310	7a		ply				ply
.a311	38		sec				sec
.a312	60		rts				rts
.a313					_ISFail:
.a313	7a		ply				ply
.a314	18		clc				clc
.a315	60		rts				rts
.a316					IdentifierCreate:
.a316	5a		phy				phy 								; save Y
.a317	48		pha				pha 								; save type on stack
.a318	20 7b a3	jsr $a37b			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a31b	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a31e	85 06		sta $06				sta 	zTemp1
.a320	ad 89 10	lda $1089			lda 	VarMemory+1
.a323	85 07		sta $07				sta 	zTemp1+1
.a325	5a		phy				phy 								; save Y (code offset)
.a326	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a328	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a32a	91 06		sta ($06),y			sta 	(zTemp1),y
.a32c	c8		iny				iny
.a32d	b1 04		lda ($04),y			lda 	(zTemp0),y
.a32f	91 06		sta ($06),y			sta 	(zTemp1),y
.a331	c8		iny				iny
.a332					_IDCErase:
.a332	a9 00		lda #$00			lda 	#0
.a334	91 06		sta ($06),y			sta 	(zTemp1),y
.a336	c8		iny				iny
.a337	c0 06		cpy #$06			cpy 	#6
.a339	d0 f7		bne $a332			bne 	_IDCErase
.a33b	68		pla				pla 								; original Y
.a33c	18		clc				clc
.a33d	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a33f	91 06		sta ($06),y			sta 	(zTemp1),y
.a341	c8		iny				iny
.a342	a5 01		lda $01				lda 	codePtr+1
.a344	69 00		adc #$00			adc 	#0
.a346	91 06		sta ($06),y			sta 	(zTemp1),y
.a348	c8		iny				iny
.a349	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a34b	91 06		sta ($06),y			sta 	(zTemp1),y
.a34d	68		pla				pla 								; restore type
.a34e	c8		iny				iny
.a34f	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a351	c8		iny				iny
.a352	98		tya				tya									; add offset to VarMemory
.a353	18		clc				clc
.a354	6d 88 10	adc $1088			adc 	VarMemory
.a357	8d 88 10	sta $1088			sta 	VarMemory
.a35a	ad 89 10	lda $1089			lda 	VarMemory+1
.a35d	69 00		adc #$00			adc 	#0
.a35f	8d 89 10	sta $1089			sta 	VarMemory+1
.a362	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a364	92 04		sta ($04)			sta 	(zTemp0)
.a366	a0 01		ldy #$01			ldy 	#1
.a368	a5 07		lda $07				lda 	zTemp1+1
.a36a	91 04		sta ($04),y			sta 	(zTemp0),y
.a36c	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a36e	18		clc				clc
.a36f	69 02		adc #$02			adc 	#2
.a371	85 0e		sta $0e				sta 	idDataAddr
.a373	a5 07		lda $07				lda 	zTemp1+1
.a375	69 00		adc #$00			adc 	#0
.a377	85 0f		sta $0f				sta 	idDataAddr+1
.a379	7a		ply				ply 								; restore Y and exit
.a37a	60		rts				rts
.a37b					IdentifierSetUpHashPtr:
.a37b	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a37d	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a37f	0a		asl a				asl 	a 							; convert to an offset, clc
.a380	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a382	85 04		sta $04				sta 	zTemp0
.a384	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a386	85 05		sta $05				sta 	zTemp0+1
.a388	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a389					ResetCodePointer:
.a389	48		pha				pha
.a38a	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a38c	85 01		sta $01				sta 	codePtr+1
.a38e	64 00		stz $00				stz 	codePtr
.a390	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a392	68		pla				pla
.a393	60		rts				rts
.a394					ResetForRun:
.a394	48		pha				pha
.a395	5a		phy				phy
.a396	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a398					_RRErase:
.a398	9e 68 10	stz $1068,x			stz		HashTable,x
.a39b	e8		inx				inx
.a39c	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a39e	d0 f8		bne $a398			bne 	_RRErase
.a3a0	20 89 a3	jsr $a389			jsr 	ResetCodePointer 			; code Pointer to start of program
.a3a3					_RRFindEnd:
.a3a3	b2 00		lda ($00)			lda 	(codePtr)					; at end ?
.a3a5	f0 0b		beq $a3b2			beq 	_RRFoundEnd
.a3a7	18		clc				clc 								; no, add offset to pointer.
.a3a8	65 00		adc $00				adc 	codePtr
.a3aa	85 00		sta $00				sta 	codePtr
.a3ac	90 f5		bcc $a3a3			bcc 	_RRFindEnd
.a3ae	e6 01		inc $01				inc 	codePtr+1
.a3b0	80 f1		bra $a3a3			bra 	_RRFindEnd
.a3b2					_RRFoundEnd:
.a3b2	18		clc				clc 								; add 1 to this, as it points to the last
.a3b3	a5 00		lda $00				lda 	codePtr 					; offset, and store in Variable Memory pointer
.a3b5	69 01		adc #$01			adc 	#1
.a3b7	8d 88 10	sta $1088			sta 	VarMemory
.a3ba	a5 01		lda $01				lda 	codePtr+1
.a3bc	69 00		adc #$00			adc 	#0
.a3be	8d 89 10	sta $1089			sta 	VarMemory+1
.a3c1	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a3c3	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a3c6	9c 8a 10	stz $108a			stz 	AllocMemory
.a3c9	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a3cb	85 02		sta $02				sta 	StructSP
.a3cd	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a3cf	85 03		sta $03				sta 	StructSP+1
.a3d1	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a3d3	92 02		sta ($02)			sta 	(StructSP)
.a3d5	20 dd a3	jsr $a3dd			jsr 	ProcedureScan
.a3d8	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a3da	7a		ply				ply
.a3db	68		pla				pla
.a3dc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a3dd					ProcedureScan:
.a3dd	20 89 a3	jsr $a389			jsr 	ResetCodePointer 			; reset the code pointer.
.a3e0	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a3e2	f0 3c		beq $a420			beq 	_PSExit
.a3e4	a0 03		ldy #$03			ldy 	#3 							; start of line
.a3e6					_PSSkipSpace:
.a3e6	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a3e8	c8		iny				iny
.a3e9	c9 10		cmp #$10			cmp 	#KWD_SPACE
.a3eb	f0 f9		beq $a3e6			beq 	_PSSkipSpace
.a3ed	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a3ef	d0 22		bne $a413			bne 	_PSNext
.a3f1					_PSSkipSpace2:
.a3f1	c8		iny				iny 								; skip over def first, any following spaces
.a3f2	b1 00		lda ($00),y			lda 	(codePtr),y
.a3f4	c9 10		cmp #$10			cmp 	#KWD_SPACE
.a3f6	f0 f9		beq $a3f1			beq 	_PSSkipSpace2
.a3f8	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a3fa	20 16 a3	jsr $a316			jsr 	IdentifierCreate
.a3fd					_PSSkipIdentifier:
.a3fd	b1 00		lda ($00),y			lda 	(codePtr),y
.a3ff	c8		iny				iny
.a400	c9 c0		cmp #$c0			cmp 	#$C0
.a402	b0 f9		bcs $a3fd			bcs 	_PSSkipIdentifier
.a404	88		dey				dey 								; undo last, points at first non ID
.a405	98		tya				tya  								; save the address in the data slot.
.a406	18		clc				clc 								; changing Y doesn't matter.
.a407	65 00		adc $00				adc 	codePtr
.a409	92 0e		sta ($0e)			sta 	(idDataAddr)
.a40b	a5 01		lda $01				lda 	codePtr+1
.a40d	69 00		adc #$00			adc 	#0
.a40f	a0 01		ldy #$01			ldy 	#1
.a411	91 0e		sta ($0e),y			sta 	(idDataAddr),y
.a413					_PSNext:
.a413	18		clc				clc 								; go to next
.a414	b2 00		lda ($00)			lda 	(codePtr)
.a416	65 00		adc $00				adc 	codePtr
.a418	85 00		sta $00				sta 	codeptr
.a41a	90 c4		bcc $a3e0			bcc 	_PSMain
.a41c	e6 01		inc $01				inc 	codePtr+1
.a41e	80 c0		bra $a3e0			bra 	_PSMain
.a420					_PSExit:
.a420	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/indexing.asm

.a421					IndexCheck:
.a421	b1 00		lda ($00),y			lda 	(codePtr),y 				; check next character
.a423	c9 47		cmp #$47			cmp 	#KWD_LSQPARENRSQPAREN 		; left/right square bracket ?
.a425	f0 12		beq $a439			beq 	_ICArrayAccess
.a427	29 c0		and #$c0			and 	#$C0 						; constant (e.g. 10xx xxxx)
.a429	c9 80		cmp #$80			cmp 	#$80
.a42b	b0 01		bcs $a42e			bcs 	_ICSubscript
.a42d					_ICExit:
.a42d	60		rts				rts
.a42e					_ICSubscript:
.a42e	b1 00		lda ($00),y			lda 	(codePtr),y
.a430	c8		iny				iny 								; skip over subscript
.a431	29 3f		and #$3f			and 	#$3F 						; lower 6 bits only.
.a433	85 06		sta $06				sta 	zTemp1 						; save in zTemp1
.a435	64 07		stz $07				stz 	zTemp1+1
.a437	80 0c		bra $a445			bra 	_ICAddSubscript 			; double and add to value.
.a439					_ICArrayAccess:
.a439	c8		iny				iny 								; point to next
.a43a	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.a43d	85 07		sta $07				sta 	zTemp1+1 					; no point in the rest !
.a43f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a442	85 06		sta $06				sta 	zTemp1
.a444	ca		dex				dex
.a445					_ICAddSubscript:
.a445	06 06		asl $06				asl 	zTemp1 						; subscript x 4
.a447	26 07		rol $07				rol 	zTemp1+1
.a449	06 06		asl $06				asl 	zTemp1
.a44b	26 07		rol $07				rol 	zTemp1+1
.a44d	5a		phy				phy
.a44e	b2 0e		lda ($0e)			lda 	(idDataAddr)				; check indirecting through 0
.a450	a0 01		ldy #$01			ldy 	#1
.a452	11 0e		ora ($0e),y			ora 	(idDataAddr),y 				; probably means uninitialised
.a454	c8		iny				iny
.a455	11 0e		ora ($0e),y			ora 	(idDataAddr),y
.a457	c8		iny				iny
.a458	11 0e		ora ($0e),y			ora 	(idDataAddr),y
.a45a	f0 17		beq $a473			beq 	_ICZero
.a45c	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.a45d	b2 0e		lda ($0e)			lda 	(idDataAddr)
.a45f	65 06		adc $06				adc 	zTemp1
.a461	48		pha				pha
.a462	a0 01		ldy #$01			ldy 	#1
.a464	b1 0e		lda ($0e),y			lda 	(idDataAddr),y
.a466	65 07		adc $07				adc 	zTemp1+1
.a468	85 0f		sta $0f				sta 	idDataAddr+1 				; write it out
.a46a	68		pla				pla
.a46b	85 0e		sta $0e				sta 	idDataAddr
.a46d	64 10		stz $10				stz 	idDataAddr+2 				; extend to 32 bits
.a46f	64 11		stz $11				stz 	idDataAddr+3
.a471	7a		ply				ply
.a472	60		rts				rts
.a473					_ICZero:
.a473	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>a476	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>a47e	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a48a					SyntaxError:
.a48a	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>a48d	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a495	52 52 4f 52 00
.a49a					ErrorHandler:
.a49a	68		pla				pla 								; pop message address
.a49b	85 04		sta $04				sta 	zTemp0
.a49d	68		pla				pla
.a49e	85 05		sta $05				sta 	zTemp0+1
.a4a0	a9 05		lda #$05			lda 	#CTH_ERROR
.a4a2	20 d2 a1	jsr $a1d2			jsr 	ExternColour
.a4a5	a0 01		ldy #$01			ldy 	#1 							; print it
.a4a7					_ErrorPrint:
.a4a7	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4a9	20 c8 a1	jsr $a1c8			jsr		ExternPrint
.a4ac	c8		iny				iny
.a4ad	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4af	d0 f6		bne $a4a7			bne 	_ErrorPrint
.a4b1	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a4b3	b1 00		lda ($00),y			lda		(codePtr),y
.a4b5	c8		iny				iny
.a4b6	12 00		ora ($00)			ora 	(codePtr)
.a4b8	f0 1c		beq $a4d6			beq 	_ErrorNoLine 				; if so, skip
.a4ba	a9 20		lda #$20			lda 	#32
.a4bc	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a4bf	a9 40		lda #$40			lda 	#'@'
.a4c1	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a4c4	a9 20		lda #$20			lda 	#32
.a4c6	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a4c9	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a4cb	b1 00		lda ($00),y			lda 	(codePtr),y
.a4cd	48		pha				pha
.a4ce	c8		iny				iny
.a4cf	b1 00		lda ($00),y			lda 	(codePtr),y
.a4d1	a8		tay				tay
.a4d2	68		pla				pla
.a4d3	20 e7 a4	jsr $a4e7			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a4d6					_ErrorNoLine:
.a4d6	a9 0d		lda #$0d			lda 	#13							; new line
.a4d8	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a4db	4c de a4	jmp $a4de			jmp 	WarmStart
.a4de					WarmStart:
.a4de	a9 07		lda #$07			lda 	#COL_WHITE
.a4e0	20 d2 a1	jsr $a1d2			jsr 	ExternColour
.a4e3	4c de a4	jmp $a4de			jmp		WarmStart
>a4e6	ff						.byte 	$FF
.a4e7					ErrorPrint16:
.a4e7	da		phx				phx
.a4e8	e8		inx				inx 								; space on stack
.a4e9	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a4ec	98		tya				tya
.a4ed	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a4f0	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a4f3	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a4f6	20 0c a5	jsr $a50c			jsr 	IntegerToString 			; convert to string.
.a4f9	fa		plx				plx
.a4fa					ErrorPrintIntegerBuffer:
.a4fa	da		phx				phx
.a4fb	a2 00		ldx #$00			ldx 	#0
.a4fd					_EP16Loop:
.a4fd	bd 00 0a	lda $0a00,x			lda 	SBuffer,x
.a500	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a503	e8		inx				inx
.a504	bd 00 0a	lda $0a00,x			lda 	SBuffer,x
.a507	d0 f4		bne $a4fd			bne 	_EP16Loop
.a509	8a		txa				txa
.a50a	fa		plx				plx
.a50b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a50c					IntegerToString:
.a50c	48		pha				pha
.a50d	5a		phy				phy
.a50e	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a511	10 08		bpl $a51b			bpl 		_ITSNotMinus
.a513	a9 2d		lda #$2d			lda 		#"-"
.a515	20 ad a5	jsr $a5ad			jsr 		ITSOutputCharacter
.a518	20 52 a7	jsr $a752			jsr 		Unary_Negate
.a51b					_ITSNotMinus:
.a51b	9c 20 0a	stz $0a20			stz 		SBPosition 				; reset string buffer position
.a51e	9c 24 0a	stz $0a24			stz 		NumSuppress 			; clear zero suppression flag
.a521	8a		txa				txa 								; use Y for the integer index.
.a522	a8		tay				tay
.a523	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a525					_ITSNextSubtractor:
.a525	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a527	8d 21 0a	sta $0a21			sta 		NumConvCount
.a52a					_ITSSubtract:
.a52a	38		sec				sec
.a52b	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a52e	fd 89 a5	sbc $a589,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a531	48		pha				pha
.a532	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a535	fd 8a a5	sbc $a58a,x			sbc 		_ITSSubtractors+1,x
.a538	48		pha				pha
.a539	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a53c	fd 8b a5	sbc $a58b,x			sbc 		_ITSSubtractors+2,x
.a53f	48		pha				pha
.a540	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a543	fd 8c a5	sbc $a58c,x			sbc 		_ITSSubtractors+3,x
.a546	90 14		bcc $a55c			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a548	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a54b	68		pla				pla
.a54c	99 00 0e	sta $0e00,y			sta 		stack2,y
.a54f	68		pla				pla
.a550	99 00 0d	sta $0d00,y			sta 		stack1,y
.a553	68		pla				pla
.a554	99 00 0c	sta $0c00,y			sta 		stack0,y
.a557	ee 21 0a	inc $0a21			inc 		NumConvCount 			; bump count.
.a55a	80 ce		bra $a52a			bra 		_ITSSubtract 			; go round again.
.a55c					_ITSCantSubtract:
.a55c	68		pla				pla 								; throw away interim answers
.a55d	68		pla				pla 								; (the subtraction that failed)
.a55e	68		pla				pla
.a55f	ad 21 0a	lda $0a21			lda 		NumConvCount 			; if not zero then no suppression check
.a562	c9 30		cmp #$30			cmp 		#"0"
.a564	d0 05		bne $a56b			bne 		_ITSOutputDigit
.a566	ad 24 0a	lda $0a24			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a569	f0 09		beq $a574			beq	 		_ITSGoNextSubtractor
.a56b					_ITSOutputDigit:
.a56b	ce 24 0a	dec $0a24			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a56e	ad 21 0a	lda $0a21			lda 		NumConvCount 			; count of subtractions
.a571	20 ad a5	jsr $a5ad			jsr 		ITSOutputCharacter 		; output it.
.a574					_ITSGoNextSubtractor:
.a574	e8		inx				inx 								; next dword in subtractor table.
.a575	e8		inx				inx
.a576	e8		inx				inx
.a577	e8		inx				inx
.a578	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a57a	d0 a9		bne $a525			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a57c	98		tya				tya 								; X is back as the mantissa index
.a57d	aa		tax				tax
.a57e	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a581	09 30		ora #$30			ora 		#"0"
.a583	20 ad a5	jsr $a5ad			jsr 		ITSOutputCharacter
.a586	7a		ply				ply 								; and exit
.a587	68		pla				pla
.a588	60		rts				rts
.a589					_ITSSubtractors:
>a589	00 ca 9a 3b					.dword 		1000000000
>a58d	00 e1 f5 05					.dword 		100000000
>a591	80 96 98 00					.dword 		10000000
>a595	40 42 0f 00					.dword 		1000000
>a599	a0 86 01 00					.dword 		100000
>a59d	10 27 00 00					.dword 		10000
>a5a1	e8 03 00 00					.dword 		1000
>a5a5	64 00 00 00					.dword 		100
>a5a9	0a 00 00 00					.dword 		10
.a5ad					_ITSSubtractorsEnd:
.a5ad					ITSOutputCharacter:
.a5ad	48		pha				pha
.a5ae	da		phx				phx
.a5af	ae 20 0a	ldx $0a20			ldx 	SBPosition 					; save digit
.a5b2	9d 00 0a	sta $0a00,x			sta 	SBuffer,x
.a5b5	9e 01 0a	stz $0a01,x			stz 	SBuffer+1,x
.a5b8	ee 20 0a	inc $0a20			inc 	SBPosition					; bump pointer.
.a5bb	fa		plx				plx
.a5bc	68		pla				pla
.a5bd	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/list.asm

.a5be					Cmd_List:
.a5be	20 89 a3	jsr $a389			jsr 	ResetCodePointer 			; back to the beginning
.a5c1	64 08		stz $08				stz 	zTemp2						; clear the lowest-number
.a5c3	64 09		stz $09				stz 	zTemp2+1
.a5c5	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.a5c7	f0 0b		beq $a5d4			beq 	_CLINone
.a5c9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.a5cc	85 08		sta $08				sta 	zTemp2
.a5ce	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a5d1	95 09		sta $09,x			sta 	zTemp2+1,x
.a5d3	ca		dex				dex 								; and pop the tos
.a5d4					_CLINone:
.a5d4	a9 10		lda #$10			lda 	#16 						; list this many lines
.a5d6	85 06		sta $06				sta 	zTemp1
.a5d8					_CLILoop
.a5d8	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a5da	f0 24		beq $a600			beq 	_CLIEnd
.a5dc	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a5de	38		sec				sec
.a5df	b1 00		lda ($00),y			lda 	(codePtr),y
.a5e1	e5 08		sbc $08				sbc 	zTemp2
.a5e3	c8		iny				iny
.a5e4	b1 00		lda ($00),y			lda 	(codePtr),y
.a5e6	e5 09		sbc $09				sbc 	zTemp2+1
.a5e8	90 09		bcc $a5f3			bcc 	_CLISkip
.a5ea	da		phx				phx
.a5eb	20 03 a6	jsr $a603			jsr 	ListCurrent 				; list the line.
.a5ee	fa		plx				plx
.a5ef	c6 06		dec $06				dec 	zTemp1 						; done all lines
.a5f1	f0 0d		beq $a600			beq 	_CLIEnd
.a5f3					_CLISkip:
.a5f3	18		clc				clc
.a5f4	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a5f6	65 00		adc $00				adc 	codePtr
.a5f8	85 00		sta $00				sta 	codePtr
.a5fa	90 dc		bcc $a5d8			bcc 	_CLILoop
.a5fc	e6 01		inc $01				inc 	codePtr+1
.a5fe	80 d8		bra $a5d8			bra 	_CLILoop
.a600					_CLIEnd:
.a600	4c de a4	jmp $a4de			jmp 	WarmStart
.a603					ListCurrent:
.a603	a9 06		lda #$06			lda 	#CTH_NUMBER
.a605	20 d2 a1	jsr $a1d2			jsr 	ExternColour 				; set colour
.a608	a0 01		ldy #$01			ldy 	#1							; print line#
.a60a	b1 00		lda ($00),y			lda 	(codePtr),y
.a60c	48		pha				pha
.a60d	c8		iny				iny
.a60e	b1 00		lda ($00),y			lda 	(codePtr),y
.a610	a8		tay				tay
.a611	68		pla				pla
.a612	20 e7 a4	jsr $a4e7			jsr 	ErrorPrint16
.a615	a8		tay				tay
.a616					_LCPadOut:
.a616	a9 20		lda #$20			lda 	#' '
.a618	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a61b	c8		iny				iny
.a61c	c0 06		cpy #$06			cpy 	#6
.a61e	d0 f6		bne $a616			bne 	_LCPadOut
.a620	a0 03		ldy #$03			ldy 	#3 							; start here
.a622	b1 00		lda ($00),y	_LCLoop:lda 	(codePtr),y 				; get first
.a624	30 38		bmi $a65e			bmi 	_LCIdentConst 				; identifier or constant
.a626	d0 05		bne $a62d			bne 	_LCStringToken
.a628	a9 0d		lda #$0d			lda 	#13
.a62a	4c c8 a1	jmp $a1c8			jmp 	ExternPrint
.a62d					_LCStringToken:
.a62d	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.a62f	90 06		bcc $a637			bcc		_LCString
.a631	20 8c a6	jsr $a68c			jsr 	ListPrintToken
.a634	c8		iny				iny 								; advance pointer
.a635	80 eb		bra $a622			bra 	_LCLoop 					; go round again.
.a637					_LCString:
.a637	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.a638	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.a63a	a2 22		ldx #$22			ldx 	#'"'
.a63c	b0 04		bcs $a642			bcs 	_LCSSkip
.a63e	a9 07		lda #$07			lda 	#CTH_COMMENT
.a640	a2 27		ldx #$27			ldx 	#"'"
.a642					_LCSSkip:
.a642	20 d2 a1	jsr $a1d2			jsr 	ExternColour 				; set colour
.a645	8a		txa				txa
.a646	48		pha				pha 								; save end quote on stack.
.a647	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a64a	c8		iny				iny 								; skip type size
.a64b	c8		iny				iny
.a64c					_LCSPrint:
.a64c	b1 00		lda ($00),y			lda 	(codePtr),y
.a64e	c8		iny				iny
.a64f	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.a651	f0 05		beq $a658			beq 	_LCSExit
.a653	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a656	80 f4		bra $a64c			bra 	_LCSPrint
.a658					_LCSExit:
.a658	68		pla				pla
.a659	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a65c	80 c4		bra $a622			bra 	_LCLoop
.a65e					_LCIdentConst:
.a65e	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.a660	90 18		bcc $a67a			bcc 	_LCConstant
.a662	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.a664	20 d2 a1	jsr $a1d2			jsr 	ExternColour
.a667	b1 00		lda ($00),y			lda 	(codePtr),y 				; read
.a669	c8		iny				iny
.a66a	29 1f		and #$1f			and 	#$1F 						; convert
.a66c	18		clc				clc
.a66d	69 41		adc #$41			adc 	#'A'
.a66f	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.a671	d0 02		bne $a675			bne 	_LCCNotDot
.a673	a9 2e		lda #$2e			lda 	#'.'
.a675					_LCCNotDot:
.a675	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a678	80 a8		bra $a622			bra 	_LCLoop
.a67a					_LCConstant:
.a67a	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.a67c	20 d2 a1	jsr $a1d2			jsr 	ExternColour
.a67f	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.a681	20 67 a2	jsr $a267			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.a684	20 0c a5	jsr $a50c			jsr 	IntegerToString 			; this could corrupt stack if full :)
.a687	20 fa a4	jsr $a4fa			jsr 	ErrorPrintIntegerBuffer
.a68a	80 96		bra $a622			bra 	_LCLoop
.a68c					ListPrintToken:
.a68c	5a		phy				phy
.a68d	48		pha				pha 								; token colour
.a68e	a9 02		lda #$02			lda 	#CTH_TOKEN
.a690	20 d2 a1	jsr $a1d2			jsr 	ExternColour
.a693	fa		plx				plx
.a694	a9 58		lda #$58			lda 	#KeywordText & $FF
.a696	85 04		sta $04				sta 	zTemp0
.a698	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a69a	85 05		sta $05				sta 	zTemp0+1
.a69c					_LPTLoop:
.a69c	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.a69e	f0 0e		beq $a6ae			beq 	_LPTFound
.a6a0	ca		dex				dex
.a6a1	b2 04		lda ($04)			lda 	(zTemp0)
.a6a3	38		sec				sec									; add 1, it's length+name
.a6a4	65 04		adc $04				adc 	zTemp0
.a6a6	85 04		sta $04				sta 	zTemp0
.a6a8	90 f2		bcc $a69c			bcc 	_LPTLoop
.a6aa	e6 05		inc $05				inc 	zTemp0+1
.a6ac	80 ee		bra $a69c			bra 	_LPTLoop
.a6ae					_LPTFound:
.a6ae	a0 01		ldy #$01			ldy 	#1 							; start here.
.a6b0					_LPTShow:
.a6b0	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get character
.a6b2	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.a6b4	90 06		bcc $a6bc			bcc 	_LPTExit
.a6b6	c8		iny				iny
.a6b7	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.a6ba	80 f4		bra $a6b0			bra 	_LPTShow
.a6bc					_LPTExit:
.a6bc	7a		ply				ply
.a6bd	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a6be					Stack_Empty:
.a6be	a2 00		ldx #$00			ldx 	#0
.a6c0	60		rts				rts
.a6c1					Stack_Drop:
.a6c1	ca		dex				dex
.a6c2	60		rts				rts
.a6c3					Stack_Dup:
.a6c3	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.a6c6	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a6c9	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a6cc	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a6cf	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a6d2	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a6d5	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a6d8	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a6db	e8		inx				inx 								; bump stack pointer
.a6dc	60		rts				rts
.a6dd					Stack_Nip:
.a6dd	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.a6e0	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a6e3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a6e6	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a6e9	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a6ec	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a6ef	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a6f2	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a6f5	ca		dex				dex 								; drop tos
.a6f6	60		rts				rts
.a6f7					Stack_Over:
.a6f7	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.a6fa	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a6fd	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a700	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a703	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a706	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a709	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a70c	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a70f	e8		inx				inx 							; bump stack pointer
.a710	60		rts				rts
.a711					Stack_Swap:
.a711	5a		phy				phy
.a712	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a715	a8		tay				tay
.a716	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.a719	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a71c	98		tya				tya
.a71d	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a720	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a723	a8		tay				tay
.a724	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a727	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a72a	98		tya				tya
.a72b	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a72e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a731	a8		tay				tay
.a732	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a735	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a738	98		tya				tya
.a739	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a73c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a73f	a8		tay				tay
.a740	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a743	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a746	98		tya				tya
.a747	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a74a	7a		ply				ply
.a74b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.a74c					Unary_Absolute:
.a74c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a74f	30 01		bmi $a752			bmi 	Unary_Negate
.a751	60		rts				rts
.a752					Unary_Negate:
.a752					Unary_Const_Minus:
.a752	38		sec				sec
.a753	a9 00		lda #$00			lda		#0
.a755	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a758	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a75b	a9 00		lda #$00			lda		#0
.a75d	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a760	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a763	a9 00		lda #$00			lda		#0
.a765	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a768	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a76b	a9 00		lda #$00			lda		#0
.a76d	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a770	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a773	60		rts				rts
.a774					Unary_Not:
.a774	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a777	49 ff		eor #$ff			eor 	#$FF
.a779	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a77c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a77f	49 ff		eor #$ff			eor 	#$FF
.a781	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a784	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a787	49 ff		eor #$ff			eor 	#$FF
.a789	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a78c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a78f	49 ff		eor #$ff			eor 	#$FF
.a791	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a794	60		rts				rts
.a795					Unary_Increment:
.a795	fe 00 0c	inc $0c00,x			inc 	stack0,x
.a798	d0 0d		bne $a7a7			bne 	_UIExit
.a79a	fe 00 0d	inc $0d00,x			inc 	stack1,x
.a79d	d0 08		bne $a7a7			bne 	_UIExit
.a79f	fe 00 0e	inc $0e00,x			inc 	stack2,x
.a7a2	d0 03		bne $a7a7			bne 	_UIExit
.a7a4	fe 00 0f	inc $0f00,x			inc 	stack3,x
.a7a7					_UIExit:
.a7a7	60		rts				rts
.a7a8					Unary_Decrement:
.a7a8	38		sec				sec
.a7a9	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a7ac	e9 01		sbc #$01			sbc 	#1
.a7ae	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a7b1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a7b4	e9 00		sbc #$00			sbc 	#0
.a7b6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a7b9	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a7bc	e9 00		sbc #$00			sbc 	#0
.a7be	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a7c1	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a7c4	e9 00		sbc #$00			sbc 	#0
.a7c6	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a7c9	60		rts				rts
.a7ca					Unary_Shl:
.a7ca	1e 00 0c	asl $0c00,x			asl 	stack0,x
.a7cd	3e 00 0d	rol $0d00,x			rol 	stack1,x
.a7d0	3e 00 0e	rol $0e00,x			rol 	stack2,x
.a7d3	3e 00 0f	rol $0f00,x			rol 	stack3,x
.a7d6	60		rts				rts
.a7d7					Unary_Shr:
.a7d7	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.a7da	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a7dd	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a7e0	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a7e3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.a7e4					Mem_Peek:
.a7e4	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a7e7	85 04		sta $04				sta 	zTemp0
.a7e9	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a7ec	85 05		sta $05				sta 	zTemp0+1
.a7ee	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a7f0	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a7f3	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a7f6	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a7f9	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a7fc	60		rts				rts
.a7fd					Mem_WPeek:
.a7fd	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a800	85 04		sta $04				sta 	zTemp0
.a802	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a805	85 05		sta $05				sta 	zTemp0+1
.a807	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a809	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a80c	5a		phy				phy 								; read msb
.a80d	a0 01		ldy #$01			ldy 	#1
.a80f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a811	7a		ply				ply
.a812	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.a815	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a818	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a81b	60		rts				rts
.a81c					Mem_DPeek:
.a81c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a81f	85 04		sta $04				sta 	zTemp0
.a821	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a824	85 05		sta $05				sta 	zTemp0+1
.a826	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a828	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a82b	5a		phy				phy 								; read msb
.a82c	a0 01		ldy #$01			ldy 	#1
.a82e	b1 04		lda ($04),y			lda 	(zTemp0),y
.a830	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.a833	c8		iny				iny
.a834	b1 04		lda ($04),y			lda 	(zTemp0),y
.a836	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a839	c8		iny				iny
.a83a	b1 04		lda ($04),y			lda 	(zTemp0),y
.a83c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a83f	7a		ply				ply
.a840	60		rts				rts
.a841					Mem_Poke:
.a841	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a844	85 04		sta $04				sta 	zTemp0
.a846	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a849	85 05		sta $05				sta 	zTemp0+1
.a84b	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a84e	92 04		sta ($04)			sta 	(zTemp0)
.a850	ca		dex				dex
.a851	ca		dex				dex
.a852	60		rts				rts
.a853					Mem_WPoke:
.a853	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a856	85 04		sta $04				sta 	zTemp0
.a858	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a85b	85 05		sta $05				sta 	zTemp0+1
.a85d	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a860	92 04		sta ($04)			sta 	(zTemp0)
.a862	5a		phy				phy
.a863	a0 01		ldy #$01			ldy 	#1
.a865	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.a868	91 04		sta ($04),y			sta 	(zTemp0),y
.a86a	7a		ply				ply
.a86b	ca		dex				dex
.a86c	ca		dex				dex
.a86d	60		rts				rts
.a86e					Mem_DPoke:
.a86e	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a871	85 04		sta $04				sta 	zTemp0
.a873	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a876	85 05		sta $05				sta 	zTemp0+1
.a878	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.a87b	92 04		sta ($04)			sta 	(zTemp0)
.a87d	5a		phy				phy
.a87e	a0 01		ldy #$01			ldy 	#1
.a880	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a883	91 04		sta ($04),y			sta 	(zTemp0),y
.a885	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a888	c8		iny				iny
.a889	91 04		sta ($04),y			sta 	(zTemp0),y
.a88b	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a88e	c8		iny				iny
.a88f	91 04		sta ($04),y			sta 	(zTemp0),y
.a891	7a		ply				ply
.a892	ca		dex				dex
.a893	ca		dex				dex
.a894	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.a895					Stack_Add:
.a895	ca		dex				dex
.a896					Stack_Add_No_Dex:
.a896	18		clc				clc
.a897	bd 00 0c	lda $0c00,x			lda		stack0,x
.a89a	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.a89d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a8a0	bd 00 0d	lda $0d00,x			lda		stack1,x
.a8a3	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.a8a6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a8a9	bd 00 0e	lda $0e00,x			lda		stack2,x
.a8ac	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.a8af	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8b2	bd 00 0f	lda $0f00,x			lda		stack3,x
.a8b5	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.a8b8	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a8bb	60		rts				rts
.a8bc					Stack_Sub:
.a8bc	ca		dex				dex
.a8bd	38		sec				sec
.a8be	bd 00 0c	lda $0c00,x			lda		stack0,x
.a8c1	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.a8c4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a8c7	bd 00 0d	lda $0d00,x			lda		stack1,x
.a8ca	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.a8cd	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a8d0	bd 00 0e	lda $0e00,x			lda		stack2,x
.a8d3	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.a8d6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8d9	bd 00 0f	lda $0f00,x			lda		stack3,x
.a8dc	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.a8df	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a8e2	60		rts				rts
.a8e3					Stack_And:
.a8e3	ca		dex				dex
.a8e4	bd 00 0c	lda $0c00,x			lda		stack0,x
.a8e7	3d 01 0c	and $0c01,x			and		stack0+1,x
.a8ea	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a8ed	bd 00 0d	lda $0d00,x			lda		stack1,x
.a8f0	3d 01 0d	and $0d01,x			and 	stack1+1,x
.a8f3	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a8f6	bd 00 0e	lda $0e00,x			lda		stack2,x
.a8f9	3d 01 0e	and $0e01,x			and 	stack2+1,x
.a8fc	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8ff	bd 00 0f	lda $0f00,x			lda		stack3,x
.a902	3d 01 0f	and $0f01,x			and 	stack3+1,x
.a905	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a908	60		rts				rts
.a909					Stack_Xor:
.a909	ca		dex				dex
.a90a	bd 00 0c	lda $0c00,x			lda		stack0,x
.a90d	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.a910	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a913	bd 00 0d	lda $0d00,x			lda		stack1,x
.a916	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.a919	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a91c	bd 00 0e	lda $0e00,x			lda		stack2,x
.a91f	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.a922	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a925	bd 00 0f	lda $0f00,x			lda		stack3,x
.a928	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.a92b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a92e	60		rts				rts
.a92f					Stack_Or:
.a92f	ca		dex				dex
.a930	bd 00 0c	lda $0c00,x			lda		stack0,x
.a933	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.a936	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a939	bd 00 0d	lda $0d00,x			lda		stack1,x
.a93c	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.a93f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a942	bd 00 0e	lda $0e00,x			lda		stack2,x
.a945	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.a948	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a94b	bd 00 0f	lda $0f00,x			lda		stack3,x
.a94e	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.a951	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a954	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.a955					MulInteger32:
.a955	ca		dex				dex
.a956	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.a959	85 0a		sta $0a				sta 	zLTemp1
.a95b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a95e	85 0b		sta $0b				sta 	zLTemp1+1
.a960	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a963	85 0c		sta $0c				sta 	zLTemp1+2
.a965	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a968	85 0d		sta $0d				sta 	zLTemp1+3
.a96a	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.a96d	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a970	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a973	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a976					_BFMMultiply:
.a976	a5 0a		lda $0a				lda 	zLTemp1 					; get LSBit of 8-11
.a978	29 01		and #$01			and 	#1
.a97a	f0 03		beq $a97f			beq 	_BFMNoAdd
.a97c	20 96 a8	jsr $a896			jsr 	Stack_Add_No_Dex 			; co-opt this code
.a97f					_BFMNoAdd:
.a97f	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.a982	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.a985	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.a988	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.a98b	46 0d		lsr $0d				lsr 	zLTemp1+3 					; shift +8 right
.a98d	66 0c		ror $0c				ror 	zLTemp1+2
.a98f	66 0b		ror $0b				ror 	zLTemp1+1
.a991	66 0a		ror $0a				ror 	zLTemp1
.a993	a5 0a		lda $0a				lda 	zLTemp1 					; continue if +8 is nonzero
.a995	05 0b		ora $0b				ora 	zLTemp1+1
.a997	05 0c		ora $0c				ora 	zLTemp1+2
.a999	05 0d		ora $0d				ora 	zLTemp1+3
.a99b	d0 d9		bne $a976			bne 	_BFMMultiply
.a99d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.a99e					DivInteger32:
.a99e	ca		dex				dex
.a99f	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.a9a2	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.a9a5	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.a9a8	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.a9ab	d0 14		bne $a9c1			bne 	_BFDOkay
.a9ad	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>a9b0	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>a9b8	20 42 59 20 5a 45 52 4f 00
.a9c1					_BFDOkay:
.a9c1	64 0a		stz $0a				stz 	zLTemp1 					; Q/Dividend/Left in +0
.a9c3	64 0b		stz $0b				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.a9c5	64 0c		stz $0c				stz 	zLTemp1+2
.a9c7	64 0d		stz $0d				stz 	zLTemp1+3
.a9c9	9c 23 0a	stz $0a23			stz 	SignCount 					; Count of signs.
.a9cc	20 27 aa	jsr $aa27			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.a9cf	e8		inx				inx
.a9d0	20 27 aa	jsr $aa27			jsr 	CheckIntegerNegate
.a9d3	ca		dex				dex
.a9d4	5a		phy				phy 								; Y is the counter
.a9d5	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.a9d7					_BFDLoop:
.a9d7	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.a9da	3e 00 0d	rol $0d00,x			rol 	stack1,x
.a9dd	3e 00 0e	rol $0e00,x			rol 	stack2,x
.a9e0	3e 00 0f	rol $0f00,x			rol 	stack3,x
.a9e3	26 0a		rol $0a				rol 	zLTemp1
.a9e5	26 0b		rol $0b				rol 	zLTemp1+1
.a9e7	26 0c		rol $0c				rol 	zLTemp1+2
.a9e9	26 0d		rol $0d				rol 	zLTemp1+3
.a9eb	38		sec				sec
.a9ec	a5 0a		lda $0a				lda 	zLTemp1+0 					; Calculate A-M on stack.
.a9ee	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.a9f1	48		pha				pha
.a9f2	a5 0b		lda $0b				lda 	zLTemp1+1
.a9f4	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.a9f7	48		pha				pha
.a9f8	a5 0c		lda $0c				lda 	zLTemp1+2
.a9fa	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.a9fd	48		pha				pha
.a9fe	a5 0d		lda $0d				lda 	zLTemp1+3
.aa00	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.aa03	90 15		bcc $aa1a			bcc 	_BFDNoAdd
.aa05	85 0d		sta $0d				sta 	zLTemp1+3 					; update A
.aa07	68		pla				pla
.aa08	85 0c		sta $0c				sta 	zLTemp1+2
.aa0a	68		pla				pla
.aa0b	85 0b		sta $0b				sta 	zLTemp1+1
.aa0d	68		pla				pla
.aa0e	85 0a		sta $0a				sta 	zLTemp1+0
.aa10	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.aa13	09 01		ora #$01			ora 	#1
.aa15	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa18	80 03		bra $aa1d			bra 	_BFDNext
.aa1a					_BFDNoAdd:
.aa1a	68		pla				pla 								; Throw away the intermediate calculations
.aa1b	68		pla				pla
.aa1c	68		pla				pla
.aa1d					_BFDNext:
.aa1d	88		dey				dey
.aa1e	d0 b7		bne $a9d7			bne 	_BFDLoop
.aa20	7a		ply				ply 								; restore Y
.aa21	4e 23 0a	lsr $0a23			lsr 	SignCount 					; if sign count odd,
.aa24	b0 07		bcs $aa2d			bcs		IntegerNegateAlways 		; negate the result
.aa26	60		rts				rts
.aa27					CheckIntegerNegate:
.aa27	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.aa2a	30 01		bmi $aa2d			bmi 	IntegerNegateAlways 		; if so negate it
.aa2c	60		rts				rts
.aa2d					IntegerNegateAlways:
.aa2d	ee 23 0a	inc $0a23			inc 	SignCount 					; bump the count of signs
.aa30	4c 52 a7	jmp $a752			jmp 	Unary_Negate
.aa33					ModInteger32:
.aa33	20 9e a9	jsr $a99e			jsr 	DivInteger32
.aa36	a5 0a		lda $0a				lda 	zLTemp1
.aa38	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa3b	a5 0b		lda $0b				lda 	zLTemp1+1
.aa3d	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa40	a5 0c		lda $0c				lda 	zLTemp1+2
.aa42	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa45	a5 0d		lda $0d				lda 	zLTemp1+3
.aa47	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa4a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.aa4b					Comp_Equal:
.aa4b	38		sec				sec
.aa4c	80 01		bra $aa4f			bra 	Comp_CheckEqual
.aa4e					Comp_NotEqual:
.aa4e	18		clc				clc
.aa4f					Comp_CheckEqual:
.aa4f	08		php				php
.aa50	ca		dex				dex
.aa51	bd 00 0c	lda $0c00,x			lda		stack0,x
.aa54	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.aa57	d0 16		bne $aa6f			bne 	_CCENonZero
.aa59	bd 00 0d	lda $0d00,x			lda		stack1,x
.aa5c	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.aa5f	d0 0e		bne $aa6f			bne 	_CCENonZero
.aa61	bd 00 0e	lda $0e00,x			lda		stack2,x
.aa64	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.aa67	d0 06		bne $aa6f			bne 	_CCENonZero
.aa69	bd 00 0f	lda $0f00,x			lda		stack3,x
.aa6c	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.aa6f					_CCENonZero:
.aa6f	f0 02		beq $aa73			beq 	_CCENotSet
.aa71	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.aa73					_CCENotSet:
.aa73					CompCheckFlip:
.aa73	28		plp				plp 								; if carry set, we want $FF if equal
.aa74	90 02		bcc $aa78			bcc 	CompReturn
.aa76	49 ff		eor #$ff			eor 	#$FF
.aa78					CompReturn:
.aa78	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.aa7b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa7e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa81	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa84	60		rts				rts
.aa85					Comp_Less:
.aa85	18		clc				clc
.aa86	80 01		bra $aa89			bra 	Comp_LessCont
.aa88					Comp_GreaterEqual:
.aa88	38		sec				sec
.aa89					Comp_LessCont:
.aa89	08		php				php
.aa8a	ca		dex				dex
.aa8b	38		sec				sec
.aa8c	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.aa8f	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.aa92	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa95	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.aa98	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa9b	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.aa9e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaa1	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.aaa4	50 02		bvc $aaa8			bvc 	_CLNoFlip 					; unsigned -> signed
.aaa6	49 80		eor #$80			eor 	#$80
.aaa8					_CLNoFlip:
.aaa8	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.aaaa	f0 c7		beq $aa73			beq 	CompCheckFlip
.aaac	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.aaae	80 c3		bra $aa73			bra 	CompCheckFlip
.aab0					Comp_LessEqual:
.aab0	38		sec				sec
.aab1	80 01		bra $aab4			bra 	Comp_LessEqualCont
.aab3					Comp_Greater:
.aab3	18		clc				clc
.aab4					Comp_LessEqualCont:
.aab4	08		php				php
.aab5	ca		dex				dex
.aab6	38		sec				sec
.aab7	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.aaba	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aabd	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.aac0	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aac3	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.aac6	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aac9	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.aacc	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aacf	50 02		bvc $aad3			bvc 	_CLENoFlip 					; unsigned -> signed
.aad1	49 80		eor #$80			eor 	#$80
.aad3					_CLENoFlip:
.aad3	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.aad5	f0 9c		beq $aa73			beq 	CompCheckFlip
.aad7	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.aad9	80 98		bra $aa73			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.aadb					System_RUN:
.aadb	20 94 a3	jsr $a394			jsr		ResetForRun 				; clear vars, stacks etc.
.aade	20 89 a3	jsr $a389			jsr 	ResetCodePointer 			; point to first thing to do.
.aae1	4c fc a1	jmp $a1fc			jmp 	Execute						; and run
.aae4					System_END:
>aae4	ff						.byte 	$FF
.aae5	4c de a4	jmp $a4de			jmp 	WarmStart
.aae8					System_STOP:
.aae8	4c ff ff	jmp $ffff			jmp 	$FFFF
.aaeb	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>aaee	53 54 4f 50 00					.text 	"STOP",0
.aaf3					System_Assert:
.aaf3	ca		dex				dex
.aaf4	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.aaf7	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aafa	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.aafd	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.ab00	d0 0a		bne $ab0c			bne 	_SAOkay
.ab02	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>ab05	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ab0c	60		rts		_SAOkay:rts
.ab0d					System_New:
.ab0d	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.ab10	20 94 a3	jsr $a394			jsr		ResetForRun 				; clear vars, stacks etc.
.ab13	60		rts				rts
.ab14					System_Old:
.ab14	20 89 a3	jsr $a389			jsr 	ResetCodePointer 			; start of first line.
.ab17					_SOFindZero:
.ab17	b1 00		lda ($00),y			lda 	(codePtr),y 				; look for trailing $00
.ab19	f0 15		beq $ab30			beq 	_SOFoundEnd
.ab1b	c8		iny				iny
.ab1c	d0 f9		bne $ab17			bne 	_SOFindZero
.ab1e	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>ab21	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>ab29	45 43 4f 56 45 52 00
.ab30					_SOFoundEnd:
.ab30	c8		iny				iny 								; update the offset
.ab31	8c 00 11	sty $1100			sty 	ProgramStart
.ab34	20 94 a3	jsr $a394			jsr 	ResetForRun 				; redo all stacks etc.
.ab37	60		rts				rts
.ab38					System_Sys:
.ab38	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.ab3b	85 04		sta $04				sta 	zTemp0
.ab3d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab40	85 05		sta $05				sta 	zTemp0+1
.ab42	ca		dex				dex
.ab43	da		phx				phx
.ab44	5a		phy				phy
.ab45	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.ab48	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.ab4b	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.ab4e	20 5d ab	jsr $ab5d			jsr 	_SSCall 					; effectively jsr (zTemp)
.ab51	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.ab54	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.ab57	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.ab5a	7a		ply				ply
.ab5b	fa		plx				plx
.ab5c	60		rts				rts
.ab5d	6c 04 00	jmp ($0004)	_SSCall:jmp 	(zTemp0)
.ab60					System_Stack:
.ab60	da		phx				phx 								; save stack
.ab61	5a		phy				phy
.ab62	86 08		stx $08				stx 	zTemp2 						; save old TOS
.ab64	a9 5b		lda #$5b			lda 	#"["
.ab66	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.ab69	e0 00		cpx #$00			cpx 	#0 							; empty
.ab6b	f0 14		beq $ab81			beq 	_SSEnd
.ab6d	a2 01		ldx #$01			ldx 	#1 							; start here
.ab6f					_SSLoop:
.ab6f	20 0c a5	jsr $a50c			jsr 	IntegerToString 			; print TOS
.ab72	20 fa a4	jsr $a4fa			jsr 	ErrorPrintIntegerBuffer
.ab75	e4 08		cpx $08				cpx 	zTemp2 						; done TOS exit
.ab77	f0 08		beq $ab81			beq 	_SSEnd
.ab79	e8		inx				inx	 								; advance pointer print ,
.ab7a	a9 2c		lda #$2c			lda 	#','
.ab7c	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.ab7f	80 ee		bra $ab6f			bra 	_SSLoop
.ab81					_SSEnd:
.ab81	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.ab83	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.ab86	a9 0d		lda #$0d			lda 	#13
.ab88	20 c8 a1	jsr $a1c8			jsr 	ExternPrint
.ab8b	7a		ply				ply
.ab8c	fa		plx				plx
.ab8d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.ab8e					Identifier:
.ab8e	88		dey				dey 								; wind back to identifier start
.ab8f	20 af a2	jsr $a2af			jsr 	IdentifierSearch 			; try to find it.
.ab92	90 2d		bcc $abc1			bcc 	_IDUnknown 					; not known, give up.
.ab94	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ab96	d0 3d		bne $abd5			bne 	IDTypeError
.ab98	c8		iny		_IDSkip:iny
.ab99	b1 00		lda ($00),y			lda 	(codePtr),y
.ab9b	c9 c0		cmp #$c0			cmp 	#$C0
.ab9d	b0 f9		bcs $ab98			bcs 	_IDSkip
.ab9f	20 21 a4	jsr $a421			jsr 	IndexCheck 					; check index/subscript
.aba2	5a		phy				phy
.aba3	e8		inx				inx 								; make space on stack
.aba4	a0 00		ldy #$00			ldy 	#0 							; copy it back
.aba6	b1 0e		lda ($0e),y			lda 	(idDataAddr),y
.aba8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abab	c8		iny				iny
.abac	b1 0e		lda ($0e),y			lda 	(idDataAddr),y
.abae	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abb1	c8		iny				iny
.abb2	b1 0e		lda ($0e),y			lda 	(idDataAddr),y
.abb4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abb7	c8		iny				iny
.abb8	b1 0e		lda ($0e),y			lda 	(idDataAddr),y
.abba	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abbd	7a		ply				ply
.abbe	4c fc a1	jmp $a1fc			jmp 	Execute
.abc1					_IDUnknown:
.abc1	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>abc4	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>abcc	56 41 52 49 41 42 4c 45 00
.abd5					IDTypeError:
.abd5	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>abd8	4d 49 53 53 49 4e 47 20				.text 	"MISSING VARIABLE",0
>abe0	56 41 52 49 41 42 4c 45 00
.abe9					WriteVariable:
.abe9	b1 00		lda ($00),y			lda 	(codePtr),y 				; check variable
.abeb	c9 c0		cmp #$c0			cmp 	#$C0
.abed	90 e6		bcc $abd5			bcc 	IDTypeError
.abef	20 af a2	jsr $a2af			jsr 	IdentifierSearch 			; does it exist
.abf2	90 06		bcc $abfa			bcc 	_WVNoIdentifier
.abf4	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.abf6	f0 12		beq $ac0a			beq 	_WVWriteTOS 				; if so write TOS to it.
.abf8	80 db		bra $abd5			bra 	IDTypeError 				; not, then can't do anything.
.abfa					_WVNoIdentifier:
.abfa	5a		phy				phy 								; get current line number
.abfb	a0 01		ldy #$01			ldy 	#1
.abfd	b1 00		lda ($00),y			lda 	(codePtr),y
.abff	c8		iny				iny
.ac00	11 00		ora ($00),y			ora 	(codePtr),y
.ac02	7a		ply				ply
.ac03	f0 2d		beq $ac32			beq 	_WVCantCreate 				; if zero (command line) no new vars
.ac05	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.ac07	20 16 a3	jsr $a316			jsr 	IdentifierCreate 			; try to find it
.ac0a					_WVWriteTOS:
.ac0a	88		dey				dey 								; skip over identifier.
.ac0b					_WVSkipIdentifier:
.ac0b	c8		iny				iny
.ac0c	b1 00		lda ($00),y			lda 	(codePtr),y
.ac0e	c9 c0		cmp #$c0			cmp 	#$C0
.ac10	b0 f9		bcs $ac0b			bcs 	_WVSkipIdentifier
.ac12	20 21 a4	jsr $a421			jsr 	IndexCheck 					; check index/subscript
.ac15	5a		phy				phy									; copy TOS in
.ac16	a0 00		ldy #$00			ldy 	#0
.ac18	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ac1b	91 0e		sta ($0e),y			sta 	(idDataAddr),y
.ac1d	c8		iny				iny
.ac1e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ac21	91 0e		sta ($0e),y			sta 	(idDataAddr),y
.ac23	c8		iny				iny
.ac24	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ac27	91 0e		sta ($0e),y			sta 	(idDataAddr),y
.ac29	c8		iny				iny
.ac2a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ac2d	91 0e		sta ($0e),y			sta 	(idDataAddr),y
.ac2f	7a		ply				ply
.ac30	ca		dex				dex 								; drop
.ac31	60		rts				rts									; go back and execute again.
.ac32					_WVCantCreate:
.ac32	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>ac35	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>ac3d	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/inttostr.asm


;******  Return to file: main.asm


;******  Processing file: miscellany/intfromstr.asm


;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.ac4c					Command_For:
.ac4c	20 14 ad	jsr $ad14			jsr 	StructPushCurrent 			; push current on the stack.
.ac4f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.ac52	1d 00 0d	ora $0d00,x			ora 	stack1,x
.ac55	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ac58	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ac5b	f0 34		beq $ac91			beq 	_CFZero
.ac5d	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.ac60	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.ac62	c6 02		dec $02				dec 	StructSP
.ac64	92 02		sta ($02)			sta 	(StructSP)
.ac66	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ac69	49 ff		eor #$ff			eor 	#$FF
.ac6b	c6 02		dec $02				dec 	StructSP
.ac6d	92 02		sta ($02)			sta 	(StructSP)
.ac6f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ac72	49 ff		eor #$ff			eor 	#$FF
.ac74	c6 02		dec $02				dec 	StructSP
.ac76	92 02		sta ($02)			sta 	(StructSP)
.ac78	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ac7b	49 ff		eor #$ff			eor 	#$FF
.ac7d	c6 02		dec $02				dec 	StructSP
.ac7f	92 02		sta ($02)			sta 	(StructSP)
.ac81	ca		dex				dex 								; pop stack value
.ac82	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.ac84	c6 02		dec $02				dec 	StructSP
.ac86	92 02		sta ($02)			sta 	(StructSP)
.ac88	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.ac8a	85 10		sta $10				sta 	ForAddr
.ac8c	a5 03		lda $03				lda 	StructSP+1
.ac8e	85 11		sta $11				sta 	ForAddr+1
.ac90	60		rts				rts
.ac91					_CFZero:
.ac91	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>ac94	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>ac9c	54 20 5a 45 52 4f 00
.aca3					Command_Next:
.aca3	b2 02		lda ($02)			lda 	(StructSP)					; check it's FOR.
.aca5	c9 46		cmp #$46			cmp 	#STM_FOR
.aca7	d0 30		bne $acd9			bne 	_CNNoFor
.aca9	5a		phy				phy
.acaa	a0 00		ldy #$00			ldy 	#0
.acac					_CNIncrement:
.acac	c8		iny				iny
.acad	b1 02		lda ($02),y			lda 	(StructSP),y 				; increment the index
.acaf	1a		inc a				inc 	a
.acb0	91 02		sta ($02),y			sta 	(StructSP),y
.acb2	f0 f8		beq $acac			beq		_CNIncrement 				; carry out.
.acb4	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.acb6	b1 02		lda ($02),y			lda 	(StructSP),y 				; on the last time round they
.acb8	c8		iny				iny 								; will all be $FF
.acb9	31 02		and ($02),y			and 	(StructSP),y
.acbb	c8		iny				iny
.acbc	31 02		and ($02),y			and 	(StructSP),y
.acbe	c8		iny				iny
.acbf	31 02		and ($02),y			and 	(StructSP),y
.acc1	7a		ply				ply 								; restore Y
.acc2	1a		inc a				inc 	a 							; so this will be zero last time round
.acc3	d0 06		bne $accb			bne 	_CNLoop 					; loop back if non-zero
.acc5	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.acc7	20 0e ad	jsr $ad0e			jsr 	StructPopCount
.acca	60		rts				rts
.accb					_CNLoop:
.accb	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.accd	85 10		sta $10				sta 	ForAddr
.accf	a5 03		lda $03				lda 	StructSP+1
.acd1	85 11		sta $11				sta 	ForAddr+1
.acd3	a0 05		ldy #$05			ldy 	#5 							; restore the position
.acd5	20 2c ad	jsr $ad2c			jsr 	StructPopCurrent
.acd8	60		rts				rts
.acd9					_CNNoFor:
.acd9	20 9a a4	jsr $a49a			jsr 	ErrorHandler
>acdc	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>ace4	46 4f 52 00
.ace8					Command_Index:
.ace8	5a		phy				phy
.ace9	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.aceb	e8		inx				inx
.acec	38		sec				sec
.aced	a9 fe		lda #$fe			lda 	#$FE
.acef	f1 10		sbc ($10),y			sbc 	(ForAddr),y
.acf1	9d 00 0c	sta $0c00,x			sta 	stack0,x
.acf4	c8		iny				iny
.acf5	a9 ff		lda #$ff			lda 	#$FF
.acf7	f1 10		sbc ($10),y			sbc 	(ForAddr),y
.acf9	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acfc	c8		iny				iny
.acfd	a9 ff		lda #$ff			lda 	#$FF
.acff	f1 10		sbc ($10),y			sbc 	(ForAddr),y
.ad01	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ad04	c8		iny				iny
.ad05	a9 ff		lda #$ff			lda 	#$FF
.ad07	f1 10		sbc ($10),y			sbc 	(ForAddr),y
.ad09	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ad0c	7a		ply				ply
.ad0d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.ad0e					StructPopCount:
.ad0e	18		clc				clc
.ad0f	65 02		adc $02				adc 	StructSP
.ad11	85 02		sta $02				sta 	StructSP
.ad13	60		rts				rts
.ad14					StructPushCurrent:
.ad14	a9 00		lda #$00			lda 	#0							; push bank
.ad16	c6 02		dec $02				dec 	StructSP
.ad18	92 02		sta ($02)			sta 	(StructSP)
.ad1a	98		tya				tya									; y Offset
.ad1b	c6 02		dec $02				dec 	StructSP
.ad1d	92 02		sta ($02)			sta 	(StructSP)
.ad1f	a5 01		lda $01				lda 	codePtr+1 					; codeptr high
.ad21	c6 02		dec $02				dec 	StructSP
.ad23	92 02		sta ($02)			sta 	(StructSP)
.ad25	a5 00		lda $00				lda 	codePtr 					; codeptr low
.ad27	c6 02		dec $02				dec 	StructSP
.ad29	92 02		sta ($02)			sta 	(StructSP)
.ad2b	60		rts				rts
.ad2c					StructPopCurrent:
.ad2c	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr low
.ad2e	85 00		sta $00				sta 	codePtr
.ad30	c8		iny				iny
.ad31	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr high
.ad33	85 01		sta $01				sta 	codePtr+1
.ad35	c8		iny				iny
.ad36	b1 02		lda ($02),y			lda 	(StructSP),y				; y offset
.ad38	a8		tay				tay
.ad39	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	26 64 00 02 07 6c 69 73			.byte $26,$64,$00,$02,$07,$6c,$69,$73,$74,$00,$10,$01,$09,$53,$54,$52,$49,$4e,$47,$00,$10,$02,$0e,$34,$32,$43,$4f,$4d,$4d,$45,$4e,$54,$2a,$2a,$00,$10,$8c,$00,$08,$6e,$00,$84,$ad,$9a,$87,$00,$05,$78,$00,$aa,$00,$0d,$82,$00,$8c,$10,$93,$10,$14,$10,$3f,$10,$33,$00,$05,$8c,$00,$40,$00
>1108	74 00 10 01 09 53 54 52 49 4e 47 00 10 02 0e 34
>1118	32 43 4f 4d 4d 45 4e 54 2a 2a 00 10 8c 00 08 6e
>1128	00 84 ad 9a 87 00 05 78 00 aa 00 0d 82 00 8c 10
>1138	93 10 14 10 3f 10 33 00 05 8c 00 40 00

;******  Return to file: main.asm

>1145	00						.byte 	0

;******  End of listing
