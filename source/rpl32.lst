
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o rpl32.prg -L rpl32.lst main.asm
; Mon Oct  7 09:05:14 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0a00					ExtDataArea = $0A00 						; space where non zp data goes
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					zTemp3: 		.word ?
>000c					zTemp4:			.word ?
>000e					zLTemp1:		.dword ?					; temporary longs
>0012					idDataAddr:		.word ? 					; data address.
>0014					ForAddr:		.byte ? 					; points to current FOR structure
>0a00					SBuffer:		.fill 32 					; string buffer
>0a20					SBPosition:		.byte ? 					; position in String Buffer
>0a21					NumConvCount:	.byte ? 					; used in int to string
>0a22					breakCount:		.byte ? 					; used to stop break firing every execution.
>0a23					SignCount:		.byte ?						; sign count for divide
>0a24					NumSuppress:	.byte ? 					; zero suppression flag
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 b3 a1	jsr $a1b3			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 1d a0	lda $a01d,x			lda 	BootMessage,x
.a00b	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 1d a0	lda $a01d,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	20 a6 a3	jsr $a3a6			jsr 	ResetForRun
.a017	20 9b a3	jsr $a39b			jsr 	ResetCodePointer
.a01a	4c 4e ac	jmp $ac4e			jmp 	System_RUN
.a01d					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a01d	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$44,$45,$56,$20,$44,$41,$54,$45,$3a,$30,$37,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$00
>a025	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a035	2a 2a 2a 2a 0d 0d 42 55 49 4c 44 3a 44 45 56 20
>a045	44 41 54 45 3a 30 37 2d 4f 43 54 2d 32 30 31 39
>a055	0d 0d 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a058					KeywordText:
>a058	01 21					.byte $01,$21                          ; $10 !
>a05a	01 26					.byte $01,$26                          ; $11 &
>a05c	01 2a					.byte $01,$2a                          ; $12 *
>a05e	01 2b					.byte $01,$2b                          ; $13 +
>a060	02 2b 2b				.byte $02,$2b,$2b                      ; $14 ++
>a063	01 2d					.byte $01,$2d                          ; $15 -
>a065	02 2d 2d				.byte $02,$2d,$2d                      ; $16 --
>a068	01 2f					.byte $01,$2f                          ; $17 /
>a06a	01 3b					.byte $01,$3b                          ; $18 ;
>a06c	01 3c					.byte $01,$3c                          ; $19 <
>a06e	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a071	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a074	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a077	01 3d					.byte $01,$3d                          ; $1d =
>a079	01 3e					.byte $01,$3e                          ; $1e >
>a07b	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a07e	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a081	01 40					.byte $01,$40                          ; $21 @
>a083	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a087	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a08d	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a091	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a098	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a09b	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a09e	03 44 45 46				.byte $03,$44,$45,$46                  ; $28 DEF
>a0a2	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $29 DROP
>a0a7	03 44 55 50				.byte $03,$44,$55,$50                  ; $2a DUP
>a0ab	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2b ELSE
>a0b0	05 45 4d 50 54 59			.byte $05,$45,$4d,$50,$54,$59          ; $2c EMPTY
>a0b6	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a0ba	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a0c0	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a0c4	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a0c7	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a0cd	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a0d2	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $33 MOD
>a0d6	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $34 NEGATE
>a0dd	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $35 NEW
>a0e1	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $36 NEXT
>a0e6	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $37 NIP
>a0ea	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $38 NOT
>a0ee	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $39 OLD
>a0f2	02 4f 52				.byte $02,$4f,$52                      ; $3a OR
>a0f5	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3b OVER
>a0fa	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3c REPEAT
>a101	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $3d RUN
>a105	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $3e SHL
>a109	03 53 48 52				.byte $03,$53,$48,$52                  ; $3f SHR
>a10d	05 53 54 41 43 4b			.byte $05,$53,$54,$41,$43,$4b          ; $40 STACK
>a113	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $41 STOP
>a118	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $42 SWAP
>a11d	03 53 59 53				.byte $03,$53,$59,$53                  ; $43 SYS
>a121	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $44 UNTIL
>a127	02 57 21				.byte $02,$57,$21                      ; $45 W!
>a12a	02 57 40				.byte $02,$57,$40                      ; $46 W@
>a12d	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $47 XOR
>a131	02 5b 5d				.byte $02,$5b,$5d                      ; $48 []
>a134	01 5e					.byte $01,$5e                          ; $49 ^
>a136	01 2b					.byte $01,$2b                          ; $4a {+}
>a138	01 2d					.byte $01,$2d                          ; $4b {-}
>a13a	00					.byte $00
.a13b					KeywordVectorTable:
>a13b	aa a9					.word Mem_DPoke                        ; $10 !
>a13d	93 a4					.word SyntaxError                      ; $11 &
>a13f	c8 aa					.word MulInteger32                     ; $12 *
>a141	d1 a9					.word Stack_Add                        ; $13 +
>a143	d1 a8					.word Unary_Increment                  ; $14 ++
>a145	f8 a9					.word Stack_Sub                        ; $15 -
>a147	e4 a8					.word Unary_Decrement                  ; $16 --
>a149	11 ab					.word DivInteger32                     ; $17 /
>a14b	93 a4					.word SyntaxError                      ; $18 ;
>a14d	f8 ab					.word Comp_Less                        ; $19 <
>a14f	06 a9					.word Unary_Shl                        ; $1a <<
>a151	23 ac					.word Comp_LessEqual                   ; $1b <=
>a153	c1 ab					.word Comp_NotEqual                    ; $1c <>
>a155	be ab					.word Comp_Equal                       ; $1d =
>a157	26 ac					.word Comp_Greater                     ; $1e >
>a159	fb ab					.word Comp_GreaterEqual                ; $1f >=
>a15b	13 a9					.word Unary_Shr                        ; $20 >>
>a15d	58 a9					.word Mem_DPeek                        ; $21 @
>a15f	88 a8					.word Unary_Absolute                   ; $22 ABS
>a161	93 a4					.word SyntaxError                      ; $23 ALLOC
>a163	1f aa					.word Stack_And                        ; $24 AND
>a165	66 ac					.word System_Assert                    ; $25 ASSERT
>a167	7d a9					.word Mem_Poke                         ; $26 C!
>a169	20 a9					.word Mem_Peek                         ; $27 C@
>a16b	93 a4					.word SyntaxError                      ; $28 DEF
>a16d	fd a7					.word Stack_Drop                       ; $29 DROP
>a16f	ff a7					.word Stack_Dup                        ; $2a DUP
>a171	93 a4					.word SyntaxError                      ; $2b ELSE
>a173	fa a7					.word Stack_Empty                      ; $2c EMPTY
>a175	57 ac					.word System_END                       ; $2d END
>a177	93 a4					.word SyntaxError                      ; $2e ENDIF
>a179	c0 ad					.word Command_For                      ; $2f FOR
>a17b	93 a4					.word SyntaxError                      ; $30 IF
>a17d	5c ae					.word Command_Index                    ; $31 INDEX
>a17f	0a a6					.word Cmd_List                         ; $32 LIST
>a181	a6 ab					.word ModInteger32                     ; $33 MOD
>a183	8e a8					.word Unary_Negate                     ; $34 NEGATE
>a185	80 ac					.word System_New                       ; $35 NEW
>a187	17 ae					.word Command_Next                     ; $36 NEXT
>a189	19 a8					.word Stack_Nip                        ; $37 NIP
>a18b	b0 a8					.word Unary_Not                        ; $38 NOT
>a18d	87 ac					.word System_Old                       ; $39 OLD
>a18f	6b aa					.word Stack_Or                         ; $3a OR
>a191	33 a8					.word Stack_Over                       ; $3b OVER
>a193	82 ae					.word Command_Repeat                   ; $3c REPEAT
>a195	4e ac					.word System_RUN                       ; $3d RUN
>a197	91 aa					.word Stack_Shl                        ; $3e SHL
>a199	94 aa					.word Stack_Shr                        ; $3f SHR
>a19b	d3 ac					.word System_Stack                     ; $40 STACK
>a19d	5b ac					.word System_STOP                      ; $41 STOP
>a19f	4d a8					.word Stack_Swap                       ; $42 SWAP
>a1a1	ab ac					.word System_Sys                       ; $43 SYS
>a1a3	8c ae					.word Command_Until                    ; $44 UNTIL
>a1a5	8f a9					.word Mem_WPoke                        ; $45 W!
>a1a7	39 a9					.word Mem_WPeek                        ; $46 W@
>a1a9	45 aa					.word Stack_Xor                        ; $47 XOR
>a1ab	93 a4					.word SyntaxError                      ; $48 []
>a1ad	5d ad					.word WriteVariable                    ; $49 ^
>a1af	93 a4					.word SyntaxError                      ; $4a {+}
>a1b1	93 a4					.word SyntaxError                      ; $4b {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_AMPERSAND = $11              ; $11 &
=$12					KWD_ASTERISK = $12               ; $12 *
=$13					KWD_PLUS = $13                   ; $13 +
=$14					KWD_PLUSPLUS = $14               ; $14 ++
=$15					KWD_MINUS = $15                  ; $15 -
=$16					KWD_MINUSMINUS = $16             ; $16 --
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_DEF = $28                    ; $28 DEF
=$29					KWD_DROP = $29                   ; $29 DROP
=$2a					KWD_DUP = $2a                    ; $2a DUP
=$2b					KWD_ELSE = $2b                   ; $2b ELSE
=$2c					KWD_EMPTY = $2c                  ; $2c EMPTY
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_MOD = $33                    ; $33 MOD
=$34					KWD_NEGATE = $34                 ; $34 NEGATE
=$35					KWD_NEW = $35                    ; $35 NEW
=$36					KWD_NEXT = $36                   ; $36 NEXT
=$37					KWD_NIP = $37                    ; $37 NIP
=$38					KWD_NOT = $38                    ; $38 NOT
=$39					KWD_OLD = $39                    ; $39 OLD
=$3a					KWD_OR = $3a                     ; $3a OR
=$3b					KWD_OVER = $3b                   ; $3b OVER
=$3c					KWD_REPEAT = $3c                 ; $3c REPEAT
=$3d					KWD_RUN = $3d                    ; $3d RUN
=$3e					KWD_SHL = $3e                    ; $3e SHL
=$3f					KWD_SHR = $3f                    ; $3f SHR
=$40					KWD_STACK = $40                  ; $40 STACK
=$41					KWD_STOP = $41                   ; $41 STOP
=$42					KWD_SWAP = $42                   ; $42 SWAP
=$43					KWD_SYS = $43                    ; $43 SYS
=$44					KWD_UNTIL = $44                  ; $44 UNTIL
=$45					KWD_WPLING = $45                 ; $45 W!
=$46					KWD_WAT = $46                    ; $46 W@
=$47					KWD_XOR = $47                    ; $47 XOR
=$48					KWD_LSQPARENRSQPAREN = $48       ; $48 []
=$49					KWD_HAT = $49                    ; $49 ^
=$4a					KWD_CONSTANT_PLUS = $4a          ; $4a {+}
=$4b					KWD_CONSTANT_MINUS = $4b         ; $4b {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a1b3					ExternInitialise:
.a1b3	a9 07		lda #$07			lda 	#$07 						; set colour
.a1b5	8d 86 02	sta $0286			sta 	646
.a1b8	a9 0e		lda #$0e			lda 	#14							; lower case
.a1ba	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1bd	a9 93		lda #$93			lda 	#147 						; clear screen
.a1bf	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1c2	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a1c4	4c de a1	jmp $a1de			jmp 	ExternColour
.a1c7					ExternCheckBreak:
.a1c7	da		phx				phx 								; make sure we keep XY
.a1c8	5a		phy				phy
.a1c9	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a1cc	f0 03		beq $a1d1			beq		_ECBExit 					; stopped
.a1ce	7a		ply				ply 								; restore and exit.
.a1cf	fa		plx				plx
.a1d0	60		rts				rts
.a1d1					_ECBExit:
.a1d1	4c e7 a4	jmp $a4e7			jmp 	WarmStart
.a1d4					ExternPrint:
.a1d4	48		pha				pha
.a1d5	da		phx				phx
.a1d6	5a		phy				phy
.a1d7	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a1da	7a		ply				ply
.a1db	fa		plx				plx
.a1dc	68		pla				pla
.a1dd	60		rts				rts
.a1de					ExternColour:
.a1de	48		pha				pha
.a1df	da		phx				phx
.a1e0	aa		tax				tax
.a1e1	bd ea a1	lda $a1ea,x			lda 	_ECTable,x
.a1e4	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a1e7	fa		plx				plx
.a1e8	68		pla				pla
.a1e9	60		rts				rts
.a1ea					_ECTable:
>a1ea	90						.byte 	144
>a1eb	1c						.byte 	28
>a1ec	1e						.byte 	30
>a1ed	9e						.byte 	158
>a1ee	1f						.byte 	31
>a1ef	9c						.byte 	156
>a1f0	9f						.byte 	159
>a1f1	05						.byte 	5

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a1f2					EXNextLine:
.a1f2	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a1f4	f0 0f		beq $a205			beq 	_EXNLWarmStart
.a1f6	18		clc				clc 								; advance code pointer to next line
.a1f7	65 00		adc $00				adc 	codePtr
.a1f9	85 00		sta $00				sta 	codePtr
.a1fb	90 02		bcc $a1ff			bcc 	_EXNLNoBump
.a1fd	e6 01		inc $01				inc 	codePtr+1
.a1ff					_EXNLNoBump:
.a1ff	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a201	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a203	d0 03		bne $a208			bne 	Execute 					; not end of program
.a205					_EXNLWarmStart:
.a205	4c 57 ac	jmp $ac57			jmp 	System_END
.a208					Execute:
.a208	ee 22 0a	inc $0a22			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a20b	d0 03		bne $a210			bne 	_EXNoBreak
.a20d	20 c7 a1	jsr $a1c7			jsr 	ExternCheckBreak
.a210					_EXNoBreak:
.a210	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a212	f0 de		beq $a1f2			beq 	EXNextLine 					; reached end of the line.
.a214	c8		iny				iny 								; advance pointer.
.a215	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a217	90 27		bcc $a240			bcc 	EXStringComment
.a219	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a21b	90 0d		bcc $a22a			bcc 	EXTokenExecute
.a21d	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a21f	90 03		bcc $a224			bcc 	EXPushConstant
.a221	4c 02 ad	jmp $ad02			jmp 	Identifier 					; it's an identifier C0-FF
.a224					EXPushConstant:
.a224	88		dey				dey
.a225	20 6f a2	jsr $a26f			jsr 	ExtractIntegerToTOS 		; extract integer
.a228	80 de		bra $a208			bra 	Execute
.a22a					EXTokenExecute:
.a22a	0a		asl a				asl 	a 							; double token, also clears carry
.a22b	da		phx				phx 								; save X, put token x 2 in X
.a22c	aa		tax				tax
.a22d	bd 1b a1	lda $a11b,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a230	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a232	bd 1c a1	lda $a11c,x			lda 	KeywordVectorTable-$20+1,x
.a235	85 05		sta $05				sta 	zTemp0+1
.a237	fa		plx				plx 								; restore X
.a238	20 3d a2	jsr $a23d			jsr 	_EXTCall 					; call the routine
.a23b	80 cb		bra $a208			bra 	Execute
.a23d					_EXTCall:
.a23d	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a240					EXStringComment:
.a240	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a242	f0 15		beq $a259			beq 	EXStringSkip 				; (comment), so just skip it.
.a244	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a245	98		tya				tya
.a246	38		sec				sec
.a247	65 00		adc $00				adc 	codePtr
.a249	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a24c	a5 01		lda $01				lda 	codePtr+1
.a24e	69 00		adc #$00			adc 	#0
.a250	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a253	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a256	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a259					EXStringSkip:
.a259	98		tya				tya 								; the current position in A
.a25a	18		clc				clc
.a25b	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a25d	a8		tay				tay 			 					; and make that the current position.
.a25e	88		dey				dey 								; back one because of the initial skip
.a25f	80 a7		bra $a208			bra 	Execute
.a261					EXShiftTOSRight:
.a261	4a		lsr a				lsr 	a
.a262	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a265	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a268	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a26b	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a26e	60		rts				rts
.a26f					ExtractIntegerToTOS:
.a26f	b1 00		lda ($00),y			lda 	(codePtr),y
.a271	c8		iny				iny
.a272	e8		inx				inx 								; make stack space
.a273	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a275	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a278	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a27b	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a27e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a281					_EXConstantLoop:
.a281	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a283	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a285	c9 80		cmp #$80			cmp 	#$80
.a287	d0 2d		bne $a2b6			bne		_EXDone 					; no then exit
.a289	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a28c	48		pha				pha
.a28d	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a290	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a293	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a296	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a299	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a29c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a29f	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a2a2	68		pla				pla
.a2a3	20 61 a2	jsr $a261			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a2a6	20 61 a2	jsr $a261			jsr 	EXShiftTOSRight				; which will be x64
.a2a9	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a2ab	c8		iny				iny
.a2ac	29 3f		and #$3f			and 	#$3F
.a2ae	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a2b1	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2b4	80 cb		bra $a281			bra 	_EXConstantLoop
.a2b6	b1 00		lda ($00),y	_EXDone:lda 	(codePtr),y
.a2b8	c8		iny				iny 								; skip over unary constant + -
.a2b9	c9 4b		cmp #$4b			cmp 	#KWD_CONSTANT_MINUS
.a2bb	d0 03		bne $a2c0			bne 	_EXPositive
.a2bd	4c 8e a8	jmp $a88e			jmp 	Unary_Negate
.a2c0					_EXPositive:
.a2c0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a2c1					IdentifierSearch:
.a2c1	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a2c3	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a2c5	90 12		bcc $a2d9			bcc 	_ISSlow
.a2c7	c9 fa		cmp #$fa			cmp 	#$F9+1
.a2c9	b0 0e		bcs $a2d9			bcs 	_ISSlow
.a2cb	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a2cd	0a		asl a				asl 	a
.a2ce	0a		asl a				asl		a
.a2cf	85 12		sta $12				sta 	idDataAddr					; set up addres
.a2d1	a9 10		lda #$10			lda 	#AZVariables >> 8
.a2d3	85 13		sta $13				sta 	idDataAddr+1
.a2d5	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a2d7	38		sec				sec 								; return with CS.
.a2d8	60		rts				rts
.a2d9					_ISSlow:
.a2d9	20 8d a3	jsr $a38d			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a2dc	98		tya				tya 								; set (zTemp1) to point to the
.a2dd	18		clc				clc 	 							; identifier to be searched.
.a2de	65 00		adc $00				adc 	codePtr
.a2e0	85 06		sta $06				sta 	zTemp1
.a2e2	a5 01		lda $01				lda 	codePtr+1
.a2e4	69 00		adc #$00			adc 	#0
.a2e6	85 07		sta $07				sta 	zTemp1+1
.a2e8	5a		phy				phy 								; save Y
.a2e9	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a2eb	48		pha				pha
.a2ec	a0 01		ldy #$01			ldy 	#1
.a2ee	b1 04		lda ($04),y			lda 	(zTemp0),y
.a2f0	85 05		sta $05				sta 	zTemp0+1
.a2f2	68		pla				pla
.a2f3	85 04		sta $04				sta 	zTemp0
.a2f5	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a2f7	f0 2c		beq $a325			beq 	_ISFail
.a2f9	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a2fb	b1 04		lda ($04),y			lda 	(zTemp0),y
.a2fd	85 08		sta $08				sta 	zTemp2
.a2ff	c8		iny				iny
.a300	b1 04		lda ($04),y			lda 	(zTemp0),y
.a302	85 09		sta $09				sta 	zTemp2+1
.a304	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a306					_ISCompare:
.a306	b1 06		lda ($06),y			lda 	(zTemp1),y
.a308	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a30a	d0 dd		bne $a2e9			bne		_ISLoop 					; different ?
.a30c	c8		iny				iny
.a30d	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a30f	90 f5		bcc $a306			bcc 	_ISCompare
.a311	18		clc				clc 								; set up the data pointer
.a312	a5 04		lda $04				lda 	zTemp0
.a314	69 02		adc #$02			adc 	#2
.a316	85 12		sta $12				sta 	idDataAddr
.a318	a5 05		lda $05				lda 	zTemp0+1
.a31a	69 00		adc #$00			adc		#0
.a31c	85 13		sta $13				sta 	idDataAddr+1
.a31e	a0 09		ldy #$09			ldy 	#9 							; get the type
.a320	b1 04		lda ($04),y			lda 	(zTemp0),y
.a322	7a		ply				ply
.a323	38		sec				sec
.a324	60		rts				rts
.a325					_ISFail:
.a325	7a		ply				ply
.a326	18		clc				clc
.a327	60		rts				rts
.a328					IdentifierCreate:
.a328	5a		phy				phy 								; save Y
.a329	48		pha				pha 								; save type on stack
.a32a	20 8d a3	jsr $a38d			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a32d	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a330	85 06		sta $06				sta 	zTemp1
.a332	ad 89 10	lda $1089			lda 	VarMemory+1
.a335	85 07		sta $07				sta 	zTemp1+1
.a337	5a		phy				phy 								; save Y (code offset)
.a338	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a33a	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a33c	91 06		sta ($06),y			sta 	(zTemp1),y
.a33e	c8		iny				iny
.a33f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a341	91 06		sta ($06),y			sta 	(zTemp1),y
.a343	c8		iny				iny
.a344					_IDCErase:
.a344	a9 00		lda #$00			lda 	#0
.a346	91 06		sta ($06),y			sta 	(zTemp1),y
.a348	c8		iny				iny
.a349	c0 06		cpy #$06			cpy 	#6
.a34b	d0 f7		bne $a344			bne 	_IDCErase
.a34d	68		pla				pla 								; original Y
.a34e	18		clc				clc
.a34f	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a351	91 06		sta ($06),y			sta 	(zTemp1),y
.a353	c8		iny				iny
.a354	a5 01		lda $01				lda 	codePtr+1
.a356	69 00		adc #$00			adc 	#0
.a358	91 06		sta ($06),y			sta 	(zTemp1),y
.a35a	c8		iny				iny
.a35b	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a35d	91 06		sta ($06),y			sta 	(zTemp1),y
.a35f	68		pla				pla 								; restore type
.a360	c8		iny				iny
.a361	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a363	c8		iny				iny
.a364	98		tya				tya									; add offset to VarMemory
.a365	18		clc				clc
.a366	6d 88 10	adc $1088			adc 	VarMemory
.a369	8d 88 10	sta $1088			sta 	VarMemory
.a36c	ad 89 10	lda $1089			lda 	VarMemory+1
.a36f	69 00		adc #$00			adc 	#0
.a371	8d 89 10	sta $1089			sta 	VarMemory+1
.a374	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a376	92 04		sta ($04)			sta 	(zTemp0)
.a378	a0 01		ldy #$01			ldy 	#1
.a37a	a5 07		lda $07				lda 	zTemp1+1
.a37c	91 04		sta ($04),y			sta 	(zTemp0),y
.a37e	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a380	18		clc				clc
.a381	69 02		adc #$02			adc 	#2
.a383	85 12		sta $12				sta 	idDataAddr
.a385	a5 07		lda $07				lda 	zTemp1+1
.a387	69 00		adc #$00			adc 	#0
.a389	85 13		sta $13				sta 	idDataAddr+1
.a38b	7a		ply				ply 								; restore Y and exit
.a38c	60		rts				rts
.a38d					IdentifierSetUpHashPtr:
.a38d	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a38f	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a391	0a		asl a				asl 	a 							; convert to an offset, clc
.a392	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a394	85 04		sta $04				sta 	zTemp0
.a396	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a398	85 05		sta $05				sta 	zTemp0+1
.a39a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a39b					ResetCodePointer:
.a39b	48		pha				pha
.a39c	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a39e	85 01		sta $01				sta 	codePtr+1
.a3a0	64 00		stz $00				stz 	codePtr
.a3a2	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a3a4	68		pla				pla
.a3a5	60		rts				rts
.a3a6					ResetForRun:
.a3a6	48		pha				pha
.a3a7	5a		phy				phy
.a3a8	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a3aa					_RRErase:
.a3aa	9e 68 10	stz $1068,x			stz		HashTable,x
.a3ad	e8		inx				inx
.a3ae	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a3b0	d0 f8		bne $a3aa			bne 	_RRErase
.a3b2	20 9b a3	jsr $a39b			jsr 	ResetCodePointer 			; code Pointer to start of program
.a3b5					_RRFindEnd:
.a3b5	b2 00		lda ($00)			lda 	(codePtr)					; at end ?
.a3b7	f0 0b		beq $a3c4			beq 	_RRFoundEnd
.a3b9	18		clc				clc 								; no, add offset to pointer.
.a3ba	65 00		adc $00				adc 	codePtr
.a3bc	85 00		sta $00				sta 	codePtr
.a3be	90 f5		bcc $a3b5			bcc 	_RRFindEnd
.a3c0	e6 01		inc $01				inc 	codePtr+1
.a3c2	80 f1		bra $a3b5			bra 	_RRFindEnd
.a3c4					_RRFoundEnd:
.a3c4	18		clc				clc 								; add 1 to this, as it points to the last
.a3c5	a5 00		lda $00				lda 	codePtr 					; offset, and store in Variable Memory pointer
.a3c7	69 01		adc #$01			adc 	#1
.a3c9	8d 88 10	sta $1088			sta 	VarMemory
.a3cc	a5 01		lda $01				lda 	codePtr+1
.a3ce	69 00		adc #$00			adc 	#0
.a3d0	8d 89 10	sta $1089			sta 	VarMemory+1
.a3d3	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a3d5	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a3d8	9c 8a 10	stz $108a			stz 	AllocMemory
.a3db	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a3dd	85 02		sta $02				sta 	StructSP
.a3df	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a3e1	85 03		sta $03				sta 	StructSP+1
.a3e3	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a3e5	92 02		sta ($02)			sta 	(StructSP)
.a3e7	20 ef a3	jsr $a3ef			jsr 	ProcedureScan
.a3ea	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a3ec	7a		ply				ply
.a3ed	68		pla				pla
.a3ee	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a3ef					ProcedureScan:
.a3ef	20 9b a3	jsr $a39b			jsr 	ResetCodePointer 			; reset the code pointer.
.a3f2	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a3f4	f0 33		beq $a429			beq 	_PSExit
.a3f6	a0 03		ldy #$03			ldy 	#3 							; start of line
.a3f8	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a3fa	c9 28		cmp #$28			cmp 	#KWD_DEF 					; first thing is DEF ?
.a3fc	d0 1e		bne $a41c			bne 	_PSNext
.a3fe	c8		iny				iny 								; skip over def first, any following spaces
.a3ff	b1 00		lda ($00),y			lda 	(codePtr),y
.a401	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a403	20 28 a3	jsr $a328			jsr 	IdentifierCreate
.a406					_PSSkipIdentifier:
.a406	b1 00		lda ($00),y			lda 	(codePtr),y
.a408	c8		iny				iny
.a409	c9 c0		cmp #$c0			cmp 	#$C0
.a40b	b0 f9		bcs $a406			bcs 	_PSSkipIdentifier
.a40d	88		dey				dey 								; undo last, points at first non ID
.a40e	98		tya				tya  								; save the address in the data slot.
.a40f	18		clc				clc 								; changing Y doesn't matter.
.a410	65 00		adc $00				adc 	codePtr
.a412	92 12		sta ($12)			sta 	(idDataAddr)
.a414	a5 01		lda $01				lda 	codePtr+1
.a416	69 00		adc #$00			adc 	#0
.a418	a0 01		ldy #$01			ldy 	#1
.a41a	91 12		sta ($12),y			sta 	(idDataAddr),y
.a41c					_PSNext:
.a41c	18		clc				clc 								; go to next
.a41d	b2 00		lda ($00)			lda 	(codePtr)
.a41f	65 00		adc $00				adc 	codePtr
.a421	85 00		sta $00				sta 	codeptr
.a423	90 cd		bcc $a3f2			bcc 	_PSMain
.a425	e6 01		inc $01				inc 	codePtr+1
.a427	80 c9		bra $a3f2			bra 	_PSMain
.a429					_PSExit:
.a429	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/indexing.asm

.a42a					IndexCheck:
.a42a	b1 00		lda ($00),y			lda 	(codePtr),y 				; check next character
.a42c	c9 48		cmp #$48			cmp 	#KWD_LSQPARENRSQPAREN 		; left/right square bracket ?
.a42e	f0 12		beq $a442			beq 	_ICArrayAccess
.a430	29 c0		and #$c0			and 	#$C0 						; constant (e.g. 10xx xxxx)
.a432	c9 80		cmp #$80			cmp 	#$80
.a434	b0 01		bcs $a437			bcs 	_ICSubscript
.a436					_ICExit:
.a436	60		rts				rts
.a437					_ICSubscript:
.a437	b1 00		lda ($00),y			lda 	(codePtr),y
.a439	c8		iny				iny 								; skip over subscript
.a43a	29 3f		and #$3f			and 	#$3F 						; lower 6 bits only.
.a43c	85 06		sta $06				sta 	zTemp1 						; save in zTemp1
.a43e	64 07		stz $07				stz 	zTemp1+1
.a440	80 0c		bra $a44e			bra 	_ICAddSubscript 			; double and add to value.
.a442					_ICArrayAccess:
.a442	c8		iny				iny 								; point to next
.a443	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.a446	85 07		sta $07				sta 	zTemp1+1 					; no point in the rest !
.a448	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a44b	85 06		sta $06				sta 	zTemp1
.a44d	ca		dex				dex
.a44e					_ICAddSubscript:
.a44e	06 06		asl $06				asl 	zTemp1 						; subscript x 4
.a450	26 07		rol $07				rol 	zTemp1+1
.a452	06 06		asl $06				asl 	zTemp1
.a454	26 07		rol $07				rol 	zTemp1+1
.a456	5a		phy				phy
.a457	b2 12		lda ($12)			lda 	(idDataAddr)				; check indirecting through 0
.a459	a0 01		ldy #$01			ldy 	#1
.a45b	11 12		ora ($12),y			ora 	(idDataAddr),y 				; probably means uninitialised
.a45d	c8		iny				iny
.a45e	11 12		ora ($12),y			ora 	(idDataAddr),y
.a460	c8		iny				iny
.a461	11 12		ora ($12),y			ora 	(idDataAddr),y
.a463	f0 17		beq $a47c			beq 	_ICZero
.a465	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.a466	b2 12		lda ($12)			lda 	(idDataAddr)
.a468	65 06		adc $06				adc 	zTemp1
.a46a	48		pha				pha
.a46b	a0 01		ldy #$01			ldy 	#1
.a46d	b1 12		lda ($12),y			lda 	(idDataAddr),y
.a46f	65 07		adc $07				adc 	zTemp1+1
.a471	85 13		sta $13				sta 	idDataAddr+1 				; write it out
.a473	68		pla				pla
.a474	85 12		sta $12				sta 	idDataAddr
.a476	64 14		stz $14				stz 	idDataAddr+2 				; extend to 32 bits
.a478	64 15		stz $15				stz 	idDataAddr+3
.a47a	7a		ply				ply
.a47b	60		rts				rts
.a47c					_ICZero:
.a47c	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>a47f	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>a487	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a493					SyntaxError:
.a493	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>a496	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a49e	52 52 4f 52 00
.a4a3					ErrorHandler:
.a4a3	68		pla				pla 								; pop message address
.a4a4	85 04		sta $04				sta 	zTemp0
.a4a6	68		pla				pla
.a4a7	85 05		sta $05				sta 	zTemp0+1
.a4a9	a9 05		lda #$05			lda 	#CTH_ERROR
.a4ab	20 de a1	jsr $a1de			jsr 	ExternColour
.a4ae	a0 01		ldy #$01			ldy 	#1 							; print it
.a4b0					_ErrorPrint:
.a4b0	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4b2	20 d4 a1	jsr $a1d4			jsr		ExternPrint
.a4b5	c8		iny				iny
.a4b6	b1 04		lda ($04),y			lda 	(zTemp0),y
.a4b8	d0 f6		bne $a4b0			bne 	_ErrorPrint
.a4ba	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a4bc	b1 00		lda ($00),y			lda		(codePtr),y
.a4be	c8		iny				iny
.a4bf	12 00		ora ($00)			ora 	(codePtr)
.a4c1	f0 1c		beq $a4df			beq 	_ErrorNoLine 				; if so, skip
.a4c3	a9 20		lda #$20			lda 	#32
.a4c5	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a4c8	a9 40		lda #$40			lda 	#'@'
.a4ca	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a4cd	a9 20		lda #$20			lda 	#32
.a4cf	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a4d2	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a4d4	b1 00		lda ($00),y			lda 	(codePtr),y
.a4d6	48		pha				pha
.a4d7	c8		iny				iny
.a4d8	b1 00		lda ($00),y			lda 	(codePtr),y
.a4da	a8		tay				tay
.a4db	68		pla				pla
.a4dc	20 f0 a4	jsr $a4f0			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a4df					_ErrorNoLine:
.a4df	a9 0d		lda #$0d			lda 	#13							; new line
.a4e1	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a4e4	4c e7 a4	jmp $a4e7			jmp 	WarmStart
.a4e7					WarmStart:
.a4e7	a9 07		lda #$07			lda 	#COL_WHITE
.a4e9	20 de a1	jsr $a1de			jsr 	ExternColour
.a4ec	4c e7 a4	jmp $a4e7			jmp		WarmStart
>a4ef	ff						.byte 	$FF
.a4f0					ErrorPrint16:
.a4f0	da		phx				phx
.a4f1	e8		inx				inx 								; space on stack
.a4f2	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a4f5	98		tya				tya
.a4f6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a4f9	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a4fc	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a4ff	20 15 a5	jsr $a515			jsr 	IntegerToString 			; convert to string.
.a502	fa		plx				plx
.a503					ErrorPrintIntegerBuffer:
.a503	da		phx				phx
.a504	a2 00		ldx #$00			ldx 	#0
.a506					_EP16Loop:
.a506	bd 00 0a	lda $0a00,x			lda 	SBuffer,x
.a509	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a50c	e8		inx				inx
.a50d	bd 00 0a	lda $0a00,x			lda 	SBuffer,x
.a510	d0 f4		bne $a506			bne 	_EP16Loop
.a512	8a		txa				txa
.a513	fa		plx				plx
.a514	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a515					IntegerToString:
.a515	48		pha				pha
.a516	5a		phy				phy
.a517	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a51a	10 08		bpl $a524			bpl 		_ITSNotMinus
.a51c	a9 2d		lda #$2d			lda 		#"-"
.a51e	20 b6 a5	jsr $a5b6			jsr 		ITSOutputCharacter
.a521	20 8e a8	jsr $a88e			jsr 		Unary_Negate
.a524					_ITSNotMinus:
.a524	9c 20 0a	stz $0a20			stz 		SBPosition 				; reset string buffer position
.a527	9c 24 0a	stz $0a24			stz 		NumSuppress 			; clear zero suppression flag
.a52a	8a		txa				txa 								; use Y for the integer index.
.a52b	a8		tay				tay
.a52c	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a52e					_ITSNextSubtractor:
.a52e	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a530	8d 21 0a	sta $0a21			sta 		NumConvCount
.a533					_ITSSubtract:
.a533	38		sec				sec
.a534	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a537	fd 92 a5	sbc $a592,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a53a	48		pha				pha
.a53b	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a53e	fd 93 a5	sbc $a593,x			sbc 		_ITSSubtractors+1,x
.a541	48		pha				pha
.a542	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a545	fd 94 a5	sbc $a594,x			sbc 		_ITSSubtractors+2,x
.a548	48		pha				pha
.a549	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a54c	fd 95 a5	sbc $a595,x			sbc 		_ITSSubtractors+3,x
.a54f	90 14		bcc $a565			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a551	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a554	68		pla				pla
.a555	99 00 0e	sta $0e00,y			sta 		stack2,y
.a558	68		pla				pla
.a559	99 00 0d	sta $0d00,y			sta 		stack1,y
.a55c	68		pla				pla
.a55d	99 00 0c	sta $0c00,y			sta 		stack0,y
.a560	ee 21 0a	inc $0a21			inc 		NumConvCount 			; bump count.
.a563	80 ce		bra $a533			bra 		_ITSSubtract 			; go round again.
.a565					_ITSCantSubtract:
.a565	68		pla				pla 								; throw away interim answers
.a566	68		pla				pla 								; (the subtraction that failed)
.a567	68		pla				pla
.a568	ad 21 0a	lda $0a21			lda 		NumConvCount 			; if not zero then no suppression check
.a56b	c9 30		cmp #$30			cmp 		#"0"
.a56d	d0 05		bne $a574			bne 		_ITSOutputDigit
.a56f	ad 24 0a	lda $0a24			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a572	f0 09		beq $a57d			beq	 		_ITSGoNextSubtractor
.a574					_ITSOutputDigit:
.a574	ce 24 0a	dec $0a24			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a577	ad 21 0a	lda $0a21			lda 		NumConvCount 			; count of subtractions
.a57a	20 b6 a5	jsr $a5b6			jsr 		ITSOutputCharacter 		; output it.
.a57d					_ITSGoNextSubtractor:
.a57d	e8		inx				inx 								; next dword in subtractor table.
.a57e	e8		inx				inx
.a57f	e8		inx				inx
.a580	e8		inx				inx
.a581	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a583	d0 a9		bne $a52e			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a585	98		tya				tya 								; X is back as the mantissa index
.a586	aa		tax				tax
.a587	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a58a	09 30		ora #$30			ora 		#"0"
.a58c	20 b6 a5	jsr $a5b6			jsr 		ITSOutputCharacter
.a58f	7a		ply				ply 								; and exit
.a590	68		pla				pla
.a591	60		rts				rts
.a592					_ITSSubtractors:
>a592	00 ca 9a 3b					.dword 		1000000000
>a596	00 e1 f5 05					.dword 		100000000
>a59a	80 96 98 00					.dword 		10000000
>a59e	40 42 0f 00					.dword 		1000000
>a5a2	a0 86 01 00					.dword 		100000
>a5a6	10 27 00 00					.dword 		10000
>a5aa	e8 03 00 00					.dword 		1000
>a5ae	64 00 00 00					.dword 		100
>a5b2	0a 00 00 00					.dword 		10
.a5b6					_ITSSubtractorsEnd:
.a5b6					ITSOutputCharacter:
.a5b6	48		pha				pha
.a5b7	da		phx				phx
.a5b8	ae 20 0a	ldx $0a20			ldx 	SBPosition 					; save digit
.a5bb	9d 00 0a	sta $0a00,x			sta 	SBuffer,x
.a5be	9e 01 0a	stz $0a01,x			stz 	SBuffer+1,x
.a5c1	ee 20 0a	inc $0a20			inc 	SBPosition					; bump pointer.
.a5c4	fa		plx				plx
.a5c5	68		pla				pla
.a5c6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a5c7					IntFromString:
.a5c7	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a5c9	e8		inx				inx 								; space on stack
.a5ca	20 fd a5	jsr $a5fd			jsr 	IFSClearTOS
.a5cd					_IFSLoop:
.a5cd	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get next
.a5cf	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a5d1	90 24		bcc $a5f7			bcc 	_IFSExit
.a5d3	c9 3a		cmp #$3a			cmp 	#"9"+1
.a5d5	b0 20		bcs $a5f7			bcs 	_IFSExit
.a5d7	20 ff a7	jsr $a7ff			jsr 	Stack_Dup 					; duplicate tos
.a5da	20 06 a9	jsr $a906			jsr 	Unary_Shl	 				; x 2
.a5dd	20 06 a9	jsr $a906			jsr 	Unary_Shl 					; x 4
.a5e0	20 d1 a9	jsr $a9d1			jsr 	Stack_Add 					; x 5
.a5e3	20 06 a9	jsr $a906			jsr 	Unary_Shl 					; x 10
.a5e6	e8		inx				inx  								; create space next up
.a5e7	20 fd a5	jsr $a5fd			jsr 	IFSClearTOS
.a5ea	b1 04		lda ($04),y			lda 	(zTemp0),y 					; add digit
.a5ec	29 0f		and #$0f			and 	#15
.a5ee	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a5f1	20 d1 a9	jsr $a9d1			jsr 	Stack_Add 					; add to tos
.a5f4	c8		iny				iny
.a5f5	80 d6		bra $a5cd			bra 	_IFSLoop
.a5f7					_IFSExit:
.a5f7	98		tya				tya
.a5f8	38		sec				sec
.a5f9	f0 01		beq $a5fc			beq 	_IFSSkipFail
.a5fb	18		clc				clc
.a5fc					_IFSSkipFail:
.a5fc	60		rts				rts
.a5fd					IFSClearTOS:
.a5fd	9e 00 0c	stz $0c00,x			stz		stack0,x
.a600	9e 00 0d	stz $0d00,x			stz		stack1,x
.a603	9e 00 0e	stz $0e00,x			stz		stack2,x
.a606	9e 00 0f	stz $0f00,x			stz		stack3,x
.a609	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/list.asm

.a60a					Cmd_List:
.a60a	20 9b a3	jsr $a39b			jsr 	ResetCodePointer 			; back to the beginning
.a60d	64 08		stz $08				stz 	zTemp2						; clear the lowest-number
.a60f	64 09		stz $09				stz 	zTemp2+1
.a611	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.a613	f0 0b		beq $a620			beq 	_CLINone
.a615	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.a618	85 08		sta $08				sta 	zTemp2
.a61a	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a61d	95 09		sta $09,x			sta 	zTemp2+1,x
.a61f	ca		dex				dex 								; and pop the tos
.a620					_CLINone:
.a620	a9 10		lda #$10			lda 	#16 						; list this many lines
.a622	85 06		sta $06				sta 	zTemp1
.a624					_CLILoop
.a624	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a626	f0 24		beq $a64c			beq 	_CLIEnd
.a628	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a62a	38		sec				sec
.a62b	b1 00		lda ($00),y			lda 	(codePtr),y
.a62d	e5 08		sbc $08				sbc 	zTemp2
.a62f	c8		iny				iny
.a630	b1 00		lda ($00),y			lda 	(codePtr),y
.a632	e5 09		sbc $09				sbc 	zTemp2+1
.a634	90 09		bcc $a63f			bcc 	_CLISkip
.a636	da		phx				phx
.a637	20 4f a6	jsr $a64f			jsr 	ListCurrent 				; list the line.
.a63a	fa		plx				plx
.a63b	c6 06		dec $06				dec 	zTemp1 						; done all lines
.a63d	f0 0d		beq $a64c			beq 	_CLIEnd
.a63f					_CLISkip:
.a63f	18		clc				clc
.a640	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a642	65 00		adc $00				adc 	codePtr
.a644	85 00		sta $00				sta 	codePtr
.a646	90 dc		bcc $a624			bcc 	_CLILoop
.a648	e6 01		inc $01				inc 	codePtr+1
.a64a	80 d8		bra $a624			bra 	_CLILoop
.a64c					_CLIEnd:
.a64c	4c e7 a4	jmp $a4e7			jmp 	WarmStart
.a64f					ListCurrent:
.a64f	a9 06		lda #$06			lda 	#CTH_NUMBER
.a651	20 de a1	jsr $a1de			jsr 	ExternColour 				; set colour
.a654	a0 01		ldy #$01			ldy 	#1							; print line#
.a656	b1 00		lda ($00),y			lda 	(codePtr),y
.a658	48		pha				pha
.a659	c8		iny				iny
.a65a	b1 00		lda ($00),y			lda 	(codePtr),y
.a65c	a8		tay				tay
.a65d	68		pla				pla
.a65e	20 f0 a4	jsr $a4f0			jsr 	ErrorPrint16
.a661	a8		tay				tay
.a662					_LCPadOut:
.a662	a9 20		lda #$20			lda 	#' '
.a664	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a667	c8		iny				iny
.a668	c0 05		cpy #$05			cpy 	#5
.a66a	d0 f6		bne $a662			bne 	_LCPadOut
.a66c	a0 03		ldy #$03			ldy 	#3 							; start here
.a66e					_LCLoop:
.a66e	a9 20		lda #$20			lda 	#' '						; space
.a670	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a673	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first
.a675	30 38		bmi $a6af			bmi 	_LCIdentConst 				; identifier or constant
.a677	d0 05		bne $a67e			bne 	_LCStringToken
.a679	a9 0d		lda #$0d			lda 	#13
.a67b	4c d4 a1	jmp $a1d4			jmp 	ExternPrint
.a67e					_LCStringToken:
.a67e	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.a680	90 06		bcc $a688			bcc		_LCString
.a682	20 f0 a6	jsr $a6f0			jsr 	ListPrintToken
.a685	c8		iny				iny 								; advance pointer
.a686	80 e6		bra $a66e			bra 	_LCLoop 					; go round again.
.a688					_LCString:
.a688	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.a689	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.a68b	a2 22		ldx #$22			ldx 	#'"'
.a68d	b0 04		bcs $a693			bcs 	_LCSSkip
.a68f	a9 07		lda #$07			lda 	#CTH_COMMENT
.a691	a2 27		ldx #$27			ldx 	#"'"
.a693					_LCSSkip:
.a693	20 de a1	jsr $a1de			jsr 	ExternColour 				; set colour
.a696	8a		txa				txa
.a697	48		pha				pha 								; save end quote on stack.
.a698	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a69b	c8		iny				iny 								; skip type size
.a69c	c8		iny				iny
.a69d					_LCSPrint:
.a69d	b1 00		lda ($00),y			lda 	(codePtr),y
.a69f	c8		iny				iny
.a6a0	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.a6a2	f0 05		beq $a6a9			beq 	_LCSExit
.a6a4	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a6a7	80 f4		bra $a69d			bra 	_LCSPrint
.a6a9					_LCSExit:
.a6a9	68		pla				pla
.a6aa	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a6ad	80 bf		bra $a66e			bra 	_LCLoop
.a6af					_LCIdentConst:
.a6af	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.a6b1	90 1e		bcc $a6d1			bcc 	_LCConstant
.a6b3	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.a6b5	20 de a1	jsr $a1de			jsr 	ExternColour
.a6b8					_LCCIdLoop:
.a6b8	b1 00		lda ($00),y			lda 	(codePtr),y 				; read
.a6ba	c8		iny				iny
.a6bb	29 1f		and #$1f			and 	#$1F 						; convert
.a6bd	18		clc				clc
.a6be	69 41		adc #$41			adc 	#'A'
.a6c0	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.a6c2	d0 02		bne $a6c6			bne 	_LCCNotDot
.a6c4	a9 2e		lda #$2e			lda 	#'.'
.a6c6					_LCCNotDot:
.a6c6	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a6c9	b1 00		lda ($00),y			lda 	(codePtr),y 				; another
.a6cb	c9 c0		cmp #$c0			cmp 	#$C0
.a6cd	b0 e9		bcs $a6b8			bcs 	_LCCIdLoop
.a6cf	80 9d		bra $a66e			bra 	_LCLoop
.a6d1					_LCConstant:
.a6d1	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.a6d3	20 de a1	jsr $a1de			jsr 	ExternColour
.a6d6	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.a6d8	20 6f a2	jsr $a26f			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.a6db	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.a6de	48		pha				pha
.a6df	20 15 a5	jsr $a515			jsr 	IntegerToString 			; this could corrupt stack if full :)
.a6e2	20 03 a5	jsr $a503			jsr 	ErrorPrintIntegerBuffer
.a6e5	68		pla				pla 								; sign back
.a6e6	10 86		bpl $a66e			bpl 	_LCLoop
.a6e8	a9 2d		lda #$2d			lda 	#"-"
.a6ea	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a6ed	4c 6e a6	jmp $a66e			jmp 	_LCLoop
.a6f0					ListPrintToken:
.a6f0	5a		phy				phy
.a6f1	48		pha				pha 								; token colour
.a6f2	a9 02		lda #$02			lda 	#CTH_TOKEN
.a6f4	20 de a1	jsr $a1de			jsr 	ExternColour
.a6f7	fa		plx				plx
.a6f8	a9 58		lda #$58			lda 	#KeywordText & $FF
.a6fa	85 04		sta $04				sta 	zTemp0
.a6fc	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a6fe	85 05		sta $05				sta 	zTemp0+1
.a700					_LPTLoop:
.a700	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.a702	f0 0e		beq $a712			beq 	_LPTFound
.a704	ca		dex				dex
.a705	b2 04		lda ($04)			lda 	(zTemp0)
.a707	38		sec				sec									; add 1, it's length+name
.a708	65 04		adc $04				adc 	zTemp0
.a70a	85 04		sta $04				sta 	zTemp0
.a70c	90 f2		bcc $a700			bcc 	_LPTLoop
.a70e	e6 05		inc $05				inc 	zTemp0+1
.a710	80 ee		bra $a700			bra 	_LPTLoop
.a712					_LPTFound:
.a712	a0 01		ldy #$01			ldy 	#1 							; start here.
.a714					_LPTShow:
.a714	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get character
.a716	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.a718	90 06		bcc $a720			bcc 	_LPTExit
.a71a	c8		iny				iny
.a71b	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.a71e	80 f4		bra $a714			bra 	_LPTShow
.a720					_LPTExit:
.a720	7a		ply				ply
.a721	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a722	64 06		stz $06		TTest:	stz 	zTemp1
.a724	a9 0b		lda #$0b			lda 	#$0B
.a726	85 07		sta $07				sta		zTemp1+1
.a728	a9 35		lda #$35			lda 	#Test & 255
.a72a	85 00		sta $00				sta 	codePtr
.a72c	a9 a7		lda #$a7			lda 	#Test >> 8
.a72e	85 01		sta $01				sta 	codePtr+1
.a730	20 42 a7	jsr $a742			jsr 	Tokenise
.a733	80 fe		bra $a733	h1:		bra 	h1
>a735	20 35 31 37 20 52 45 50		Test:	.text 	" 517 REPEATX"
>a73d	45 41 54 58
>a741	00						.byte 	0
.a742					Tokenise:
.a742	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a744					_TKSkip:
.a744	c8		iny				iny
.a745					_TKMainLoop:
.a745	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and check end.
.a747	c9 20		cmp #$20			cmp 	#" "
.a749	f0 f9		beq $a744			beq 	_TKSkip
.a74b	d0 03		bne $a750			bne 	_TKNotEnd
.a74d	92 06		sta ($06)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a74f	60		rts				rts
.a750					_TKNotEnd:
.a750	c9 22		cmp #$22			cmp 	#'"'
.a752	f0 04		beq $a758			beq 	_TKIsQuote
.a754	c9 27		cmp #$27			cmp 	#"'"
.a756	d0 03		bne $a75b			bne 	_TKNotQuote
.a758					_TKIsQuote:
>a758	ff						.byte 	$FF
.a759	80 ea		bra $a745			bra 	_TKMainLoop
.a75b					_TKNotQuote:
.a75b	98		tya				tya 								; current pos -> zTemp0
.a75c	18		clc				clc
.a75d	65 00		adc $00				adc 	codePtr
.a75f	85 04		sta $04				sta 	zTemp0
.a761	85 00		sta $00				sta 	codePtr
.a763	a5 01		lda $01				lda 	codePtr+1
.a765	69 00		adc #$00			adc 	#0
.a767	85 05		sta $05				sta 	zTemp0+1
.a769	85 01		sta $01				sta 	codePtr+1
.a76b	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a76d	b1 00		lda ($00),y			lda 	(codePtr),y
.a76f	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a771	90 10		bcc $a783			bcc 	_TKNotNumber
.a773	c9 3a		cmp #$3a			cmp 	#"9"+1
.a775	b0 0c		bcs $a783			bcs 	_TKNotNumber
.a777	e8		inx				inx
.a778	20 c7 a5	jsr $a5c7			jsr 	IntFromString 				; convert to integer
.a77b	48		pha				pha
.a77c	20 d2 a7	jsr $a7d2			jsr 	TokWriteConstant 			; do constant recursively.
.a77f	7a		ply				ply
.a780	ca		dex				dex
.a781	80 c2		bra $a745			bra 	_TKMainLoop 				; loop back.
.a783					_TKNotNumber:
.a783	a9 58		lda #$58			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a785	85 08		sta $08				sta 	zTemp2
.a787	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a789	85 09		sta $09				sta 	zTemp2+1
.a78b	64 0a		stz $0a				stz 	zTemp3 						; clear 'best'
.a78d	a9 10		lda #$10			lda 	#$10
.a78f	85 0b		sta $0b				sta 	zTemp3+1 					; set current token
.a791					_TKSearch:
.a791	a0 00		ldy #$00			ldy 	#0
.a793					_TKCompare:
.a793	b1 00		lda ($00),y			lda 	(codePtr),y 	 			; get char from buffer
.a795	c8		iny				iny
.a796	d1 08		cmp ($08),y			cmp 	(zTemp2),y 					; does it match.
.a798	d0 07		bne $a7a1			bne 	_TKNext
.a79a	98		tya				tya
.a79b	d2 08		cmp ($08)			cmp 	(zTemp2) 					; Y = length
.a79d	d0 f4		bne $a793			bne 	_TKCompare 					; found a match.
.a79f	80 13		bra $a7b4			bra 	_TKFound
.a7a1	b2 08		lda ($08)	_TKNext:lda 	(zTemp2)					; get length
.a7a3	38		sec				sec 								; add length+1 to current
.a7a4	65 08		adc $08				adc 	zTemp2
.a7a6	85 08		sta $08				sta 	zTemp2
.a7a8	90 02		bcc $a7ac			bcc 	_TKNNC
.a7aa	e6 09		inc $09				inc 	zTemp2+1
.a7ac	e6 0b		inc $0b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a7ae	b2 08		lda ($08)			lda 	(zTemp2) 					; reached then end
.a7b0	d0 df		bne $a791			bne 	_TKSearch 					; go try again.
.a7b2	80 0d		bra $a7c1			bra 	_TKComplete
.a7b4					_TKFound:
.a7b4	98		tya				tya
.a7b5	c5 0a		cmp $0a				cmp 	zTemp3 						; check best
.a7b7	90 e8		bcc $a7a1			bcc 	_TKNext 					; if < best try next
.a7b9	85 0a		sta $0a				sta 	zTemp3 						; update best
.a7bb	a5 0b		lda $0b				lda 	zTemp3+1 					; save current token.
.a7bd	85 0c		sta $0c				sta 	zTemp4
.a7bf	80 e0		bra $a7a1			bra 	_TKNext
.a7c1					_TKComplete:
>a7c1	ff						.byte 	$FF
>a7c2	ff						.byte 	$FF
.a7c3	a5 0a		lda $0a				lda 	zTemp3 						; get "best score"
.a7c5	f0 01		beq $a7c8			beq		_TKTokenFail
>a7c7	ff						.byte 	$FF
.a7c8					_TKTokenFail:
>a7c8	ff						.byte 	$FF
.a7c9					TokWriteToken:
.a7c9	92 06		sta ($06)			sta 	(zTemp1)
.a7cb	e6 06		inc $06				inc 	zTemp1
.a7cd	d0 02		bne $a7d1			bne 	_TWTExit
.a7cf	e6 07		inc $07				inc 	zTemp1+1
.a7d1					_TWTExit:
.a7d1	60		rts				rts
.a7d2					TokWriteConstant:
.a7d2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a7d5	29 3f		and #$3f			and		#63
.a7d7	48		pha				pha 								; save on stack
.a7d8	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a7db	29 c0		and #$c0			and 	#$C0
.a7dd	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a7e0	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a7e3	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a7e6	f0 0d		beq $a7f5			beq 	_TWCNoCall 					; no, don't call.
.a7e8	5a		phy				phy
.a7e9	a0 06		ldy #$06			ldy 	#6
.a7eb					_TWCShift:
.a7eb	20 13 a9	jsr $a913			jsr 	Unary_Shr
.a7ee	88		dey				dey
.a7ef	d0 fa		bne $a7eb			bne 	_TWCShift
.a7f1	7a		ply				ply
.a7f2	20 d2 a7	jsr $a7d2			jsr 	TokWriteConstant
.a7f5					_TWCNoCall:
.a7f5	68		pla				pla
.a7f6	09 80		ora #$80			ora 	#$80						; make digit token
.a7f8	80 cf		bra $a7c9			bra 	TokWriteToken 				; and write it out.

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.a7fa					Stack_Empty:
.a7fa	a2 00		ldx #$00			ldx 	#0
.a7fc	60		rts				rts
.a7fd					Stack_Drop:
.a7fd	ca		dex				dex
.a7fe	60		rts				rts
.a7ff					Stack_Dup:
.a7ff	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.a802	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a805	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a808	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a80b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a80e	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a811	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a814	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a817	e8		inx				inx 								; bump stack pointer
.a818	60		rts				rts
.a819					Stack_Nip:
.a819	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.a81c	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a81f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a822	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a825	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a828	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a82b	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a82e	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a831	ca		dex				dex 								; drop tos
.a832	60		rts				rts
.a833					Stack_Over:
.a833	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.a836	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.a839	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a83c	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.a83f	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a842	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.a845	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a848	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.a84b	e8		inx				inx 							; bump stack pointer
.a84c	60		rts				rts
.a84d					Stack_Swap:
.a84d	5a		phy				phy
.a84e	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a851	a8		tay				tay
.a852	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.a855	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a858	98		tya				tya
.a859	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.a85c	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a85f	a8		tay				tay
.a860	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a863	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a866	98		tya				tya
.a867	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.a86a	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a86d	a8		tay				tay
.a86e	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a871	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a874	98		tya				tya
.a875	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.a878	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a87b	a8		tay				tay
.a87c	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a87f	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a882	98		tya				tya
.a883	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.a886	7a		ply				ply
.a887	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.a888					Unary_Absolute:
.a888	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a88b	30 01		bmi $a88e			bmi 	Unary_Negate
.a88d	60		rts				rts
.a88e					Unary_Negate:
.a88e	38		sec				sec
.a88f	a9 00		lda #$00			lda		#0
.a891	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.a894	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a897	a9 00		lda #$00			lda		#0
.a899	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.a89c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a89f	a9 00		lda #$00			lda		#0
.a8a1	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.a8a4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8a7	a9 00		lda #$00			lda		#0
.a8a9	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.a8ac	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a8af	60		rts				rts
.a8b0					Unary_Not:
.a8b0	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a8b3	49 ff		eor #$ff			eor 	#$FF
.a8b5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a8b8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a8bb	49 ff		eor #$ff			eor 	#$FF
.a8bd	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a8c0	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a8c3	49 ff		eor #$ff			eor 	#$FF
.a8c5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8c8	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a8cb	49 ff		eor #$ff			eor 	#$FF
.a8cd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a8d0	60		rts				rts
.a8d1					Unary_Increment:
.a8d1	fe 00 0c	inc $0c00,x			inc 	stack0,x
.a8d4	d0 0d		bne $a8e3			bne 	_UIExit
.a8d6	fe 00 0d	inc $0d00,x			inc 	stack1,x
.a8d9	d0 08		bne $a8e3			bne 	_UIExit
.a8db	fe 00 0e	inc $0e00,x			inc 	stack2,x
.a8de	d0 03		bne $a8e3			bne 	_UIExit
.a8e0	fe 00 0f	inc $0f00,x			inc 	stack3,x
.a8e3					_UIExit:
.a8e3	60		rts				rts
.a8e4					Unary_Decrement:
.a8e4	38		sec				sec
.a8e5	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a8e8	e9 01		sbc #$01			sbc 	#1
.a8ea	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a8ed	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a8f0	e9 00		sbc #$00			sbc 	#0
.a8f2	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a8f5	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a8f8	e9 00		sbc #$00			sbc 	#0
.a8fa	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a8fd	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a900	e9 00		sbc #$00			sbc 	#0
.a902	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a905	60		rts				rts
.a906					Unary_Shl:
.a906	1e 00 0c	asl $0c00,x			asl 	stack0,x
.a909	3e 00 0d	rol $0d00,x			rol 	stack1,x
.a90c	3e 00 0e	rol $0e00,x			rol 	stack2,x
.a90f	3e 00 0f	rol $0f00,x			rol 	stack3,x
.a912	60		rts				rts
.a913					Unary_Shr:
.a913	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.a916	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a919	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a91c	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a91f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.a920					Mem_Peek:
.a920	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a923	85 04		sta $04				sta 	zTemp0
.a925	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a928	85 05		sta $05				sta 	zTemp0+1
.a92a	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a92c	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a92f	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a932	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a935	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a938	60		rts				rts
.a939					Mem_WPeek:
.a939	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a93c	85 04		sta $04				sta 	zTemp0
.a93e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a941	85 05		sta $05				sta 	zTemp0+1
.a943	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a945	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a948	5a		phy				phy 								; read msb
.a949	a0 01		ldy #$01			ldy 	#1
.a94b	b1 04		lda ($04),y			lda 	(zTemp0),y
.a94d	7a		ply				ply
.a94e	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.a951	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a954	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a957	60		rts				rts
.a958					Mem_DPeek:
.a958	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a95b	85 04		sta $04				sta 	zTemp0
.a95d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a960	85 05		sta $05				sta 	zTemp0+1
.a962	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.a964	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.a967	5a		phy				phy 								; read msb
.a968	a0 01		ldy #$01			ldy 	#1
.a96a	b1 04		lda ($04),y			lda 	(zTemp0),y
.a96c	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.a96f	c8		iny				iny
.a970	b1 04		lda ($04),y			lda 	(zTemp0),y
.a972	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a975	c8		iny				iny
.a976	b1 04		lda ($04),y			lda 	(zTemp0),y
.a978	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a97b	7a		ply				ply
.a97c	60		rts				rts
.a97d					Mem_Poke:
.a97d	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a980	85 04		sta $04				sta 	zTemp0
.a982	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a985	85 05		sta $05				sta 	zTemp0+1
.a987	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a98a	92 04		sta ($04)			sta 	(zTemp0)
.a98c	ca		dex				dex
.a98d	ca		dex				dex
.a98e	60		rts				rts
.a98f					Mem_WPoke:
.a98f	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a992	85 04		sta $04				sta 	zTemp0
.a994	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a997	85 05		sta $05				sta 	zTemp0+1
.a999	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.a99c	92 04		sta ($04)			sta 	(zTemp0)
.a99e	5a		phy				phy
.a99f	a0 01		ldy #$01			ldy 	#1
.a9a1	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.a9a4	91 04		sta ($04),y			sta 	(zTemp0),y
.a9a6	7a		ply				ply
.a9a7	ca		dex				dex
.a9a8	ca		dex				dex
.a9a9	60		rts				rts
.a9aa					Mem_DPoke:
.a9aa	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.a9ad	85 04		sta $04				sta 	zTemp0
.a9af	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a9b2	85 05		sta $05				sta 	zTemp0+1
.a9b4	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.a9b7	92 04		sta ($04)			sta 	(zTemp0)
.a9b9	5a		phy				phy
.a9ba	a0 01		ldy #$01			ldy 	#1
.a9bc	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.a9bf	91 04		sta ($04),y			sta 	(zTemp0),y
.a9c1	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.a9c4	c8		iny				iny
.a9c5	91 04		sta ($04),y			sta 	(zTemp0),y
.a9c7	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.a9ca	c8		iny				iny
.a9cb	91 04		sta ($04),y			sta 	(zTemp0),y
.a9cd	7a		ply				ply
.a9ce	ca		dex				dex
.a9cf	ca		dex				dex
.a9d0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.a9d1					Stack_Add:
.a9d1	ca		dex				dex
.a9d2					Stack_Add_No_Dex:
.a9d2	18		clc				clc
.a9d3	bd 00 0c	lda $0c00,x			lda		stack0,x
.a9d6	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.a9d9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a9dc	bd 00 0d	lda $0d00,x			lda		stack1,x
.a9df	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.a9e2	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a9e5	bd 00 0e	lda $0e00,x			lda		stack2,x
.a9e8	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.a9eb	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a9ee	bd 00 0f	lda $0f00,x			lda		stack3,x
.a9f1	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.a9f4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a9f7	60		rts				rts
.a9f8					Stack_Sub:
.a9f8	ca		dex				dex
.a9f9	38		sec				sec
.a9fa	bd 00 0c	lda $0c00,x			lda		stack0,x
.a9fd	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.aa00	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa03	bd 00 0d	lda $0d00,x			lda		stack1,x
.aa06	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.aa09	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa0c	bd 00 0e	lda $0e00,x			lda		stack2,x
.aa0f	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.aa12	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa15	bd 00 0f	lda $0f00,x			lda		stack3,x
.aa18	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.aa1b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa1e	60		rts				rts
.aa1f					Stack_And:
.aa1f	ca		dex				dex
.aa20	bd 00 0c	lda $0c00,x			lda		stack0,x
.aa23	3d 01 0c	and $0c01,x			and		stack0+1,x
.aa26	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa29	bd 00 0d	lda $0d00,x			lda		stack1,x
.aa2c	3d 01 0d	and $0d01,x			and 	stack1+1,x
.aa2f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa32	bd 00 0e	lda $0e00,x			lda		stack2,x
.aa35	3d 01 0e	and $0e01,x			and 	stack2+1,x
.aa38	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa3b	bd 00 0f	lda $0f00,x			lda		stack3,x
.aa3e	3d 01 0f	and $0f01,x			and 	stack3+1,x
.aa41	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa44	60		rts				rts
.aa45					Stack_Xor:
.aa45	ca		dex				dex
.aa46	bd 00 0c	lda $0c00,x			lda		stack0,x
.aa49	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.aa4c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa4f	bd 00 0d	lda $0d00,x			lda		stack1,x
.aa52	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.aa55	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa58	bd 00 0e	lda $0e00,x			lda		stack2,x
.aa5b	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.aa5e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa61	bd 00 0f	lda $0f00,x			lda		stack3,x
.aa64	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.aa67	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa6a	60		rts				rts
.aa6b					Stack_Or:
.aa6b	ca		dex				dex
.aa6c	bd 00 0c	lda $0c00,x			lda		stack0,x
.aa6f	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.aa72	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa75	bd 00 0d	lda $0d00,x			lda		stack1,x
.aa78	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aa7b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa7e	bd 00 0e	lda $0e00,x			lda		stack2,x
.aa81	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.aa84	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa87	bd 00 0f	lda $0f00,x			lda		stack3,x
.aa8a	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aa8d	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa90	60		rts				rts
.aa91					Stack_Shl:
.aa91	38		sec				sec
.aa92	80 01		bra $aa95			bra 	StackShift
.aa94					Stack_Shr:
.aa94	18		clc				clc
.aa95					StackShift:
.aa95	08		php				php
.aa96	ca		dex				dex
.aa97	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.aa9a	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.aa9c	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aa9f	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.aaa2	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.aaa5	d0 13		bne $aaba			bne 	_SSZero
.aaa7					_SSLoop:
.aaa7	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.aaaa	30 1a		bmi $aac6			bmi 	_SSDone 					; completed ?
.aaac	28		plp				plp 								; restore flag
.aaad	08		php				php
.aaae	b0 05		bcs $aab5			bcs 	_SSLeft 					; do either shift.
.aab0	20 13 a9	jsr $a913			jsr 	Unary_Shr
.aab3	80 f2		bra $aaa7			bra 	_SSLoop
.aab5					_SSLeft:
.aab5	20 06 a9	jsr $a906			jsr 	Unary_Shl
.aab8	80 ed		bra $aaa7			bra 	_SSLoop
.aaba					_SSZero:
.aaba	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.aabd	9e 00 0d	stz $0d00,x			stz 	stack1,x
.aac0	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aac3	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aac6					_SSDone:
.aac6	28		plp				plp 								; throw flag.
.aac7	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.aac8					MulInteger32:
.aac8	ca		dex				dex
.aac9	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.aacc	85 0e		sta $0e				sta 	zLTemp1
.aace	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aad1	85 0f		sta $0f				sta 	zLTemp1+1
.aad3	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aad6	85 10		sta $10				sta 	zLTemp1+2
.aad8	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aadb	85 11		sta $11				sta 	zLTemp1+3
.aadd	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.aae0	9e 00 0d	stz $0d00,x			stz 	stack1,x
.aae3	9e 00 0e	stz $0e00,x			stz 	stack2,x
.aae6	9e 00 0f	stz $0f00,x			stz 	stack3,x
.aae9					_BFMMultiply:
.aae9	a5 0e		lda $0e				lda 	zLTemp1 					; get LSBit of 8-11
.aaeb	29 01		and #$01			and 	#1
.aaed	f0 03		beq $aaf2			beq 	_BFMNoAdd
.aaef	20 d2 a9	jsr $a9d2			jsr 	Stack_Add_No_Dex 			; co-opt this code
.aaf2					_BFMNoAdd:
.aaf2	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.aaf5	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.aaf8	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.aafb	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.aafe	46 11		lsr $11				lsr 	zLTemp1+3 					; shift +8 right
.ab00	66 10		ror $10				ror 	zLTemp1+2
.ab02	66 0f		ror $0f				ror 	zLTemp1+1
.ab04	66 0e		ror $0e				ror 	zLTemp1
.ab06	a5 0e		lda $0e				lda 	zLTemp1 					; continue if +8 is nonzero
.ab08	05 0f		ora $0f				ora 	zLTemp1+1
.ab0a	05 10		ora $10				ora 	zLTemp1+2
.ab0c	05 11		ora $11				ora 	zLTemp1+3
.ab0e	d0 d9		bne $aae9			bne 	_BFMMultiply
.ab10	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ab11					DivInteger32:
.ab11	ca		dex				dex
.ab12	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ab15	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ab18	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ab1b	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ab1e	d0 14		bne $ab34			bne 	_BFDOkay
.ab20	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ab23	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ab2b	20 42 59 20 5a 45 52 4f 00
.ab34					_BFDOkay:
.ab34	64 0e		stz $0e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ab36	64 0f		stz $0f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ab38	64 10		stz $10				stz 	zLTemp1+2
.ab3a	64 11		stz $11				stz 	zLTemp1+3
.ab3c	9c 23 0a	stz $0a23			stz 	SignCount 					; Count of signs.
.ab3f	20 9a ab	jsr $ab9a			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ab42	e8		inx				inx
.ab43	20 9a ab	jsr $ab9a			jsr 	CheckIntegerNegate
.ab46	ca		dex				dex
.ab47	5a		phy				phy 								; Y is the counter
.ab48	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ab4a					_BFDLoop:
.ab4a	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ab4d	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab50	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab53	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab56	26 0e		rol $0e				rol 	zLTemp1
.ab58	26 0f		rol $0f				rol 	zLTemp1+1
.ab5a	26 10		rol $10				rol 	zLTemp1+2
.ab5c	26 11		rol $11				rol 	zLTemp1+3
.ab5e	38		sec				sec
.ab5f	a5 0e		lda $0e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ab61	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ab64	48		pha				pha
.ab65	a5 0f		lda $0f				lda 	zLTemp1+1
.ab67	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ab6a	48		pha				pha
.ab6b	a5 10		lda $10				lda 	zLTemp1+2
.ab6d	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ab70	48		pha				pha
.ab71	a5 11		lda $11				lda 	zLTemp1+3
.ab73	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ab76	90 15		bcc $ab8d			bcc 	_BFDNoAdd
.ab78	85 11		sta $11				sta 	zLTemp1+3 					; update A
.ab7a	68		pla				pla
.ab7b	85 10		sta $10				sta 	zLTemp1+2
.ab7d	68		pla				pla
.ab7e	85 0f		sta $0f				sta 	zLTemp1+1
.ab80	68		pla				pla
.ab81	85 0e		sta $0e				sta 	zLTemp1+0
.ab83	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ab86	09 01		ora #$01			ora 	#1
.ab88	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab8b	80 03		bra $ab90			bra 	_BFDNext
.ab8d					_BFDNoAdd:
.ab8d	68		pla				pla 								; Throw away the intermediate calculations
.ab8e	68		pla				pla
.ab8f	68		pla				pla
.ab90					_BFDNext:
.ab90	88		dey				dey
.ab91	d0 b7		bne $ab4a			bne 	_BFDLoop
.ab93	7a		ply				ply 								; restore Y
.ab94	4e 23 0a	lsr $0a23			lsr 	SignCount 					; if sign count odd,
.ab97	b0 07		bcs $aba0			bcs		IntegerNegateAlways 		; negate the result
.ab99	60		rts				rts
.ab9a					CheckIntegerNegate:
.ab9a	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ab9d	30 01		bmi $aba0			bmi 	IntegerNegateAlways 		; if so negate it
.ab9f	60		rts				rts
.aba0					IntegerNegateAlways:
.aba0	ee 23 0a	inc $0a23			inc 	SignCount 					; bump the count of signs
.aba3	4c 8e a8	jmp $a88e			jmp 	Unary_Negate
.aba6					ModInteger32:
.aba6	20 11 ab	jsr $ab11			jsr 	DivInteger32
.aba9	a5 0e		lda $0e				lda 	zLTemp1
.abab	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abae	a5 0f		lda $0f				lda 	zLTemp1+1
.abb0	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abb3	a5 10		lda $10				lda 	zLTemp1+2
.abb5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abb8	a5 11		lda $11				lda 	zLTemp1+3
.abba	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abbd	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.abbe					Comp_Equal:
.abbe	38		sec				sec
.abbf	80 01		bra $abc2			bra 	Comp_CheckEqual
.abc1					Comp_NotEqual:
.abc1	18		clc				clc
.abc2					Comp_CheckEqual:
.abc2	08		php				php
.abc3	ca		dex				dex
.abc4	bd 00 0c	lda $0c00,x			lda		stack0,x
.abc7	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.abca	d0 16		bne $abe2			bne 	_CCENonZero
.abcc	bd 00 0d	lda $0d00,x			lda		stack1,x
.abcf	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.abd2	d0 0e		bne $abe2			bne 	_CCENonZero
.abd4	bd 00 0e	lda $0e00,x			lda		stack2,x
.abd7	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.abda	d0 06		bne $abe2			bne 	_CCENonZero
.abdc	bd 00 0f	lda $0f00,x			lda		stack3,x
.abdf	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.abe2					_CCENonZero:
.abe2	f0 02		beq $abe6			beq 	_CCENotSet
.abe4	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.abe6					_CCENotSet:
.abe6					CompCheckFlip:
.abe6	28		plp				plp 								; if carry set, we want $FF if equal
.abe7	90 02		bcc $abeb			bcc 	CompReturn
.abe9	49 ff		eor #$ff			eor 	#$FF
.abeb					CompReturn:
.abeb	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.abee	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abf1	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abf4	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abf7	60		rts				rts
.abf8					Comp_Less:
.abf8	18		clc				clc
.abf9	80 01		bra $abfc			bra 	Comp_LessCont
.abfb					Comp_GreaterEqual:
.abfb	38		sec				sec
.abfc					Comp_LessCont:
.abfc	08		php				php
.abfd	ca		dex				dex
.abfe	38		sec				sec
.abff	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ac02	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac05	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ac08	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac0b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ac0e	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac11	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ac14	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac17	50 02		bvc $ac1b			bvc 	_CLNoFlip 					; unsigned -> signed
.ac19	49 80		eor #$80			eor 	#$80
.ac1b					_CLNoFlip:
.ac1b	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ac1d	f0 c7		beq $abe6			beq 	CompCheckFlip
.ac1f	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ac21	80 c3		bra $abe6			bra 	CompCheckFlip
.ac23					Comp_LessEqual:
.ac23	38		sec				sec
.ac24	80 01		bra $ac27			bra 	Comp_LessEqualCont
.ac26					Comp_Greater:
.ac26	18		clc				clc
.ac27					Comp_LessEqualCont:
.ac27	08		php				php
.ac28	ca		dex				dex
.ac29	38		sec				sec
.ac2a	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ac2d	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ac30	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ac33	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ac36	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ac39	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ac3c	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ac3f	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ac42	50 02		bvc $ac46			bvc 	_CLENoFlip 					; unsigned -> signed
.ac44	49 80		eor #$80			eor 	#$80
.ac46					_CLENoFlip:
.ac46	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ac48	f0 9c		beq $abe6			beq 	CompCheckFlip
.ac4a	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ac4c	80 98		bra $abe6			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.ac4e					System_RUN:
.ac4e	20 a6 a3	jsr $a3a6			jsr		ResetForRun 				; clear vars, stacks etc.
.ac51	20 9b a3	jsr $a39b			jsr 	ResetCodePointer 			; point to first thing to do.
.ac54	4c 08 a2	jmp $a208			jmp 	Execute						; and run
.ac57					System_END:
>ac57	ff						.byte 	$FF
.ac58	4c e7 a4	jmp $a4e7			jmp 	WarmStart
.ac5b					System_STOP:
.ac5b	4c ff ff	jmp $ffff			jmp 	$FFFF
.ac5e	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ac61	53 54 4f 50 00					.text 	"STOP",0
.ac66					System_Assert:
.ac66	ca		dex				dex
.ac67	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.ac6a	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac6d	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.ac70	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.ac73	d0 0a		bne $ac7f			bne 	_SAOkay
.ac75	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ac78	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ac7f	60		rts		_SAOkay:rts
.ac80					System_New:
.ac80	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.ac83	20 a6 a3	jsr $a3a6			jsr		ResetForRun 				; clear vars, stacks etc.
.ac86	60		rts				rts
.ac87					System_Old:
.ac87	20 9b a3	jsr $a39b			jsr 	ResetCodePointer 			; start of first line.
.ac8a					_SOFindZero:
.ac8a	b1 00		lda ($00),y			lda 	(codePtr),y 				; look for trailing $00
.ac8c	f0 15		beq $aca3			beq 	_SOFoundEnd
.ac8e	c8		iny				iny
.ac8f	d0 f9		bne $ac8a			bne 	_SOFindZero
.ac91	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ac94	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>ac9c	45 43 4f 56 45 52 00
.aca3					_SOFoundEnd:
.aca3	c8		iny				iny 								; update the offset
.aca4	8c 00 11	sty $1100			sty 	ProgramStart
.aca7	20 a6 a3	jsr $a3a6			jsr 	ResetForRun 				; redo all stacks etc.
.acaa	60		rts				rts
.acab					System_Sys:
.acab	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.acae	85 04		sta $04				sta 	zTemp0
.acb0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.acb3	85 05		sta $05				sta 	zTemp0+1
.acb5	ca		dex				dex
.acb6	da		phx				phx
.acb7	5a		phy				phy
.acb8	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.acbb	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.acbe	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.acc1	20 d0 ac	jsr $acd0			jsr 	_SSCall 					; effectively jsr (zTemp)
.acc4	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.acc7	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.acca	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.accd	7a		ply				ply
.acce	fa		plx				plx
.accf	60		rts				rts
.acd0	6c 04 00	jmp ($0004)	_SSCall:jmp 	(zTemp0)
.acd3					System_Stack:
.acd3	60		rts				rts
.acd4	da		phx				phx 								; save stack
.acd5	5a		phy				phy
.acd6	86 08		stx $08				stx 	zTemp2 						; save old TOS
.acd8	a9 5b		lda #$5b			lda 	#"["
.acda	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.acdd	e0 00		cpx #$00			cpx 	#0 							; empty
.acdf	f0 14		beq $acf5			beq 	_SSEnd
.ace1	a2 01		ldx #$01			ldx 	#1 							; start here
.ace3					_SSLoop:
.ace3	20 15 a5	jsr $a515			jsr 	IntegerToString 			; print TOS
.ace6	20 03 a5	jsr $a503			jsr 	ErrorPrintIntegerBuffer
.ace9	e4 08		cpx $08				cpx 	zTemp2 						; done TOS exit
.aceb	f0 08		beq $acf5			beq 	_SSEnd
.aced	e8		inx				inx	 								; advance pointer print ,
.acee	a9 2c		lda #$2c			lda 	#','
.acf0	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.acf3	80 ee		bra $ace3			bra 	_SSLoop
.acf5					_SSEnd:
.acf5	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.acf7	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.acfa	a9 0d		lda #$0d			lda 	#13
.acfc	20 d4 a1	jsr $a1d4			jsr 	ExternPrint
.acff	7a		ply				ply
.ad00	fa		plx				plx
.ad01	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.ad02					Identifier:
.ad02	88		dey				dey 								; wind back to identifier start
.ad03	20 c1 a2	jsr $a2c1			jsr 	IdentifierSearch 			; try to find it.
.ad06	90 2d		bcc $ad35			bcc 	_IDUnknown 					; not known, give up.
.ad08	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ad0a	d0 3d		bne $ad49			bne 	IDTypeError
.ad0c	c8		iny		_IDSkip:iny
.ad0d	b1 00		lda ($00),y			lda 	(codePtr),y
.ad0f	c9 c0		cmp #$c0			cmp 	#$C0
.ad11	b0 f9		bcs $ad0c			bcs 	_IDSkip
.ad13	20 2a a4	jsr $a42a			jsr 	IndexCheck 					; check index/subscript
.ad16	5a		phy				phy
.ad17	e8		inx				inx 								; make space on stack
.ad18	a0 00		ldy #$00			ldy 	#0 							; copy it back
.ad1a	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ad1c	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ad1f	c8		iny				iny
.ad20	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ad22	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ad25	c8		iny				iny
.ad26	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ad28	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ad2b	c8		iny				iny
.ad2c	b1 12		lda ($12),y			lda 	(idDataAddr),y
.ad2e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ad31	7a		ply				ply
.ad32	4c 08 a2	jmp $a208			jmp 	Execute
.ad35					_IDUnknown:
.ad35	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ad38	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>ad40	56 41 52 49 41 42 4c 45 00
.ad49					IDTypeError:
.ad49	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ad4c	4d 49 53 53 49 4e 47 20				.text 	"MISSING VARIABLE",0
>ad54	56 41 52 49 41 42 4c 45 00
.ad5d					WriteVariable:
.ad5d	b1 00		lda ($00),y			lda 	(codePtr),y 				; check variable
.ad5f	c9 c0		cmp #$c0			cmp 	#$C0
.ad61	90 e6		bcc $ad49			bcc 	IDTypeError
.ad63	20 c1 a2	jsr $a2c1			jsr 	IdentifierSearch 			; does it exist
.ad66	90 06		bcc $ad6e			bcc 	_WVNoIdentifier
.ad68	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.ad6a	f0 12		beq $ad7e			beq 	_WVWriteTOS 				; if so write TOS to it.
.ad6c	80 db		bra $ad49			bra 	IDTypeError 				; not, then can't do anything.
.ad6e					_WVNoIdentifier:
.ad6e	5a		phy				phy 								; get current line number
.ad6f	a0 01		ldy #$01			ldy 	#1
.ad71	b1 00		lda ($00),y			lda 	(codePtr),y
.ad73	c8		iny				iny
.ad74	11 00		ora ($00),y			ora 	(codePtr),y
.ad76	7a		ply				ply
.ad77	f0 2d		beq $ada6			beq 	_WVCantCreate 				; if zero (command line) no new vars
.ad79	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.ad7b	20 28 a3	jsr $a328			jsr 	IdentifierCreate 			; try to find it
.ad7e					_WVWriteTOS:
.ad7e	88		dey				dey 								; skip over identifier.
.ad7f					_WVSkipIdentifier:
.ad7f	c8		iny				iny
.ad80	b1 00		lda ($00),y			lda 	(codePtr),y
.ad82	c9 c0		cmp #$c0			cmp 	#$C0
.ad84	b0 f9		bcs $ad7f			bcs 	_WVSkipIdentifier
.ad86	20 2a a4	jsr $a42a			jsr 	IndexCheck 					; check index/subscript
.ad89	5a		phy				phy									; copy TOS in
.ad8a	a0 00		ldy #$00			ldy 	#0
.ad8c	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ad8f	91 12		sta ($12),y			sta 	(idDataAddr),y
.ad91	c8		iny				iny
.ad92	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ad95	91 12		sta ($12),y			sta 	(idDataAddr),y
.ad97	c8		iny				iny
.ad98	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ad9b	91 12		sta ($12),y			sta 	(idDataAddr),y
.ad9d	c8		iny				iny
.ad9e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ada1	91 12		sta ($12),y			sta 	(idDataAddr),y
.ada3	7a		ply				ply
.ada4	ca		dex				dex 								; drop
.ada5	60		rts				rts									; go back and execute again.
.ada6					_WVCantCreate:
.ada6	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ada9	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>adb1	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.adc0					Command_For:
.adc0	20 c5 ae	jsr $aec5			jsr 	StructPushCurrent 			; push current on the stack.
.adc3	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.adc6	1d 00 0d	ora $0d00,x			ora 	stack1,x
.adc9	1d 00 0e	ora $0e00,x			ora 	stack2,x
.adcc	1d 00 0f	ora $0f00,x			ora 	stack3,x
.adcf	f0 34		beq $ae05			beq 	_CFZero
.add1	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.add4	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.add6	c6 02		dec $02				dec 	StructSP
.add8	92 02		sta ($02)			sta 	(StructSP)
.adda	bd 00 0e	lda $0e00,x			lda 	stack2,x
.addd	49 ff		eor #$ff			eor 	#$FF
.addf	c6 02		dec $02				dec 	StructSP
.ade1	92 02		sta ($02)			sta 	(StructSP)
.ade3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ade6	49 ff		eor #$ff			eor 	#$FF
.ade8	c6 02		dec $02				dec 	StructSP
.adea	92 02		sta ($02)			sta 	(StructSP)
.adec	bd 00 0c	lda $0c00,x			lda 	stack0,x
.adef	49 ff		eor #$ff			eor 	#$FF
.adf1	c6 02		dec $02				dec 	StructSP
.adf3	92 02		sta ($02)			sta 	(StructSP)
.adf5	ca		dex				dex 								; pop stack value
.adf6	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.adf8	c6 02		dec $02				dec 	StructSP
.adfa	92 02		sta ($02)			sta 	(StructSP)
.adfc	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.adfe	85 14		sta $14				sta 	ForAddr
.ae00	a5 03		lda $03				lda 	StructSP+1
.ae02	85 15		sta $15				sta 	ForAddr+1
.ae04	60		rts				rts
.ae05					_CFZero:
.ae05	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ae08	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>ae10	54 20 5a 45 52 4f 00
.ae17					Command_Next:
.ae17	b2 02		lda ($02)			lda 	(StructSP)					; check it's FOR.
.ae19	c9 46		cmp #$46			cmp 	#STM_FOR
.ae1b	d0 30		bne $ae4d			bne 	_CNNoFor
.ae1d	5a		phy				phy
.ae1e	a0 00		ldy #$00			ldy 	#0
.ae20					_CNIncrement:
.ae20	c8		iny				iny
.ae21	b1 02		lda ($02),y			lda 	(StructSP),y 				; increment the index
.ae23	1a		inc a				inc 	a
.ae24	91 02		sta ($02),y			sta 	(StructSP),y
.ae26	f0 f8		beq $ae20			beq		_CNIncrement 				; carry out.
.ae28	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.ae2a	b1 02		lda ($02),y			lda 	(StructSP),y 				; on the last time round they
.ae2c	c8		iny				iny 								; will all be $FF
.ae2d	31 02		and ($02),y			and 	(StructSP),y
.ae2f	c8		iny				iny
.ae30	31 02		and ($02),y			and 	(StructSP),y
.ae32	c8		iny				iny
.ae33	31 02		and ($02),y			and 	(StructSP),y
.ae35	7a		ply				ply 								; restore Y
.ae36	1a		inc a				inc 	a 							; so this will be zero last time round
.ae37	d0 06		bne $ae3f			bne 	_CNLoop 					; loop back if non-zero
.ae39	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.ae3b	20 bf ae	jsr $aebf			jsr 	StructPopCount
.ae3e	60		rts				rts
.ae3f					_CNLoop:
.ae3f	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.ae41	85 14		sta $14				sta 	ForAddr
.ae43	a5 03		lda $03				lda 	StructSP+1
.ae45	85 15		sta $15				sta 	ForAddr+1
.ae47	a0 05		ldy #$05			ldy 	#5 							; restore the position
.ae49	20 dd ae	jsr $aedd			jsr 	StructPopCurrent
.ae4c	60		rts				rts
.ae4d					_CNNoFor:
.ae4d	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>ae50	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>ae58	46 4f 52 00
.ae5c					Command_Index:
.ae5c	5a		phy				phy
.ae5d	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.ae5f	e8		inx				inx
.ae60	38		sec				sec
.ae61	a9 fe		lda #$fe			lda 	#$FE
.ae63	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.ae65	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ae68	c8		iny				iny
.ae69	a9 ff		lda #$ff			lda 	#$FF
.ae6b	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.ae6d	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae70	c8		iny				iny
.ae71	a9 ff		lda #$ff			lda 	#$FF
.ae73	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.ae75	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae78	c8		iny				iny
.ae79	a9 ff		lda #$ff			lda 	#$FF
.ae7b	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.ae7d	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae80	7a		ply				ply
.ae81	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.ae82					Command_Repeat:
.ae82	20 c5 ae	jsr $aec5			jsr 	StructPushCurrent 			; push current on the stack.
.ae85	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.ae87	c6 02		dec $02				dec 	StructSP
.ae89	92 02		sta ($02)			sta 	(StructSP)
.ae8b	60		rts				rts
.ae8c					Command_Until:
.ae8c	b2 02		lda ($02)			lda 	(StructSP)					; check it's REPEAT
.ae8e	c9 52		cmp #$52			cmp 	#STM_REPEAT
.ae90	d0 1b		bne $aead			bne 	_CUNoRepeat
.ae92	ca		dex				dex 								; pop
.ae93	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.ae96	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ae99	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ae9c	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ae9f	f0 06		beq $aea7			beq 	_CULoop
.aea1	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.aea3	20 bf ae	jsr $aebf			jsr 	StructPopCount
.aea6	60		rts				rts
.aea7					_CULoop:
.aea7	a0 01		ldy #$01			ldy 	#1 							; restore the position
.aea9	20 dd ae	jsr $aedd			jsr 	StructPopCurrent
.aeac	60		rts				rts
.aead					_CUNoRepeat:
.aead	20 a3 a4	jsr $a4a3			jsr 	ErrorHandler
>aeb0	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>aeb8	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.aebf					StructPopCount:
.aebf	18		clc				clc
.aec0	65 02		adc $02				adc 	StructSP
.aec2	85 02		sta $02				sta 	StructSP
.aec4	60		rts				rts
.aec5					StructPushCurrent:
.aec5	a9 00		lda #$00			lda 	#0							; push bank
.aec7	c6 02		dec $02				dec 	StructSP
.aec9	92 02		sta ($02)			sta 	(StructSP)
.aecb	98		tya				tya									; y Offset
.aecc	c6 02		dec $02				dec 	StructSP
.aece	92 02		sta ($02)			sta 	(StructSP)
.aed0	a5 01		lda $01				lda 	codePtr+1 					; codeptr high
.aed2	c6 02		dec $02				dec 	StructSP
.aed4	92 02		sta ($02)			sta 	(StructSP)
.aed6	a5 00		lda $00				lda 	codePtr 					; codeptr low
.aed8	c6 02		dec $02				dec 	StructSP
.aeda	92 02		sta ($02)			sta 	(StructSP)
.aedc	60		rts				rts
.aedd					StructPopCurrent:
.aedd	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr low
.aedf	85 00		sta $00				sta 	codePtr
.aee1	c8		iny				iny
.aee2	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr high
.aee4	85 01		sta $01				sta 	codePtr+1
.aee6	c8		iny				iny
.aee7	b1 02		lda ($02),y			lda 	(StructSP),y				; y offset
.aee9	a8		tay				tay
.aeea	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	08 64 00 83 80 b9 4a 00			.byte $08,$64,$00,$83,$80,$b9,$4a,$00,$08,$6e,$00,$aa,$4a,$aa,$4b,$00,$10,$78,$00,$49,$c7,$c4,$cb,$cb,$ce,$df,$d6,$ce,$d1,$cb,$e3,$00,$08,$82,$00,$8d,$90,$b1,$4a,$00,$07,$8c,$00,$40,$32,$41,$00
>1108	08 6e 00 aa 4a aa 4b 00 10 78 00 49 c7 c4 cb cb
>1118	ce df d6 ce d1 cb e3 00 08 82 00 8d 90 b1 4a 00
>1128	07 8c 00 40 32 41 00

;******  Return to file: main.asm

>112f	00						.byte 	0

;******  End of listing
