
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=0 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Mon Oct  7 15:34:27 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					debug=0

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$6000					MemoryEnd = $6000 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0000					CodePtr: 		.word ? 					; code pointer
>0002					StructSP: 		.word ?						; structure stack pointer
>0004					zTemp0:			.word ?						; temporary words
>0006					zTemp1: 		.word ?
>0008					zTemp2: 		.word ?
>000a					zTemp3: 		.word ?
>000c					zTemp4:			.word ?
>000e					zLTemp1:		.dword ?					; temporary longs
>0012					idDataAddr:		.word ? 					; data address.
>0014					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=5					CTH_ERROR = COL_MAGENTA
=2					CTH_TOKEN = COL_GREEN
=3					CTH_IDENT = COL_YELLOW
=7					CTH_COMMENT = COL_WHITE
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 fa a1	jsr $a1fa			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd 6c a0	lda $a06c,x			lda 	BootMessage,x
.a00b	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd 6c a0	lda $a06c,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	20 15 a4	jsr $a415			jsr 	ResetForRun
.a017	20 0a a4	jsr $a40a			jsr 	ResetCodePointer
.a01a					WarmStart:
.a01a	8a		txa				txa
.a01b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a01d	9a		txs				txs
.a01e	aa		tax				tax
.a01f	a9 07		lda #$07			lda 	#COL_WHITE
.a021	20 25 a2	jsr $a225			jsr 	ExternColour
.a024	20 39 a2	jsr $a239			jsr 	ExternInput 				; input text
.a027	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a029	85 00		sta $00				sta 	codePtr
.a02b	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a02d	85 01		sta $01				sta 	codePtr+1
.a02f	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a031	85 06		sta $06				sta 	zTemp1 						; with line number 0 by being
.a033	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a035	85 07		sta $07				sta 	zTemp1+1
.a037	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a03a	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a03d	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a040	20 97 a7	jsr $a797			jsr 	Tokenise
.a043	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a045					SkipSpaces:
.a045	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a048	c8		iny				iny
.a049	c9 20		cmp #$20			cmp 	#' '
.a04b	f0 f8		beq $a045			beq 	SkipSpaces
.a04d	c9 30		cmp #$30			cmp 	#'0'
.a04f	90 0e		bcc $a05f			bcc 	ExecuteCLI
.a051	c9 3a		cmp #$3a			cmp 	#'9'+1
.a053	b0 0a		bcs $a05f			bcs 	ExecuteCLI
.a055	ad 00 09	lda $0900			lda 	InputBuffer
.a058	c9 20		cmp #$20			cmp 	#' '
.a05a	f0 03		beq $a05f			beq 	ExecuteCLI
.a05c	4c 02 a9	jmp $a902			jmp		EditProgram
.a05f					ExecuteCLI:
.a05f	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a061	85 00		sta $00				sta 	codePtr
.a063	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a065	85 01		sta $01				sta 	codePtr+1
.a067	a0 03		ldy #$03			ldy 	#3
.a069	4c 77 a2	jmp $a277			jmp 	Execute 					; and run it
.a06c					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a06c	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$32,$20,$44,$41,$54,$45,$3a,$30,$37,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$00
>a074	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a084	2a 2a 2a 2a 0d 0d 42 55 49 4c 44 3a 32 20 44 41
>a094	54 45 3a 30 37 2d 4f 43 54 2d 32 30 31 39 0d 0d
>a0a4	00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a0a5					KeywordText:
>a0a5	01 21					.byte $01,$21                          ; $10 !
>a0a7	01 26					.byte $01,$26                          ; $11 &
>a0a9	01 2a					.byte $01,$2a                          ; $12 *
>a0ab	01 2b					.byte $01,$2b                          ; $13 +
>a0ad	02 2b 2b				.byte $02,$2b,$2b                      ; $14 ++
>a0b0	01 2d					.byte $01,$2d                          ; $15 -
>a0b2	02 2d 2d				.byte $02,$2d,$2d                      ; $16 --
>a0b5	01 2e					.byte $01,$2e                          ; $17 .
>a0b7	01 2f					.byte $01,$2f                          ; $18 /
>a0b9	01 3b					.byte $01,$3b                          ; $19 ;
>a0bb	01 3c					.byte $01,$3c                          ; $1a <
>a0bd	02 3c 3c				.byte $02,$3c,$3c                      ; $1b <<
>a0c0	02 3c 3d				.byte $02,$3c,$3d                      ; $1c <=
>a0c3	02 3c 3e				.byte $02,$3c,$3e                      ; $1d <>
>a0c6	01 3d					.byte $01,$3d                          ; $1e =
>a0c8	01 3e					.byte $01,$3e                          ; $1f >
>a0ca	02 3e 3d				.byte $02,$3e,$3d                      ; $20 >=
>a0cd	02 3e 3e				.byte $02,$3e,$3e                      ; $21 >>
>a0d0	01 40					.byte $01,$40                          ; $22 @
>a0d2	03 41 42 53				.byte $03,$41,$42,$53                  ; $23 ABS
>a0d6	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $24 ALLOC
>a0dc	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $25 AND
>a0e0	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $26 ASSERT
>a0e7	02 43 21				.byte $02,$43,$21                      ; $27 C!
>a0ea	02 43 40				.byte $02,$43,$40                      ; $28 C@
>a0ed	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $29 CLR
>a0f1	03 44 45 46				.byte $03,$44,$45,$46                  ; $2a DEF
>a0f5	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2b DROP
>a0fa	03 44 55 50				.byte $03,$44,$55,$50                  ; $2c DUP
>a0fe	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2d ELSE
>a103	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2e END
>a107	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2f ENDIF
>a10d	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $30 FOR
>a111	02 49 46				.byte $02,$49,$46                      ; $31 IF
>a114	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $32 INDEX
>a11a	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $33 LIST
>a11f	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a123	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a12a	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a12e	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a133	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a137	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a13b	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a13f	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a142	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a147	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3d REPEAT
>a14e	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $3e RUN
>a152	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $3f SHL
>a156	03 53 48 52				.byte $03,$53,$48,$52                  ; $40 SHR
>a15a	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $41 STOP
>a15f	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $42 SWAP
>a164	03 53 59 53				.byte $03,$53,$59,$53                  ; $43 SYS
>a168	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $44 UNTIL
>a16e	02 57 21				.byte $02,$57,$21                      ; $45 W!
>a171	02 57 40				.byte $02,$57,$40                      ; $46 W@
>a174	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $47 XOR
>a178	02 5b 5d				.byte $02,$5b,$5d                      ; $48 []
>a17b	01 5e					.byte $01,$5e                          ; $49 ^
>a17d	01 2b					.byte $01,$2b                          ; $4a {+}
>a17f	01 2d					.byte $01,$2d                          ; $4b {-}
>a181	00					.byte $00
.a182					KeywordVectorTable:
>a182	b3 ab					.word Mem_DPoke                        ; $10 !
>a184	0b a5					.word SyntaxError                      ; $11 &
>a186	d1 ac					.word MulInteger32                     ; $12 *
>a188	da ab					.word Stack_Add                        ; $13 +
>a18a	da aa					.word Unary_Increment                  ; $14 ++
>a18c	01 ac					.word Stack_Sub                        ; $15 -
>a18e	ed aa					.word Unary_Decrement                  ; $16 --
>a190	da ae					.word System_ShowStack                 ; $17 .
>a192	1a ad					.word DivInteger32                     ; $18 /
>a194	0b a5					.word SyntaxError                      ; $19 ;
>a196	01 ae					.word Comp_Less                        ; $1a <
>a198	0f ab					.word Unary_Shl                        ; $1b <<
>a19a	2c ae					.word Comp_LessEqual                   ; $1c <=
>a19c	ca ad					.word Comp_NotEqual                    ; $1d <>
>a19e	c7 ad					.word Comp_Equal                       ; $1e =
>a1a0	2f ae					.word Comp_Greater                     ; $1f >
>a1a2	04 ae					.word Comp_GreaterEqual                ; $20 >=
>a1a4	1c ab					.word Unary_Shr                        ; $21 >>
>a1a6	61 ab					.word Mem_DPeek                        ; $22 @
>a1a8	91 aa					.word Unary_Absolute                   ; $23 ABS
>a1aa	0b a5					.word SyntaxError                      ; $24 ALLOC
>a1ac	28 ac					.word Stack_And                        ; $25 AND
>a1ae	6b ae					.word System_Assert                    ; $26 ASSERT
>a1b0	86 ab					.word Mem_Poke                         ; $27 C!
>a1b2	29 ab					.word Mem_Peek                         ; $28 C@
>a1b4	03 aa					.word Stack_Empty                      ; $29 CLR
>a1b6	0b a5					.word SyntaxError                      ; $2a DEF
>a1b8	06 aa					.word Stack_Drop                       ; $2b DROP
>a1ba	08 aa					.word Stack_Dup                        ; $2c DUP
>a1bc	0b a5					.word SyntaxError                      ; $2d ELSE
>a1be	60 ae					.word System_END                       ; $2e END
>a1c0	0b a5					.word SyntaxError                      ; $2f ENDIF
>a1c2	c6 af					.word Command_For                      ; $30 FOR
>a1c4	0b a5					.word SyntaxError                      ; $31 IF
>a1c6	62 b0					.word Command_Index                    ; $32 INDEX
>a1c8	79 a6					.word Cmd_List                         ; $33 LIST
>a1ca	af ad					.word ModInteger32                     ; $34 MOD
>a1cc	97 aa					.word Unary_Negate                     ; $35 NEGATE
>a1ce	85 ae					.word System_New                       ; $36 NEW
>a1d0	1d b0					.word Command_Next                     ; $37 NEXT
>a1d2	22 aa					.word Stack_Nip                        ; $38 NIP
>a1d4	b9 aa					.word Unary_Not                        ; $39 NOT
>a1d6	8e ae					.word System_Old                       ; $3a OLD
>a1d8	74 ac					.word Stack_Or                         ; $3b OR
>a1da	3c aa					.word Stack_Over                       ; $3c OVER
>a1dc	88 b0					.word Command_Repeat                   ; $3d REPEAT
>a1de	57 ae					.word System_RUN                       ; $3e RUN
>a1e0	9a ac					.word Stack_Shl                        ; $3f SHL
>a1e2	9d ac					.word Stack_Shr                        ; $40 SHR
>a1e4	63 ae					.word System_STOP                      ; $41 STOP
>a1e6	56 aa					.word Stack_Swap                       ; $42 SWAP
>a1e8	b2 ae					.word System_Sys                       ; $43 SYS
>a1ea	92 b0					.word Command_Until                    ; $44 UNTIL
>a1ec	98 ab					.word Mem_WPoke                        ; $45 W!
>a1ee	42 ab					.word Mem_WPeek                        ; $46 W@
>a1f0	4e ac					.word Stack_Xor                        ; $47 XOR
>a1f2	0b a5					.word SyntaxError                      ; $48 []
>a1f4	63 af					.word WriteVariable                    ; $49 ^
>a1f6	0b a5					.word SyntaxError                      ; $4a {+}
>a1f8	0b a5					.word SyntaxError                      ; $4b {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_AMPERSAND = $11              ; $11 &
=$12					KWD_ASTERISK = $12               ; $12 *
=$13					KWD_PLUS = $13                   ; $13 +
=$14					KWD_PLUSPLUS = $14               ; $14 ++
=$15					KWD_MINUS = $15                  ; $15 -
=$16					KWD_MINUSMINUS = $16             ; $16 --
=$17					KWD_DOT = $17                    ; $17 .
=$18					KWD_SLASH = $18                  ; $18 /
=$19					KWD_SEMICOLON = $19              ; $19 ;
=$1a					KWD_LESS = $1a                   ; $1a <
=$1b					KWD_LESSLESS = $1b               ; $1b <<
=$1c					KWD_LESSEQUAL = $1c              ; $1c <=
=$1d					KWD_LESSGREATER = $1d            ; $1d <>
=$1e					KWD_EQUAL = $1e                  ; $1e =
=$1f					KWD_GREATER = $1f                ; $1f >
=$20					KWD_GREATEREQUAL = $20           ; $20 >=
=$21					KWD_GREATERGREATER = $21         ; $21 >>
=$22					KWD_AT = $22                     ; $22 @
=$23					KWD_ABS = $23                    ; $23 ABS
=$24					KWD_ALLOC = $24                  ; $24 ALLOC
=$25					KWD_AND = $25                    ; $25 AND
=$26					KWD_ASSERT = $26                 ; $26 ASSERT
=$27					KWD_CPLING = $27                 ; $27 C!
=$28					KWD_CAT = $28                    ; $28 C@
=$29					KWD_CLR = $29                    ; $29 CLR
=$2a					KWD_DEF = $2a                    ; $2a DEF
=$2b					KWD_DROP = $2b                   ; $2b DROP
=$2c					KWD_DUP = $2c                    ; $2c DUP
=$2d					KWD_ELSE = $2d                   ; $2d ELSE
=$2e					KWD_END = $2e                    ; $2e END
=$2f					KWD_ENDIF = $2f                  ; $2f ENDIF
=$30					KWD_FOR = $30                    ; $30 FOR
=$31					KWD_IF = $31                     ; $31 IF
=$32					KWD_INDEX = $32                  ; $32 INDEX
=$33					KWD_LIST = $33                   ; $33 LIST
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_REPEAT = $3d                 ; $3d REPEAT
=$3e					KWD_RUN = $3e                    ; $3e RUN
=$3f					KWD_SHL = $3f                    ; $3f SHL
=$40					KWD_SHR = $40                    ; $40 SHR
=$41					KWD_STOP = $41                   ; $41 STOP
=$42					KWD_SWAP = $42                   ; $42 SWAP
=$43					KWD_SYS = $43                    ; $43 SYS
=$44					KWD_UNTIL = $44                  ; $44 UNTIL
=$45					KWD_WPLING = $45                 ; $45 W!
=$46					KWD_WAT = $46                    ; $46 W@
=$47					KWD_XOR = $47                    ; $47 XOR
=$48					KWD_LSQPARENRSQPAREN = $48       ; $48 []
=$49					KWD_HAT = $49                    ; $49 ^
=$4a					KWD_CONSTANT_PLUS = $4a          ; $4a {+}
=$4b					KWD_CONSTANT_MINUS = $4b         ; $4b {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a1fa					ExternInitialise:
.a1fa	a9 07		lda #$07			lda 	#$07 						; set colour
.a1fc	8d 86 02	sta $0286			sta 	646
.a1ff	a9 0e		lda #$0e			lda 	#14							; lower case
.a201	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a204	a9 93		lda #$93			lda 	#147 						; clear screen
.a206	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a209	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a20b	4c 25 a2	jmp $a225			jmp 	ExternColour
.a20e					ExternCheckBreak:
.a20e	da		phx				phx 								; make sure we keep XY
.a20f	5a		phy				phy
.a210	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a213	f0 03		beq $a218			beq		_ECBExit 					; stopped
.a215	7a		ply				ply 								; restore and exit.
.a216	fa		plx				plx
.a217	60		rts				rts
.a218					_ECBExit:
.a218	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a21b					ExternPrint:
.a21b	48		pha				pha
.a21c	da		phx				phx
.a21d	5a		phy				phy
.a21e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a221	7a		ply				ply
.a222	fa		plx				plx
.a223	68		pla				pla
.a224	60		rts				rts
.a225					ExternColour:
.a225	48		pha				pha
.a226	da		phx				phx
.a227	aa		tax				tax
.a228	bd 31 a2	lda $a231,x			lda 	_ECTable,x
.a22b	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a22e	fa		plx				plx
.a22f	68		pla				pla
.a230	60		rts				rts
.a231					_ECTable:
>a231	90						.byte 	144
>a232	1c						.byte 	28
>a233	1e						.byte 	30
>a234	9e						.byte 	158
>a235	1f						.byte 	31
>a236	9c						.byte 	156
>a237	9f						.byte 	159
>a238	05						.byte 	5
.a239					ExternInput:
.a239	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a23b	85 04		sta $04				sta 	zTemp0
.a23d	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a23f	85 05		sta $05				sta 	zTemp0+1
.a241	a9 07		lda #$07			lda 	#COL_WHITE
.a243	20 25 a2	jsr $a225			jsr 	ExternColour
.a246	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a249	c9 0d		cmp #$0d			cmp 	#13
.a24b	f0 0a		beq $a257			beq 	_EIExit
.a24d	92 04		sta ($04)			sta 	(zTemp0)
.a24f	e6 04		inc $04				inc 	zTemp0
.a251	d0 f3		bne $a246			bne 	_EIRead
.a253	e6 05		inc $05				inc 	zTemp0+1
.a255	80 ef		bra $a246			bra 	_EIRead
.a257	a9 00		lda #$00	_EIExit:lda 	#0
.a259	92 04		sta ($04)			sta 	(zTemp0)
.a25b	a9 0d		lda #$0d			lda 	#13
.a25d	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a260	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a261					EXNextLine:
.a261	b2 00		lda ($00)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a263	f0 0f		beq $a274			beq 	_EXNLWarmStart
.a265	18		clc				clc 								; advance code pointer to next line
.a266	65 00		adc $00				adc 	codePtr
.a268	85 00		sta $00				sta 	codePtr
.a26a	90 02		bcc $a26e			bcc 	_EXNLNoBump
.a26c	e6 01		inc $01				inc 	codePtr+1
.a26e					_EXNLNoBump:
.a26e	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a270	b2 00		lda ($00)			lda 	(codePtr) 					; read offset
.a272	d0 03		bne $a277			bne 	Execute 					; not end of program
.a274					_EXNLWarmStart:
.a274	4c 60 ae	jmp $ae60			jmp 	System_END
.a277					Execute:
.a277	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a27a	d0 03		bne $a27f			bne 	_EXNoBreak
.a27c	20 0e a2	jsr $a20e			jsr 	ExternCheckBreak
.a27f					_EXNoBreak:
.a27f	b1 00		lda ($00),y			lda 	(codePtr),y 				; load the character
.a281	f0 de		beq $a261			beq 	EXNextLine 					; reached end of the line.
.a283	c8		iny				iny 								; advance pointer.
.a284	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a286	90 27		bcc $a2af			bcc 	EXStringComment
.a288	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a28a	90 0d		bcc $a299			bcc 	EXTokenExecute
.a28c	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a28e	90 03		bcc $a293			bcc 	EXPushConstant
.a290	4c 08 af	jmp $af08			jmp 	Identifier 					; it's an identifier C0-FF
.a293					EXPushConstant:
.a293	88		dey				dey
.a294	20 de a2	jsr $a2de			jsr 	ExtractIntegerToTOS 		; extract integer
.a297	80 de		bra $a277			bra 	Execute
.a299					EXTokenExecute:
.a299	0a		asl a				asl 	a 							; double token, also clears carry
.a29a	da		phx				phx 								; save X, put token x 2 in X
.a29b	aa		tax				tax
.a29c	bd 62 a1	lda $a162,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a29f	85 04		sta $04				sta 	zTemp0 						; start at $10.
.a2a1	bd 63 a1	lda $a163,x			lda 	KeywordVectorTable-$20+1,x
.a2a4	85 05		sta $05				sta 	zTemp0+1
.a2a6	fa		plx				plx 								; restore X
.a2a7	20 ac a2	jsr $a2ac			jsr 	_EXTCall 					; call the routine
.a2aa	80 cb		bra $a277			bra 	Execute
.a2ac					_EXTCall:
.a2ac	6c 04 00	jmp ($0004)			jmp 	(zTemp0)
.a2af					EXStringComment:
.a2af	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a2b1	f0 15		beq $a2c8			beq 	EXStringSkip 				; (comment), so just skip it.
.a2b3	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a2b4	98		tya				tya
.a2b5	38		sec				sec
.a2b6	65 00		adc $00				adc 	codePtr
.a2b8	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2bb	a5 01		lda $01				lda 	codePtr+1
.a2bd	69 00		adc #$00			adc 	#0
.a2bf	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a2c2	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a2c5	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2c8					EXStringSkip:
.a2c8	98		tya				tya 								; the current position in A
.a2c9	18		clc				clc
.a2ca	71 00		adc ($00),y			adc 	(codePtr),y					; add the total length
.a2cc	a8		tay				tay 			 					; and make that the current position.
.a2cd	88		dey				dey 								; back one because of the initial skip
.a2ce	80 a7		bra $a277			bra 	Execute
.a2d0					EXShiftTOSRight:
.a2d0	4a		lsr a				lsr 	a
.a2d1	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a2d4	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a2d7	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a2da	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a2dd	60		rts				rts
.a2de					ExtractIntegerToTOS:
.a2de	b1 00		lda ($00),y			lda 	(codePtr),y
.a2e0	c8		iny				iny
.a2e1	e8		inx				inx 								; make stack space
.a2e2	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a2e4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a2e7	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a2ea	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a2ed	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a2f0					_EXConstantLoop:
.a2f0	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at next ?
.a2f2	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a2f4	c9 80		cmp #$80			cmp 	#$80
.a2f6	d0 2d		bne $a325			bne		_EXDone 					; no then exit
.a2f8	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a2fb	48		pha				pha
.a2fc	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a2ff	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a302	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a305	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a308	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a30b	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a30e	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a311	68		pla				pla
.a312	20 d0 a2	jsr $a2d0			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a315	20 d0 a2	jsr $a2d0			jsr 	EXShiftTOSRight				; which will be x64
.a318	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip constant shift
.a31a	c8		iny				iny
.a31b	29 3f		and #$3f			and 	#$3F
.a31d	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a320	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a323	80 cb		bra $a2f0			bra 	_EXConstantLoop
.a325	b1 00		lda ($00),y	_EXDone:lda 	(codePtr),y
.a327	c8		iny				iny 								; skip over unary constant + -
.a328	c9 4b		cmp #$4b			cmp 	#KWD_CONSTANT_MINUS
.a32a	d0 03		bne $a32f			bne 	_EXPositive
.a32c	4c 97 aa	jmp $aa97			jmp 	Unary_Negate
.a32f					_EXPositive:
.a32f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a330					IdentifierSearch:
.a330	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first character
.a332	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a334	90 12		bcc $a348			bcc 	_ISSlow
.a336	c9 fa		cmp #$fa			cmp 	#$F9+1
.a338	b0 0e		bcs $a348			bcs 	_ISSlow
.a33a	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a33c	0a		asl a				asl 	a
.a33d	0a		asl a				asl		a
.a33e	85 12		sta $12				sta 	idDataAddr					; set up addres
.a340	a9 10		lda #$10			lda 	#AZVariables >> 8
.a342	85 13		sta $13				sta 	idDataAddr+1
.a344	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a346	38		sec				sec 								; return with CS.
.a347	60		rts				rts
.a348					_ISSlow:
.a348	20 fc a3	jsr $a3fc			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a34b	98		tya				tya 								; set (zTemp1) to point to the
.a34c	18		clc				clc 	 							; identifier to be searched.
.a34d	65 00		adc $00				adc 	codePtr
.a34f	85 06		sta $06				sta 	zTemp1
.a351	a5 01		lda $01				lda 	codePtr+1
.a353	69 00		adc #$00			adc 	#0
.a355	85 07		sta $07				sta 	zTemp1+1
.a357	5a		phy				phy 								; save Y
.a358	b2 04		lda ($04)	_ISLoop:lda 	(zTemp0)					; follow link
.a35a	48		pha				pha
.a35b	a0 01		ldy #$01			ldy 	#1
.a35d	b1 04		lda ($04),y			lda 	(zTemp0),y
.a35f	85 05		sta $05				sta 	zTemp0+1
.a361	68		pla				pla
.a362	85 04		sta $04				sta 	zTemp0
.a364	05 05		ora $05				ora 	zTemp0+1 					; if zero, then fail.
.a366	f0 2c		beq $a394			beq 	_ISFail
.a368	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a36a	b1 04		lda ($04),y			lda 	(zTemp0),y
.a36c	85 08		sta $08				sta 	zTemp2
.a36e	c8		iny				iny
.a36f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a371	85 09		sta $09				sta 	zTemp2+1
.a373	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a375					_ISCompare:
.a375	b1 06		lda ($06),y			lda 	(zTemp1),y
.a377	d1 08		cmp ($08),y			cmp 	(zTemp2),y
.a379	d0 dd		bne $a358			bne		_ISLoop 					; different ?
.a37b	c8		iny				iny
.a37c	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a37e	90 f5		bcc $a375			bcc 	_ISCompare
.a380	18		clc				clc 								; set up the data pointer
.a381	a5 04		lda $04				lda 	zTemp0
.a383	69 02		adc #$02			adc 	#2
.a385	85 12		sta $12				sta 	idDataAddr
.a387	a5 05		lda $05				lda 	zTemp0+1
.a389	69 00		adc #$00			adc		#0
.a38b	85 13		sta $13				sta 	idDataAddr+1
.a38d	a0 09		ldy #$09			ldy 	#9 							; get the type
.a38f	b1 04		lda ($04),y			lda 	(zTemp0),y
.a391	7a		ply				ply
.a392	38		sec				sec
.a393	60		rts				rts
.a394					_ISFail:
.a394	7a		ply				ply
.a395	18		clc				clc
.a396	60		rts				rts
.a397					IdentifierCreate:
.a397	5a		phy				phy 								; save Y
.a398	48		pha				pha 								; save type on stack
.a399	20 fc a3	jsr $a3fc			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a39c	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a39f	85 06		sta $06				sta 	zTemp1
.a3a1	ad 89 10	lda $1089			lda 	VarMemory+1
.a3a4	85 07		sta $07				sta 	zTemp1+1
.a3a6	5a		phy				phy 								; save Y (code offset)
.a3a7	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a3a9	b1 04		lda ($04),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a3ab	91 06		sta ($06),y			sta 	(zTemp1),y
.a3ad	c8		iny				iny
.a3ae	b1 04		lda ($04),y			lda 	(zTemp0),y
.a3b0	91 06		sta ($06),y			sta 	(zTemp1),y
.a3b2	c8		iny				iny
.a3b3					_IDCErase:
.a3b3	a9 00		lda #$00			lda 	#0
.a3b5	91 06		sta ($06),y			sta 	(zTemp1),y
.a3b7	c8		iny				iny
.a3b8	c0 06		cpy #$06			cpy 	#6
.a3ba	d0 f7		bne $a3b3			bne 	_IDCErase
.a3bc	68		pla				pla 								; original Y
.a3bd	18		clc				clc
.a3be	65 00		adc $00				adc		codePtr 					; address of identifier +6,+7
.a3c0	91 06		sta ($06),y			sta 	(zTemp1),y
.a3c2	c8		iny				iny
.a3c3	a5 01		lda $01				lda 	codePtr+1
.a3c5	69 00		adc #$00			adc 	#0
.a3c7	91 06		sta ($06),y			sta 	(zTemp1),y
.a3c9	c8		iny				iny
.a3ca	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a3cc	91 06		sta ($06),y			sta 	(zTemp1),y
.a3ce	68		pla				pla 								; restore type
.a3cf	c8		iny				iny
.a3d0	91 06		sta ($06),y			sta 	(zTemp1),y 					; store at +9
.a3d2	c8		iny				iny
.a3d3	98		tya				tya									; add offset to VarMemory
.a3d4	18		clc				clc
.a3d5	6d 88 10	adc $1088			adc 	VarMemory
.a3d8	8d 88 10	sta $1088			sta 	VarMemory
.a3db	ad 89 10	lda $1089			lda 	VarMemory+1
.a3de	69 00		adc #$00			adc 	#0
.a3e0	8d 89 10	sta $1089			sta 	VarMemory+1
.a3e3	a5 06		lda $06				lda 	zTemp1 						; overwrite hash table entry
.a3e5	92 04		sta ($04)			sta 	(zTemp0)
.a3e7	a0 01		ldy #$01			ldy 	#1
.a3e9	a5 07		lda $07				lda 	zTemp1+1
.a3eb	91 04		sta ($04),y			sta 	(zTemp0),y
.a3ed	a5 06		lda $06				lda 	zTemp1 						; set up idDataAddr
.a3ef	18		clc				clc
.a3f0	69 02		adc #$02			adc 	#2
.a3f2	85 12		sta $12				sta 	idDataAddr
.a3f4	a5 07		lda $07				lda 	zTemp1+1
.a3f6	69 00		adc #$00			adc 	#0
.a3f8	85 13		sta $13				sta 	idDataAddr+1
.a3fa	7a		ply				ply 								; restore Y and exit
.a3fb	60		rts				rts
.a3fc					IdentifierSetUpHashPtr:
.a3fc	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the first operator
.a3fe	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a400	0a		asl a				asl 	a 							; convert to an offset, clc
.a401	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a403	85 04		sta $04				sta 	zTemp0
.a405	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a407	85 05		sta $05				sta 	zTemp0+1
.a409	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a40a					ResetCodePointer:
.a40a	48		pha				pha
.a40b	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a40d	85 01		sta $01				sta 	codePtr+1
.a40f	64 00		stz $00				stz 	codePtr
.a411	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a413	68		pla				pla
.a414	60		rts				rts
.a415					ResetForRun:
.a415	48		pha				pha
.a416	5a		phy				phy
.a417	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a419					_RRErase:
.a419	9e 68 10	stz $1068,x			stz		HashTable,x
.a41c	e8		inx				inx
.a41d	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a41f	d0 f8		bne $a419			bne 	_RRErase
.a421	20 40 a4	jsr $a440			jsr 	ResetVarMemory
.a424	a9 60		lda #$60			lda 	#MemoryEnd >> 8
.a426	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a429	9c 8a 10	stz $108a			stz 	AllocMemory
.a42c	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a42e	85 02		sta $02				sta 	StructSP
.a430	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a432	85 03		sta $03				sta 	StructSP+1
.a434	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a436	92 02		sta ($02)			sta 	(StructSP)
.a438	20 67 a4	jsr $a467			jsr 	ProcedureScan
.a43b	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a43d	7a		ply				ply
.a43e	68		pla				pla
.a43f	60		rts				rts
.a440					ResetVarMemory:
.a440	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a442	85 04		sta $04				sta 	zTemp0
.a444	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a446	85 05		sta $05				sta 	zTemp0+1
.a448					_RRFindEnd:
.a448	b2 04		lda ($04)			lda 	(zTemp0)					; at end ?
.a44a	f0 0b		beq $a457			beq 	_RRFoundEnd
.a44c	18		clc				clc 								; no, add offset to pointer.
.a44d	65 04		adc $04				adc 	zTemp0
.a44f	85 04		sta $04				sta 	zTemp0
.a451	90 f5		bcc $a448			bcc 	_RRFindEnd
.a453	e6 05		inc $05				inc 	zTemp0+1
.a455	80 f1		bra $a448			bra 	_RRFindEnd
.a457					_RRFoundEnd:
.a457	18		clc				clc 								; add 1 to this, as it points to the last
.a458	a5 04		lda $04				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a45a	69 01		adc #$01			adc 	#1
.a45c	8d 88 10	sta $1088			sta 	VarMemory
.a45f	a5 05		lda $05				lda 	zTemp0+1
.a461	69 00		adc #$00			adc 	#0
.a463	8d 89 10	sta $1089			sta 	VarMemory+1
.a466	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a467					ProcedureScan:
.a467	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; reset the code pointer.
.a46a	b2 00		lda ($00)	_PSMain:lda 	(codePtr)					; check if end
.a46c	f0 33		beq $a4a1			beq 	_PSExit
.a46e	a0 03		ldy #$03			ldy 	#3 							; start of line
.a470	b1 00		lda ($00),y			lda 	(codePtr),y 				; skip over spaces
.a472	c9 2a		cmp #$2a			cmp 	#KWD_DEF 					; first thing is DEF ?
.a474	d0 1e		bne $a494			bne 	_PSNext
.a476	c8		iny				iny 								; skip over def first, any following spaces
.a477	b1 00		lda ($00),y			lda 	(codePtr),y
.a479	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a47b	20 97 a3	jsr $a397			jsr 	IdentifierCreate
.a47e					_PSSkipIdentifier:
.a47e	b1 00		lda ($00),y			lda 	(codePtr),y
.a480	c8		iny				iny
.a481	c9 c0		cmp #$c0			cmp 	#$C0
.a483	b0 f9		bcs $a47e			bcs 	_PSSkipIdentifier
.a485	88		dey				dey 								; undo last, points at first non ID
.a486	98		tya				tya  								; save the address in the data slot.
.a487	18		clc				clc 								; changing Y doesn't matter.
.a488	65 00		adc $00				adc 	codePtr
.a48a	92 12		sta ($12)			sta 	(idDataAddr)
.a48c	a5 01		lda $01				lda 	codePtr+1
.a48e	69 00		adc #$00			adc 	#0
.a490	a0 01		ldy #$01			ldy 	#1
.a492	91 12		sta ($12),y			sta 	(idDataAddr),y
.a494					_PSNext:
.a494	18		clc				clc 								; go to next
.a495	b2 00		lda ($00)			lda 	(codePtr)
.a497	65 00		adc $00				adc 	codePtr
.a499	85 00		sta $00				sta 	codeptr
.a49b	90 cd		bcc $a46a			bcc 	_PSMain
.a49d	e6 01		inc $01				inc 	codePtr+1
.a49f	80 c9		bra $a46a			bra 	_PSMain
.a4a1					_PSExit:
.a4a1	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/indexing.asm

.a4a2					IndexCheck:
.a4a2	b1 00		lda ($00),y			lda 	(codePtr),y 				; check next character
.a4a4	c9 48		cmp #$48			cmp 	#KWD_LSQPARENRSQPAREN 		; left/right square bracket ?
.a4a6	f0 12		beq $a4ba			beq 	_ICArrayAccess
.a4a8	29 c0		and #$c0			and 	#$C0 						; constant (e.g. 10xx xxxx)
.a4aa	c9 80		cmp #$80			cmp 	#$80
.a4ac	b0 01		bcs $a4af			bcs 	_ICSubscript
.a4ae					_ICExit:
.a4ae	60		rts				rts
.a4af					_ICSubscript:
.a4af	b1 00		lda ($00),y			lda 	(codePtr),y
.a4b1	c8		iny				iny 								; skip over subscript
.a4b2	29 3f		and #$3f			and 	#$3F 						; lower 6 bits only.
.a4b4	85 06		sta $06				sta 	zTemp1 						; save in zTemp1
.a4b6	64 07		stz $07				stz 	zTemp1+1
.a4b8	80 0c		bra $a4c6			bra 	_ICAddSubscript 			; double and add to value.
.a4ba					_ICArrayAccess:
.a4ba	c8		iny				iny 								; point to next
.a4bb	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.a4be	85 07		sta $07				sta 	zTemp1+1 					; no point in the rest !
.a4c0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a4c3	85 06		sta $06				sta 	zTemp1
.a4c5	ca		dex				dex
.a4c6					_ICAddSubscript:
.a4c6	06 06		asl $06				asl 	zTemp1 						; subscript x 4
.a4c8	26 07		rol $07				rol 	zTemp1+1
.a4ca	06 06		asl $06				asl 	zTemp1
.a4cc	26 07		rol $07				rol 	zTemp1+1
.a4ce	5a		phy				phy
.a4cf	b2 12		lda ($12)			lda 	(idDataAddr)				; check indirecting through 0
.a4d1	a0 01		ldy #$01			ldy 	#1
.a4d3	11 12		ora ($12),y			ora 	(idDataAddr),y 				; probably means uninitialised
.a4d5	c8		iny				iny
.a4d6	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4d8	c8		iny				iny
.a4d9	11 12		ora ($12),y			ora 	(idDataAddr),y
.a4db	f0 17		beq $a4f4			beq 	_ICZero
.a4dd	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.a4de	b2 12		lda ($12)			lda 	(idDataAddr)
.a4e0	65 06		adc $06				adc 	zTemp1
.a4e2	48		pha				pha
.a4e3	a0 01		ldy #$01			ldy 	#1
.a4e5	b1 12		lda ($12),y			lda 	(idDataAddr),y
.a4e7	65 07		adc $07				adc 	zTemp1+1
.a4e9	85 13		sta $13				sta 	idDataAddr+1 				; write it out
.a4eb	68		pla				pla
.a4ec	85 12		sta $12				sta 	idDataAddr
.a4ee	64 14		stz $14				stz 	idDataAddr+2 				; extend to 32 bits
.a4f0	64 15		stz $15				stz 	idDataAddr+3
.a4f2	7a		ply				ply
.a4f3	60		rts				rts
.a4f4					_ICZero:
.a4f4	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>a4f7	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>a4ff	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a50b					SyntaxError:
.a50b	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>a50e	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a516	52 52 4f 52 00
.a51b					ErrorHandler:
.a51b	68		pla				pla 								; pop message address
.a51c	85 04		sta $04				sta 	zTemp0
.a51e	68		pla				pla
.a51f	85 05		sta $05				sta 	zTemp0+1
.a521	a9 05		lda #$05			lda 	#CTH_ERROR
.a523	20 25 a2	jsr $a225			jsr 	ExternColour
.a526	a0 01		ldy #$01			ldy 	#1 							; print it
.a528					_ErrorPrint:
.a528	b1 04		lda ($04),y			lda 	(zTemp0),y
.a52a	20 1b a2	jsr $a21b			jsr		ExternPrint
.a52d	c8		iny				iny
.a52e	b1 04		lda ($04),y			lda 	(zTemp0),y
.a530	d0 f6		bne $a528			bne 	_ErrorPrint
.a532	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a534	b1 00		lda ($00),y			lda		(codePtr),y
.a536	c8		iny				iny
.a537	12 00		ora ($00)			ora 	(codePtr)
.a539	f0 1c		beq $a557			beq 	_ErrorNoLine 				; if so, skip
.a53b	a9 20		lda #$20			lda 	#32
.a53d	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a540	a9 40		lda #$40			lda 	#'@'
.a542	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a545	a9 20		lda #$20			lda 	#32
.a547	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a54a	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a54c	b1 00		lda ($00),y			lda 	(codePtr),y
.a54e	48		pha				pha
.a54f	c8		iny				iny
.a550	b1 00		lda ($00),y			lda 	(codePtr),y
.a552	a8		tay				tay
.a553	68		pla				pla
.a554	20 5f a5	jsr $a55f			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a557					_ErrorNoLine:
.a557	a9 0d		lda #$0d			lda 	#13							; new line
.a559	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a55c	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a55f					ErrorPrint16:
.a55f	da		phx				phx
.a560	e8		inx				inx 								; space on stack
.a561	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a564	98		tya				tya
.a565	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a568	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a56b	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a56e	20 84 a5	jsr $a584			jsr 	IntegerToString 			; convert to string.
.a571	fa		plx				plx
.a572					ErrorPrintIntegerBuffer:
.a572	da		phx				phx
.a573	a2 00		ldx #$00			ldx 	#0
.a575					_EP16Loop:
.a575	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a578	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a57b	e8		inx				inx
.a57c	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a57f	d0 f4		bne $a575			bne 	_EP16Loop
.a581	8a		txa				txa
.a582	fa		plx				plx
.a583	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a584					IntegerToString:
.a584	48		pha				pha
.a585	5a		phy				phy
.a586	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a589	10 08		bpl $a593			bpl 		_ITSNotMinus
.a58b	a9 2d		lda #$2d			lda 		#"-"
.a58d	20 25 a6	jsr $a625			jsr 		ITSOutputCharacter
.a590	20 97 aa	jsr $aa97			jsr 		Unary_Negate
.a593					_ITSNotMinus:
.a593	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a596	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a599	8a		txa				txa 								; use Y for the integer index.
.a59a	a8		tay				tay
.a59b	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a59d					_ITSNextSubtractor:
.a59d	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a59f	8d 21 08	sta $0821			sta 		NumConvCount
.a5a2					_ITSSubtract:
.a5a2	38		sec				sec
.a5a3	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a5a6	fd 01 a6	sbc $a601,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a5a9	48		pha				pha
.a5aa	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a5ad	fd 02 a6	sbc $a602,x			sbc 		_ITSSubtractors+1,x
.a5b0	48		pha				pha
.a5b1	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a5b4	fd 03 a6	sbc $a603,x			sbc 		_ITSSubtractors+2,x
.a5b7	48		pha				pha
.a5b8	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a5bb	fd 04 a6	sbc $a604,x			sbc 		_ITSSubtractors+3,x
.a5be	90 14		bcc $a5d4			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a5c0	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a5c3	68		pla				pla
.a5c4	99 00 0e	sta $0e00,y			sta 		stack2,y
.a5c7	68		pla				pla
.a5c8	99 00 0d	sta $0d00,y			sta 		stack1,y
.a5cb	68		pla				pla
.a5cc	99 00 0c	sta $0c00,y			sta 		stack0,y
.a5cf	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a5d2	80 ce		bra $a5a2			bra 		_ITSSubtract 			; go round again.
.a5d4					_ITSCantSubtract:
.a5d4	68		pla				pla 								; throw away interim answers
.a5d5	68		pla				pla 								; (the subtraction that failed)
.a5d6	68		pla				pla
.a5d7	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a5da	c9 30		cmp #$30			cmp 		#"0"
.a5dc	d0 05		bne $a5e3			bne 		_ITSOutputDigit
.a5de	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a5e1	f0 09		beq $a5ec			beq	 		_ITSGoNextSubtractor
.a5e3					_ITSOutputDigit:
.a5e3	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a5e6	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a5e9	20 25 a6	jsr $a625			jsr 		ITSOutputCharacter 		; output it.
.a5ec					_ITSGoNextSubtractor:
.a5ec	e8		inx				inx 								; next dword in subtractor table.
.a5ed	e8		inx				inx
.a5ee	e8		inx				inx
.a5ef	e8		inx				inx
.a5f0	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a5f2	d0 a9		bne $a59d			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a5f4	98		tya				tya 								; X is back as the mantissa index
.a5f5	aa		tax				tax
.a5f6	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a5f9	09 30		ora #$30			ora 		#"0"
.a5fb	20 25 a6	jsr $a625			jsr 		ITSOutputCharacter
.a5fe	7a		ply				ply 								; and exit
.a5ff	68		pla				pla
.a600	60		rts				rts
.a601					_ITSSubtractors:
>a601	00 ca 9a 3b					.dword 		1000000000
>a605	00 e1 f5 05					.dword 		100000000
>a609	80 96 98 00					.dword 		10000000
>a60d	40 42 0f 00					.dword 		1000000
>a611	a0 86 01 00					.dword 		100000
>a615	10 27 00 00					.dword 		10000
>a619	e8 03 00 00					.dword 		1000
>a61d	64 00 00 00					.dword 		100
>a621	0a 00 00 00					.dword 		10
.a625					_ITSSubtractorsEnd:
.a625					ITSOutputCharacter:
.a625	48		pha				pha
.a626	da		phx				phx
.a627	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a62a	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a62d	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a630	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a633	fa		plx				plx
.a634	68		pla				pla
.a635	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a636					IntFromString:
.a636	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a638	e8		inx				inx 								; space on stack
.a639	20 6c a6	jsr $a66c			jsr 	IFSClearTOS
.a63c					_IFSLoop:
.a63c	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get next
.a63e	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a640	90 24		bcc $a666			bcc 	_IFSExit
.a642	c9 3a		cmp #$3a			cmp 	#"9"+1
.a644	b0 20		bcs $a666			bcs 	_IFSExit
.a646	20 08 aa	jsr $aa08			jsr 	Stack_Dup 					; duplicate tos
.a649	20 0f ab	jsr $ab0f			jsr 	Unary_Shl	 				; x 2
.a64c	20 0f ab	jsr $ab0f			jsr 	Unary_Shl 					; x 4
.a64f	20 da ab	jsr $abda			jsr 	Stack_Add 					; x 5
.a652	20 0f ab	jsr $ab0f			jsr 	Unary_Shl 					; x 10
.a655	e8		inx				inx  								; create space next up
.a656	20 6c a6	jsr $a66c			jsr 	IFSClearTOS
.a659	b1 04		lda ($04),y			lda 	(zTemp0),y 					; add digit
.a65b	29 0f		and #$0f			and 	#15
.a65d	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a660	20 da ab	jsr $abda			jsr 	Stack_Add 					; add to tos
.a663	c8		iny				iny
.a664	80 d6		bra $a63c			bra 	_IFSLoop
.a666					_IFSExit:
.a666	98		tya				tya
.a667	38		sec				sec
.a668	f0 01		beq $a66b			beq 	_IFSSkipFail
.a66a	18		clc				clc
.a66b					_IFSSkipFail:
.a66b	60		rts				rts
.a66c					IFSClearTOS:
.a66c	9e 00 0c	stz $0c00,x			stz		stack0,x
.a66f	9e 00 0d	stz $0d00,x			stz		stack1,x
.a672	9e 00 0e	stz $0e00,x			stz		stack2,x
.a675	9e 00 0f	stz $0f00,x			stz		stack3,x
.a678	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/list.asm

.a679					Cmd_List:
.a679	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; back to the beginning
.a67c	64 08		stz $08				stz 	zTemp2						; clear the lowest-number
.a67e	64 09		stz $09				stz 	zTemp2+1
.a680	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.a682	f0 0b		beq $a68f			beq 	_CLINone
.a684	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.a687	85 08		sta $08				sta 	zTemp2
.a689	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a68c	95 09		sta $09,x			sta 	zTemp2+1,x
.a68e	ca		dex				dex 								; and pop the tos
.a68f					_CLINone:
.a68f	a9 10		lda #$10			lda 	#16 						; list this many lines
.a691	85 06		sta $06				sta 	zTemp1
.a693					_CLILoop
.a693	b2 00		lda ($00)			lda 	(codePtr)					; check end of program
.a695	f0 24		beq $a6bb			beq 	_CLIEnd
.a697	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.a699	38		sec				sec
.a69a	b1 00		lda ($00),y			lda 	(codePtr),y
.a69c	e5 08		sbc $08				sbc 	zTemp2
.a69e	c8		iny				iny
.a69f	b1 00		lda ($00),y			lda 	(codePtr),y
.a6a1	e5 09		sbc $09				sbc 	zTemp2+1
.a6a3	90 09		bcc $a6ae			bcc 	_CLISkip
.a6a5	da		phx				phx
.a6a6	20 be a6	jsr $a6be			jsr 	ListCurrent 				; list the line.
.a6a9	fa		plx				plx
.a6aa	c6 06		dec $06				dec 	zTemp1 						; done all lines
.a6ac	f0 0d		beq $a6bb			beq 	_CLIEnd
.a6ae					_CLISkip:
.a6ae	18		clc				clc
.a6af	b2 00		lda ($00)			lda 	(codePtr) 					; go to next
.a6b1	65 00		adc $00				adc 	codePtr
.a6b3	85 00		sta $00				sta 	codePtr
.a6b5	90 dc		bcc $a693			bcc 	_CLILoop
.a6b7	e6 01		inc $01				inc 	codePtr+1
.a6b9	80 d8		bra $a693			bra 	_CLILoop
.a6bb					_CLIEnd:
.a6bb	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a6be					ListCurrent:
.a6be	a9 06		lda #$06			lda 	#CTH_NUMBER
.a6c0	20 25 a2	jsr $a225			jsr 	ExternColour 				; set colour
.a6c3	a0 01		ldy #$01			ldy 	#1							; print line#
.a6c5	b1 00		lda ($00),y			lda 	(codePtr),y
.a6c7	48		pha				pha
.a6c8	c8		iny				iny
.a6c9	b1 00		lda ($00),y			lda 	(codePtr),y
.a6cb	a8		tay				tay
.a6cc	68		pla				pla
.a6cd	20 5f a5	jsr $a55f			jsr 	ErrorPrint16
.a6d0	a8		tay				tay
.a6d1					_LCPadOut:
.a6d1	a9 20		lda #$20			lda 	#' '
.a6d3	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a6d6	c8		iny				iny
.a6d7	c0 05		cpy #$05			cpy 	#5
.a6d9	d0 f6		bne $a6d1			bne 	_LCPadOut
.a6db	a0 03		ldy #$03			ldy 	#3 							; start here
.a6dd					_LCLoop:
.a6dd	a9 20		lda #$20			lda 	#' '						; space
.a6df	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a6e2					_LCLoopNoSpace:
.a6e2	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first
.a6e4	30 3e		bmi $a724			bmi 	_LCIdentConst 				; identifier or constant
.a6e6	d0 05		bne $a6ed			bne 	_LCStringToken
.a6e8	a9 0d		lda #$0d			lda 	#13
.a6ea	4c 1b a2	jmp $a21b			jmp 	ExternPrint
.a6ed					_LCStringToken:
.a6ed	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.a6ef	90 0c		bcc $a6fd			bcc		_LCString
.a6f1	20 65 a7	jsr $a765			jsr 	ListPrintToken
.a6f4	b1 00		lda ($00),y			lda 	(codePtr),y 				; no space if ^
.a6f6	c8		iny				iny 								; advance pointer
.a6f7	c9 49		cmp #$49			cmp 	#KWD_HAT
.a6f9	f0 e7		beq $a6e2			beq 	_LCLoopNoSpace
.a6fb	80 e0		bra $a6dd			bra 	_LCLoop 					; go round again.
.a6fd					_LCString:
.a6fd	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.a6fe	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.a700	a2 22		ldx #$22			ldx 	#'"'
.a702	b0 04		bcs $a708			bcs 	_LCSSkip
.a704	a9 07		lda #$07			lda 	#CTH_COMMENT
.a706	a2 27		ldx #$27			ldx 	#"'"
.a708					_LCSSkip:
.a708	20 25 a2	jsr $a225			jsr 	ExternColour 				; set colour
.a70b	8a		txa				txa
.a70c	48		pha				pha 								; save end quote on stack.
.a70d	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a710	c8		iny				iny 								; skip type size
.a711	c8		iny				iny
.a712					_LCSPrint:
.a712	b1 00		lda ($00),y			lda 	(codePtr),y
.a714	c8		iny				iny
.a715	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.a717	f0 05		beq $a71e			beq 	_LCSExit
.a719	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a71c	80 f4		bra $a712			bra 	_LCSPrint
.a71e					_LCSExit:
.a71e	68		pla				pla
.a71f	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a722	80 b9		bra $a6dd			bra 	_LCLoop
.a724					_LCIdentConst:
.a724	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.a726	90 1e		bcc $a746			bcc 	_LCConstant
.a728	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.a72a	20 25 a2	jsr $a225			jsr 	ExternColour
.a72d					_LCCIdLoop:
.a72d	b1 00		lda ($00),y			lda 	(codePtr),y 				; read
.a72f	c8		iny				iny
.a730	29 1f		and #$1f			and 	#$1F 						; convert
.a732	18		clc				clc
.a733	69 41		adc #$41			adc 	#'A'
.a735	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.a737	d0 02		bne $a73b			bne 	_LCCNotDot
.a739	a9 2e		lda #$2e			lda 	#'.'
.a73b					_LCCNotDot:
.a73b	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a73e	b1 00		lda ($00),y			lda 	(codePtr),y 				; another
.a740	c9 c0		cmp #$c0			cmp 	#$C0
.a742	b0 e9		bcs $a72d			bcs 	_LCCIdLoop
.a744	80 97		bra $a6dd			bra 	_LCLoop
.a746					_LCConstant:
.a746	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.a748	20 25 a2	jsr $a225			jsr 	ExternColour
.a74b	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.a74d	20 de a2	jsr $a2de			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.a750	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.a753	48		pha				pha
.a754	20 84 a5	jsr $a584			jsr 	IntegerToString 			; this could corrupt stack if full :)
.a757	20 72 a5	jsr $a572			jsr 	ErrorPrintIntegerBuffer
.a75a	68		pla				pla 								; sign back
.a75b	10 80		bpl $a6dd			bpl 	_LCLoop
.a75d	a9 2d		lda #$2d			lda 	#"-"
.a75f	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a762	4c dd a6	jmp $a6dd			jmp 	_LCLoop
.a765					ListPrintToken:
.a765	5a		phy				phy
.a766	48		pha				pha 								; token colour
.a767	a9 02		lda #$02			lda 	#CTH_TOKEN
.a769	20 25 a2	jsr $a225			jsr 	ExternColour
.a76c	fa		plx				plx
.a76d	a9 a5		lda #$a5			lda 	#KeywordText & $FF
.a76f	85 04		sta $04				sta 	zTemp0
.a771	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a773	85 05		sta $05				sta 	zTemp0+1
.a775					_LPTLoop:
.a775	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.a777	f0 0e		beq $a787			beq 	_LPTFound
.a779	ca		dex				dex
.a77a	b2 04		lda ($04)			lda 	(zTemp0)
.a77c	38		sec				sec									; add 1, it's length+name
.a77d	65 04		adc $04				adc 	zTemp0
.a77f	85 04		sta $04				sta 	zTemp0
.a781	90 f2		bcc $a775			bcc 	_LPTLoop
.a783	e6 05		inc $05				inc 	zTemp0+1
.a785	80 ee		bra $a775			bra 	_LPTLoop
.a787					_LPTFound:
.a787	a0 01		ldy #$01			ldy 	#1 							; start here.
.a789					_LPTShow:
.a789	b1 04		lda ($04),y			lda 	(zTemp0),y 					; get character
.a78b	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.a78d	90 06		bcc $a795			bcc 	_LPTExit
.a78f	c8		iny				iny
.a790	20 1b a2	jsr $a21b			jsr 	ExternPrint
.a793	80 f4		bra $a789			bra 	_LPTShow
.a795					_LPTExit:
.a795	7a		ply				ply
.a796	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a797					Tokenise:
.a797	da		phx				phx
.a798	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a79a					_TKSkip:
.a79a	c8		iny				iny
.a79b					_TKMainLoop:
.a79b	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and check end.
.a79d	f0 06		beq $a7a5			beq 	_TKExit
.a79f	c9 20		cmp #$20			cmp 	#" "
.a7a1	f0 f7		beq $a79a			beq 	_TKSkip
.a7a3	80 04		bra $a7a9			bra 	_TKNotEnd
.a7a5	92 06		sta ($06)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a7a7	fa		plx				plx
.a7a8	60		rts				rts
.a7a9					_TKNotEnd:
.a7a9	c9 22		cmp #$22			cmp 	#'"'
.a7ab	f0 04		beq $a7b1			beq 	_TKIsQuote
.a7ad	c9 27		cmp #$27			cmp 	#"'"
.a7af	d0 05		bne $a7b6			bne 	_TKNotQuote
.a7b1					_TKIsQuote:
.a7b1	20 cf a8	jsr $a8cf			jsr		TOKQuotedString
.a7b4	80 e5		bra $a79b			bra 	_TKMainLoop
.a7b6					_TKNotQuote:
.a7b6	98		tya				tya 								; current pos -> zTemp0
.a7b7	18		clc				clc
.a7b8	65 00		adc $00				adc 	codePtr
.a7ba	85 04		sta $04				sta 	zTemp0
.a7bc	85 00		sta $00				sta 	codePtr
.a7be	a5 01		lda $01				lda 	codePtr+1
.a7c0	69 00		adc #$00			adc 	#0
.a7c2	85 05		sta $05				sta 	zTemp0+1
.a7c4	85 01		sta $01				sta 	codePtr+1
.a7c6	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7c8	b1 00		lda ($00),y			lda 	(codePtr),y
.a7ca	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7cc	90 23		bcc $a7f1			bcc 	_TKNotNumber
.a7ce	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7d0	b0 1f		bcs $a7f1			bcs 	_TKNotNumber
.a7d2	e8		inx				inx
.a7d3	20 36 a6	jsr $a636			jsr 	IntFromString 				; convert to integer
.a7d6	48		pha				pha
.a7d7	20 a7 a8	jsr $a8a7			jsr 	TokWriteConstant 			; do constant recursively.
.a7da	7a		ply				ply
.a7db	ca		dex				dex
.a7dc	b1 00		lda ($00),y			lda 	(codePtr),y
.a7de	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7e0	d0 08		bne $a7ea			bne 	_TKIsPositive
.a7e2	c8		iny				iny									; skip it
.a7e3	a9 4b		lda #$4b			lda 	#KWD_CONSTANT_MINUS
.a7e5	20 9e a8	jsr $a89e			jsr 	TokWriteToken 				; write token out
.a7e8	80 b1		bra $a79b			bra 	_TKMainLoop 				; loop back.
.a7ea					_TKIsPositive:
.a7ea	a9 4a		lda #$4a			lda 	#KWD_CONSTANT_PLUS
.a7ec	20 9e a8	jsr $a89e			jsr 	TokWriteToken 				; write token out
.a7ef	80 aa		bra $a79b			bra 	_TKMainLoop 				; loop back.
.a7f1					_TKNotNumber:
.a7f1	a9 a5		lda #$a5			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a7f3	85 08		sta $08				sta 	zTemp2
.a7f5	a9 a0		lda #$a0			lda 	#KeywordText >> 8
.a7f7	85 09		sta $09				sta 	zTemp2+1
.a7f9	64 0a		stz $0a				stz 	zTemp3 						; clear 'best'
.a7fb	a9 10		lda #$10			lda 	#$10
.a7fd	85 0b		sta $0b				sta 	zTemp3+1 					; set current token
.a7ff					_TKSearch:
.a7ff	a0 00		ldy #$00			ldy 	#0
.a801					_TKCompare:
.a801	b1 00		lda ($00),y			lda 	(codePtr),y 	 			; get char from buffer
.a803	c8		iny				iny
.a804	d1 08		cmp ($08),y			cmp 	(zTemp2),y 					; does it match.
.a806	d0 07		bne $a80f			bne 	_TKNext
.a808	98		tya				tya
.a809	d2 08		cmp ($08)			cmp 	(zTemp2) 					; Y = length
.a80b	d0 f4		bne $a801			bne 	_TKCompare 					; found a match.
.a80d	80 13		bra $a822			bra 	_TKFound
.a80f	b2 08		lda ($08)	_TKNext:lda 	(zTemp2)					; get length
.a811	38		sec				sec 								; add length+1 to current
.a812	65 08		adc $08				adc 	zTemp2
.a814	85 08		sta $08				sta 	zTemp2
.a816	90 02		bcc $a81a			bcc 	_TKNNC
.a818	e6 09		inc $09				inc 	zTemp2+1
.a81a	e6 0b		inc $0b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a81c	b2 08		lda ($08)			lda 	(zTemp2) 					; reached then end
.a81e	d0 df		bne $a7ff			bne 	_TKSearch 					; go try again.
.a820	80 0f		bra $a831			bra 	_TKComplete
.a822					_TKFound:
.a822	98		tya				tya
.a823	c5 0a		cmp $0a				cmp 	zTemp3 						; check best
.a825	90 e8		bcc $a80f			bcc 	_TKNext 					; if < best try next
.a827	f0 e6		beq $a80f			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a829	85 0a		sta $0a				sta 	zTemp3 						; update best
.a82b	a5 0b		lda $0b				lda 	zTemp3+1 					; save current token.
.a82d	85 0c		sta $0c				sta 	zTemp4
.a82f	80 de		bra $a80f			bra 	_TKNext
.a831					_TKComplete:
.a831	a5 0a		lda $0a				lda 	zTemp3 						; get "best score"
.a833	f0 18		beq $a84d			beq		_TKTokenFail 				; if zero no match occurred
.a835	a4 0a		ldy $0a				ldy 	zTemp3 						; length in Y
.a837	b2 00		lda ($00)			lda 	(codePtr) 					; look at first character
.a839	20 8e a8	jsr $a88e			jsr 	TOKIsIdentifier 			; identifier character
.a83c	90 07		bcc $a845			bcc 	_TKOutput 					; if not, then token is okay
.a83e	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at character after
.a840	20 8e a8	jsr $a88e			jsr 	TOKIsIdentifier 			; is that an identifier
.a843	b0 08		bcs $a84d			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a845					_TKOutput:
.a845	a5 0c		lda $0c				lda 	zTemp4 						; output actual token
.a847	20 9e a8	jsr $a89e			jsr 	TOKWriteToken
.a84a	4c 9b a7	jmp $a79b			jmp 	_TKMainLoop					; go round again
.a84d					_TKTokenFail:
.a84d	a0 00		ldy #$00			ldy 	#0
.a84f	b2 00		lda ($00)			lda 	(codePtr) 					; is the first an identifier ?
.a851	20 8e a8	jsr $a88e			jsr 	TOKIsIdentifier
.a854	b0 13		bcs $a869			bcs 	_TKCopyIdent 				; if yes copy it
.a856	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>a859	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a861	4f 4b 45 4e 49 53 45 00
.a869					_TKCopyIdent:
.a869	c8		iny				iny 								; get next
.a86a	b1 00		lda ($00),y			lda 	(codePtr),y
.a86c	20 8e a8	jsr $a88e			jsr 	TOKIsIdentifier 			; if identifier
.a86f	08		php				php 								; save CS on stack
.a870	88		dey				dey 								; back to character
.a871	b1 00		lda ($00),y			lda 	(codePtr),y 				; get it
.a873	c8		iny				iny
.a874	c9 2e		cmp #$2e			cmp 	#"."
.a876	d0 02		bne $a87a			bne 	_TKNotDot
.a878	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a87a					_TKNotDot:
.a87a	38		sec				sec
.a87b	e9 41		sbc #$41			sbc		#'A'
.a87d	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a87f	28		plp				plp 								; CS if next is identifier
.a880	08		php				php
.a881	b0 02		bcs $a885			bcs 	_TKNotLast					; CC if next is not identifier
.a883	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a885					_TKNotLast:
.a885	20 9e a8	jsr $a89e			jsr 	TOKWriteToken 				; write out
.a888	28		plp				plp 								; get test result
.a889	b0 de		bcs $a869			bcs 	_TKCopyIdent 				; get the next identifier.
.a88b	4c 9b a7	jmp $a79b			jmp 	_TKMainLoop
.a88e					TOKIsIdentifier:
.a88e	c9 2e		cmp #$2e			cmp 	#"."
.a890	f0 08		beq $a89a			beq 	_TIIYes
.a892	c9 41		cmp #$41			cmp 	#"A"
.a894	90 06		bcc $a89c			bcc 	_TIINo
.a896	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a898	b0 02		bcs $a89c			bcs 	_TIINo
.a89a					_TIIYes:
.a89a	38		sec				sec
.a89b	60		rts				rts
.a89c					_TIINo:
.a89c	18		clc				clc
.a89d	60		rts				rts
.a89e					TokWriteToken:
.a89e	92 06		sta ($06)			sta 	(zTemp1)
.a8a0	e6 06		inc $06				inc 	zTemp1
.a8a2	d0 02		bne $a8a6			bne 	_TWTExit
.a8a4	e6 07		inc $07				inc 	zTemp1+1
.a8a6					_TWTExit:
.a8a6	60		rts				rts
.a8a7					TokWriteConstant:
.a8a7	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8aa	29 3f		and #$3f			and		#63
.a8ac	48		pha				pha 								; save on stack
.a8ad	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8b0	29 c0		and #$c0			and 	#$C0
.a8b2	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8b5	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8b8	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8bb	f0 0d		beq $a8ca			beq 	_TWCNoCall 					; no, don't call.
.a8bd	5a		phy				phy
.a8be	a0 06		ldy #$06			ldy 	#6
.a8c0					_TWCShift:
.a8c0	20 1c ab	jsr $ab1c			jsr 	Unary_Shr
.a8c3	88		dey				dey
.a8c4	d0 fa		bne $a8c0			bne 	_TWCShift
.a8c6	7a		ply				ply
.a8c7	20 a7 a8	jsr $a8a7			jsr 	TokWriteConstant
.a8ca					_TWCNoCall:
.a8ca	68		pla				pla
.a8cb	09 80		ora #$80			ora 	#$80						; make digit token
.a8cd	80 cf		bra $a89e			bra 	TokWriteToken 				; and write it out.
.a8cf					TokQuotedString:
.a8cf	85 08		sta $08				sta 	zTemp2 						; save quote
.a8d1	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8d3	f0 02		beq $a8d7			beq 	_TQDouble
.a8d5	a9 01		lda #$01			lda 	#1
.a8d7					_TQDouble:
.a8d7	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8d8	20 9e a8	jsr $a89e			jsr 	TOKWriteToken 				; write out
.a8db	a5 06		lda $06				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8dd	85 0a		sta $0a				sta 	zTemp3
.a8df	a5 07		lda $07				lda 	zTemp1+1
.a8e1	85 0b		sta $0b				sta 	zTemp3+1
.a8e3	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a8e5	20 9e a8	jsr $a89e			jsr 	TOKWriteToken
.a8e8					_TQLoop:
.a8e8	c8		iny				iny 								; next character
.a8e9	b1 00		lda ($00),y			lda 	(codePtr),y
.a8eb	f0 0f		beq $a8fc			beq 	_TQExit 					; if zero exit
.a8ed	c5 08		cmp $08				cmp 	zTemp2 						; matching quote
.a8ef	f0 0a		beq $a8fb			beq 	_TQSkipExit 				; skip it and exit
.a8f1	20 9e a8	jsr $a89e			jsr 	TOKWriteToken 				; write out
.a8f4	b2 0a		lda ($0a)			lda 	(zTemp3)					; inc char count
.a8f6	1a		inc a				inc 	a
.a8f7	92 0a		sta ($0a)			sta 	(zTemp3)
.a8f9	80 ed		bra $a8e8			bra 	_TQLoop						; go round
.a8fb					_TQSkipExit:
.a8fb	c8		iny				iny
.a8fc					_TQExit:
.a8fc	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a8fe	20 9e a8	jsr $a89e			jsr 	TOKWriteToken
.a901	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a902					EditProgram:
.a902	a2 00		ldx #$00			ldx 	#0
.a904	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a906	85 00		sta $00				sta 	codePtr
.a908	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a90a	85 01		sta $01				sta 	codePtr+1
.a90c	a0 00		ldy #$00			ldy 	#0
.a90e	a2 ff		ldx #$ff			ldx 	#255
.a910	20 de a2	jsr $a2de			jsr 	ExtractIntegerToTOS
.a913	98		tya				tya
.a914	18		clc				clc
.a915	65 00		adc $00				adc 	codePtr
.a917	85 00		sta $00				sta 	codePtr
.a919	90 02		bcc $a91d			bcc 	_EPNoCarry
.a91b	e6 01		inc $01				inc 	codePtr+1
.a91d					_EPNoCarry:
.a91d	20 3e a9	jsr $a93e			jsr 	EDFindLine
.a920	90 0f		bcc $a931			bcc 	_EPNotFound
.a922	a5 06		lda $06				lda 	zTemp1
.a924	48		pha				pha
.a925	a5 07		lda $07				lda 	zTemp1+1
.a927	48		pha				pha
.a928	20 75 a9	jsr $a975			jsr 	EDDeleteLine
.a92b	68		pla				pla
.a92c	85 07		sta $07				sta 	zTemp1+1
.a92e	68		pla				pla
.a92f	85 06		sta $06				sta 	zTemp1
.a931					_EPNotFound:
.a931	b2 00		lda ($00)			lda 	(codePtr)
.a933	f0 03		beq $a938			beq 	_EPNoInsert
.a935	20 9a a9	jsr $a99a			jsr 	EDInsertLine
.a938					_EPNoInsert:
.a938	20 15 a4	jsr $a415			jsr 	ResetForRun
.a93b	4c 1a a0	jmp $a01a			jmp 	WarmStart
.a93e					EDFindLine:
.a93e	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a940	85 06		sta $06				sta 	zTemp1
.a942	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a944	85 07		sta $07				sta 	zTemp1+1
.a946					_EDFLLoop:
.a946	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a948	b1 06		lda ($06),y			lda 	(zTemp1),y
.a94a	f0 25		beq $a971			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a94c	c8		iny				iny
.a94d	38		sec				sec
.a94e	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a951	f1 06		sbc ($06),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a953	aa		tax				tax	 								; this will return 10.
.a954	ad 00 0d	lda $0d00			lda 	stack1
.a957	c8		iny				iny
.a958	f1 06		sbc ($06),y			sbc 	(zTemp1),y
.a95a	90 15		bcc $a971			bcc 	_EDFLFail					; if target < current then failed.
.a95c	d0 04		bne $a962			bne 	_EDFLNext 					; if non-zero then goto next
.a95e	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a960	f0 11		beq $a973			beq 	_EDFLFound
.a962					_EDFLNext:
.a962	a0 00		ldy #$00			ldy 	#0 							; get offset
.a964	18		clc				clc
.a965	b1 06		lda ($06),y			lda 	(zTemp1),y
.a967	65 06		adc $06				adc 	zTemp1 						; add to pointer
.a969	85 06		sta $06				sta 	zTemp1
.a96b	90 d9		bcc $a946			bcc 	_EDFLLoop
.a96d	e6 07		inc $07				inc 	zTemp1+1 					; carry out.
.a96f	80 d5		bra $a946			bra 	_EDFLLoop
.a971					_EDFLFail:
.a971	18		clc				clc
.a972	60		rts				rts
.a973					_EDFLFound:
.a973	38		sec				sec
.a974	60		rts				rts
.a975					EDDeleteLine:
.a975	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a977	a2 00		ldx #$00			ldx 	#0
.a979	b1 06		lda ($06),y			lda 	(zTemp1),y
.a97b	a8		tay				tay 								; put in Y
.a97c					_EDDelLoop:
.a97c	b1 06		lda ($06),y			lda 	(zTemp1),y 					; get it
.a97e	81 06		sta ($06,x)			sta 	(zTemp1,x) 					; write it.
.a980	a5 06		lda $06				lda 	zTemp1 						; check if pointer has reached the end of
.a982	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a985	d0 07		bne $a98e			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a987	a5 07		lda $07				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a989	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a98c	f0 08		beq $a996			beq		_EDDelExit
.a98e					_EDDelNext:
.a98e	e6 06		inc $06				inc 	zTemp1 						; go to next byte.
.a990	d0 ea		bne $a97c			bne 	_EDDelLoop
.a992	e6 07		inc $07				inc 	zTemp1+1
.a994	80 e6		bra $a97c			bra 	_EDDelLoop
.a996					_EDDelExit:
.a996	20 40 a4	jsr $a440			jsr 	ResetVarMemory
.a999	60		rts				rts
.a99a					EDInsertLine:
.a99a	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a99d	85 0a		sta $0a				sta 	zTemp3
.a99f	ad 89 10	lda $1089			lda 	VarMemory+1
.a9a2	85 0b		sta $0b				sta 	zTemp3+1
.a9a4	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9a6					_EDGetLength:
.a9a6	b1 00		lda ($00),y			lda 	(codePtr),y  				; get token
.a9a8	f0 0d		beq $a9b7			beq 	_EDGotLength 				; if 0, Y is the length
.a9aa	c8		iny				iny
.a9ab	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9ad	b0 f7		bcs $a9a6			bcs 	_EDGetLength
.a9af	98		tya				tya 								; get original position
.a9b0	3a		dec a				dec 	a
.a9b1	18		clc				clc
.a9b2	71 00		adc ($00),y			adc 	(codePtr),y
.a9b4	a8		tay				tay
.a9b5	80 ef		bra $a9a6			bra 	_EDGetLength
.a9b7					_EDGotLength:
.a9b7	98		tya				tya
.a9b8	18		clc				clc
.a9b9	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9bb	48		pha				pha 								; save total size (e.g. offset)
.a9bc	85 0c		sta $0c				sta 	zTemp4 						; save for copying
.a9be	a8		tay				tay 								; in Y
.a9bf	a2 00		ldx #$00			ldx 	#0
.a9c1					_EDInsLoop:
.a9c1	a1 0a		lda ($0a,x)			lda 	(zTemp3,x)					; copy it up
.a9c3	91 0a		sta ($0a),y			sta 	(zTemp3),y
.a9c5	a5 0a		lda $0a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9c7	c5 06		cmp $06				cmp 	zTemp1
.a9c9	d0 06		bne $a9d1			bne 	_EDINextShift
.a9cb	a5 0b		lda $0b				lda 	zTemp3+1
.a9cd	c5 07		cmp $07				cmp 	zTemp1+1
.a9cf	f0 0a		beq $a9db			beq 	_EDIShiftOver
.a9d1					_EDINextShift:
.a9d1	a5 0a		lda $0a				lda 	zTemp3 					; decrement the copy pointer.
.a9d3	d0 02		bne $a9d7			bne 	_EDINoBorrow
.a9d5	c6 0b		dec $0b				dec 	zTemp3+1
.a9d7					_EDINoBorrow:
.a9d7	c6 0a		dec $0a				dec 	zTemp3
.a9d9	80 e6		bra $a9c1			bra 	_EDInsLoop
.a9db					_EDIShiftOver:
.a9db	68		pla				pla 								; this is the size + others, e.g. offset
.a9dc	a0 00		ldy #$00			ldy 	#0
.a9de	91 0a		sta ($0a),y			sta 	(zTemp3),y 					; write that out.
.a9e0	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.a9e3	c8		iny				iny
.a9e4	91 0a		sta ($0a),y			sta 	(zTemp3),y
.a9e6	ad 00 0d	lda $0d00			lda 	stack1
.a9e9	c8		iny				iny
.a9ea	91 0a		sta ($0a),y			sta 	(zTemp3),y
.a9ec	c8		iny				iny 								; where the code goes.
.a9ed	a2 00		ldx #$00			ldx 	#0 							; comes from
.a9ef					_EDICopyCode:
.a9ef	a1 00		lda ($00,x)			lda 	(codePtr,x)					; read from the current line
.a9f1	91 0a		sta ($0a),y			sta 	(zTemp3),y 					; write out
.a9f3	c8		iny				iny 								; bump pointers
.a9f4	e6 00		inc $00				inc 	codePtr
.a9f6	d0 02		bne $a9fa			bne 	_EDINoCarry
.a9f8	e6 01		inc $01				inc 	codePtr+1
.a9fa					_EDINoCarry:
.a9fa	c6 0c		dec $0c				dec 	zTemp4 						; copy data in
.a9fc	a5 0c		lda $0c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.a9fe	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa00	d0 ed		bne $a9ef			bne 	_EDICopyCode
.aa02	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa03					Stack_Empty:
.aa03	a2 00		ldx #$00			ldx 	#0
.aa05	60		rts				rts
.aa06					Stack_Drop:
.aa06	ca		dex				dex
.aa07	60		rts				rts
.aa08					Stack_Dup:
.aa08	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa0b	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa0e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa11	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa14	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa17	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa1a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa1d	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa20	e8		inx				inx 								; bump stack pointer
.aa21	60		rts				rts
.aa22					Stack_Nip:
.aa22	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa25	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa28	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa2b	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa2e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa31	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa34	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa37	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa3a	ca		dex				dex 								; drop tos
.aa3b	60		rts				rts
.aa3c					Stack_Over:
.aa3c	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa3f	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa42	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa45	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa48	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa4b	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa4e	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa51	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa54	e8		inx				inx 							; bump stack pointer
.aa55	60		rts				rts
.aa56					Stack_Swap:
.aa56	5a		phy				phy
.aa57	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa5a	a8		tay				tay
.aa5b	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa5e	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa61	98		tya				tya
.aa62	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa65	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa68	a8		tay				tay
.aa69	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa6c	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa6f	98		tya				tya
.aa70	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa73	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa76	a8		tay				tay
.aa77	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa7a	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aa7d	98		tya				tya
.aa7e	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa81	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa84	a8		tay				tay
.aa85	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa88	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aa8b	98		tya				tya
.aa8c	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa8f	7a		ply				ply
.aa90	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aa91					Unary_Absolute:
.aa91	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa94	30 01		bmi $aa97			bmi 	Unary_Negate
.aa96	60		rts				rts
.aa97					Unary_Negate:
.aa97	38		sec				sec
.aa98	a9 00		lda #$00			lda		#0
.aa9a	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aa9d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaa0	a9 00		lda #$00			lda		#0
.aaa2	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aaa5	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaa8	a9 00		lda #$00			lda		#0
.aaaa	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aaad	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aab0	a9 00		lda #$00			lda		#0
.aab2	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aab5	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aab8	60		rts				rts
.aab9					Unary_Not:
.aab9	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aabc	49 ff		eor #$ff			eor 	#$FF
.aabe	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aac1	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aac4	49 ff		eor #$ff			eor 	#$FF
.aac6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aac9	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aacc	49 ff		eor #$ff			eor 	#$FF
.aace	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aad1	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aad4	49 ff		eor #$ff			eor 	#$FF
.aad6	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aad9	60		rts				rts
.aada					Unary_Increment:
.aada	fe 00 0c	inc $0c00,x			inc 	stack0,x
.aadd	d0 0d		bne $aaec			bne 	_UIExit
.aadf	fe 00 0d	inc $0d00,x			inc 	stack1,x
.aae2	d0 08		bne $aaec			bne 	_UIExit
.aae4	fe 00 0e	inc $0e00,x			inc 	stack2,x
.aae7	d0 03		bne $aaec			bne 	_UIExit
.aae9	fe 00 0f	inc $0f00,x			inc 	stack3,x
.aaec					_UIExit:
.aaec	60		rts				rts
.aaed					Unary_Decrement:
.aaed	38		sec				sec
.aaee	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aaf1	e9 01		sbc #$01			sbc 	#1
.aaf3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aaf6	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaf9	e9 00		sbc #$00			sbc 	#0
.aafb	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aafe	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab01	e9 00		sbc #$00			sbc 	#0
.ab03	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab06	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab09	e9 00		sbc #$00			sbc 	#0
.ab0b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab0e	60		rts				rts
.ab0f					Unary_Shl:
.ab0f	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab12	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab15	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab18	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab1b	60		rts				rts
.ab1c					Unary_Shr:
.ab1c	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab1f	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab22	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab25	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab28	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab29					Mem_Peek:
.ab29	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab2c	85 04		sta $04				sta 	zTemp0
.ab2e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab31	85 05		sta $05				sta 	zTemp0+1
.ab33	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.ab35	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab38	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab3b	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab3e	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab41	60		rts				rts
.ab42					Mem_WPeek:
.ab42	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab45	85 04		sta $04				sta 	zTemp0
.ab47	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab4a	85 05		sta $05				sta 	zTemp0+1
.ab4c	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.ab4e	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab51	5a		phy				phy 								; read msb
.ab52	a0 01		ldy #$01			ldy 	#1
.ab54	b1 04		lda ($04),y			lda 	(zTemp0),y
.ab56	7a		ply				ply
.ab57	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab5a	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab5d	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab60	60		rts				rts
.ab61					Mem_DPeek:
.ab61	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab64	85 04		sta $04				sta 	zTemp0
.ab66	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab69	85 05		sta $05				sta 	zTemp0+1
.ab6b	b2 04		lda ($04)			lda 	(zTemp0)					; read byte
.ab6d	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab70	5a		phy				phy 								; read msb
.ab71	a0 01		ldy #$01			ldy 	#1
.ab73	b1 04		lda ($04),y			lda 	(zTemp0),y
.ab75	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.ab78	c8		iny				iny
.ab79	b1 04		lda ($04),y			lda 	(zTemp0),y
.ab7b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab7e	c8		iny				iny
.ab7f	b1 04		lda ($04),y			lda 	(zTemp0),y
.ab81	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab84	7a		ply				ply
.ab85	60		rts				rts
.ab86					Mem_Poke:
.ab86	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab89	85 04		sta $04				sta 	zTemp0
.ab8b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab8e	85 05		sta $05				sta 	zTemp0+1
.ab90	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.ab93	92 04		sta ($04)			sta 	(zTemp0)
.ab95	ca		dex				dex
.ab96	ca		dex				dex
.ab97	60		rts				rts
.ab98					Mem_WPoke:
.ab98	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab9b	85 04		sta $04				sta 	zTemp0
.ab9d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aba0	85 05		sta $05				sta 	zTemp0+1
.aba2	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.aba5	92 04		sta ($04)			sta 	(zTemp0)
.aba7	5a		phy				phy
.aba8	a0 01		ldy #$01			ldy 	#1
.abaa	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abad	91 04		sta ($04),y			sta 	(zTemp0),y
.abaf	7a		ply				ply
.abb0	ca		dex				dex
.abb1	ca		dex				dex
.abb2	60		rts				rts
.abb3					Mem_DPoke:
.abb3	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abb6	85 04		sta $04				sta 	zTemp0
.abb8	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abbb	85 05		sta $05				sta 	zTemp0+1
.abbd	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abc0	92 04		sta ($04)			sta 	(zTemp0)
.abc2	5a		phy				phy
.abc3	a0 01		ldy #$01			ldy 	#1
.abc5	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abc8	91 04		sta ($04),y			sta 	(zTemp0),y
.abca	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abcd	c8		iny				iny
.abce	91 04		sta ($04),y			sta 	(zTemp0),y
.abd0	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abd3	c8		iny				iny
.abd4	91 04		sta ($04),y			sta 	(zTemp0),y
.abd6	7a		ply				ply
.abd7	ca		dex				dex
.abd8	ca		dex				dex
.abd9	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.abda					Stack_Add:
.abda	ca		dex				dex
.abdb					Stack_Add_No_Dex:
.abdb	18		clc				clc
.abdc	bd 00 0c	lda $0c00,x			lda		stack0,x
.abdf	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.abe2	9d 00 0c	sta $0c00,x			sta 	stack0,x
.abe5	bd 00 0d	lda $0d00,x			lda		stack1,x
.abe8	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.abeb	9d 00 0d	sta $0d00,x			sta 	stack1,x
.abee	bd 00 0e	lda $0e00,x			lda		stack2,x
.abf1	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.abf4	9d 00 0e	sta $0e00,x			sta 	stack2,x
.abf7	bd 00 0f	lda $0f00,x			lda		stack3,x
.abfa	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.abfd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac00	60		rts				rts
.ac01					Stack_Sub:
.ac01	ca		dex				dex
.ac02	38		sec				sec
.ac03	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac06	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac09	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac0c	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac0f	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac12	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac15	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac18	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac1b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac1e	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac21	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac24	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac27	60		rts				rts
.ac28					Stack_And:
.ac28	ca		dex				dex
.ac29	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac2c	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac2f	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac32	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac35	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac38	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac3b	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac3e	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac41	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac44	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac47	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac4a	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac4d	60		rts				rts
.ac4e					Stack_Xor:
.ac4e	ca		dex				dex
.ac4f	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac52	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac55	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac58	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac5b	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac5e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac61	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac64	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac67	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac6a	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac6d	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac70	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac73	60		rts				rts
.ac74					Stack_Or:
.ac74	ca		dex				dex
.ac75	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac78	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.ac7b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac7e	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac81	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ac84	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac87	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac8a	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ac8d	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac90	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac93	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ac96	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac99	60		rts				rts
.ac9a					Stack_Shl:
.ac9a	38		sec				sec
.ac9b	80 01		bra $ac9e			bra 	StackShift
.ac9d					Stack_Shr:
.ac9d	18		clc				clc
.ac9e					StackShift:
.ac9e	08		php				php
.ac9f	ca		dex				dex
.aca0	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.aca3	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.aca5	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.aca8	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acab	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acae	d0 13		bne $acc3			bne 	_SSZero
.acb0					_SSLoop:
.acb0	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acb3	30 1a		bmi $accf			bmi 	_SSDone 					; completed ?
.acb5	28		plp				plp 								; restore flag
.acb6	08		php				php
.acb7	b0 05		bcs $acbe			bcs 	_SSLeft 					; do either shift.
.acb9	20 1c ab	jsr $ab1c			jsr 	Unary_Shr
.acbc	80 f2		bra $acb0			bra 	_SSLoop
.acbe					_SSLeft:
.acbe	20 0f ab	jsr $ab0f			jsr 	Unary_Shl
.acc1	80 ed		bra $acb0			bra 	_SSLoop
.acc3					_SSZero:
.acc3	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.acc6	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acc9	9e 00 0e	stz $0e00,x			stz 	stack2,x
.accc	9e 00 0f	stz $0f00,x			stz 	stack3,x
.accf					_SSDone:
.accf	28		plp				plp 								; throw flag.
.acd0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acd1					MulInteger32:
.acd1	ca		dex				dex
.acd2	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.acd5	85 0e		sta $0e				sta 	zLTemp1
.acd7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.acda	85 0f		sta $0f				sta 	zLTemp1+1
.acdc	bd 00 0e	lda $0e00,x			lda 	stack2,x
.acdf	85 10		sta $10				sta 	zLTemp1+2
.ace1	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ace4	85 11		sta $11				sta 	zLTemp1+3
.ace6	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ace9	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acec	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acef	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acf2					_BFMMultiply:
.acf2	a5 0e		lda $0e				lda 	zLTemp1 					; get LSBit of 8-11
.acf4	29 01		and #$01			and 	#1
.acf6	f0 03		beq $acfb			beq 	_BFMNoAdd
.acf8	20 db ab	jsr $abdb			jsr 	Stack_Add_No_Dex 			; co-opt this code
.acfb					_BFMNoAdd:
.acfb	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.acfe	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad01	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad04	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad07	46 11		lsr $11				lsr 	zLTemp1+3 					; shift +8 right
.ad09	66 10		ror $10				ror 	zLTemp1+2
.ad0b	66 0f		ror $0f				ror 	zLTemp1+1
.ad0d	66 0e		ror $0e				ror 	zLTemp1
.ad0f	a5 0e		lda $0e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad11	05 0f		ora $0f				ora 	zLTemp1+1
.ad13	05 10		ora $10				ora 	zLTemp1+2
.ad15	05 11		ora $11				ora 	zLTemp1+3
.ad17	d0 d9		bne $acf2			bne 	_BFMMultiply
.ad19	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad1a					DivInteger32:
.ad1a	ca		dex				dex
.ad1b	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad1e	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad21	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad24	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad27	d0 14		bne $ad3d			bne 	_BFDOkay
.ad29	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>ad2c	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad34	20 42 59 20 5a 45 52 4f 00
.ad3d					_BFDOkay:
.ad3d	64 0e		stz $0e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad3f	64 0f		stz $0f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad41	64 10		stz $10				stz 	zLTemp1+2
.ad43	64 11		stz $11				stz 	zLTemp1+3
.ad45	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad48	20 a3 ad	jsr $ada3			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad4b	e8		inx				inx
.ad4c	20 a3 ad	jsr $ada3			jsr 	CheckIntegerNegate
.ad4f	ca		dex				dex
.ad50	5a		phy				phy 								; Y is the counter
.ad51	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad53					_BFDLoop:
.ad53	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad56	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad59	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad5c	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad5f	26 0e		rol $0e				rol 	zLTemp1
.ad61	26 0f		rol $0f				rol 	zLTemp1+1
.ad63	26 10		rol $10				rol 	zLTemp1+2
.ad65	26 11		rol $11				rol 	zLTemp1+3
.ad67	38		sec				sec
.ad68	a5 0e		lda $0e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad6a	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad6d	48		pha				pha
.ad6e	a5 0f		lda $0f				lda 	zLTemp1+1
.ad70	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad73	48		pha				pha
.ad74	a5 10		lda $10				lda 	zLTemp1+2
.ad76	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ad79	48		pha				pha
.ad7a	a5 11		lda $11				lda 	zLTemp1+3
.ad7c	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ad7f	90 15		bcc $ad96			bcc 	_BFDNoAdd
.ad81	85 11		sta $11				sta 	zLTemp1+3 					; update A
.ad83	68		pla				pla
.ad84	85 10		sta $10				sta 	zLTemp1+2
.ad86	68		pla				pla
.ad87	85 0f		sta $0f				sta 	zLTemp1+1
.ad89	68		pla				pla
.ad8a	85 0e		sta $0e				sta 	zLTemp1+0
.ad8c	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.ad8f	09 01		ora #$01			ora 	#1
.ad91	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ad94	80 03		bra $ad99			bra 	_BFDNext
.ad96					_BFDNoAdd:
.ad96	68		pla				pla 								; Throw away the intermediate calculations
.ad97	68		pla				pla
.ad98	68		pla				pla
.ad99					_BFDNext:
.ad99	88		dey				dey
.ad9a	d0 b7		bne $ad53			bne 	_BFDLoop
.ad9c	7a		ply				ply 								; restore Y
.ad9d	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.ada0	b0 07		bcs $ada9			bcs		IntegerNegateAlways 		; negate the result
.ada2	60		rts				rts
.ada3					CheckIntegerNegate:
.ada3	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.ada6	30 01		bmi $ada9			bmi 	IntegerNegateAlways 		; if so negate it
.ada8	60		rts				rts
.ada9					IntegerNegateAlways:
.ada9	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.adac	4c 97 aa	jmp $aa97			jmp 	Unary_Negate
.adaf					ModInteger32:
.adaf	20 1a ad	jsr $ad1a			jsr 	DivInteger32
.adb2	a5 0e		lda $0e				lda 	zLTemp1
.adb4	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adb7	a5 0f		lda $0f				lda 	zLTemp1+1
.adb9	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adbc	a5 10		lda $10				lda 	zLTemp1+2
.adbe	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adc1	a5 11		lda $11				lda 	zLTemp1+3
.adc3	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adc6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adc7					Comp_Equal:
.adc7	38		sec				sec
.adc8	80 01		bra $adcb			bra 	Comp_CheckEqual
.adca					Comp_NotEqual:
.adca	18		clc				clc
.adcb					Comp_CheckEqual:
.adcb	08		php				php
.adcc	ca		dex				dex
.adcd	bd 00 0c	lda $0c00,x			lda		stack0,x
.add0	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.add3	d0 16		bne $adeb			bne 	_CCENonZero
.add5	bd 00 0d	lda $0d00,x			lda		stack1,x
.add8	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.addb	d0 0e		bne $adeb			bne 	_CCENonZero
.addd	bd 00 0e	lda $0e00,x			lda		stack2,x
.ade0	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ade3	d0 06		bne $adeb			bne 	_CCENonZero
.ade5	bd 00 0f	lda $0f00,x			lda		stack3,x
.ade8	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.adeb					_CCENonZero:
.adeb	f0 02		beq $adef			beq 	_CCENotSet
.aded	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.adef					_CCENotSet:
.adef					CompCheckFlip:
.adef	28		plp				plp 								; if carry set, we want $FF if equal
.adf0	90 02		bcc $adf4			bcc 	CompReturn
.adf2	49 ff		eor #$ff			eor 	#$FF
.adf4					CompReturn:
.adf4	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.adf7	9d 00 0d	sta $0d00,x			sta 	stack1,x
.adfa	9d 00 0e	sta $0e00,x			sta 	stack2,x
.adfd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae00	60		rts				rts
.ae01					Comp_Less:
.ae01	18		clc				clc
.ae02	80 01		bra $ae05			bra 	Comp_LessCont
.ae04					Comp_GreaterEqual:
.ae04	38		sec				sec
.ae05					Comp_LessCont:
.ae05	08		php				php
.ae06	ca		dex				dex
.ae07	38		sec				sec
.ae08	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae0b	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae0e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae11	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae14	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae17	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae1a	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae1d	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae20	50 02		bvc $ae24			bvc 	_CLNoFlip 					; unsigned -> signed
.ae22	49 80		eor #$80			eor 	#$80
.ae24					_CLNoFlip:
.ae24	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae26	f0 c7		beq $adef			beq 	CompCheckFlip
.ae28	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae2a	80 c3		bra $adef			bra 	CompCheckFlip
.ae2c					Comp_LessEqual:
.ae2c	38		sec				sec
.ae2d	80 01		bra $ae30			bra 	Comp_LessEqualCont
.ae2f					Comp_Greater:
.ae2f	18		clc				clc
.ae30					Comp_LessEqualCont:
.ae30	08		php				php
.ae31	ca		dex				dex
.ae32	38		sec				sec
.ae33	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae36	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae39	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae3c	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae3f	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae42	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae45	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae48	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae4b	50 02		bvc $ae4f			bvc 	_CLENoFlip 					; unsigned -> signed
.ae4d	49 80		eor #$80			eor 	#$80
.ae4f					_CLENoFlip:
.ae4f	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae51	f0 9c		beq $adef			beq 	CompCheckFlip
.ae53	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae55	80 98		bra $adef			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.ae57					System_RUN:
.ae57	20 15 a4	jsr $a415			jsr		ResetForRun 				; clear vars, stacks etc.
.ae5a	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; point to first thing to do.
.ae5d	4c 77 a2	jmp $a277			jmp 	Execute						; and run
.ae60					System_END:
.ae60	4c 1a a0	jmp $a01a			jmp 	WarmStart
.ae63					System_STOP:
.ae63	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>ae66	53 54 4f 50 00					.text 	"STOP",0
.ae6b					System_Assert:
.ae6b	ca		dex				dex
.ae6c	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.ae6f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ae72	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.ae75	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.ae78	d0 0a		bne $ae84			bne 	_SAOkay
.ae7a	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>ae7d	41 53 53 45 52 54 00				.text 	"ASSERT",0
.ae84	60		rts		_SAOkay:rts
.ae85					System_New:
.ae85	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.ae88	20 15 a4	jsr $a415			jsr		ResetForRun 				; clear vars, stacks etc.
.ae8b	4c 1a a0	jmp $a01a			jmp 	WarmStart
.ae8e					System_Old:
.ae8e	20 0a a4	jsr $a40a			jsr 	ResetCodePointer 			; start of first line.
.ae91					_SOFindZero:
.ae91	b1 00		lda ($00),y			lda 	(codePtr),y 				; look for trailing $00
.ae93	f0 15		beq $aeaa			beq 	_SOFoundEnd
.ae95	c8		iny				iny
.ae96	d0 f9		bne $ae91			bne 	_SOFindZero
.ae98	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>ae9b	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>aea3	45 43 4f 56 45 52 00
.aeaa					_SOFoundEnd:
.aeaa	c8		iny				iny 								; update the offset
.aeab	8c 00 11	sty $1100			sty 	ProgramStart
.aeae	20 15 a4	jsr $a415			jsr 	ResetForRun 				; redo all stacks etc.
.aeb1	60		rts				rts
.aeb2					System_Sys:
.aeb2	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.aeb5	85 04		sta $04				sta 	zTemp0
.aeb7	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aeba	85 05		sta $05				sta 	zTemp0+1
.aebc	ca		dex				dex
.aebd	da		phx				phx
.aebe	5a		phy				phy
.aebf	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.aec2	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.aec5	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.aec8	20 d7 ae	jsr $aed7			jsr 	_SSCall 					; effectively jsr (zTemp)
.aecb	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.aece	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.aed1	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.aed4	7a		ply				ply
.aed5	fa		plx				plx
.aed6	60		rts				rts
.aed7	6c 04 00	jmp ($0004)	_SSCall:jmp 	(zTemp0)
.aeda					System_ShowStack:
.aeda	da		phx				phx 								; save stack
.aedb	5a		phy				phy
.aedc	86 08		stx $08				stx 	zTemp2 						; save old TOS
.aede	a9 5b		lda #$5b			lda 	#"["
.aee0	20 1b a2	jsr $a21b			jsr 	ExternPrint
.aee3	e0 00		cpx #$00			cpx 	#0 							; empty
.aee5	f0 14		beq $aefb			beq 	_SSEnd
.aee7	a2 01		ldx #$01			ldx 	#1 							; start here
.aee9					_SSLoop:
.aee9	20 84 a5	jsr $a584			jsr 	IntegerToString 			; print TOS
.aeec	20 72 a5	jsr $a572			jsr 	ErrorPrintIntegerBuffer
.aeef	e4 08		cpx $08				cpx 	zTemp2 						; done TOS exit
.aef1	f0 08		beq $aefb			beq 	_SSEnd
.aef3	e8		inx				inx	 								; advance pointer print ,
.aef4	a9 2c		lda #$2c			lda 	#','
.aef6	20 1b a2	jsr $a21b			jsr 	ExternPrint
.aef9	80 ee		bra $aee9			bra 	_SSLoop
.aefb					_SSEnd:
.aefb	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.aefd	20 1b a2	jsr $a21b			jsr 	ExternPrint
.af00	a9 0d		lda #$0d			lda 	#13
.af02	20 1b a2	jsr $a21b			jsr 	ExternPrint
.af05	7a		ply				ply
.af06	fa		plx				plx
.af07	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.af08					Identifier:
.af08	88		dey				dey 								; wind back to identifier start
.af09	20 30 a3	jsr $a330			jsr 	IdentifierSearch 			; try to find it.
.af0c	90 2d		bcc $af3b			bcc 	_IDUnknown 					; not known, give up.
.af0e	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.af10	d0 3d		bne $af4f			bne 	IDTypeError
.af12	c8		iny		_IDSkip:iny
.af13	b1 00		lda ($00),y			lda 	(codePtr),y
.af15	c9 c0		cmp #$c0			cmp 	#$C0
.af17	b0 f9		bcs $af12			bcs 	_IDSkip
.af19	20 a2 a4	jsr $a4a2			jsr 	IndexCheck 					; check index/subscript
.af1c	5a		phy				phy
.af1d	e8		inx				inx 								; make space on stack
.af1e	a0 00		ldy #$00			ldy 	#0 							; copy it back
.af20	b1 12		lda ($12),y			lda 	(idDataAddr),y
.af22	9d 00 0c	sta $0c00,x			sta 	stack0,x
.af25	c8		iny				iny
.af26	b1 12		lda ($12),y			lda 	(idDataAddr),y
.af28	9d 00 0d	sta $0d00,x			sta 	stack1,x
.af2b	c8		iny				iny
.af2c	b1 12		lda ($12),y			lda 	(idDataAddr),y
.af2e	9d 00 0e	sta $0e00,x			sta 	stack2,x
.af31	c8		iny				iny
.af32	b1 12		lda ($12),y			lda 	(idDataAddr),y
.af34	9d 00 0f	sta $0f00,x			sta 	stack3,x
.af37	7a		ply				ply
.af38	4c 77 a2	jmp $a277			jmp 	Execute
.af3b					_IDUnknown:
.af3b	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>af3e	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>af46	56 41 52 49 41 42 4c 45 00
.af4f					IDTypeError:
.af4f	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>af52	4d 49 53 53 49 4e 47 20				.text 	"MISSING VARIABLE",0
>af5a	56 41 52 49 41 42 4c 45 00
.af63					WriteVariable:
.af63	b1 00		lda ($00),y			lda 	(codePtr),y 				; check variable
.af65	c9 c0		cmp #$c0			cmp 	#$C0
.af67	90 e6		bcc $af4f			bcc 	IDTypeError
.af69	20 30 a3	jsr $a330			jsr 	IdentifierSearch 			; does it exist
.af6c	90 06		bcc $af74			bcc 	_WVNoIdentifier
.af6e	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.af70	f0 12		beq $af84			beq 	_WVWriteTOS 				; if so write TOS to it.
.af72	80 db		bra $af4f			bra 	IDTypeError 				; not, then can't do anything.
.af74					_WVNoIdentifier:
.af74	5a		phy				phy 								; get current line number
.af75	a0 01		ldy #$01			ldy 	#1
.af77	b1 00		lda ($00),y			lda 	(codePtr),y
.af79	c8		iny				iny
.af7a	11 00		ora ($00),y			ora 	(codePtr),y
.af7c	7a		ply				ply
.af7d	f0 2d		beq $afac			beq 	_WVCantCreate 				; if zero (command line) no new vars
.af7f	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.af81	20 97 a3	jsr $a397			jsr 	IdentifierCreate 			; try to find it
.af84					_WVWriteTOS:
.af84	88		dey				dey 								; skip over identifier.
.af85					_WVSkipIdentifier:
.af85	c8		iny				iny
.af86	b1 00		lda ($00),y			lda 	(codePtr),y
.af88	c9 c0		cmp #$c0			cmp 	#$C0
.af8a	b0 f9		bcs $af85			bcs 	_WVSkipIdentifier
.af8c	20 a2 a4	jsr $a4a2			jsr 	IndexCheck 					; check index/subscript
.af8f	5a		phy				phy									; copy TOS in
.af90	a0 00		ldy #$00			ldy 	#0
.af92	bd 00 0c	lda $0c00,x			lda 	stack0,x
.af95	91 12		sta ($12),y			sta 	(idDataAddr),y
.af97	c8		iny				iny
.af98	bd 00 0d	lda $0d00,x			lda 	stack1,x
.af9b	91 12		sta ($12),y			sta 	(idDataAddr),y
.af9d	c8		iny				iny
.af9e	bd 00 0e	lda $0e00,x			lda 	stack2,x
.afa1	91 12		sta ($12),y			sta 	(idDataAddr),y
.afa3	c8		iny				iny
.afa4	bd 00 0f	lda $0f00,x			lda 	stack3,x
.afa7	91 12		sta ($12),y			sta 	(idDataAddr),y
.afa9	7a		ply				ply
.afaa	ca		dex				dex 								; drop
.afab	60		rts				rts									; go back and execute again.
.afac					_WVCantCreate:
.afac	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>afaf	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>afb7	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.afc6					Command_For:
.afc6	20 cb b0	jsr $b0cb			jsr 	StructPushCurrent 			; push current on the stack.
.afc9	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.afcc	1d 00 0d	ora $0d00,x			ora 	stack1,x
.afcf	1d 00 0e	ora $0e00,x			ora 	stack2,x
.afd2	1d 00 0f	ora $0f00,x			ora 	stack3,x
.afd5	f0 34		beq $b00b			beq 	_CFZero
.afd7	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.afda	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.afdc	c6 02		dec $02				dec 	StructSP
.afde	92 02		sta ($02)			sta 	(StructSP)
.afe0	bd 00 0e	lda $0e00,x			lda 	stack2,x
.afe3	49 ff		eor #$ff			eor 	#$FF
.afe5	c6 02		dec $02				dec 	StructSP
.afe7	92 02		sta ($02)			sta 	(StructSP)
.afe9	bd 00 0d	lda $0d00,x			lda 	stack1,x
.afec	49 ff		eor #$ff			eor 	#$FF
.afee	c6 02		dec $02				dec 	StructSP
.aff0	92 02		sta ($02)			sta 	(StructSP)
.aff2	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aff5	49 ff		eor #$ff			eor 	#$FF
.aff7	c6 02		dec $02				dec 	StructSP
.aff9	92 02		sta ($02)			sta 	(StructSP)
.affb	ca		dex				dex 								; pop stack value
.affc	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.affe	c6 02		dec $02				dec 	StructSP
.b000	92 02		sta ($02)			sta 	(StructSP)
.b002	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.b004	85 14		sta $14				sta 	ForAddr
.b006	a5 03		lda $03				lda 	StructSP+1
.b008	85 15		sta $15				sta 	ForAddr+1
.b00a	60		rts				rts
.b00b					_CFZero:
.b00b	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>b00e	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b016	54 20 5a 45 52 4f 00
.b01d					Command_Next:
.b01d	b2 02		lda ($02)			lda 	(StructSP)					; check it's FOR.
.b01f	c9 46		cmp #$46			cmp 	#STM_FOR
.b021	d0 30		bne $b053			bne 	_CNNoFor
.b023	5a		phy				phy
.b024	a0 00		ldy #$00			ldy 	#0
.b026					_CNIncrement:
.b026	c8		iny				iny
.b027	b1 02		lda ($02),y			lda 	(StructSP),y 				; increment the index
.b029	1a		inc a				inc 	a
.b02a	91 02		sta ($02),y			sta 	(StructSP),y
.b02c	f0 f8		beq $b026			beq		_CNIncrement 				; carry out.
.b02e	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b030	b1 02		lda ($02),y			lda 	(StructSP),y 				; on the last time round they
.b032	c8		iny				iny 								; will all be $FF
.b033	31 02		and ($02),y			and 	(StructSP),y
.b035	c8		iny				iny
.b036	31 02		and ($02),y			and 	(StructSP),y
.b038	c8		iny				iny
.b039	31 02		and ($02),y			and 	(StructSP),y
.b03b	7a		ply				ply 								; restore Y
.b03c	1a		inc a				inc 	a 							; so this will be zero last time round
.b03d	d0 06		bne $b045			bne 	_CNLoop 					; loop back if non-zero
.b03f	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b041	20 c5 b0	jsr $b0c5			jsr 	StructPopCount
.b044	60		rts				rts
.b045					_CNLoop:
.b045	a5 02		lda $02				lda 	StructSP 					; copy current so it can access it.
.b047	85 14		sta $14				sta 	ForAddr
.b049	a5 03		lda $03				lda 	StructSP+1
.b04b	85 15		sta $15				sta 	ForAddr+1
.b04d	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b04f	20 e3 b0	jsr $b0e3			jsr 	StructPopCurrent
.b052	60		rts				rts
.b053					_CNNoFor:
.b053	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>b056	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b05e	46 4f 52 00
.b062					Command_Index:
.b062	5a		phy				phy
.b063	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b065	e8		inx				inx
.b066	38		sec				sec
.b067	a9 fe		lda #$fe			lda 	#$FE
.b069	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.b06b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b06e	c8		iny				iny
.b06f	a9 ff		lda #$ff			lda 	#$FF
.b071	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.b073	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b076	c8		iny				iny
.b077	a9 ff		lda #$ff			lda 	#$FF
.b079	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.b07b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b07e	c8		iny				iny
.b07f	a9 ff		lda #$ff			lda 	#$FF
.b081	f1 14		sbc ($14),y			sbc 	(ForAddr),y
.b083	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b086	7a		ply				ply
.b087	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b088					Command_Repeat:
.b088	20 cb b0	jsr $b0cb			jsr 	StructPushCurrent 			; push current on the stack.
.b08b	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b08d	c6 02		dec $02				dec 	StructSP
.b08f	92 02		sta ($02)			sta 	(StructSP)
.b091	60		rts				rts
.b092					Command_Until:
.b092	b2 02		lda ($02)			lda 	(StructSP)					; check it's REPEAT
.b094	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b096	d0 1b		bne $b0b3			bne 	_CUNoRepeat
.b098	ca		dex				dex 								; pop
.b099	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b09c	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b09f	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b0a2	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b0a5	f0 06		beq $b0ad			beq 	_CULoop
.b0a7	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b0a9	20 c5 b0	jsr $b0c5			jsr 	StructPopCount
.b0ac	60		rts				rts
.b0ad					_CULoop:
.b0ad	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b0af	20 e3 b0	jsr $b0e3			jsr 	StructPopCurrent
.b0b2	60		rts				rts
.b0b3					_CUNoRepeat:
.b0b3	20 1b a5	jsr $a51b			jsr 	ErrorHandler
>b0b6	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b0be	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b0c5					StructPopCount:
.b0c5	18		clc				clc
.b0c6	65 02		adc $02				adc 	StructSP
.b0c8	85 02		sta $02				sta 	StructSP
.b0ca	60		rts				rts
.b0cb					StructPushCurrent:
.b0cb	a9 00		lda #$00			lda 	#0							; push bank
.b0cd	c6 02		dec $02				dec 	StructSP
.b0cf	92 02		sta ($02)			sta 	(StructSP)
.b0d1	98		tya				tya									; y Offset
.b0d2	c6 02		dec $02				dec 	StructSP
.b0d4	92 02		sta ($02)			sta 	(StructSP)
.b0d6	a5 01		lda $01				lda 	codePtr+1 					; codeptr high
.b0d8	c6 02		dec $02				dec 	StructSP
.b0da	92 02		sta ($02)			sta 	(StructSP)
.b0dc	a5 00		lda $00				lda 	codePtr 					; codeptr low
.b0de	c6 02		dec $02				dec 	StructSP
.b0e0	92 02		sta ($02)			sta 	(StructSP)
.b0e2	60		rts				rts
.b0e3					StructPopCurrent:
.b0e3	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr low
.b0e5	85 00		sta $00				sta 	codePtr
.b0e7	c8		iny				iny
.b0e8	b1 02		lda ($02),y			lda 	(StructSP),y 				; codeptr high
.b0ea	85 01		sta $01				sta 	codePtr+1
.b0ec	c8		iny				iny
.b0ed	b1 02		lda ($02),y			lda 	(StructSP),y				; y offset
.b0ef	a8		tay				tay
.b0f0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	08 64 00 84 4a 85 4a 00			.byte $08,$64,$00,$84,$4a,$85,$4a,$00,$08,$6e,$00,$86,$4a,$87,$4a,$00,$05,$78,$00,$33,$00,$05,$82,$00,$41,$00
>1108	08 6e 00 86 4a 87 4a 00 05 78 00 33 00 05 82 00
>1118	41 00

;******  Return to file: main.asm

>111a	00						.byte 	0

;******  End of listing
