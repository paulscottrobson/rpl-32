
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -D debug=2 -q -c -o rpl32.prg -L rpl32.lst main.asm
; Thu Oct 10 09:57:14 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					debug=2

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$a000					BuildAddress = $A000 						; build the interpreter here
=$0c00					StackAddress = $0C00 						; 1k of stack space (256 x 32 bits)
=$1000					MemoryStart = $1000 						; system memory starts here
=$9f00					MemoryEnd = $9F00 							; and ends here.
=$0bff					StructureStack = $0BFF 						; structure stack (works down to $xx00)
=$0800					ExtDataArea = $0800 						; space where non zp data goes
=$0900					InputBuffer = $0900 						; Input Buffer
=$0a00					TokeniseBuffer = $0A00						; Tokenising buffer
=16					HashTableSize = 16 							; hash tables to search.
>0010					CodePtr: 		.word ? 					; code pointer
>0012					StructSP: 		.word ?						; structure stack pointer
>0014					zTemp0:			.word ?						; temporary words
>0016					zTemp1: 		.word ?
>0018					zTemp2: 		.word ?
>001a					zTemp3: 		.word ?
>001c					zTemp4:			.word ?
>001e					zLTemp1:		.dword ?					; temporary longs
>0022					idDataAddr:		.word ? 					; data address.
>0024					ForAddr:		.byte ? 					; points to current FOR structure
>0800					SBuffer:		.fill 32 					; string buffer
>0820					SBPosition:		.byte ? 					; position in String Buffer
>0821					NumConvCount:	.byte ? 					; used in int to string
>0822					breakCount:		.byte ? 					; used to stop break firing every execution.
>0823					SignCount:		.byte ?						; sign count for divide
>0824					NumSuppress:	.byte ? 					; zero suppression flag
>0825					IFSHexFlag:		.byte ? 					; $FF if hex, $00 if dec
>1000					AZVariables:	.fill	26*4 				; 26 x 4 byte variables, which are A-Z
>1068					HashTable: 		.fill 	HashTableSize * 2 	; n x 2 links for the hash tables.
>1088	00 00				VarMemory:		.word 	0 					; next free byte available for VARIABLES (going up)
>108a	00 00				AllocMemory: 	.word 	0 					; last free byte availabel for ALLOC (going down)
=4352					ProgramStart	= MemoryStart + $100 		; where code actually goes.
=$0c00					stack0 = StackAddress
=3328					stack1 = StackAddress+256
=3584					stack2 = StackAddress+512
=3840					stack3 = StackAddress+768
="V"					IDT_VARIABLE = 'V'							; type markers for the information store.
="P"					IDT_PROCEDURE = 'P'							; standard procedure (e.g. in code)
="C"					IDT_CODEPROC = 'C'							; machine language procedure.
="F"					STM_FOR = 'F'								; structure markers (for/next)
="C"					STM_CALL = 'C'								; call & return  (& ;)
="R"					STM_REPEAT = 'R'							; repeat & until
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=5					CTH_ERROR = COL_MAGENTA
=7					CTH_TOKEN = COL_WHITE
=3					CTH_IDENT = COL_YELLOW
=10					CTH_COMMENT = COL_GREEN|COL_RVS
=5					CTH_STRING = COL_MAGENTA
=6					CTH_NUMBER = COL_CYAN
=5					CTH_LINENO = COL_MAGENTA

;******  Return to file: main.asm


;******  Processing file: macro.asm


;******  Return to file: main.asm

.0f00	4c 00 a0	jmp $a000			jmp 	Start
.a000					Start:
.a000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.a002	9a		txs				txs
.a003	20 7e a2	jsr $a27e			jsr 	ExternInitialise 			; interface setup
.a006	a2 00		ldx #$00			ldx 	#0 							; display boot message
.a008					_Display:
.a008	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a00b	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a00e	e8		inx				inx
.a00f	bd a1 a0	lda $a0a1,x			lda 	BootMessage,x
.a012	d0 f4		bne $a008			bne 	_Display
.a014	a9 00		lda #$00			lda 	#(MemoryEnd-ProgramStart) & $FF
.a016	a0 8e		ldy #$8e			ldy 	#(MemoryEnd-ProgramStart) >>8
.a018	a2 00		ldx #$00			ldx 	#0
.a01a	20 3e a6	jsr $a63e			jsr 	ErrorPrint16
.a01d	a2 00		ldx #$00			ldx 	#0 							; clear extended data area
.a01f	9e 00 08	stz $0800,x	_ClearX:stz 	ExtDataArea,x 				; this is so any library data
.a022	e8		inx				inx 								; is zeroed on start up.
.a023	d0 fa		bne $a01f			bne 	_ClearX
.a025	a9 0d		lda #$0d			lda 	#13
.a027	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a02a	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a02d	a9 9f		lda #$9f			lda 	#MemoryEnd >> 8 			; set top of memory address.
.a02f	8d 8b 10	sta $108b			sta 	AllocMemory+1
.a032	9c 8a 10	stz $108a			stz 	AllocMemory
.a035	20 4b a5	jsr $a54b			jsr 	ResetForRun
.a038	20 40 a5	jsr $a540			jsr 	ResetCodePointer
.a03b					WarmStart:
.a03b	a9 06		lda #$06			lda 	#COL_CYAN
.a03d	20 ab a2	jsr $a2ab			jsr 	ExternColour
.a040	a9 4f		lda #$4f			lda 	#"O"
.a042	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a045	a9 4b		lda #$4b			lda 	#"K"
.a047	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a04a	a9 0d		lda #$0d			lda 	#13
.a04c	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a04f					NewCommand:
.a04f	8a		txa				txa
.a050	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack colour
.a052	9a		txs				txs
.a053	aa		tax				tax
.a054	a9 07		lda #$07			lda 	#COL_WHITE
.a056	20 ab a2	jsr $a2ab			jsr 	ExternColour
.a059	20 d3 a2	jsr $a2d3			jsr 	ExternInput 				; input text
.a05c	a9 00		lda #$00			lda 	#InputBuffer & $FF 			; codePtr = input buffer
.a05e	85 10		sta $10				sta 	codePtr
.a060	a9 09		lda #$09			lda 	#InputBuffer >> 8
.a062	85 11		sta $11				sta 	codePtr+1
.a064	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF 	; zTemp1 is set up as a fake line
.a066	85 16		sta $16				sta 	zTemp1 						; with line number 0 by being
.a068	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8 	; prefixed with three zeros
.a06a	85 17		sta $17				sta 	zTemp1+1
.a06c	9c 00 0a	stz $0a00			stz 	TokeniseBuffer+0			; put in those three zeroes
.a06f	9c 01 0a	stz $0a01			stz		TokeniseBuffer+1
.a072	9c 02 0a	stz $0a02			stz 	TokeniseBuffer+2
.a075	20 ae a7	jsr $a7ae			jsr 	Tokenise
.a078	a0 00		ldy #$00			ldy 	#0 							; see what's at the start re numbers
.a07a					SkipSpaces:
.a07a	b9 00 09	lda $0900,y			lda 	InputBuffer,y
.a07d	c8		iny				iny
.a07e	c9 20		cmp #$20			cmp 	#' '
.a080	f0 f8		beq $a07a			beq 	SkipSpaces
.a082	c9 30		cmp #$30			cmp 	#'0'
.a084	90 0e		bcc $a094			bcc 	ExecuteCLI
.a086	c9 3a		cmp #$3a			cmp 	#'9'+1
.a088	b0 0a		bcs $a094			bcs 	ExecuteCLI
.a08a	ad 00 09	lda $0900			lda 	InputBuffer
.a08d	c9 20		cmp #$20			cmp 	#' '
.a08f	f0 03		beq $a094			beq 	ExecuteCLI
.a091	4c 1f a9	jmp $a91f			jmp		EditProgram
.a094					ExecuteCLI:
.a094	a9 00		lda #$00			lda 	#TokeniseBuffer & 255 		; set tokenise buffer as faux line
.a096	85 10		sta $10				sta 	codePtr
.a098	a9 0a		lda #$0a			lda 	#TokeniseBuffer >> 8
.a09a	85 11		sta $11				sta 	codePtr+1
.a09c	a0 03		ldy #$03			ldy 	#3
.a09e	4c 86 a3	jmp $a386			jmp 	Execute 					; and run it
.a0a1					BootMessage:

;******  Processing file: generated/bootmessage.inc

>a0a1	2a 2a 2a 2a 20 52 50 4c			.byte $2a,$2a,$2a,$2a,$20,$52,$50,$4c,$2f,$33,$32,$20,$49,$4e,$54,$45,$52,$50,$52,$45,$54,$45,$52,$20,$2a,$2a,$2a,$2a,$0d,$0d,$57,$52,$49,$54,$54,$45,$4e,$20,$42,$59,$20,$50,$41,$55,$4c,$20,$52,$4f,$42,$53,$4f,$4e,$20,$32,$30,$31,$39,$0d,$0d,$42,$55,$49,$4c,$44,$3a,$37,$20,$44,$41,$54,$45,$3a,$31,$30,$2d,$4f,$43,$54,$2d,$32,$30,$31,$39,$0d,$0d,$4d,$45,$4d,$4f,$52,$59,$20,$41,$56,$41,$49,$4c,$41,$42,$4c,$45,$20,$00
>a0a9	2f 33 32 20 49 4e 54 45 52 50 52 45 54 45 52 20
>a0b9	2a 2a 2a 2a 0d 0d 57 52 49 54 54 45 4e 20 42 59
>a0c9	20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32 30 31
>a0d9	39 0d 0d 42 55 49 4c 44 3a 37 20 44 41 54 45 3a
>a0e9	31 30 2d 4f 43 54 2d 32 30 31 39 0d 0d 4d 45 4d
>a0f9	4f 52 59 20 41 56 41 49 4c 41 42 4c 45 20 00

;******  Return to file: main.asm


;******  Processing file: generated/tables.inc

.a108					KeywordText:
>a108	01 21					.byte $01,$21                          ; $10 !
>a10a	01 2a					.byte $01,$2a                          ; $11 *
>a10c	01 2b					.byte $01,$2b                          ; $12 +
>a10e	02 2b 2b				.byte $02,$2b,$2b                      ; $13 ++
>a111	01 2d					.byte $01,$2d                          ; $14 -
>a113	02 2d 2d				.byte $02,$2d,$2d                      ; $15 --
>a116	01 2e					.byte $01,$2e                          ; $16 .
>a118	01 2f					.byte $01,$2f                          ; $17 /
>a11a	01 3b					.byte $01,$3b                          ; $18 ;
>a11c	01 3c					.byte $01,$3c                          ; $19 <
>a11e	02 3c 3c				.byte $02,$3c,$3c                      ; $1a <<
>a121	02 3c 3d				.byte $02,$3c,$3d                      ; $1b <=
>a124	02 3c 3e				.byte $02,$3c,$3e                      ; $1c <>
>a127	01 3d					.byte $01,$3d                          ; $1d =
>a129	01 3e					.byte $01,$3e                          ; $1e >
>a12b	02 3e 3d				.byte $02,$3e,$3d                      ; $1f >=
>a12e	02 3e 3e				.byte $02,$3e,$3e                      ; $20 >>
>a131	01 40					.byte $01,$40                          ; $21 @
>a133	03 41 42 53				.byte $03,$41,$42,$53                  ; $22 ABS
>a137	05 41 4c 4c 4f 43			.byte $05,$41,$4c,$4c,$4f,$43          ; $23 ALLOC
>a13d	03 41 4e 44				.byte $03,$41,$4e,$44                  ; $24 AND
>a141	06 41 53 53 45 52 54			.byte $06,$41,$53,$53,$45,$52,$54      ; $25 ASSERT
>a148	02 43 21				.byte $02,$43,$21                      ; $26 C!
>a14b	02 43 40				.byte $02,$43,$40                      ; $27 C@
>a14e	03 43 4c 52				.byte $03,$43,$4c,$52                  ; $28 CLR
>a152	03 44 45 46				.byte $03,$44,$45,$46                  ; $29 DEF
>a156	04 44 52 4f 50				.byte $04,$44,$52,$4f,$50              ; $2a DROP
>a15b	03 44 55 50				.byte $03,$44,$55,$50                  ; $2b DUP
>a15f	04 45 4c 53 45				.byte $04,$45,$4c,$53,$45              ; $2c ELSE
>a164	03 45 4e 44				.byte $03,$45,$4e,$44                  ; $2d END
>a168	05 45 4e 44 49 46			.byte $05,$45,$4e,$44,$49,$46          ; $2e ENDIF
>a16e	03 46 4f 52				.byte $03,$46,$4f,$52                  ; $2f FOR
>a172	02 49 46				.byte $02,$49,$46                      ; $30 IF
>a175	05 49 4e 44 45 58			.byte $05,$49,$4e,$44,$45,$58          ; $31 INDEX
>a17b	04 4c 49 53 54				.byte $04,$4c,$49,$53,$54              ; $32 LIST
>a180	04 4c 4f 41 44				.byte $04,$4c,$4f,$41,$44              ; $33 LOAD
>a185	03 4d 4f 44				.byte $03,$4d,$4f,$44                  ; $34 MOD
>a189	06 4e 45 47 41 54 45			.byte $06,$4e,$45,$47,$41,$54,$45      ; $35 NEGATE
>a190	03 4e 45 57				.byte $03,$4e,$45,$57                  ; $36 NEW
>a194	04 4e 45 58 54				.byte $04,$4e,$45,$58,$54              ; $37 NEXT
>a199	03 4e 49 50				.byte $03,$4e,$49,$50                  ; $38 NIP
>a19d	03 4e 4f 54				.byte $03,$4e,$4f,$54                  ; $39 NOT
>a1a1	03 4f 4c 44				.byte $03,$4f,$4c,$44                  ; $3a OLD
>a1a5	02 4f 52				.byte $02,$4f,$52                      ; $3b OR
>a1a8	04 4f 56 45 52				.byte $04,$4f,$56,$45,$52              ; $3c OVER
>a1ad	08 52 45 4e 55 4d 42 45			.byte $08,$52,$45,$4e,$55,$4d,$42,$45,$52 ; $3d RENUMBER
>a1b5	52
>a1b6	06 52 45 50 45 41 54			.byte $06,$52,$45,$50,$45,$41,$54      ; $3e REPEAT
>a1bd	06 52 45 54 55 52 4e			.byte $06,$52,$45,$54,$55,$52,$4e      ; $3f RETURN
>a1c4	03 52 55 4e				.byte $03,$52,$55,$4e                  ; $40 RUN
>a1c8	04 53 41 56 45				.byte $04,$53,$41,$56,$45              ; $41 SAVE
>a1cd	03 53 48 4c				.byte $03,$53,$48,$4c                  ; $42 SHL
>a1d1	03 53 48 52				.byte $03,$53,$48,$52                  ; $43 SHR
>a1d5	04 53 54 4f 50				.byte $04,$53,$54,$4f,$50              ; $44 STOP
>a1da	04 53 57 41 50				.byte $04,$53,$57,$41,$50              ; $45 SWAP
>a1df	03 53 59 53				.byte $03,$53,$59,$53                  ; $46 SYS
>a1e3	05 55 4e 54 49 4c			.byte $05,$55,$4e,$54,$49,$4c          ; $47 UNTIL
>a1e9	02 57 21				.byte $02,$57,$21                      ; $48 W!
>a1ec	02 57 40				.byte $02,$57,$40                      ; $49 W@
>a1ef	03 58 4f 52				.byte $03,$58,$4f,$52                  ; $4a XOR
>a1f3	01 5b					.byte $01,$5b                          ; $4b [
>a1f5	01 5d					.byte $01,$5d                          ; $4c ]
>a1f7	01 5e					.byte $01,$5e                          ; $4d ^
>a1f9	01 2b					.byte $01,$2b                          ; $4e {+}
>a1fb	01 2d					.byte $01,$2d                          ; $4f {-}
>a1fd	00					.byte $00
.a1fe					KeywordVectorTable:
>a1fe	db ab					.word Mem_DPoke                        ; $10 !
>a200	f9 ac					.word MulInteger32                     ; $11 *
>a202	02 ac					.word Stack_Add                        ; $12 +
>a204	02 ab					.word Unary_Increment                  ; $13 ++
>a206	29 ac					.word Stack_Sub                        ; $14 -
>a208	15 ab					.word Unary_Decrement                  ; $15 --
>a20a	ae b0					.word System_ShowStack                 ; $16 .
>a20c	42 ad					.word DivInteger32                     ; $17 /
>a20e	9a b1					.word ProcReturn                       ; $18 ;
>a210	29 ae					.word Comp_Less                        ; $19 <
>a212	37 ab					.word Unary_Shl                        ; $1a <<
>a214	54 ae					.word Comp_LessEqual                   ; $1b <=
>a216	f2 ad					.word Comp_NotEqual                    ; $1c <>
>a218	ef ad					.word Comp_Equal                       ; $1d =
>a21a	57 ae					.word Comp_Greater                     ; $1e >
>a21c	2c ae					.word Comp_GreaterEqual                ; $1f >=
>a21e	44 ab					.word Unary_Shr                        ; $20 >>
>a220	89 ab					.word Mem_DPeek                        ; $21 @
>a222	b9 aa					.word Unary_Absolute                   ; $22 ABS
>a224	7f ae					.word Allocate                         ; $23 ALLOC
>a226	50 ac					.word Stack_And                        ; $24 AND
>a228	3f b0					.word System_Assert                    ; $25 ASSERT
>a22a	ae ab					.word Mem_Poke                         ; $26 C!
>a22c	51 ab					.word Mem_Peek                         ; $27 C@
>a22e	2b aa					.word Stack_Empty                      ; $28 CLR
>a230	d9 a5					.word SyntaxError                      ; $29 DEF
>a232	2e aa					.word Stack_Drop                       ; $2a DROP
>a234	30 aa					.word Stack_Dup                        ; $2b DUP
>a236	b0 b2					.word Struct_ELSE                      ; $2c ELSE
>a238	34 b0					.word System_END                       ; $2d END
>a23a	b5 b2					.word Struct_ENDIF                     ; $2e ENDIF
>a23c	d1 b2					.word Command_For                      ; $2f FOR
>a23e	9b b2					.word Struct_IF                        ; $30 IF
>a240	6d b3					.word Command_Index                    ; $31 INDEX
>a242	bf ae					.word Cmd_List                         ; $32 LIST
>a244	e6 b0					.word System_Load                      ; $33 LOAD
>a246	d7 ad					.word ModInteger32                     ; $34 MOD
>a248	bf aa					.word Unary_Negate                     ; $35 NEGATE
>a24a	59 b0					.word System_New                       ; $36 NEW
>a24c	28 b3					.word Command_Next                     ; $37 NEXT
>a24e	4a aa					.word Stack_Nip                        ; $38 NIP
>a250	e1 aa					.word Unary_Not                        ; $39 NOT
>a252	62 b0					.word System_Old                       ; $3a OLD
>a254	9c ac					.word Stack_Or                         ; $3b OR
>a256	64 aa					.word Stack_Over                       ; $3c OVER
>a258	f3 af					.word Cmd_Renumber                     ; $3d RENUMBER
>a25a	93 b3					.word Command_Repeat                   ; $3e REPEAT
>a25c	9a b1					.word ProcReturn2                      ; $3f RETURN
>a25e	2b b0					.word System_RUN                       ; $40 RUN
>a260	dc b0					.word System_Save                      ; $41 SAVE
>a262	c2 ac					.word Stack_Shl                        ; $42 SHL
>a264	c5 ac					.word Stack_Shr                        ; $43 SHR
>a266	37 b0					.word System_STOP                      ; $44 STOP
>a268	7e aa					.word Stack_Swap                       ; $45 SWAP
>a26a	86 b0					.word System_Sys                       ; $46 SYS
>a26c	9d b3					.word Command_Until                    ; $47 UNTIL
>a26e	c0 ab					.word Mem_WPoke                        ; $48 W!
>a270	6a ab					.word Mem_WPeek                        ; $49 W@
>a272	76 ac					.word Stack_Xor                        ; $4a XOR
>a274	d9 a5					.word SyntaxError                      ; $4b [
>a276	d9 a5					.word SyntaxError                      ; $4c ]
>a278	a9 b1					.word WriteVariable                    ; $4d ^
>a27a	d9 a5					.word SyntaxError                      ; $4e {+}
>a27c	d9 a5					.word SyntaxError                      ; $4f {-}
=$10					KWD_PLING = $10                  ; $10 !
=$11					KWD_ASTERISK = $11               ; $11 *
=$12					KWD_PLUS = $12                   ; $12 +
=$13					KWD_PLUSPLUS = $13               ; $13 ++
=$14					KWD_MINUS = $14                  ; $14 -
=$15					KWD_MINUSMINUS = $15             ; $15 --
=$16					KWD_DOT = $16                    ; $16 .
=$17					KWD_SLASH = $17                  ; $17 /
=$18					KWD_SEMICOLON = $18              ; $18 ;
=$19					KWD_LESS = $19                   ; $19 <
=$1a					KWD_LESSLESS = $1a               ; $1a <<
=$1b					KWD_LESSEQUAL = $1b              ; $1b <=
=$1c					KWD_LESSGREATER = $1c            ; $1c <>
=$1d					KWD_EQUAL = $1d                  ; $1d =
=$1e					KWD_GREATER = $1e                ; $1e >
=$1f					KWD_GREATEREQUAL = $1f           ; $1f >=
=$20					KWD_GREATERGREATER = $20         ; $20 >>
=$21					KWD_AT = $21                     ; $21 @
=$22					KWD_ABS = $22                    ; $22 ABS
=$23					KWD_ALLOC = $23                  ; $23 ALLOC
=$24					KWD_AND = $24                    ; $24 AND
=$25					KWD_ASSERT = $25                 ; $25 ASSERT
=$26					KWD_CPLING = $26                 ; $26 C!
=$27					KWD_CAT = $27                    ; $27 C@
=$28					KWD_CLR = $28                    ; $28 CLR
=$29					KWD_DEF = $29                    ; $29 DEF
=$2a					KWD_DROP = $2a                   ; $2a DROP
=$2b					KWD_DUP = $2b                    ; $2b DUP
=$2c					KWD_ELSE = $2c                   ; $2c ELSE
=$2d					KWD_END = $2d                    ; $2d END
=$2e					KWD_ENDIF = $2e                  ; $2e ENDIF
=$2f					KWD_FOR = $2f                    ; $2f FOR
=$30					KWD_IF = $30                     ; $30 IF
=$31					KWD_INDEX = $31                  ; $31 INDEX
=$32					KWD_LIST = $32                   ; $32 LIST
=$33					KWD_LOAD = $33                   ; $33 LOAD
=$34					KWD_MOD = $34                    ; $34 MOD
=$35					KWD_NEGATE = $35                 ; $35 NEGATE
=$36					KWD_NEW = $36                    ; $36 NEW
=$37					KWD_NEXT = $37                   ; $37 NEXT
=$38					KWD_NIP = $38                    ; $38 NIP
=$39					KWD_NOT = $39                    ; $39 NOT
=$3a					KWD_OLD = $3a                    ; $3a OLD
=$3b					KWD_OR = $3b                     ; $3b OR
=$3c					KWD_OVER = $3c                   ; $3c OVER
=$3d					KWD_RENUMBER = $3d               ; $3d RENUMBER
=$3e					KWD_REPEAT = $3e                 ; $3e REPEAT
=$3f					KWD_RETURN = $3f                 ; $3f RETURN
=$40					KWD_RUN = $40                    ; $40 RUN
=$41					KWD_SAVE = $41                   ; $41 SAVE
=$42					KWD_SHL = $42                    ; $42 SHL
=$43					KWD_SHR = $43                    ; $43 SHR
=$44					KWD_STOP = $44                   ; $44 STOP
=$45					KWD_SWAP = $45                   ; $45 SWAP
=$46					KWD_SYS = $46                    ; $46 SYS
=$47					KWD_UNTIL = $47                  ; $47 UNTIL
=$48					KWD_WPLING = $48                 ; $48 W!
=$49					KWD_WAT = $49                    ; $49 W@
=$4a					KWD_XOR = $4a                    ; $4a XOR
=$4b					KWD_LSQPAREN = $4b               ; $4b [
=$4c					KWD_RSQPAREN = $4c               ; $4c ]
=$4d					KWD_HAT = $4d                    ; $4d ^
=$4e					KWD_CONSTANT_PLUS = $4e          ; $4e {+}
=$4f					KWD_CONSTANT_MINUS = $4f         ; $4f {-}

;******  Return to file: main.asm


;******  Processing file: system/extern.asm

.a27e					ExternInitialise:
.a27e	a9 07		lda #$07			lda 	#$07 						; set colour
.a280	8d 86 02	sta $0286			sta 	646
.a283	a9 93		lda #$93			lda 	#147 						; clear screen
.a285	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a288	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.a28a	4c ab a2	jmp $a2ab			jmp 	ExternColour
.a28d					ExternCheckBreak:
.a28d	da		phx				phx 								; make sure we keep XY
.a28e	5a		phy				phy
.a28f	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.a292	f0 03		beq $a297			beq		_ECBExit 					; stopped
.a294	7a		ply				ply 								; restore and exit.
.a295	fa		plx				plx
.a296	60		rts				rts
.a297					_ECBExit:
.a297	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a29a	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.a2a1					ExternPrint:
.a2a1	48		pha				pha
.a2a2	da		phx				phx
.a2a3	5a		phy				phy
.a2a4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2a7	7a		ply				ply
.a2a8	fa		plx				plx
.a2a9	68		pla				pla
.a2aa	60		rts				rts
.a2ab					ExternColour:
.a2ab	48		pha				pha
.a2ac	da		phx				phx
.a2ad	48		pha				pha
.a2ae	29 08		and #$08			and 	#8
.a2b0	0a		asl a				asl 	a
.a2b1	0a		asl a				asl 	a
.a2b2	0a		asl a				asl 	a
.a2b3	0a		asl a				asl 	a
.a2b4	49 92		eor #$92			eor 	#$92
.a2b6	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a2b9	a9 0e		lda #$0e			lda 	#14							; lower case
.a2bb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a2be	68		pla				pla
.a2bf	29 07		and #$07			and 	#7
.a2c1	aa		tax				tax
.a2c2	bd cb a2	lda $a2cb,x			lda 	_ECTable,x
.a2c5	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a2c8	fa		plx				plx
.a2c9	68		pla				pla
.a2ca	60		rts				rts
.a2cb					_ECTable:
>a2cb	90						.byte 	144
>a2cc	1c						.byte 	28
>a2cd	1e						.byte 	30
>a2ce	9e						.byte 	158
>a2cf	1f						.byte 	31
>a2d0	9c						.byte 	156
>a2d1	9f						.byte 	159
>a2d2	05						.byte 	5
.a2d3					ExternInput:
.a2d3	a9 00		lda #$00			lda 	#(InputBuffer & $FF)
.a2d5	85 14		sta $14				sta 	zTemp0
.a2d7	a9 09		lda #$09			lda 	#(InputBuffer >> 8)
.a2d9	85 15		sta $15				sta 	zTemp0+1
.a2db	a9 07		lda #$07			lda 	#COL_WHITE
.a2dd	20 ab a2	jsr $a2ab			jsr 	ExternColour
.a2e0	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.a2e3	29 7f		and #$7f			and 	#$7F
.a2e5	c9 0d		cmp #$0d			cmp 	#13
.a2e7	f0 0a		beq $a2f3			beq 	_EIExit
.a2e9	92 14		sta ($14)			sta 	(zTemp0)
.a2eb	e6 14		inc $14				inc 	zTemp0
.a2ed	d0 f1		bne $a2e0			bne 	_EIRead
.a2ef	e6 15		inc $15				inc 	zTemp0+1
.a2f1	80 ed		bra $a2e0			bra 	_EIRead
.a2f3	a9 00		lda #$00	_EIExit:lda 	#0
.a2f5	92 14		sta ($14)			sta 	(zTemp0)
.a2f7	a9 0d		lda #$0d			lda 	#13
.a2f9	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a2fc	60		rts				rts
.a2fd					ExternSave:
.a2fd	da		phx				phx
.a2fe	5a		phy				phy
.a2ff	20 67 a3	jsr $a367			jsr 	EXGetLength 				; get length of file into A
.a302	a6 14		ldx $14				ldx 	zTemp0
.a304	a4 15		ldy $15				ldy 	zTemp0+1
.a306	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a309	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a30b	a0 00		ldy #$00			ldy 	#0
.a30d	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a310	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; start address
.a312	85 c1		sta $c1				sta 	$C1
.a314	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a316	85 c2		sta $c2				sta 	$C2
.a318	ae 88 10	ldx $1088			ldx 	VarMemory 					; end address
.a31b	ac 89 10	ldy $1089			ldy 	VarMemory+1
.a31e	a9 c1		lda #$c1			lda 	#$C1
.a320	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.a323	b0 03		bcs $a328			bcs 	_ESSave
.a325	7a		ply				ply
.a326	fa		plx				plx
.a327	60		rts				rts
.a328					_ESSave:
.a328	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a32b	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>a333	4c 45 44 00
.a337					ExternLoad:
.a337	da		phx				phx
.a338	5a		phy				phy
.a339	20 67 a3	jsr $a367			jsr 	EXGetLength 				; get length of file into A
.a33c	a6 14		ldx $14				ldx 	zTemp0
.a33e	a4 15		ldy $15				ldy 	zTemp0+1
.a340	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.a343	a2 01		ldx #$01			ldx 	#1	 						; device #8
.a345	a0 00		ldy #$00			ldy 	#0
.a347	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.a34a	a2 00		ldx #$00			ldx 	#ProgramStart & $FF 		; start address
.a34c	a0 11		ldy #$11			ldy 	#ProgramStart >> 8
.a34e	a9 00		lda #$00			lda 	#0 							; load command
.a350	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.a353	b0 03		bcs $a358			bcs 	_ESLoad
.a355	7a		ply				ply
.a356	fa		plx				plx
.a357	60		rts				rts
.a358					_ESLoad:
.a358	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a35b	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>a363	4c 45 44 00
.a367					EXGetLength:
.a367	a0 ff		ldy #$ff			ldy 	#255
.a369	c8		iny		_EXGL:	iny
.a36a	b1 14		lda ($14),y			lda 	(zTemp0),y
.a36c	d0 fb		bne $a369			bne 	_EXGL
.a36e	98		tya				tya
.a36f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/execute.asm

.a370					EXNextLine:
.a370	b2 10		lda ($10)			lda 	(codePtr) 					; is it run from the buffer (offset 0)
.a372	f0 0f		beq $a383			beq 	_EXNLWarmStart
.a374	18		clc				clc 								; advance code pointer to next line
.a375	65 10		adc $10				adc 	codePtr
.a377	85 10		sta $10				sta 	codePtr
.a379	90 02		bcc $a37d			bcc 	_EXNLNoBump
.a37b	e6 11		inc $11				inc 	codePtr+1
.a37d					_EXNLNoBump:
.a37d	a0 03		ldy #$03			ldy 	#3 							; position in that line
.a37f	b2 10		lda ($10)			lda 	(codePtr) 					; read offset
.a381	d0 03		bne $a386			bne 	Execute 					; not end of program
.a383					_EXNLWarmStart:
.a383	4c 34 b0	jmp $b034			jmp 	System_END
.a386	e0 fc		cpx #$fc	Execute:cpx 	#$FC  						; stack overflow
.a388	b0 1c		bcs $a3a6			bcs 	EXStackOverflow
.a38a	ee 22 08	inc $0822			inc 	BreakCount 					; break occasionally. too slow otherwise.
.a38d	d0 03		bne $a392			bne 	_EXNoBreak
.a38f	20 8d a2	jsr $a28d			jsr 	ExternCheckBreak
.a392					_EXNoBreak:
.a392	b1 10		lda ($10),y			lda 	(codePtr),y 				; load the character
.a394	f0 da		beq $a370			beq 	EXNextLine 					; reached end of the line.
.a396	c8		iny				iny 								; advance pointer.
.a397	c9 10		cmp #$10			cmp 	#$10 						; is it 01-0F, which means a string/comment ?
.a399	90 3b		bcc $a3d6			bcc 	EXStringComment
.a39b	c9 80		cmp #$80			cmp 	#$80 						; if it 10-7F, token
.a39d	90 21		bcc $a3c0			bcc 	EXTokenExecute
.a39f	c9 c0		cmp #$c0			cmp 	#$C0 						; is it a numeric constant 80-BF
.a3a1	90 17		bcc $a3ba			bcc 	EXPushConstant
.a3a3	4c 1d b1	jmp $b11d			jmp 	Identifier 					; it's an identifier C0-FF
.a3a6					EXStackOverflow:
.a3a6	a2 00		ldx #$00			ldx 	#0 							; stack error clears stack otherwise doesn't work.
.a3a8	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a3ab	53 54 41 43 4b 20 4f 56				.text 	"STACK OVERFLOW",0
>a3b3	45 52 46 4c 4f 57 00
.a3ba					EXPushConstant:
.a3ba	88		dey				dey
.a3bb	20 05 a4	jsr $a405			jsr 	ExtractIntegerToTOS 		; extract integer
.a3be	80 c6		bra $a386			bra 	Execute
.a3c0					EXTokenExecute:
.a3c0	0a		asl a				asl 	a 							; double token, also clears carry
.a3c1	da		phx				phx 								; save X, put token x 2 in X
.a3c2	aa		tax				tax
.a3c3	bd de a1	lda $a1de,x			lda 	KeywordVectorTable-$20,x 	; copy vector. The -$20 is because the tokens
.a3c6	85 14		sta $14				sta 	zTemp0 						; start at $10.
.a3c8	bd df a1	lda $a1df,x			lda 	KeywordVectorTable-$20+1,x
.a3cb	85 15		sta $15				sta 	zTemp0+1
.a3cd	fa		plx				plx 								; restore X
.a3ce	20 d3 a3	jsr $a3d3			jsr 	_EXTCall 					; call the routine
.a3d1	80 b3		bra $a386			bra 	Execute
.a3d3					_EXTCall:
.a3d3	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.a3d6					EXStringComment:
.a3d6	c9 02		cmp #$02			cmp 	#$02 						; 02 is the token for single quoted string
.a3d8	f0 15		beq $a3ef			beq 	EXStringSkip 				; (comment), so just skip it.
.a3da	e8		inx				inx 								; push Y + 1 + codePtr on the stack
.a3db	98		tya				tya
.a3dc	38		sec				sec
.a3dd	65 10		adc $10				adc 	codePtr
.a3df	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a3e2	a5 11		lda $11				lda 	codePtr+1
.a3e4	69 00		adc #$00			adc 	#0
.a3e6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a3e9	9e 00 0e	stz $0e00,x			stz 	stack2,x 					; clear the upper 2 bytes.
.a3ec	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a3ef					EXStringSkip:
.a3ef	98		tya				tya 								; the current position in A
.a3f0	18		clc				clc
.a3f1	71 10		adc ($10),y			adc 	(codePtr),y					; add the total length
.a3f3	a8		tay				tay 			 					; and make that the current position.
.a3f4	88		dey				dey 								; back one because of the initial skip
.a3f5	80 8f		bra $a386			bra 	Execute
.a3f7					EXShiftTOSRight:
.a3f7	4a		lsr a				lsr 	a
.a3f8	7e 00 0f	ror $0f00,x			ror 	stack3,x
.a3fb	7e 00 0e	ror $0e00,x			ror 	stack2,x
.a3fe	7e 00 0d	ror $0d00,x			ror 	stack1,x
.a401	7e 00 0c	ror $0c00,x			ror 	stack0,x
.a404	60		rts				rts
.a405					ExtractIntegerToTOS:
.a405	b1 10		lda ($10),y			lda 	(codePtr),y
.a407	c8		iny				iny
.a408	e8		inx				inx 								; make stack space
.a409	29 3f		and #$3f			and 	#$3F 						; to start with, it's just that value
.a40b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a40e	9e 00 0d	stz $0d00,x			stz 	stack1,x
.a411	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a414	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a417					_EXConstantLoop:
.a417	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at next ?
.a419	29 c0		and #$c0			and 	#$C0 						; in range 80-FF e.g. 10xx xxxx
.a41b	c9 80		cmp #$80			cmp 	#$80
.a41d	d0 2d		bne $a44c			bne		_EXDone 					; no then exit
.a41f	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; put the MSB in A
.a422	48		pha				pha
.a423	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; shift every byte up one, e.g. x 256
.a426	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a429	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a42c	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a42f	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a432	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a435	9e 00 0c	stz $0c00,x			stz 	stack0,x
.a438	68		pla				pla
.a439	20 f7 a3	jsr $a3f7			jsr 	EXShiftTOSRight 				; shift the whole A:Top of Stack right twice
.a43c	20 f7 a3	jsr $a3f7			jsr 	EXShiftTOSRight				; which will be x64
.a43f	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and skip constant shift
.a441	c8		iny				iny
.a442	29 3f		and #$3f			and 	#$3F
.a444	1d 00 0c	ora $0c00,x			ora 	stack0,x 					; or into low byte
.a447	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a44a	80 cb		bra $a417			bra 	_EXConstantLoop
.a44c	b1 10		lda ($10),y	_EXDone:lda 	(codePtr),y
.a44e	c8		iny				iny 								; skip over unary constant + -
.a44f	c9 4f		cmp #$4f			cmp 	#KWD_CONSTANT_MINUS
.a451	d0 03		bne $a456			bne 	_EXPositive
.a453	4c bf aa	jmp $aabf			jmp 	Unary_Negate
.a456					_EXPositive:
.a456	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/identifier.asm

.a457					IdentifierSearch:
.a457	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first character
.a459	c9 e0		cmp #$e0			cmp 	#$E0 						; is it a fast var ?
.a45b	90 12		bcc $a46f			bcc 	_ISSlow
.a45d	c9 fa		cmp #$fa			cmp 	#$F9+1
.a45f	b0 0e		bcs $a46f			bcs 	_ISSlow
.a461	29 1f		and #$1f			and 	#$1F 						; index, then x 4
.a463	0a		asl a				asl 	a
.a464	0a		asl a				asl		a
.a465	85 22		sta $22				sta 	idDataAddr					; set up addres
.a467	a9 10		lda #$10			lda 	#AZVariables >> 8
.a469	85 23		sta $23				sta 	idDataAddr+1
.a46b	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; type
.a46d	38		sec				sec 								; return with CS.
.a46e	60		rts				rts
.a46f					_ISSlow:
.a46f	20 2b a5	jsr $a52b			jsr 	IdentifierSetupHashPtr 		; set up hash table.
.a472	98		tya				tya 								; set (zTemp1) to point to the
.a473	18		clc				clc 	 							; identifier to be searched.
.a474	65 10		adc $10				adc 	codePtr
.a476	85 16		sta $16				sta 	zTemp1
.a478	a5 11		lda $11				lda 	codePtr+1
.a47a	69 00		adc #$00			adc 	#0
.a47c	85 17		sta $17				sta 	zTemp1+1
.a47e	5a		phy				phy 								; save Y
.a47f	b2 14		lda ($14)	_ISLoop:lda 	(zTemp0)					; follow link
.a481	48		pha				pha
.a482	a0 01		ldy #$01			ldy 	#1
.a484	b1 14		lda ($14),y			lda 	(zTemp0),y
.a486	85 15		sta $15				sta 	zTemp0+1
.a488	68		pla				pla
.a489	85 14		sta $14				sta 	zTemp0
.a48b	05 15		ora $15				ora 	zTemp0+1 					; if zero, then fail.
.a48d	f0 2c		beq $a4bb			beq 	_ISFail
.a48f	a0 06		ldy #$06			ldy 	#6 							; copy name into zTemp2
.a491	b1 14		lda ($14),y			lda 	(zTemp0),y
.a493	85 18		sta $18				sta 	zTemp2
.a495	c8		iny				iny
.a496	b1 14		lda ($14),y			lda 	(zTemp0),y
.a498	85 19		sta $19				sta 	zTemp2+1
.a49a	a0 00		ldy #$00			ldy 	#0 							; compare names at zTemp1/zTemp2
.a49c					_ISCompare:
.a49c	b1 16		lda ($16),y			lda 	(zTemp1),y
.a49e	d1 18		cmp ($18),y			cmp 	(zTemp2),y
.a4a0	d0 dd		bne $a47f			bne		_ISLoop 					; different ?
.a4a2	c8		iny				iny
.a4a3	c9 e0		cmp #$e0			cmp 	#$E0 						; until end identifiers matched.
.a4a5	90 f5		bcc $a49c			bcc 	_ISCompare
.a4a7	18		clc				clc 								; set up the data pointer
.a4a8	a5 14		lda $14				lda 	zTemp0
.a4aa	69 02		adc #$02			adc 	#2
.a4ac	85 22		sta $22				sta 	idDataAddr
.a4ae	a5 15		lda $15				lda 	zTemp0+1
.a4b0	69 00		adc #$00			adc		#0
.a4b2	85 23		sta $23				sta 	idDataAddr+1
.a4b4	a0 09		ldy #$09			ldy 	#9 							; get the type
.a4b6	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4b8	7a		ply				ply
.a4b9	38		sec				sec
.a4ba	60		rts				rts
.a4bb					_ISFail:
.a4bb	7a		ply				ply
.a4bc	18		clc				clc
.a4bd	60		rts				rts
.a4be					IdentifierCreate:
.a4be	5a		phy				phy 								; save Y
.a4bf	48		pha				pha 								; save type on stack
.a4c0	20 2b a5	jsr $a52b			jsr 	IdentifierSetUpHashPtr 		; zTemp0 = address of table.
.a4c3	ad 88 10	lda $1088			lda 	VarMemory 					; copy VarMemory to zTemp1
.a4c6	85 16		sta $16				sta 	zTemp1
.a4c8	ad 89 10	lda $1089			lda 	VarMemory+1
.a4cb	85 17		sta $17				sta 	zTemp1+1
.a4cd	5a		phy				phy 								; save Y (code offset)
.a4ce	a0 00		ldy #$00			ldy 	#0 							; copy next link in.
.a4d0	b1 14		lda ($14),y			lda 	(zTemp0),y 					; +0,+1 is the link.
.a4d2	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d4	c8		iny				iny
.a4d5	b1 14		lda ($14),y			lda 	(zTemp0),y
.a4d7	91 16		sta ($16),y			sta 	(zTemp1),y
.a4d9	c8		iny				iny
.a4da					_IDCErase:
.a4da	a9 00		lda #$00			lda 	#0
.a4dc	91 16		sta ($16),y			sta 	(zTemp1),y
.a4de	c8		iny				iny
.a4df	c0 06		cpy #$06			cpy 	#6
.a4e1	d0 f7		bne $a4da			bne 	_IDCErase
.a4e3	68		pla				pla 								; original Y
.a4e4	18		clc				clc
.a4e5	65 10		adc $10				adc		codePtr 					; address of identifier +6,+7
.a4e7	91 16		sta ($16),y			sta 	(zTemp1),y
.a4e9	c8		iny				iny
.a4ea	a5 11		lda $11				lda 	codePtr+1
.a4ec	69 00		adc #$00			adc 	#0
.a4ee	91 16		sta ($16),y			sta 	(zTemp1),y
.a4f0	c8		iny				iny
.a4f1	a9 00		lda #$00			lda 	#0 							; +8 bank (0)
.a4f3	91 16		sta ($16),y			sta 	(zTemp1),y
.a4f5	68		pla				pla 								; restore type
.a4f6	c8		iny				iny
.a4f7	91 16		sta ($16),y			sta 	(zTemp1),y 					; store at +9
.a4f9	c8		iny				iny
.a4fa	98		tya				tya									; add offset to VarMemory
.a4fb	18		clc				clc
.a4fc	6d 88 10	adc $1088			adc 	VarMemory
.a4ff	8d 88 10	sta $1088			sta 	VarMemory
.a502	ad 89 10	lda $1089			lda 	VarMemory+1
.a505	69 00		adc #$00			adc 	#0
.a507	8d 89 10	sta $1089			sta 	VarMemory+1
.a50a	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; in the same page as allocated ?
.a50d	f0 19		beq $a528			beq 	_IDCMemory
.a50f	a5 16		lda $16				lda 	zTemp1 						; overwrite hash table entry
.a511	92 14		sta ($14)			sta 	(zTemp0)
.a513	a0 01		ldy #$01			ldy 	#1
.a515	a5 17		lda $17				lda 	zTemp1+1
.a517	91 14		sta ($14),y			sta 	(zTemp0),y
.a519	a5 16		lda $16				lda 	zTemp1 						; set up idDataAddr
.a51b	18		clc				clc
.a51c	69 02		adc #$02			adc 	#2
.a51e	85 22		sta $22				sta 	idDataAddr
.a520	a5 17		lda $17				lda 	zTemp1+1
.a522	69 00		adc #$00			adc 	#0
.a524	85 23		sta $23				sta 	idDataAddr+1
.a526	7a		ply				ply 								; restore Y and exit
.a527	60		rts				rts
.a528					_IDCMemory:
.a528	4c e9 a5	jmp $a5e9			jmp 	OutOfMemoryError
.a52b					IdentifierSetUpHashPtr:
.a52b	5a		phy				phy
.a52c					_ISPLoop:
.a52c	b1 10		lda ($10),y			lda 	(codePtr),y 				; get the last identifier character
.a52e	c8		iny				iny
.a52f	c9 e0		cmp #$e0			cmp 	#$E0
.a531	90 f9		bcc $a52c			bcc 	_ISPLoop
.a533	29 0f		and #$0f			and 	#(HashTableSize-1)			; convert to a hash index
.a535	0a		asl a				asl 	a 							; convert to an offset, clc
.a536	69 68		adc #$68			adc 	#(HashTable & $FF)			; set zTemp0 to point to hashTable entry
.a538	85 14		sta $14				sta 	zTemp0
.a53a	a9 10		lda #$10			lda 	#(HashTable >> 8) 			; assumes table in one page
.a53c	85 15		sta $15				sta 	zTemp0+1
.a53e	7a		ply				ply
.a53f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/reset.asm

.a540					ResetCodePointer:
.a540	48		pha				pha
.a541	a9 11		lda #$11			lda 	#ProgramStart >> 8 			; set up line pointer
.a543	85 11		sta $11				sta 	codePtr+1
.a545	64 10		stz $10				stz 	codePtr
.a547	a0 03		ldy #$03			ldy 	#3 							; point to first piece of code
.a549	68		pla				pla
.a54a	60		rts				rts
.a54b					ResetForRun:
.a54b	48		pha				pha
.a54c	5a		phy				phy
.a54d	a2 00		ldx #$00			ldx 	#0 							; erase the hash table
.a54f					_RRErase:
.a54f	bd e5 b4	lda $b4e5,x			lda 	DefaultHashTable,x
.a552	9d 68 10	sta $1068,x			sta		HashTable,x
.a555	e8		inx				inx
.a556	e0 20		cpx #$20			cpx 	#HashTableSize * 2
.a558	d0 f5		bne $a54f			bne 	_RRErase
.a55a	20 71 a5	jsr $a571			jsr 	ResetVarMemory
.a55d	a9 ff		lda #$ff			lda 	#StructureStack & $FF
.a55f	85 12		sta $12				sta 	StructSP
.a561	a9 0b		lda #$0b			lda 	#StructureStack >> 8
.a563	85 13		sta $13				sta 	StructSP+1
.a565	a9 ff		lda #$ff			lda 	#$FF 						; put a value that will fail structure tests
.a567	92 12		sta ($12)			sta 	(StructSP)
.a569	20 98 a5	jsr $a598			jsr 	ProcedureScan
.a56c	a2 00		ldx #$00			ldx 	#0 							; empty the stack
.a56e	7a		ply				ply
.a56f	68		pla				pla
.a570	60		rts				rts
.a571					ResetVarMemory:
.a571	a9 00		lda #$00			lda 	#ProgramStart & $FF
.a573	85 14		sta $14				sta 	zTemp0
.a575	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a577	85 15		sta $15				sta 	zTemp0+1
.a579					_RRFindEnd:
.a579	b2 14		lda ($14)			lda 	(zTemp0)					; at end ?
.a57b	f0 0b		beq $a588			beq 	_RRFoundEnd
.a57d	18		clc				clc 								; no, add offset to pointer.
.a57e	65 14		adc $14				adc 	zTemp0
.a580	85 14		sta $14				sta 	zTemp0
.a582	90 f5		bcc $a579			bcc 	_RRFindEnd
.a584	e6 15		inc $15				inc 	zTemp0+1
.a586	80 f1		bra $a579			bra 	_RRFindEnd
.a588					_RRFoundEnd:
.a588	18		clc				clc 								; add 1 to this, as it points to the last
.a589	a5 14		lda $14				lda 	zTemp0 					; offset, and store in Variable Memory pointer
.a58b	69 01		adc #$01			adc 	#1
.a58d	8d 88 10	sta $1088			sta 	VarMemory
.a590	a5 15		lda $15				lda 	zTemp0+1
.a592	69 00		adc #$00			adc 	#0
.a594	8d 89 10	sta $1089			sta 	VarMemory+1
.a597	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/scan.asm

.a598					ProcedureScan:
.a598	20 40 a5	jsr $a540			jsr 	ResetCodePointer 			; reset the code pointer.
.a59b	b2 10		lda ($10)	_PSMain:lda 	(codePtr)					; check if end
.a59d	f0 39		beq $a5d8			beq 	_PSExit
.a59f	a0 03		ldy #$03			ldy 	#3 							; start of line
.a5a1	b1 10		lda ($10),y			lda 	(codePtr),y 				; skip over spaces
.a5a3	c9 29		cmp #$29			cmp 	#KWD_DEF 					; first thing is DEF ?
.a5a5	d0 24		bne $a5cb			bne 	_PSNext
.a5a7	c8		iny				iny 								; skip over def first
.a5a8	b1 10		lda ($10),y			lda 	(codePtr),y 				; next, must be C0-DF - a multi char ID
.a5aa	29 e0		and #$e0			and 	#$E0
.a5ac	c9 c0		cmp #$c0			cmp 	#$C0
.a5ae	d0 1b		bne $a5cb			bne 	_PSNext 					; otherwise ignore it.
.a5b0	a9 50		lda #$50			lda 	#IDT_PROCEDURE 				; create a procedure
.a5b2	20 be a4	jsr $a4be			jsr 	IdentifierCreate
.a5b5					_PSSkipIdentifier:
.a5b5	b1 10		lda ($10),y			lda 	(codePtr),y
.a5b7	c9 e0		cmp #$e0			cmp 	#$E0
.a5b9	c8		iny				iny
.a5ba	90 f9		bcc $a5b5			bcc 	_PSSkipIdentifier
.a5bc	98		tya				tya  								; save the address in the data slot.
.a5bd	a0 03		ldy #$03			ldy 	#3
.a5bf	91 22		sta ($22),y			sta 	(idDataAddr),y 				; offset
.a5c1	a5 10		lda $10				lda 	codePtr
.a5c3	92 22		sta ($22)			sta 	(idDataAddr) 				; position.low
.a5c5	a5 11		lda $11				lda 	codePtr+1
.a5c7	a0 01		ldy #$01			ldy 	#1
.a5c9	91 22		sta ($22),y			sta 	(idDataAddr),y 				; position.high
.a5cb					_PSNext:
.a5cb	18		clc				clc 								; go to next
.a5cc	b2 10		lda ($10)			lda 	(codePtr)
.a5ce	65 10		adc $10				adc 	codePtr
.a5d0	85 10		sta $10				sta 	codeptr
.a5d2	90 c7		bcc $a59b			bcc 	_PSMain
.a5d4	e6 11		inc $11				inc 	codePtr+1
.a5d6	80 c3		bra $a59b			bra 	_PSMain
.a5d8					_PSExit:
.a5d8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/error.asm

.a5d9					SyntaxError:
.a5d9	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a5dc	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>a5e4	52 52 4f 52 00
.a5e9					OutOfMemoryError:
.a5e9	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a5ec	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>a5f4	45 4d 4f 52 59 00
.a5fa					ErrorHandler:
.a5fa	68		pla				pla 								; pop message address
.a5fb	85 14		sta $14				sta 	zTemp0
.a5fd	68		pla				pla
.a5fe	85 15		sta $15				sta 	zTemp0+1
.a600	a9 05		lda #$05			lda 	#CTH_ERROR
.a602	20 ab a2	jsr $a2ab			jsr 	ExternColour
.a605	a0 01		ldy #$01			ldy 	#1 							; print it
.a607					_ErrorPrint:
.a607	b1 14		lda ($14),y			lda 	(zTemp0),y
.a609	20 a1 a2	jsr $a2a1			jsr		ExternPrint
.a60c	c8		iny				iny
.a60d	b1 14		lda ($14),y			lda 	(zTemp0),y
.a60f	d0 f6		bne $a607			bne 	_ErrorPrint
.a611	a0 01		ldy #$01			ldy 	#1 							; check if line# 0
.a613	b1 10		lda ($10),y			lda		(codePtr),y
.a615	c8		iny				iny
.a616	12 10		ora ($10)			ora 	(codePtr)
.a618	f0 1c		beq $a636			beq 	_ErrorNoLine 				; if so, skip
.a61a	a9 20		lda #$20			lda 	#32
.a61c	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a61f	a9 40		lda #$40			lda 	#'@'
.a621	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a624	a9 20		lda #$20			lda 	#32
.a626	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a629	a0 01		ldy #$01			ldy 	#1 							; load current line into YA
.a62b	b1 10		lda ($10),y			lda 	(codePtr),y
.a62d	48		pha				pha
.a62e	c8		iny				iny
.a62f	b1 10		lda ($10),y			lda 	(codePtr),y
.a631	a8		tay				tay
.a632	68		pla				pla
.a633	20 3e a6	jsr $a63e			jsr 	ErrorPrint16 				; print YA as unsigned 16 bit integer.
.a636					_ErrorNoLine:
.a636	a9 0d		lda #$0d			lda 	#13							; new line
.a638	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a63b	4c 3b a0	jmp $a03b			jmp 	WarmStart
.a63e					ErrorPrint16:
.a63e	da		phx				phx
.a63f	e8		inx				inx 								; space on stack
.a640	9d 00 0c	sta $0c00,x			sta 	stack0,x					; save on TOS
.a643	98		tya				tya
.a644	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a647	9e 00 0e	stz $0e00,x			stz 	stack2,x
.a64a	9e 00 0f	stz $0f00,x			stz 	stack3,x
.a64d	20 63 a6	jsr $a663			jsr 	IntegerToString 			; convert to string.
.a650	fa		plx				plx
.a651					ErrorPrintIntegerBuffer:
.a651	da		phx				phx
.a652	a2 00		ldx #$00			ldx 	#0
.a654					_EP16Loop:
.a654	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a657	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.a65a	e8		inx				inx
.a65b	bd 00 08	lda $0800,x			lda 	SBuffer,x
.a65e	d0 f4		bne $a654			bne 	_EP16Loop
.a660	8a		txa				txa
.a661	fa		plx				plx
.a662	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/inttostr.asm

.a663					IntegerToString:
.a663	48		pha				pha
.a664	5a		phy				phy
.a665	bd 00 0c	lda $0c00,x			lda 	stack0,x
.a668	48		pha				pha
.a669	bd 00 0d	lda $0d00,x			lda 	stack1,x
.a66c	48		pha				pha
.a66d	bd 00 0e	lda $0e00,x			lda 	stack2,x
.a670	48		pha				pha
.a671	bd 00 0f	lda $0f00,x			lda 	stack3,x
.a674	48		pha				pha
.a675	bd 00 0f	lda $0f00,x			lda 		stack3,x 				; check -ve
.a678	10 08		bpl $a682			bpl 		_ITSNotMinus
.a67a	a9 2d		lda #$2d			lda 		#"-"
.a67c	20 24 a7	jsr $a724			jsr 		ITSOutputCharacter
.a67f	20 bf aa	jsr $aabf			jsr 		Unary_Negate
.a682					_ITSNotMinus:
.a682	9c 20 08	stz $0820			stz 		SBPosition 				; reset string buffer position
.a685	9c 24 08	stz $0824			stz 		NumSuppress 			; clear zero suppression flag
.a688	8a		txa				txa 								; use Y for the integer index.
.a689	a8		tay				tay
.a68a	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.a68c					_ITSNextSubtractor:
.a68c	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.a68e	8d 21 08	sta $0821			sta 		NumConvCount
.a691					_ITSSubtract:
.a691	38		sec				sec
.a692	b9 00 0c	lda $0c00,y			lda 		stack0,y 			; subtract number and push on stack
.a695	fd 00 a7	sbc $a700,x			sbc 		_ITSSubtractors+0,x 	; only update if actually can subtract it.
.a698	48		pha				pha
.a699	b9 00 0d	lda $0d00,y			lda 		stack1,y
.a69c	fd 01 a7	sbc $a701,x			sbc 		_ITSSubtractors+1,x
.a69f	48		pha				pha
.a6a0	b9 00 0e	lda $0e00,y			lda 		stack2,y
.a6a3	fd 02 a7	sbc $a702,x			sbc 		_ITSSubtractors+2,x
.a6a6	48		pha				pha
.a6a7	b9 00 0f	lda $0f00,y			lda 		stack3,y
.a6aa	fd 03 a7	sbc $a703,x			sbc 		_ITSSubtractors+3,x
.a6ad	90 14		bcc $a6c3			bcc 		_ITSCantSubtract 		; if CC, then gone too far, can't subtract
.a6af	99 00 0f	sta $0f00,y			sta 		stack3,y 		; save subtract off stack as it's okay
.a6b2	68		pla				pla
.a6b3	99 00 0e	sta $0e00,y			sta 		stack2,y
.a6b6	68		pla				pla
.a6b7	99 00 0d	sta $0d00,y			sta 		stack1,y
.a6ba	68		pla				pla
.a6bb	99 00 0c	sta $0c00,y			sta 		stack0,y
.a6be	ee 21 08	inc $0821			inc 		NumConvCount 			; bump count.
.a6c1	80 ce		bra $a691			bra 		_ITSSubtract 			; go round again.
.a6c3					_ITSCantSubtract:
.a6c3	68		pla				pla 								; throw away interim answers
.a6c4	68		pla				pla 								; (the subtraction that failed)
.a6c5	68		pla				pla
.a6c6	ad 21 08	lda $0821			lda 		NumConvCount 			; if not zero then no suppression check
.a6c9	c9 30		cmp #$30			cmp 		#"0"
.a6cb	d0 05		bne $a6d2			bne 		_ITSOutputDigit
.a6cd	ad 24 08	lda $0824			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.a6d0	f0 09		beq $a6db			beq	 		_ITSGoNextSubtractor
.a6d2					_ITSOutputDigit:
.a6d2	ce 24 08	dec $0824			dec 		NumSuppress 			; suppression check will be non-zero from now on.
.a6d5	ad 21 08	lda $0821			lda 		NumConvCount 			; count of subtractions
.a6d8	20 24 a7	jsr $a724			jsr 		ITSOutputCharacter 		; output it.
.a6db					_ITSGoNextSubtractor:
.a6db	e8		inx				inx 								; next dword in subtractor table.
.a6dc	e8		inx				inx
.a6dd	e8		inx				inx
.a6de	e8		inx				inx
.a6df	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.a6e1	d0 a9		bne $a68c			bne 		_ITSNextSubtractor 		; do all the subtractors.
.a6e3	98		tya				tya 								; X is back as the mantissa index
.a6e4	aa		tax				tax
.a6e5	bd 00 0c	lda $0c00,x			lda 		stack0,x 		; and the last digit is left.
.a6e8	09 30		ora #$30			ora 		#"0"
.a6ea	20 24 a7	jsr $a724			jsr 		ITSOutputCharacter
.a6ed	68		pla				pla
.a6ee	9d 00 0f	sta $0f00,x			sta 	stack3,x
.a6f1	68		pla				pla
.a6f2	9d 00 0e	sta $0e00,x			sta 	stack2,x
.a6f5	68		pla				pla
.a6f6	9d 00 0d	sta $0d00,x			sta 	stack1,x
.a6f9	68		pla				pla
.a6fa	9d 00 0c	sta $0c00,x			sta 	stack0,x
.a6fd	7a		ply				ply 								; and exit
.a6fe	68		pla				pla
.a6ff	60		rts				rts
.a700					_ITSSubtractors:
>a700	00 ca 9a 3b					.dword 		1000000000
>a704	00 e1 f5 05					.dword 		100000000
>a708	80 96 98 00					.dword 		10000000
>a70c	40 42 0f 00					.dword 		1000000
>a710	a0 86 01 00					.dword 		100000
>a714	10 27 00 00					.dword 		10000
>a718	e8 03 00 00					.dword 		1000
>a71c	64 00 00 00					.dword 		100
>a720	0a 00 00 00					.dword 		10
.a724					_ITSSubtractorsEnd:
.a724					ITSOutputCharacter:
.a724	48		pha				pha
.a725	da		phx				phx
.a726	ae 20 08	ldx $0820			ldx 	SBPosition 					; save digit
.a729	9d 00 08	sta $0800,x			sta 	SBuffer,x
.a72c	9e 01 08	stz $0801,x			stz 	SBuffer+1,x
.a72f	ee 20 08	inc $0820			inc 	SBPosition					; bump pointer.
.a732	fa		plx				plx
.a733	68		pla				pla
.a734	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/intfromstr.asm

.a735					IntFromString:
.a735	a0 00		ldy #$00			ldy 	#0 							; from (zTemp0)
.a737	8c 25 08	sty $0825			sty 	IFSHexFlag
.a73a	b2 14		lda ($14)			lda 	(zTemp0)					; check &
.a73c	c9 26		cmp #$26			cmp 	#"&"
.a73e	d0 04		bne $a744			bne 	_IFSNotHex
.a740	ce 25 08	dec $0825			dec 	IFSHexFlag 					; hex flag = $FF
.a743	c8		iny				iny 								; skip
.a744					_IFSNotHex:
.a744	e8		inx				inx 								; space on stack
.a745	20 a1 a7	jsr $a7a1			jsr 	IFSClearTOS
.a748					_IFSLoop:
.a748	ad 25 08	lda $0825			lda 	IFSHexFlag 					; check in hex mode ?
.a74b	f0 0a		beq $a757			beq 	_IFSDecOnly
.a74d	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a74f	c9 41		cmp #$41			cmp 	#"A"
.a751	90 04		bcc $a757			bcc 	_IFSDecOnly
.a753	c9 47		cmp #$47			cmp 	#"F"+1
.a755	90 0a		bcc $a761			bcc 	_IFSOkDigit
.a757					_IFSDecOnly:
.a757	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get next
.a759	c9 30		cmp #$30			cmp 	#"0"						; validate it as range 0-9
.a75b	90 3e		bcc $a79b			bcc 	_IFSExit
.a75d	c9 3a		cmp #$3a			cmp 	#"9"+1
.a75f	b0 3a		bcs $a79b			bcs 	_IFSExit
.a761					_IFSOkDigit:
.a761	ad 25 08	lda $0825			lda 	IFSHexFlag
.a764	d0 11		bne $a777			bne 	_IFSHexShift
.a766	20 30 aa	jsr $aa30			jsr 	Stack_Dup 					; duplicate tos
.a769	20 37 ab	jsr $ab37			jsr 	Unary_Shl	 				; x 2
.a76c	20 37 ab	jsr $ab37			jsr 	Unary_Shl 					; x 4
.a76f	20 02 ac	jsr $ac02			jsr 	Stack_Add 					; x 5
.a772	20 37 ab	jsr $ab37			jsr 	Unary_Shl 					; x 10
.a775	80 0c		bra $a783			bra 	_IFSAddIn
.a777					_IFSHexShift:
.a777	20 37 ab	jsr $ab37			jsr 	Unary_Shl	 				; x 2
.a77a	20 37 ab	jsr $ab37			jsr 	Unary_Shl	 				; x 4
.a77d	20 37 ab	jsr $ab37			jsr 	Unary_Shl	 				; x 8
.a780	20 37 ab	jsr $ab37			jsr 	Unary_Shl	 				; x 16
.a783					_IFSAddIn:
.a783	e8		inx				inx  								; create space next up
.a784	20 a1 a7	jsr $a7a1			jsr 	IFSClearTOS
.a787	b1 14		lda ($14),y			lda 	(zTemp0),y 					; add digit
.a789	c9 41		cmp #$41			cmp 	#"A"
.a78b	90 03		bcc $a790			bcc 	_IFSDec
.a78d	38		sec				sec 								; hex fixup.
.a78e	e9 07		sbc #$07			sbc 	#7
.a790					_IFSDec:
.a790	29 0f		and #$0f			and 	#15
.a792	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; tos is new add
.a795	20 02 ac	jsr $ac02			jsr 	Stack_Add 					; add to tos
.a798	c8		iny				iny
.a799	80 ad		bra $a748			bra 	_IFSLoop
.a79b					_IFSExit:
.a79b	98		tya				tya
.a79c	38		sec				sec
.a79d	f0 01		beq $a7a0			beq 	_IFSSkipFail
.a79f	18		clc				clc
.a7a0					_IFSSkipFail:
.a7a0	60		rts				rts
.a7a1					IFSClearTOS:
.a7a1	9e 00 0c	stz $0c00,x			stz		stack0,x
.a7a4	9e 00 0d	stz $0d00,x			stz		stack1,x
.a7a7	9e 00 0e	stz $0e00,x			stz		stack2,x
.a7aa	9e 00 0f	stz $0f00,x			stz		stack3,x
.a7ad	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/tokeniser.asm

.a7ae					Tokenise:
.a7ae	da		phx				phx
.a7af	a0 ff		ldy #$ff			ldy 	#255 						; predecrement
.a7b1					_TKSkip:
.a7b1	c8		iny				iny
.a7b2					_TKMainLoop:
.a7b2	b1 10		lda ($10),y			lda 	(codePtr),y 				; get and check end.
.a7b4	f0 06		beq $a7bc			beq 	_TKExit
.a7b6	c9 20		cmp #$20			cmp 	#" "
.a7b8	f0 f7		beq $a7b1			beq 	_TKSkip
.a7ba	80 04		bra $a7c0			bra 	_TKNotEnd
.a7bc	92 16		sta ($16)	_TKExit:sta 	(zTemp1) 					; and ending $00
.a7be	fa		plx				plx
.a7bf	60		rts				rts
.a7c0					_TKNotEnd:
.a7c0	c9 22		cmp #$22			cmp 	#'"'
.a7c2	f0 04		beq $a7c8			beq 	_TKIsQuote
.a7c4	c9 27		cmp #$27			cmp 	#"'"
.a7c6	d0 05		bne $a7cd			bne 	_TKNotQuote
.a7c8					_TKIsQuote:
.a7c8	20 ec a8	jsr $a8ec			jsr		TOKQuotedString
.a7cb	80 e5		bra $a7b2			bra 	_TKMainLoop
.a7cd					_TKNotQuote:
.a7cd	98		tya				tya 								; current pos -> zTemp0
.a7ce	18		clc				clc
.a7cf	65 10		adc $10				adc 	codePtr
.a7d1	85 14		sta $14				sta 	zTemp0
.a7d3	85 10		sta $10				sta 	codePtr
.a7d5	a5 11		lda $11				lda 	codePtr+1
.a7d7	69 00		adc #$00			adc 	#0
.a7d9	85 15		sta $15				sta 	zTemp0+1
.a7db	85 11		sta $11				sta 	codePtr+1
.a7dd	a0 00		ldy #$00			ldy 	#0 							; reset and get character
.a7df	b1 10		lda ($10),y			lda 	(codePtr),y
.a7e1	c9 26		cmp #$26			cmp 	#"&"						; hex marker
.a7e3	f0 08		beq $a7ed			beq 	_TKIsNumber
.a7e5	c9 30		cmp #$30			cmp 	#"0"						; check for decimal.
.a7e7	90 23		bcc $a80c			bcc 	_TKNotNumber
.a7e9	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7eb	b0 1f		bcs $a80c			bcs 	_TKNotNumber
.a7ed					_TKIsNumber:
.a7ed	e8		inx				inx
.a7ee	20 35 a7	jsr $a735			jsr 	IntFromString 				; convert to integer
.a7f1	48		pha				pha
.a7f2	20 c4 a8	jsr $a8c4			jsr 	TokWriteConstant 			; do constant recursively.
.a7f5	7a		ply				ply
.a7f6	ca		dex				dex
.a7f7	b1 10		lda ($10),y			lda 	(codePtr),y
.a7f9	c9 2d		cmp #$2d			cmp 	#"-"						; followed by minus
.a7fb	d0 08		bne $a805			bne 	_TKIsPositive
.a7fd	c8		iny				iny									; skip it
.a7fe	a9 4f		lda #$4f			lda 	#KWD_CONSTANT_MINUS
.a800	20 bb a8	jsr $a8bb			jsr 	TokWriteToken 				; write token out
.a803	80 ad		bra $a7b2			bra 	_TKMainLoop 				; loop back.
.a805					_TKIsPositive:
.a805	a9 4e		lda #$4e			lda 	#KWD_CONSTANT_PLUS
.a807	20 bb a8	jsr $a8bb			jsr 	TokWriteToken 				; write token out
.a80a	80 a6		bra $a7b2			bra 	_TKMainLoop 				; loop back.
.a80c					_TKNotNumber:
.a80c	a9 08		lda #$08			lda 	#KeywordText & $FF 			; zTemp2 -> token table
.a80e	85 18		sta $18				sta 	zTemp2
.a810	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.a812	85 19		sta $19				sta 	zTemp2+1
.a814	64 1a		stz $1a				stz 	zTemp3 						; clear 'best'
.a816	a9 10		lda #$10			lda 	#$10
.a818	85 1b		sta $1b				sta 	zTemp3+1 					; set current token
.a81a					_TKSearch:
.a81a	a0 00		ldy #$00			ldy 	#0
.a81c					_TKCompare:
.a81c	b1 10		lda ($10),y			lda 	(codePtr),y 	 			; get char from buffer
.a81e	c8		iny				iny
.a81f	d1 18		cmp ($18),y			cmp 	(zTemp2),y 					; does it match.
.a821	d0 07		bne $a82a			bne 	_TKNext
.a823	98		tya				tya
.a824	d2 18		cmp ($18)			cmp 	(zTemp2) 					; Y = length
.a826	d0 f4		bne $a81c			bne 	_TKCompare 					; found a match.
.a828	80 13		bra $a83d			bra 	_TKFound
.a82a	b2 18		lda ($18)	_TKNext:lda 	(zTemp2)					; get length
.a82c	38		sec				sec 								; add length+1 to current
.a82d	65 18		adc $18				adc 	zTemp2
.a82f	85 18		sta $18				sta 	zTemp2
.a831	90 02		bcc $a835			bcc 	_TKNNC
.a833	e6 19		inc $19				inc 	zTemp2+1
.a835	e6 1b		inc $1b		_TKNNC:	inc 	zTemp3+1 					; increment current token
.a837	b2 18		lda ($18)			lda 	(zTemp2) 					; reached then end
.a839	d0 df		bne $a81a			bne 	_TKSearch 					; go try again.
.a83b	80 0f		bra $a84c			bra 	_TKComplete
.a83d					_TKFound:
.a83d	98		tya				tya
.a83e	c5 1a		cmp $1a				cmp 	zTemp3 						; check best
.a840	90 e8		bcc $a82a			bcc 	_TKNext 					; if < best try next
.a842	f0 e6		beq $a82a			beq 	_TKNext 					; if equal this is one of the special +- tokens
.a844	85 1a		sta $1a				sta 	zTemp3 						; update best
.a846	a5 1b		lda $1b				lda 	zTemp3+1 					; save current token.
.a848	85 1c		sta $1c				sta 	zTemp4
.a84a	80 de		bra $a82a			bra 	_TKNext
.a84c					_TKComplete:
.a84c	a5 1a		lda $1a				lda 	zTemp3 						; get "best score"
.a84e	f0 1a		beq $a86a			beq		_TKTokenFail 				; if zero no match occurred
.a850	a4 1a		ldy $1a				ldy 	zTemp3 						; length in Y
.a852	88		dey				dey
.a853	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at last character
.a855	c8		iny				iny
.a856	20 ab a8	jsr $a8ab			jsr 	TOKIsIdentifier 			; identifier character
.a859	90 07		bcc $a862			bcc 	_TKOutput 					; if not, then token is okay
.a85b	b1 10		lda ($10),y			lda 	(codePtr),y 				; look at character after
.a85d	20 ab a8	jsr $a8ab			jsr 	TOKIsIdentifier 			; is that an identifier
.a860	b0 08		bcs $a86a			bcs 	_TKTokenFail 				; if so it must be something like DEFAULT (DEF-AULT)
.a862					_TKOutput:
.a862	a5 1c		lda $1c				lda 	zTemp4 						; output actual token
.a864	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken
.a867	4c b2 a7	jmp $a7b2			jmp 	_TKMainLoop					; go round again
.a86a					_TKTokenFail:
.a86a	a0 00		ldy #$00			ldy 	#0
.a86c	b2 10		lda ($10)			lda 	(codePtr) 					; is the first an identifier ?
.a86e	20 ab a8	jsr $a8ab			jsr 	TOKIsIdentifier
.a871	b0 13		bcs $a886			bcs 	_TKCopyIdent 				; if yes copy it
.a873	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>a876	43 41 4e 4e 4f 54 20 54				.text 	"CANNOT TOKENISE",0
>a87e	4f 4b 45 4e 49 53 45 00
.a886					_TKCopyIdent:
.a886	c8		iny				iny 								; get next
.a887	b1 10		lda ($10),y			lda 	(codePtr),y
.a889	20 ab a8	jsr $a8ab			jsr 	TOKIsIdentifier 			; if identifier
.a88c	08		php				php 								; save CS on stack
.a88d	88		dey				dey 								; back to character
.a88e	b1 10		lda ($10),y			lda 	(codePtr),y 				; get it
.a890	c8		iny				iny
.a891	c9 2e		cmp #$2e			cmp 	#"."
.a893	d0 02		bne $a897			bne 	_TKNotDot
.a895	a9 60		lda #$60			lda 	#'A'+31 					; to map . to 31
.a897					_TKNotDot:
.a897	38		sec				sec
.a898	e9 41		sbc #$41			sbc		#'A'
.a89a	09 c0		ora #$c0			ora 	#$C0 						; in right range
.a89c	28		plp				plp 								; CS if next is identifier
.a89d	08		php				php
.a89e	b0 02		bcs $a8a2			bcs 	_TKNotLast					; CC if next is not identifier
.a8a0	09 e0		ora #$e0			ora 	#$E0 						; range E0-FF
.a8a2					_TKNotLast:
.a8a2	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken 				; write out
.a8a5	28		plp				plp 								; get test result
.a8a6	b0 de		bcs $a886			bcs 	_TKCopyIdent 				; get the next identifier.
.a8a8	4c b2 a7	jmp $a7b2			jmp 	_TKMainLoop
.a8ab					TOKIsIdentifier:
.a8ab	c9 2e		cmp #$2e			cmp 	#"."
.a8ad	f0 08		beq $a8b7			beq 	_TIIYes
.a8af	c9 41		cmp #$41			cmp 	#"A"
.a8b1	90 06		bcc $a8b9			bcc 	_TIINo
.a8b3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a8b5	b0 02		bcs $a8b9			bcs 	_TIINo
.a8b7					_TIIYes:
.a8b7	38		sec				sec
.a8b8	60		rts				rts
.a8b9					_TIINo:
.a8b9	18		clc				clc
.a8ba	60		rts				rts
.a8bb					TokWriteToken:
.a8bb	92 16		sta ($16)			sta 	(zTemp1)
.a8bd	e6 16		inc $16				inc 	zTemp1
.a8bf	d0 02		bne $a8c3			bne 	_TWTExit
.a8c1	e6 17		inc $17				inc 	zTemp1+1
.a8c3					_TWTExit:
.a8c3	60		rts				rts
.a8c4					TokWriteConstant:
.a8c4	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; get current
.a8c7	29 3f		and #$3f			and		#63
.a8c9	48		pha				pha 								; save on stack
.a8ca	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check if < 64
.a8cd	29 c0		and #$c0			and 	#$C0
.a8cf	1d 00 0d	ora $0d00,x			ora 	stack1,x
.a8d2	1d 00 0e	ora $0e00,x			ora 	stack2,x
.a8d5	1d 00 0f	ora $0f00,x			ora 	stack3,x
.a8d8	f0 0d		beq $a8e7			beq 	_TWCNoCall 					; no, don't call.
.a8da	5a		phy				phy
.a8db	a0 06		ldy #$06			ldy 	#6
.a8dd					_TWCShift:
.a8dd	20 44 ab	jsr $ab44			jsr 	Unary_Shr
.a8e0	88		dey				dey
.a8e1	d0 fa		bne $a8dd			bne 	_TWCShift
.a8e3	7a		ply				ply
.a8e4	20 c4 a8	jsr $a8c4			jsr 	TokWriteConstant
.a8e7					_TWCNoCall:
.a8e7	68		pla				pla
.a8e8	09 80		ora #$80			ora 	#$80						; make digit token
.a8ea	80 cf		bra $a8bb			bra 	TokWriteToken 				; and write it out.
.a8ec					TokQuotedString:
.a8ec	85 18		sta $18				sta 	zTemp2 						; save quote
.a8ee	49 22		eor #$22			eor 	#'"'						; now zero if double quotes
.a8f0	f0 02		beq $a8f4			beq 	_TQDouble
.a8f2	a9 01		lda #$01			lda 	#1
.a8f4					_TQDouble:
.a8f4	1a		inc a				inc 	a 							; 1 for double, 2 for single
.a8f5	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken 				; write out
.a8f8	a5 16		lda $16				lda 	zTemp1 						; copy zTemp1 to zTemp3 (byte count addr)
.a8fa	85 1a		sta $1a				sta 	zTemp3
.a8fc	a5 17		lda $17				lda 	zTemp1+1
.a8fe	85 1b		sta $1b				sta 	zTemp3+1
.a900	a9 03		lda #$03			lda 	#3 							; 3 is the size if it is empty - type,size,null
.a902	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken
.a905					_TQLoop:
.a905	c8		iny				iny 								; next character
.a906	b1 10		lda ($10),y			lda 	(codePtr),y
.a908	f0 0f		beq $a919			beq 	_TQExit 					; if zero exit
.a90a	c5 18		cmp $18				cmp 	zTemp2 						; matching quote
.a90c	f0 0a		beq $a918			beq 	_TQSkipExit 				; skip it and exit
.a90e	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken 				; write out
.a911	b2 1a		lda ($1a)			lda 	(zTemp3)					; inc char count
.a913	1a		inc a				inc 	a
.a914	92 1a		sta ($1a)			sta 	(zTemp3)
.a916	80 ed		bra $a905			bra 	_TQLoop						; go round
.a918					_TQSkipExit:
.a918	c8		iny				iny
.a919					_TQExit:
.a919	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.a91b	20 bb a8	jsr $a8bb			jsr 	TOKWriteToken
.a91e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: system/editor.asm

.a91f					EditProgram:
.a91f	ad 89 10	lda $1089			lda 	VarMemory+1
.a922	1a		inc a				inc 	a
.a923	c9 9f		cmp #$9f			cmp 	#MemoryEnd >> 8
.a925	b0 3c		bcs $a963			bcs 	_EPMemory
.a927	a2 00		ldx #$00			ldx 	#0
.a929	a9 03		lda #$03			lda 	#(TokeniseBuffer+3) & $FF
.a92b	85 10		sta $10				sta 	codePtr
.a92d	a9 0a		lda #$0a			lda 	#(TokeniseBuffer+3) >> 8
.a92f	85 11		sta $11				sta 	codePtr+1
.a931	a0 00		ldy #$00			ldy 	#0
.a933	a2 ff		ldx #$ff			ldx 	#255
.a935	20 05 a4	jsr $a405			jsr 	ExtractIntegerToTOS
.a938	98		tya				tya
.a939	18		clc				clc
.a93a	65 10		adc $10				adc 	codePtr
.a93c	85 10		sta $10				sta 	codePtr
.a93e	90 02		bcc $a942			bcc 	_EPNoCarry
.a940	e6 11		inc $11				inc 	codePtr+1
.a942					_EPNoCarry:
.a942	20 66 a9	jsr $a966			jsr 	EDFindLine
.a945	90 0f		bcc $a956			bcc 	_EPNotFound
.a947	a5 16		lda $16				lda 	zTemp1
.a949	48		pha				pha
.a94a	a5 17		lda $17				lda 	zTemp1+1
.a94c	48		pha				pha
.a94d	20 9d a9	jsr $a99d			jsr 	EDDeleteLine
.a950	68		pla				pla
.a951	85 17		sta $17				sta 	zTemp1+1
.a953	68		pla				pla
.a954	85 16		sta $16				sta 	zTemp1
.a956					_EPNotFound:
.a956	b2 10		lda ($10)			lda 	(codePtr)
.a958	f0 03		beq $a95d			beq 	_EPNoInsert
.a95a	20 c2 a9	jsr $a9c2			jsr 	EDInsertLine
.a95d					_EPNoInsert:
.a95d	20 4b a5	jsr $a54b			jsr 	ResetForRun
.a960	4c 4f a0	jmp $a04f			jmp 	NewCommand
.a963					_EPMemory:
.a963	4c e9 a5	jmp $a5e9			jmp 	OutOfMemoryError
.a966					EDFindLine:
.a966	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; set zTemp1 to start of program
.a968	85 16		sta $16				sta 	zTemp1
.a96a	a9 11		lda #$11			lda 	#ProgramStart >> 8
.a96c	85 17		sta $17				sta 	zTemp1+1
.a96e					_EDFLLoop:
.a96e	a0 00		ldy #$00			ldy 	#0 							; reached the end
.a970	b1 16		lda ($16),y			lda 	(zTemp1),y
.a972	f0 25		beq $a999			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.a974	c8		iny				iny
.a975	38		sec				sec
.a976	ad 00 0c	lda $0c00			lda 	stack0						; subtract the current from the target
.a979	f1 16		sbc ($16),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.a97b	aa		tax				tax	 								; this will return 10.
.a97c	ad 00 0d	lda $0d00			lda 	stack1
.a97f	c8		iny				iny
.a980	f1 16		sbc ($16),y			sbc 	(zTemp1),y
.a982	90 15		bcc $a999			bcc 	_EDFLFail					; if target < current then failed.
.a984	d0 04		bne $a98a			bne 	_EDFLNext 					; if non-zero then goto next
.a986	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.a988	f0 11		beq $a99b			beq 	_EDFLFound
.a98a					_EDFLNext:
.a98a	a0 00		ldy #$00			ldy 	#0 							; get offset
.a98c	18		clc				clc
.a98d	b1 16		lda ($16),y			lda 	(zTemp1),y
.a98f	65 16		adc $16				adc 	zTemp1 						; add to pointer
.a991	85 16		sta $16				sta 	zTemp1
.a993	90 d9		bcc $a96e			bcc 	_EDFLLoop
.a995	e6 17		inc $17				inc 	zTemp1+1 					; carry out.
.a997	80 d5		bra $a96e			bra 	_EDFLLoop
.a999					_EDFLFail:
.a999	18		clc				clc
.a99a	60		rts				rts
.a99b					_EDFLFound:
.a99b	38		sec				sec
.a99c	60		rts				rts
.a99d					EDDeleteLine:
.a99d	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.a99f	a2 00		ldx #$00			ldx 	#0
.a9a1	b1 16		lda ($16),y			lda 	(zTemp1),y
.a9a3	a8		tay				tay 								; put in Y
.a9a4					_EDDelLoop:
.a9a4	b1 16		lda ($16),y			lda 	(zTemp1),y 					; get it
.a9a6	81 16		sta ($16,x)			sta 	(zTemp1,x) 					; write it.
.a9a8	a5 16		lda $16				lda 	zTemp1 						; check if pointer has reached the end of
.a9aa	cd 88 10	cmp $1088			cmp		VarMemory 					; low memory. We will have copied down an
.a9ad	d0 07		bne $a9b6			bne 	_EDDelNext 					; extra pile of stuff - technically should
.a9af	a5 17		lda $17				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.a9b1	cd 89 10	cmp $1089			cmp 	VarMemory+1					; doesn't really matter.
.a9b4	f0 08		beq $a9be			beq		_EDDelExit
.a9b6					_EDDelNext:
.a9b6	e6 16		inc $16				inc 	zTemp1 						; go to next byte.
.a9b8	d0 ea		bne $a9a4			bne 	_EDDelLoop
.a9ba	e6 17		inc $17				inc 	zTemp1+1
.a9bc	80 e6		bra $a9a4			bra 	_EDDelLoop
.a9be					_EDDelExit:
.a9be	20 71 a5	jsr $a571			jsr 	ResetVarMemory
.a9c1	60		rts				rts
.a9c2					EDInsertLine:
.a9c2	ad 88 10	lda $1088			lda 	VarMemory 					; copy high memory to zTemp3
.a9c5	85 1a		sta $1a				sta 	zTemp3
.a9c7	ad 89 10	lda $1089			lda 	VarMemory+1
.a9ca	85 1b		sta $1b				sta 	zTemp3+1
.a9cc	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.a9ce					_EDGetLength:
.a9ce	b1 10		lda ($10),y			lda 	(codePtr),y  				; get token
.a9d0	f0 0d		beq $a9df			beq 	_EDGotLength 				; if 0, Y is the length
.a9d2	c8		iny				iny
.a9d3	c9 03		cmp #$03			cmp 	#3 							; 1 and 2 are ASCIIZ strings so skip them.
.a9d5	b0 f7		bcs $a9ce			bcs 	_EDGetLength
.a9d7	98		tya				tya 								; get original position
.a9d8	3a		dec a				dec 	a
.a9d9	18		clc				clc
.a9da	71 10		adc ($10),y			adc 	(codePtr),y
.a9dc	a8		tay				tay
.a9dd	80 ef		bra $a9ce			bra 	_EDGetLength
.a9df					_EDGotLength:
.a9df	98		tya				tya
.a9e0	18		clc				clc
.a9e1	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.a9e3	48		pha				pha 								; save total size (e.g. offset)
.a9e4	85 1c		sta $1c				sta 	zTemp4 						; save for copying
.a9e6	a8		tay				tay 								; in Y
.a9e7	a2 00		ldx #$00			ldx 	#0
.a9e9					_EDInsLoop:
.a9e9	a1 1a		lda ($1a,x)			lda 	(zTemp3,x)					; copy it up
.a9eb	91 1a		sta ($1a),y			sta 	(zTemp3),y
.a9ed	a5 1a		lda $1a				lda 	zTemp3 						; reached the insert point (zTemp1)
.a9ef	c5 16		cmp $16				cmp 	zTemp1
.a9f1	d0 06		bne $a9f9			bne 	_EDINextShift
.a9f3	a5 1b		lda $1b				lda 	zTemp3+1
.a9f5	c5 17		cmp $17				cmp 	zTemp1+1
.a9f7	f0 0a		beq $aa03			beq 	_EDIShiftOver
.a9f9					_EDINextShift:
.a9f9	a5 1a		lda $1a				lda 	zTemp3 					; decrement the copy pointer.
.a9fb	d0 02		bne $a9ff			bne 	_EDINoBorrow
.a9fd	c6 1b		dec $1b				dec 	zTemp3+1
.a9ff					_EDINoBorrow:
.a9ff	c6 1a		dec $1a				dec 	zTemp3
.aa01	80 e6		bra $a9e9			bra 	_EDInsLoop
.aa03					_EDIShiftOver:
.aa03	68		pla				pla 								; this is the size + others, e.g. offset
.aa04	a0 00		ldy #$00			ldy 	#0
.aa06	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write that out.
.aa08	ad 00 0c	lda $0c00			lda 	stack0 						; write LIne# out
.aa0b	c8		iny				iny
.aa0c	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa0e	ad 00 0d	lda $0d00			lda 	stack1
.aa11	c8		iny				iny
.aa12	91 1a		sta ($1a),y			sta 	(zTemp3),y
.aa14	c8		iny				iny 								; where the code goes.
.aa15	a2 00		ldx #$00			ldx 	#0 							; comes from
.aa17					_EDICopyCode:
.aa17	a1 10		lda ($10,x)			lda 	(codePtr,x)					; read from the current line
.aa19	91 1a		sta ($1a),y			sta 	(zTemp3),y 					; write out
.aa1b	c8		iny				iny 								; bump pointers
.aa1c	e6 10		inc $10				inc 	codePtr
.aa1e	d0 02		bne $aa22			bne 	_EDINoCarry
.aa20	e6 11		inc $11				inc 	codePtr+1
.aa22					_EDINoCarry:
.aa22	c6 1c		dec $1c				dec 	zTemp4 						; copy data in
.aa24	a5 1c		lda $1c				lda 	zTemp4 						; this is the total count - first 3 bytes seperate
.aa26	c9 03		cmp #$03			cmp 	#3 							; so exit on 3
.aa28	d0 ed		bne $aa17			bne 	_EDICopyCode
.aa2a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/stack.asm

.aa2b					Stack_Empty:
.aa2b	a2 00		ldx #$00			ldx 	#0
.aa2d	60		rts				rts
.aa2e					Stack_Drop:
.aa2e	ca		dex				dex
.aa2f	60		rts				rts
.aa30					Stack_Dup:
.aa30	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy to next up
.aa33	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa36	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa39	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa3c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa3f	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa42	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa45	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa48	e8		inx				inx 								; bump stack pointer
.aa49	60		rts				rts
.aa4a					Stack_Nip:
.aa4a	bd 00 0c	lda $0c00,x			lda 	stack0,x	 				; copy top to 2nd
.aa4d	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa50	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa53	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa56	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa59	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aa5c	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aa5f	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aa62	ca		dex				dex 								; drop tos
.aa63	60		rts				rts
.aa64					Stack_Over:
.aa64	bd ff 0b	lda $0bff,x			lda 	stack0-1,x				; copy to next up
.aa67	9d 01 0c	sta $0c01,x			sta 	stack0+1,x
.aa6a	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa6d	9d 01 0d	sta $0d01,x			sta 	stack1+1,x
.aa70	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aa73	9d 01 0e	sta $0e01,x			sta 	stack2+1,x
.aa76	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aa79	9d 01 0f	sta $0f01,x			sta 	stack3+1,x
.aa7c	e8		inx				inx 							; bump stack pointer
.aa7d	60		rts				rts
.aa7e					Stack_Swap:
.aa7e	5a		phy				phy
.aa7f	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aa82	a8		tay				tay
.aa83	bd ff 0b	lda $0bff,x			lda 	stack0-1,x
.aa86	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aa89	98		tya				tya
.aa8a	9d ff 0b	sta $0bff,x			sta 	stack0-1,x
.aa8d	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aa90	a8		tay				tay
.aa91	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.aa94	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aa97	98		tya				tya
.aa98	9d ff 0c	sta $0cff,x			sta 	stack1-1,x
.aa9b	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aa9e	a8		tay				tay
.aa9f	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.aaa2	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaa5	98		tya				tya
.aaa6	9d ff 0d	sta $0dff,x			sta 	stack2-1,x
.aaa9	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aaac	a8		tay				tay
.aaad	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.aab0	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aab3	98		tya				tya
.aab4	9d ff 0e	sta $0eff,x			sta 	stack3-1,x
.aab7	7a		ply				ply
.aab8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/unary.asm

.aab9					Unary_Absolute:
.aab9	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aabc	30 01		bmi $aabf			bmi 	Unary_Negate
.aabe	60		rts				rts
.aabf					Unary_Negate:
.aabf	38		sec				sec
.aac0	a9 00		lda #$00			lda		#0
.aac2	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.aac5	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aac8	a9 00		lda #$00			lda		#0
.aaca	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.aacd	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aad0	a9 00		lda #$00			lda		#0
.aad2	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.aad5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aad8	a9 00		lda #$00			lda		#0
.aada	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.aadd	9d 00 0f	sta $0f00,x			sta 	stack3,x
.aae0	60		rts				rts
.aae1					Unary_Not:
.aae1	bd 00 0c	lda $0c00,x			lda 	stack0,x
.aae4	49 ff		eor #$ff			eor 	#$FF
.aae6	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aae9	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aaec	49 ff		eor #$ff			eor 	#$FF
.aaee	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aaf1	bd 00 0e	lda $0e00,x			lda 	stack2,x
.aaf4	49 ff		eor #$ff			eor 	#$FF
.aaf6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aaf9	bd 00 0f	lda $0f00,x			lda 	stack3,x
.aafc	49 ff		eor #$ff			eor 	#$FF
.aafe	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab01	60		rts				rts
.ab02					Unary_Increment:
.ab02	fe 00 0c	inc $0c00,x			inc 	stack0,x
.ab05	d0 0d		bne $ab14			bne 	_UIExit
.ab07	fe 00 0d	inc $0d00,x			inc 	stack1,x
.ab0a	d0 08		bne $ab14			bne 	_UIExit
.ab0c	fe 00 0e	inc $0e00,x			inc 	stack2,x
.ab0f	d0 03		bne $ab14			bne 	_UIExit
.ab11	fe 00 0f	inc $0f00,x			inc 	stack3,x
.ab14					_UIExit:
.ab14	60		rts				rts
.ab15					Unary_Decrement:
.ab15	38		sec				sec
.ab16	bd 00 0c	lda $0c00,x			lda 	stack0,x
.ab19	e9 01		sbc #$01			sbc 	#1
.ab1b	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ab1e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab21	e9 00		sbc #$00			sbc 	#0
.ab23	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ab26	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ab29	e9 00		sbc #$00			sbc 	#0
.ab2b	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ab2e	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ab31	e9 00		sbc #$00			sbc 	#0
.ab33	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ab36	60		rts				rts
.ab37					Unary_Shl:
.ab37	1e 00 0c	asl $0c00,x			asl 	stack0,x
.ab3a	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ab3d	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ab40	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ab43	60		rts				rts
.ab44					Unary_Shr:
.ab44	5e 00 0f	lsr $0f00,x			lsr 	stack3,x
.ab47	7e 00 0e	ror $0e00,x			ror 	stack2,x
.ab4a	7e 00 0d	ror $0d00,x			ror 	stack1,x
.ab4d	7e 00 0c	ror $0c00,x			ror 	stack0,x
.ab50	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/memory.asm

.ab51					Mem_Peek:
.ab51	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab54	85 14		sta $14				sta 	zTemp0
.ab56	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab59	85 15		sta $15				sta 	zTemp0+1
.ab5b	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab5d	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab60	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ab63	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab66	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab69	60		rts				rts
.ab6a					Mem_WPeek:
.ab6a	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab6d	85 14		sta $14				sta 	zTemp0
.ab6f	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab72	85 15		sta $15				sta 	zTemp0+1
.ab74	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab76	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab79	5a		phy				phy 								; read msb
.ab7a	a0 01		ldy #$01			ldy 	#1
.ab7c	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab7e	7a		ply				ply
.ab7f	9d 00 0d	sta $0d00,x			sta 	stack1,x 				; write to stack
.ab82	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ab85	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ab88	60		rts				rts
.ab89					Mem_DPeek:
.ab89	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.ab8c	85 14		sta $14				sta 	zTemp0
.ab8e	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ab91	85 15		sta $15				sta 	zTemp0+1
.ab93	b2 14		lda ($14)			lda 	(zTemp0)					; read byte
.ab95	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; write to stack
.ab98	5a		phy				phy 								; read msb
.ab99	a0 01		ldy #$01			ldy 	#1
.ab9b	b1 14		lda ($14),y			lda 	(zTemp0),y
.ab9d	9d 00 0d	sta $0d00,x			sta 	stack1,x 					; write to stack
.aba0	c8		iny				iny
.aba1	b1 14		lda ($14),y			lda 	(zTemp0),y
.aba3	9d 00 0e	sta $0e00,x			sta 	stack2,x
.aba6	c8		iny				iny
.aba7	b1 14		lda ($14),y			lda 	(zTemp0),y
.aba9	9d 00 0f	sta $0f00,x			sta 	stack3,x
.abac	7a		ply				ply
.abad	60		rts				rts
.abae					Mem_Poke:
.abae	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abb1	85 14		sta $14				sta 	zTemp0
.abb3	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abb6	85 15		sta $15				sta 	zTemp0+1
.abb8	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abbb	92 14		sta ($14)			sta 	(zTemp0)
.abbd	ca		dex				dex
.abbe	ca		dex				dex
.abbf	60		rts				rts
.abc0					Mem_WPoke:
.abc0	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abc3	85 14		sta $14				sta 	zTemp0
.abc5	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abc8	85 15		sta $15				sta 	zTemp0+1
.abca	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 				; byte to write
.abcd	92 14		sta ($14)			sta 	(zTemp0)
.abcf	5a		phy				phy
.abd0	a0 01		ldy #$01			ldy 	#1
.abd2	bd ff 0e	lda $0eff,x			lda 	stack3-1,x 				; byte to write
.abd5	91 14		sta ($14),y			sta 	(zTemp0),y
.abd7	7a		ply				ply
.abd8	ca		dex				dex
.abd9	ca		dex				dex
.abda	60		rts				rts
.abdb					Mem_DPoke:
.abdb	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy address
.abde	85 14		sta $14				sta 	zTemp0
.abe0	bd 00 0d	lda $0d00,x			lda 	stack1,x
.abe3	85 15		sta $15				sta 	zTemp0+1
.abe5	bd ff 0b	lda $0bff,x			lda 	stack0-1,x 					; byte to write
.abe8	92 14		sta ($14)			sta 	(zTemp0)
.abea	5a		phy				phy
.abeb	a0 01		ldy #$01			ldy 	#1
.abed	bd ff 0c	lda $0cff,x			lda 	stack1-1,x
.abf0	91 14		sta ($14),y			sta 	(zTemp0),y
.abf2	bd ff 0d	lda $0dff,x			lda 	stack2-1,x
.abf5	c8		iny				iny
.abf6	91 14		sta ($14),y			sta 	(zTemp0),y
.abf8	bd ff 0e	lda $0eff,x			lda 	stack3-1,x
.abfb	c8		iny				iny
.abfc	91 14		sta ($14),y			sta 	(zTemp0),y
.abfe	7a		ply				ply
.abff	ca		dex				dex
.ac00	ca		dex				dex
.ac01	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/binary.asm

.ac02					Stack_Add:
.ac02	ca		dex				dex
.ac03					Stack_Add_No_Dex:
.ac03	18		clc				clc
.ac04	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac07	7d 01 0c	adc $0c01,x			adc 	stack0+1,x
.ac0a	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac0d	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac10	7d 01 0d	adc $0d01,x			adc 	stack1+1,x
.ac13	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac16	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac19	7d 01 0e	adc $0e01,x			adc 	stack2+1,x
.ac1c	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac1f	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac22	7d 01 0f	adc $0f01,x			adc 	stack3+1,x
.ac25	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac28	60		rts				rts
.ac29					Stack_Sub:
.ac29	ca		dex				dex
.ac2a	38		sec				sec
.ac2b	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac2e	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ac31	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac34	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac37	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ac3a	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac3d	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac40	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ac43	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac46	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac49	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ac4c	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac4f	60		rts				rts
.ac50					Stack_And:
.ac50	ca		dex				dex
.ac51	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac54	3d 01 0c	and $0c01,x			and		stack0+1,x
.ac57	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac5a	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac5d	3d 01 0d	and $0d01,x			and 	stack1+1,x
.ac60	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac63	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac66	3d 01 0e	and $0e01,x			and 	stack2+1,x
.ac69	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac6c	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac6f	3d 01 0f	and $0f01,x			and 	stack3+1,x
.ac72	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac75	60		rts				rts
.ac76					Stack_Xor:
.ac76	ca		dex				dex
.ac77	bd 00 0c	lda $0c00,x			lda		stack0,x
.ac7a	5d 01 0c	eor $0c01,x			eor		stack0+1,x
.ac7d	9d 00 0c	sta $0c00,x			sta 	stack0,x
.ac80	bd 00 0d	lda $0d00,x			lda		stack1,x
.ac83	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ac86	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ac89	bd 00 0e	lda $0e00,x			lda		stack2,x
.ac8c	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ac8f	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ac92	bd 00 0f	lda $0f00,x			lda		stack3,x
.ac95	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ac98	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ac9b	60		rts				rts
.ac9c					Stack_Or:
.ac9c	ca		dex				dex
.ac9d	bd 00 0c	lda $0c00,x			lda		stack0,x
.aca0	1d 01 0c	ora $0c01,x			ora		stack0+1,x
.aca3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aca6	bd 00 0d	lda $0d00,x			lda		stack1,x
.aca9	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acac	9d 00 0d	sta $0d00,x			sta 	stack1,x
.acaf	bd 00 0e	lda $0e00,x			lda		stack2,x
.acb2	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acb5	9d 00 0e	sta $0e00,x			sta 	stack2,x
.acb8	bd 00 0f	lda $0f00,x			lda		stack3,x
.acbb	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acbe	9d 00 0f	sta $0f00,x			sta 	stack3,x
.acc1	60		rts				rts
.acc2					Stack_Shl:
.acc2	38		sec				sec
.acc3	80 01		bra $acc6			bra 	StackShift
.acc5					Stack_Shr:
.acc5	18		clc				clc
.acc6					StackShift:
.acc6	08		php				php
.acc7	ca		dex				dex
.acc8	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; if the shift >= 32
.accb	29 e0		and #$e0			and 	#$E0 						; going to be zero.
.accd	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.acd0	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.acd3	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.acd6	d0 13		bne $aceb			bne 	_SSZero
.acd8					_SSLoop:
.acd8	de 01 0c	dec $0c01,x			dec 	stack0+1,x 					; dec check count
.acdb	30 1a		bmi $acf7			bmi 	_SSDone 					; completed ?
.acdd	28		plp				plp 								; restore flag
.acde	08		php				php
.acdf	b0 05		bcs $ace6			bcs 	_SSLeft 					; do either shift.
.ace1	20 44 ab	jsr $ab44			jsr 	Unary_Shr
.ace4	80 f2		bra $acd8			bra 	_SSLoop
.ace6					_SSLeft:
.ace6	20 37 ab	jsr $ab37			jsr 	Unary_Shl
.ace9	80 ed		bra $acd8			bra 	_SSLoop
.aceb					_SSZero:
.aceb	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; too many shifts.
.acee	9e 00 0d	stz $0d00,x			stz 	stack1,x
.acf1	9e 00 0e	stz $0e00,x			stz 	stack2,x
.acf4	9e 00 0f	stz $0f00,x			stz 	stack3,x
.acf7					_SSDone:
.acf7	28		plp				plp 								; throw flag.
.acf8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/multiply.asm

.acf9					MulInteger32:
.acf9	ca		dex				dex
.acfa	bd 00 0c	lda $0c00,x			lda 	stack0,x					; copy +0 to workspace
.acfd	85 1e		sta $1e				sta 	zLTemp1
.acff	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ad02	85 1f		sta $1f				sta 	zLTemp1+1
.ad04	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ad07	85 20		sta $20				sta 	zLTemp1+2
.ad09	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ad0c	85 21		sta $21				sta 	zLTemp1+3
.ad0e	9e 00 0c	stz $0c00,x			stz 	stack0,x 					; zero +0, where the result goes.
.ad11	9e 00 0d	stz $0d00,x			stz 	stack1,x
.ad14	9e 00 0e	stz $0e00,x			stz 	stack2,x
.ad17	9e 00 0f	stz $0f00,x			stz 	stack3,x
.ad1a					_BFMMultiply:
.ad1a	a5 1e		lda $1e				lda 	zLTemp1 					; get LSBit of 8-11
.ad1c	29 01		and #$01			and 	#1
.ad1e	f0 03		beq $ad23			beq 	_BFMNoAdd
.ad20	20 03 ac	jsr $ac03			jsr 	Stack_Add_No_Dex 			; co-opt this code
.ad23					_BFMNoAdd:
.ad23	1e 01 0c	asl $0c01,x			asl 	stack0+1,x 					; shift +4 left
.ad26	3e 01 0d	rol $0d01,x			rol 	stack1+1,x
.ad29	3e 01 0e	rol $0e01,x			rol 	stack2+1,x
.ad2c	3e 01 0f	rol $0f01,x			rol 	stack3+1,x
.ad2f	46 21		lsr $21				lsr 	zLTemp1+3 					; shift +8 right
.ad31	66 20		ror $20				ror 	zLTemp1+2
.ad33	66 1f		ror $1f				ror 	zLTemp1+1
.ad35	66 1e		ror $1e				ror 	zLTemp1
.ad37	a5 1e		lda $1e				lda 	zLTemp1 					; continue if +8 is nonzero
.ad39	05 1f		ora $1f				ora 	zLTemp1+1
.ad3b	05 20		ora $20				ora 	zLTemp1+2
.ad3d	05 21		ora $21				ora 	zLTemp1+3
.ad3f	d0 d9		bne $ad1a			bne 	_BFMMultiply
.ad41	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/divide.asm

.ad42					DivInteger32:
.ad42	ca		dex				dex
.ad43	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check for division by zero.
.ad46	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.ad49	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.ad4c	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.ad4f	d0 14		bne $ad65			bne 	_BFDOkay
.ad51	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>ad54	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>ad5c	20 42 59 20 5a 45 52 4f 00
.ad65					_BFDOkay:
.ad65	64 1e		stz $1e				stz 	zLTemp1 					; Q/Dividend/Left in +0
.ad67	64 1f		stz $1f				stz 	zLTemp1+1 					; M/Divisor/Right in +4
.ad69	64 20		stz $20				stz 	zLTemp1+2
.ad6b	64 21		stz $21				stz 	zLTemp1+3
.ad6d	9c 23 08	stz $0823			stz 	SignCount 					; Count of signs.
.ad70	20 cb ad	jsr $adcb			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.ad73	e8		inx				inx
.ad74	20 cb ad	jsr $adcb			jsr 	CheckIntegerNegate
.ad77	ca		dex				dex
.ad78	5a		phy				phy 								; Y is the counter
.ad79	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ad7b					_BFDLoop:
.ad7b	1e 00 0c	asl $0c00,x			asl 	stack0,x 					; shift AQ left.
.ad7e	3e 00 0d	rol $0d00,x			rol 	stack1,x
.ad81	3e 00 0e	rol $0e00,x			rol 	stack2,x
.ad84	3e 00 0f	rol $0f00,x			rol 	stack3,x
.ad87	26 1e		rol $1e				rol 	zLTemp1
.ad89	26 1f		rol $1f				rol 	zLTemp1+1
.ad8b	26 20		rol $20				rol 	zLTemp1+2
.ad8d	26 21		rol $21				rol 	zLTemp1+3
.ad8f	38		sec				sec
.ad90	a5 1e		lda $1e				lda 	zLTemp1+0 					; Calculate A-M on stack.
.ad92	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ad95	48		pha				pha
.ad96	a5 1f		lda $1f				lda 	zLTemp1+1
.ad98	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ad9b	48		pha				pha
.ad9c	a5 20		lda $20				lda 	zLTemp1+2
.ad9e	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ada1	48		pha				pha
.ada2	a5 21		lda $21				lda 	zLTemp1+3
.ada4	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ada7	90 15		bcc $adbe			bcc 	_BFDNoAdd
.ada9	85 21		sta $21				sta 	zLTemp1+3 					; update A
.adab	68		pla				pla
.adac	85 20		sta $20				sta 	zLTemp1+2
.adae	68		pla				pla
.adaf	85 1f		sta $1f				sta 	zLTemp1+1
.adb1	68		pla				pla
.adb2	85 1e		sta $1e				sta 	zLTemp1+0
.adb4	bd 00 0c	lda $0c00,x			lda 	stack0,x 			; set Q bit 1.
.adb7	09 01		ora #$01			ora 	#1
.adb9	9d 00 0c	sta $0c00,x			sta 	stack0,x
.adbc	80 03		bra $adc1			bra 	_BFDNext
.adbe					_BFDNoAdd:
.adbe	68		pla				pla 								; Throw away the intermediate calculations
.adbf	68		pla				pla
.adc0	68		pla				pla
.adc1					_BFDNext:
.adc1	88		dey				dey
.adc2	d0 b7		bne $ad7b			bne 	_BFDLoop
.adc4	7a		ply				ply 								; restore Y
.adc5	4e 23 08	lsr $0823			lsr 	SignCount 					; if sign count odd,
.adc8	b0 07		bcs $add1			bcs		IntegerNegateAlways 		; negate the result
.adca	60		rts				rts
.adcb					CheckIntegerNegate:
.adcb	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; is it -ve = MSB set ?
.adce	30 01		bmi $add1			bmi 	IntegerNegateAlways 		; if so negate it
.add0	60		rts				rts
.add1					IntegerNegateAlways:
.add1	ee 23 08	inc $0823			inc 	SignCount 					; bump the count of signs
.add4	4c bf aa	jmp $aabf			jmp 	Unary_Negate
.add7					ModInteger32:
.add7	20 42 ad	jsr $ad42			jsr 	DivInteger32
.adda	a5 1e		lda $1e				lda 	zLTemp1
.addc	9d 00 0c	sta $0c00,x			sta 	stack0,x
.addf	a5 1f		lda $1f				lda 	zLTemp1+1
.ade1	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ade4	a5 20		lda $20				lda 	zLTemp1+2
.ade6	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ade9	a5 21		lda $21				lda 	zLTemp1+3
.adeb	9d 00 0f	sta $0f00,x			sta 	stack3,x
.adee	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: functions/compare.asm

.adef					Comp_Equal:
.adef	38		sec				sec
.adf0	80 01		bra $adf3			bra 	Comp_CheckEqual
.adf2					Comp_NotEqual:
.adf2	18		clc				clc
.adf3					Comp_CheckEqual:
.adf3	08		php				php
.adf4	ca		dex				dex
.adf5	bd 00 0c	lda $0c00,x			lda		stack0,x
.adf8	5d 01 0c	eor $0c01,x			eor 	stack0+1,x
.adfb	d0 16		bne $ae13			bne 	_CCENonZero
.adfd	bd 00 0d	lda $0d00,x			lda		stack1,x
.ae00	5d 01 0d	eor $0d01,x			eor 	stack1+1,x
.ae03	d0 0e		bne $ae13			bne 	_CCENonZero
.ae05	bd 00 0e	lda $0e00,x			lda		stack2,x
.ae08	5d 01 0e	eor $0e01,x			eor 	stack2+1,x
.ae0b	d0 06		bne $ae13			bne 	_CCENonZero
.ae0d	bd 00 0f	lda $0f00,x			lda		stack3,x
.ae10	5d 01 0f	eor $0f01,x			eor 	stack3+1,x
.ae13					_CCENonZero:
.ae13	f0 02		beq $ae17			beq 	_CCENotSet
.ae15	a9 ff		lda #$ff			lda 	#$FF 						; $FF if not-equal
.ae17					_CCENotSet:
.ae17					CompCheckFlip:
.ae17	28		plp				plp 								; if carry set, we want $FF if equal
.ae18	90 02		bcc $ae1c			bcc 	CompReturn
.ae1a	49 ff		eor #$ff			eor 	#$FF
.ae1c					CompReturn:
.ae1c	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; save result on stack.
.ae1f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.ae22	9d 00 0e	sta $0e00,x			sta 	stack2,x
.ae25	9d 00 0f	sta $0f00,x			sta 	stack3,x
.ae28	60		rts				rts
.ae29					Comp_Less:
.ae29	18		clc				clc
.ae2a	80 01		bra $ae2d			bra 	Comp_LessCont
.ae2c					Comp_GreaterEqual:
.ae2c	38		sec				sec
.ae2d					Comp_LessCont:
.ae2d	08		php				php
.ae2e	ca		dex				dex
.ae2f	38		sec				sec
.ae30	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; do a subtraction w/o storing the result
.ae33	fd 01 0c	sbc $0c01,x			sbc 	stack0+1,x
.ae36	bd 00 0d	lda $0d00,x			lda 	stack1,x
.ae39	fd 01 0d	sbc $0d01,x			sbc 	stack1+1,x
.ae3c	bd 00 0e	lda $0e00,x			lda 	stack2,x
.ae3f	fd 01 0e	sbc $0e01,x			sbc 	stack2+1,x
.ae42	bd 00 0f	lda $0f00,x			lda 	stack3,x
.ae45	fd 01 0f	sbc $0f01,x			sbc 	stack3+1,x
.ae48	50 02		bvc $ae4c			bvc 	_CLNoFlip 					; unsigned -> signed
.ae4a	49 80		eor #$80			eor 	#$80
.ae4c					_CLNoFlip:
.ae4c	29 80		and #$80			and 	#$80 						; 0 if >= here, so flip if CS.
.ae4e	f0 c7		beq $ae17			beq 	CompCheckFlip
.ae50	a9 ff		lda #$ff			lda 	#$FF 						; -1 if < here, so flip if CS.
.ae52	80 c3		bra $ae17			bra 	CompCheckFlip
.ae54					Comp_LessEqual:
.ae54	38		sec				sec
.ae55	80 01		bra $ae58			bra 	Comp_LessEqualCont
.ae57					Comp_Greater:
.ae57	18		clc				clc
.ae58					Comp_LessEqualCont:
.ae58	08		php				php
.ae59	ca		dex				dex
.ae5a	38		sec				sec
.ae5b	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; do a subtraction w/o storing the result, backwards
.ae5e	fd 00 0c	sbc $0c00,x			sbc 	stack0,x
.ae61	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.ae64	fd 00 0d	sbc $0d00,x			sbc 	stack1,x
.ae67	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.ae6a	fd 00 0e	sbc $0e00,x			sbc 	stack2,x
.ae6d	bd 01 0f	lda $0f01,x			lda 	stack3+1,x
.ae70	fd 00 0f	sbc $0f00,x			sbc 	stack3,x
.ae73	50 02		bvc $ae77			bvc 	_CLENoFlip 					; unsigned -> signed
.ae75	49 80		eor #$80			eor 	#$80
.ae77					_CLENoFlip:
.ae77	29 80		and #$80			and 	#$80 						; 0 if > here, so flip if CS
.ae79	f0 9c		beq $ae17			beq 	CompCheckFlip
.ae7b	a9 ff		lda #$ff			lda 	#$FF 						; -1 if >= here, so flip if CS
.ae7d	80 98		bra $ae17			bra 	CompCheckFlip

;******  Return to file: main.asm


;******  Processing file: miscellany/alloc.asm

.ae7f					Allocate:
.ae7f	bd 00 0d	lda $0d00,x			lda 	stack1,x					; check 0-32767 allocated.
.ae82	29 80		and #$80			and 	#$80
.ae84	1d 00 0e	ora $0e00,x			ora 	stack2,x
.ae87	1d 00 0f	ora $0f00,x			ora 	stack3,x
.ae8a	d0 26		bne $aeb2			bne 	_ALBad
.ae8c	18		clc				clc 								; add to varmemory pointer saving
.ae8d	ad 88 10	lda $1088			lda 	VarMemory 					; address
.ae90	48		pha				pha
.ae91	7d 00 0c	adc $0c00,x			adc 	stack0,x
.ae94	8d 88 10	sta $1088			sta 	VarMemory
.ae97	ad 89 10	lda $1089			lda 	VarMemory+1
.ae9a	48		pha				pha
.ae9b	7d 00 0d	adc $0d00,x			adc 	stack1,x
.ae9e	8d 89 10	sta $1089			sta 	VarMemory+1
.aea1	68		pla				pla 								; pop and save
.aea2	9d 00 0d	sta $0d00,x			sta 	stack1,x
.aea5	68		pla				pla
.aea6	9d 00 0c	sta $0c00,x			sta 	stack0,x
.aea9	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aeac	cd 8b 10	cmp $108b			cmp 	AllocMemory+1 				; check range
.aeaf	b0 01		bcs $aeb2			bcs 	_ALBad
.aeb1	60		rts				rts
.aeb2					_ALBad:
.aeb2	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>aeb5	42 41 44 20 41 4c 4c 4f				.text 	"BAD ALLOC",0
>aebd	43 00

;******  Return to file: main.asm


;******  Processing file: miscellany/list.asm

.aebf					Cmd_List:
.aebf	20 40 a5	jsr $a540			jsr 	ResetCodePointer 			; back to the beginning
.aec2	64 18		stz $18				stz 	zTemp2						; clear the lowest-number
.aec4	64 19		stz $19				stz 	zTemp2+1
.aec6	e0 00		cpx #$00			cpx 	#0 							; stack empty ?
.aec8	f0 0b		beq $aed5			beq 	_CLINone
.aeca	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; use tos as start line
.aecd	85 18		sta $18				sta 	zTemp2
.aecf	bd 00 0d	lda $0d00,x			lda 	stack1,x
.aed2	85 19		sta $19				sta 	zTemp2+1
.aed4	ca		dex				dex 								; and pop the tos
.aed5					_CLINone:
.aed5	a9 1e		lda #$1e			lda 	#30 						; list this many lines
.aed7	85 16		sta $16				sta 	zTemp1
.aed9					_CLILoop
.aed9	b2 10		lda ($10)			lda 	(codePtr)					; check end of program
.aedb	f0 24		beq $af01			beq 	_CLIEnd
.aedd	a0 01		ldy #$01			ldy 	#1 							; compare line# vs the minimum
.aedf	38		sec				sec
.aee0	b1 10		lda ($10),y			lda 	(codePtr),y
.aee2	e5 18		sbc $18				sbc 	zTemp2
.aee4	c8		iny				iny
.aee5	b1 10		lda ($10),y			lda 	(codePtr),y
.aee7	e5 19		sbc $19				sbc 	zTemp2+1
.aee9	90 09		bcc $aef4			bcc 	_CLISkip
.aeeb	da		phx				phx
.aeec	20 04 af	jsr $af04			jsr 	ListCurrent 				; list the line.
.aeef	fa		plx				plx
.aef0	c6 16		dec $16				dec 	zTemp1 						; done all lines
.aef2	f0 0d		beq $af01			beq 	_CLIEnd
.aef4					_CLISkip:
.aef4	18		clc				clc
.aef5	b2 10		lda ($10)			lda 	(codePtr) 					; go to next
.aef7	65 10		adc $10				adc 	codePtr
.aef9	85 10		sta $10				sta 	codePtr
.aefb	90 dc		bcc $aed9			bcc 	_CLILoop
.aefd	e6 11		inc $11				inc 	codePtr+1
.aeff	80 d8		bra $aed9			bra 	_CLILoop
.af01					_CLIEnd:
.af01	4c 3b a0	jmp $a03b			jmp 	WarmStart
.af04					ListCurrent:
.af04	a0 03		ldy #$03			ldy 	#3
.af06	b1 10		lda ($10),y			lda 	(codePtr),y
.af08	c9 02		cmp #$02			cmp 	#2
.af0a	d0 0e		bne $af1a			bne 	_LCList
.af0c	a9 0d		lda #$0d			lda 	#13
.af0e	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af11	20 1a af	jsr $af1a			jsr 	_LCList
.af14	a9 0d		lda #$0d			lda 	#13
.af16	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af19	60		rts				rts
.af1a					_LCList:
.af1a	a9 05		lda #$05			lda 	#CTH_LINENO
.af1c	20 ab a2	jsr $a2ab			jsr 	ExternColour 				; set colour
.af1f	a0 01		ldy #$01			ldy 	#1							; print line#
.af21	b1 10		lda ($10),y			lda 	(codePtr),y
.af23	48		pha				pha
.af24	c8		iny				iny
.af25	b1 10		lda ($10),y			lda 	(codePtr),y
.af27	a8		tay				tay
.af28	68		pla				pla
.af29	20 3e a6	jsr $a63e			jsr 	ErrorPrint16
.af2c	a8		tay				tay
.af2d					_LCPadOut:
.af2d	a9 20		lda #$20			lda 	#' '
.af2f	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af32	c8		iny				iny
.af33	c0 05		cpy #$05			cpy 	#5
.af35	d0 f6		bne $af2d			bne 	_LCPadOut
.af37	a0 03		ldy #$03			ldy 	#3 							; start here
.af39					_LCLoop:
.af39	a9 20		lda #$20			lda 	#' '						; space
.af3b	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af3e					_LCLoopNoSpace:
.af3e	b1 10		lda ($10),y			lda 	(codePtr),y 				; get first
.af40	30 3e		bmi $af80			bmi 	_LCIdentConst 				; identifier or constant
.af42	d0 05		bne $af49			bne 	_LCStringToken
.af44	a9 0d		lda #$0d			lda 	#13
.af46	4c a1 a2	jmp $a2a1			jmp 	ExternPrint
.af49					_LCStringToken:
.af49	c9 10		cmp #$10			cmp 	#$10 						; if < 10 it's a string.
.af4b	90 0c		bcc $af59			bcc		_LCString
.af4d	20 c1 af	jsr $afc1			jsr 	ListPrintToken
.af50	b1 10		lda ($10),y			lda 	(codePtr),y 				; no space if ^
.af52	c8		iny				iny 								; advance pointer
.af53	c9 4d		cmp #$4d			cmp 	#KWD_HAT
.af55	f0 e7		beq $af3e			beq 	_LCLoopNoSpace
.af57	80 e0		bra $af39			bra 	_LCLoop 					; go round again.
.af59					_LCString:
.af59	4a		lsr a				lsr 	a 							; CS if 1 (string) CC if 2 (comment)
.af5a	a9 05		lda #$05			lda 	#CTH_STRING 				; decide on colour.
.af5c	a2 22		ldx #$22			ldx 	#'"'
.af5e	b0 04		bcs $af64			bcs 	_LCSSkip
.af60	a9 0a		lda #$0a			lda 	#CTH_COMMENT
.af62	a2 27		ldx #$27			ldx 	#"'"
.af64					_LCSSkip:
.af64	20 ab a2	jsr $a2ab			jsr 	ExternColour 				; set colour
.af67	8a		txa				txa
.af68	48		pha				pha 								; save end quote on stack.
.af69	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af6c	c8		iny				iny 								; skip type size
.af6d	c8		iny				iny
.af6e					_LCSPrint:
.af6e	b1 10		lda ($10),y			lda 	(codePtr),y
.af70	c8		iny				iny
.af71	c9 00		cmp #$00			cmp 	#0 							; 0 is end
.af73	f0 05		beq $af7a			beq 	_LCSExit
.af75	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af78	80 f4		bra $af6e			bra 	_LCSPrint
.af7a					_LCSExit:
.af7a	68		pla				pla
.af7b	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af7e	80 b9		bra $af39			bra 	_LCLoop
.af80					_LCIdentConst:
.af80	c9 c0		cmp #$c0			cmp 	#$C0						; check if constant
.af82	90 1e		bcc $afa2			bcc 	_LCConstant
.af84	a9 03		lda #$03			lda 	#CTH_IDENT 					; set colour
.af86	20 ab a2	jsr $a2ab			jsr 	ExternColour
.af89					_LCCIdLoop:
.af89	b1 10		lda ($10),y			lda 	(codePtr),y 				; read
.af8b	29 1f		and #$1f			and 	#$1F 						; convert
.af8d	18		clc				clc
.af8e	69 41		adc #$41			adc 	#'A'
.af90	c9 60		cmp #$60			cmp 	#'A'+31 					; handle '.'
.af92	d0 02		bne $af96			bne 	_LCCNotDot
.af94	a9 2e		lda #$2e			lda 	#'.'
.af96					_LCCNotDot:
.af96	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.af99	b1 10		lda ($10),y			lda 	(codePtr),y 				; at end ?
.af9b	c8		iny				iny
.af9c	c9 e0		cmp #$e0			cmp 	#$E0
.af9e	b0 99		bcs $af39			bcs 	_LCLoop
.afa0	80 e7		bra $af89			bra 	_LCCIdLoop
.afa2					_LCConstant:
.afa2	a9 06		lda #$06			lda 	#CTH_NUMBER 				; number colour
.afa4	20 ab a2	jsr $a2ab			jsr 	ExternColour
.afa7	a2 fe		ldx #$fe			ldx 	#254 						; use the topmost stack element
.afa9	20 05 a4	jsr $a405			jsr 	ExtractIntegerToTOS 		; so there is a very rare case
.afac	bd 00 0f	lda $0f00,x			lda 	stack3+0,x					; save stack top byte
.afaf	48		pha				pha
.afb0	20 63 a6	jsr $a663			jsr 	IntegerToString 			; this could corrupt stack if full :)
.afb3	20 51 a6	jsr $a651			jsr 	ErrorPrintIntegerBuffer
.afb6	68		pla				pla 								; sign back
.afb7	10 80		bpl $af39			bpl 	_LCLoop
.afb9	a9 2d		lda #$2d			lda 	#"-"
.afbb	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.afbe	4c 39 af	jmp $af39			jmp 	_LCLoop
.afc1					ListPrintToken:
.afc1	5a		phy				phy
.afc2	48		pha				pha 								; token colour
.afc3	a9 07		lda #$07			lda 	#CTH_TOKEN
.afc5	20 ab a2	jsr $a2ab			jsr 	ExternColour
.afc8	fa		plx				plx
.afc9	a9 08		lda #$08			lda 	#KeywordText & $FF
.afcb	85 14		sta $14				sta 	zTemp0
.afcd	a9 a1		lda #$a1			lda 	#KeywordText >> 8
.afcf	85 15		sta $15				sta 	zTemp0+1
.afd1					_LPTLoop:
.afd1	e0 10		cpx #$10			cpx 	#$10 						; first token is $10
.afd3	f0 0e		beq $afe3			beq 	_LPTFound
.afd5	ca		dex				dex
.afd6	b2 14		lda ($14)			lda 	(zTemp0)
.afd8	38		sec				sec									; add 1, it's length+name
.afd9	65 14		adc $14				adc 	zTemp0
.afdb	85 14		sta $14				sta 	zTemp0
.afdd	90 f2		bcc $afd1			bcc 	_LPTLoop
.afdf	e6 15		inc $15				inc 	zTemp0+1
.afe1	80 ee		bra $afd1			bra 	_LPTLoop
.afe3					_LPTFound:
.afe3	a0 01		ldy #$01			ldy 	#1 							; start here.
.afe5					_LPTShow:
.afe5	b1 14		lda ($14),y			lda 	(zTemp0),y 					; get character
.afe7	c9 20		cmp #$20			cmp 	#32 						; < 32, length, so exit
.afe9	90 06		bcc $aff1			bcc 	_LPTExit
.afeb	c8		iny				iny
.afec	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.afef	80 f4		bra $afe5			bra 	_LPTShow
.aff1					_LPTExit:
.aff1	7a		ply				ply
.aff2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/renumber.asm

.aff3					Cmd_Renumber:
.aff3	a9 00		lda #$00			lda 	#ProgramStart & $FF 		; zTemp1 line number being changed
.aff5	85 16		sta $16				sta 	zTemp1
.aff7	a9 11		lda #$11			lda 	#ProgramStart >> 8
.aff9	85 17		sta $17				sta 	zTemp1+1
.affb	a9 e8		lda #$e8			lda 	#1000 & $FF 				; zTemp2 new number
.affd	85 18		sta $18				sta 	zTemp2
.afff	a9 03		lda #$03			lda 	#1000 >> 8
.b001	85 19		sta $19				sta 	zTemp2+1
.b003					_CRLoop:
.b003	b2 16		lda ($16)			lda 	(zTemp1) 					; check end of program
.b005	f0 23		beq $b02a			beq 	_CRExit
.b007	a0 01		ldy #$01			ldy 	#1 							; copy new number in
.b009	a5 18		lda $18				lda 	zTemp2
.b00b	91 16		sta ($16),y			sta 	(zTemp1),y
.b00d	c8		iny				iny
.b00e	a5 19		lda $19				lda 	zTemp2+1
.b010	91 16		sta ($16),y			sta 	(zTemp1),y
.b012	18		clc				clc 								; add 10 to new number
.b013	a5 18		lda $18				lda 	zTemp2
.b015	69 0a		adc #$0a			adc 	#10
.b017	85 18		sta $18				sta 	zTemp2
.b019	90 02		bcc $b01d			bcc 	_CRNoCarry
.b01b	e6 19		inc $19				inc 	zTemp2+1
.b01d					_CRNoCarry:
.b01d	18		clc				clc 								; go to next line
.b01e	b2 16		lda ($16)			lda 	(zTemp1)
.b020	65 16		adc $16				adc 	zTemp1
.b022	85 16		sta $16				sta 	zTemp1
.b024	90 dd		bcc $b003			bcc 	_CRLoop
.b026	e6 17		inc $17				inc 	zTemp1+1
.b028	80 d9		bra $b003			bra 	_CRLoop
.b02a					_CRExit:
.b02a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/system.asm

.b02b					System_RUN:
.b02b	20 4b a5	jsr $a54b			jsr		ResetForRun 				; clear vars, stacks etc.
.b02e	20 40 a5	jsr $a540			jsr 	ResetCodePointer 			; point to first thing to do.
.b031	4c 86 a3	jmp $a386			jmp 	Execute						; and run
.b034					System_END:
.b034	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b037					System_STOP:
.b037	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b03a	53 54 4f 50 00					.text 	"STOP",0
.b03f					System_Assert:
.b03f	ca		dex				dex
.b040	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b043	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b046	1d 02 0d	ora $0d02,x			ora 	stack1+2,x
.b049	1d 03 0d	ora $0d03,x			ora 	stack1+3,x
.b04c	d0 0a		bne $b058			bne 	_SAOkay
.b04e	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b051	41 53 53 45 52 54 00				.text 	"ASSERT",0
.b058	60		rts		_SAOkay:rts
.b059					System_New:
.b059	9c 00 11	stz $1100			stz 	ProgramStart 				; zero the first offset, erases.
.b05c	20 4b a5	jsr $a54b			jsr		ResetForRun 				; clear vars, stacks etc.
.b05f	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b062					System_Old:
.b062	20 40 a5	jsr $a540			jsr 	ResetCodePointer 			; start of first line.
.b065					_SOFindZero:
.b065	b1 10		lda ($10),y			lda 	(codePtr),y 				; look for trailing $00
.b067	f0 15		beq $b07e			beq 	_SOFoundEnd
.b069	c8		iny				iny
.b06a	d0 f9		bne $b065			bne 	_SOFindZero
.b06c	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b06f	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER",0
>b077	45 43 4f 56 45 52 00
.b07e					_SOFoundEnd:
.b07e	c8		iny				iny 								; update the offset
.b07f	8c 00 11	sty $1100			sty 	ProgramStart
.b082	20 4b a5	jsr $a54b			jsr 	ResetForRun 				; redo all stacks etc.
.b085	60		rts				rts
.b086					System_Sys:
.b086	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy and drop call address
.b089	85 14		sta $14				sta 	zTemp0
.b08b	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b08e	85 15		sta $15				sta 	zTemp0+1
.b090	ca		dex				dex
.b091	da		phx				phx
.b092	5a		phy				phy
.b093	ad 00 10	lda $1000			lda 	AZVariables+('A'-'A')*4		; load AXY
.b096	ae 5c 10	ldx $105c			ldx 	AZVariables+('X'-'A')*4
.b099	ac 60 10	ldy $1060			ldy 	AZVariables+('Y'-'A')*4
.b09c	20 ab b0	jsr $b0ab			jsr 	_SSCall 					; effectively jsr (zTemp)
.b09f	8d 00 10	sta $1000			sta 	AZVariables+('A'-'A')*4 	; store AXY
.b0a2	8e 5c 10	stx $105c			stx 	AZVariables+('X'-'A')*4
.b0a5	8c 60 10	sty $1060			sty 	AZVariables+('Y'-'A')*4
.b0a8	7a		ply				ply
.b0a9	fa		plx				plx
.b0aa	60		rts				rts
.b0ab	6c 14 00	jmp ($0014)	_SSCall:jmp 	(zTemp0)
.b0ae					System_ShowStack:
.b0ae	da		phx				phx 								; save stack
.b0af	5a		phy				phy
.b0b0	86 18		stx $18				stx 	zTemp2 						; save old TOS
.b0b2	a9 5b		lda #$5b			lda 	#"["
.b0b4	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.b0b7	e0 00		cpx #$00			cpx 	#0 							; empty
.b0b9	f0 14		beq $b0cf			beq 	_SSEnd
.b0bb	a2 01		ldx #$01			ldx 	#1 							; start here
.b0bd					_SSLoop:
.b0bd	20 63 a6	jsr $a663			jsr 	IntegerToString 			; print TOS
.b0c0	20 51 a6	jsr $a651			jsr 	ErrorPrintIntegerBuffer
.b0c3	e4 18		cpx $18				cpx 	zTemp2 						; done TOS exit
.b0c5	f0 08		beq $b0cf			beq 	_SSEnd
.b0c7	e8		inx				inx	 								; advance pointer print ,
.b0c8	a9 2c		lda #$2c			lda 	#','
.b0ca	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.b0cd	80 ee		bra $b0bd			bra 	_SSLoop
.b0cf					_SSEnd:
.b0cf	a9 5d		lda #$5d			lda 	#"]"						; finish off.
.b0d1	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.b0d4	a9 0d		lda #$0d			lda 	#13
.b0d6	20 a1 a2	jsr $a2a1			jsr 	ExternPrint
.b0d9	7a		ply				ply
.b0da	fa		plx				plx
.b0db	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: miscellany/saveload.asm

.b0dc					System_Save:
.b0dc	20 71 a5	jsr $a571			jsr 	ResetVarMemory 				; make sure start/end are right
.b0df	20 f2 b0	jsr $b0f2			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0e2	20 fd a2	jsr $a2fd			jsr 	ExternSave
.b0e5	60		rts				rts
.b0e6					System_Load:
.b0e6	20 f2 b0	jsr $b0f2			jsr 	SLGetFileName 				; get filename -> zTemp0
.b0e9	20 37 a3	jsr $a337			jsr 	ExternLoad
.b0ec	20 4b a5	jsr $a54b			jsr 	ResetForRun 				; re-initialise everything
.b0ef	4c 3b a0	jmp $a03b			jmp 	WarmStart
.b0f2					SLGetFileName:
.b0f2	e0 00		cpx #$00			cpx 	#0 							; gotta be something on the stack
.b0f4	f0 17		beq $b10d			beq 	_SLFNFail
.b0f6	bd 00 0e	lda $0e00,x			lda 	stack2,x 					; must be a tokenise buffer address
.b0f9	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b0fc	d0 0f		bne $b10d			bne 	_SLFNFail
.b0fe	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b101	c9 0a		cmp #$0a			cmp 	#TokeniseBuffer >> 8
.b103	d0 08		bne $b10d			bne 	_SLFNFail
.b105	85 15		sta $15				sta 	zTemp0+1 					; copy the filename address
.b107	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b10a	85 14		sta $14				sta 	zTemp0
.b10c	60		rts				rts
.b10d					_SLFNFail:
.b10d	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b110	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>b118	4e 41 4d 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/variables.asm

.b11d					Identifier:
.b11d	88		dey				dey 								; wind back to identifier start
.b11e	20 57 a4	jsr $a457			jsr 	IdentifierSearch 			; try to find it.
.b121	90 2f		bcc $b152			bcc 	_IDUnknown 					; not known, give up.
.b123	48		pha				pha
.b124					_IDSkip:
.b124	b1 10		lda ($10),y			lda 	(codePtr),y
.b126	c8		iny				iny
.b127	c9 e0		cmp #$e0			cmp 	#$E0
.b129	90 f9		bcc $b124			bcc 	_IDSkip
.b12b	68		pla				pla
.b12c	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; check a variable
.b12e	d0 36		bne $b166			bne 	_IDCall
.b130	20 1a b2	jsr $b21a			jsr 	IndexCheck 					; check index/subscript
.b133	5a		phy				phy
.b134	e8		inx				inx 								; make space on stack
.b135	a0 00		ldy #$00			ldy 	#0 							; copy it back
.b137	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b139	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b13c	c8		iny				iny
.b13d	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b13f	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b142	c8		iny				iny
.b143	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b145	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b148	c8		iny				iny
.b149	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b14b	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b14e	7a		ply				ply
.b14f	4c 86 a3	jmp $a386			jmp 	Execute
.b152					_IDUnknown:
.b152	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b155	55 4e 4b 4e 4f 57 4e 20				.text 	"UNKNOWN VARIABLE",0
>b15d	56 41 52 49 41 42 4c 45 00
.b166					_IDCall:
.b166	c9 50		cmp #$50			cmp 	#IDT_PROCEDURE
.b168	d0 1b		bne $b185			bne 	_IDCode
.b16a	20 d6 b3	jsr $b3d6			jsr 	StructPushCurrent 			; push current on the stack.
.b16d	a9 43		lda #$43			lda 	#STM_CALL 					; push marker
.b16f	c6 12		dec $12				dec 	StructSP
.b171	92 12		sta ($12)			sta 	(StructSP)
.b173	a0 01		ldy #$01			ldy 	#1 							; line address
.b175	b2 22		lda ($22)			lda 	(idDataAddr)
.b177	85 10		sta $10				sta 	codePtr
.b179	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b17b	85 11		sta $11				sta 	codePtr+1
.b17d	a0 03		ldy #$03			ldy 	#3 							; line position
.b17f	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b181	a8		tay				tay
.b182	4c 86 a3	jmp $a386			jmp 	Execute
.b185					_IDCode:
.b185	b2 22		lda ($22)			lda 	(idDataAddr) 				; copy the address
.b187	85 14		sta $14				sta 	zTemp0
.b189	5a		phy				phy
.b18a	a0 01		ldy #$01			ldy 	#1
.b18c	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b18e	85 15		sta $15				sta 	zTemp0+1
.b190	7a		ply				ply
.b191	20 97 b1	jsr $b197			jsr 	_IDCallZTemp0 				; call the routine
.b194	4c 86 a3	jmp $a386			jmp 	Execute
.b197					_IDCallZTemp0:
.b197	6c 14 00	jmp ($0014)			jmp 	(zTemp0)
.b19a					ProcReturn:
.b19a					ProcReturn2:
.b19a	b2 12		lda ($12)			lda 	(StructSP)					; check it's CALL
.b19c	c9 43		cmp #$43			cmp 	#STM_CALL
.b19e	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b1a0	20 0a b4	jsr $b40a			jsr 	StructPopCurrent
.b1a3	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b1a5	20 d0 b3	jsr $b3d0			jsr 	StructPopCount
.b1a8	60		rts				rts
.b1a9					WriteVariable:
.b1a9	b1 10		lda ($10),y			lda 	(codePtr),y 				; check variable
.b1ab	c9 c0		cmp #$c0			cmp 	#$C0
.b1ad	90 5d		bcc $b20c			bcc 	_WVTypeError
.b1af	20 57 a4	jsr $a457			jsr 	IdentifierSearch 			; does it exist
.b1b2	90 06		bcc $b1ba			bcc 	_WVNoIdentifier
.b1b4	c9 56		cmp #$56			cmp 	#IDT_VARIABLE 				; must be a variable
.b1b6	f0 12		beq $b1ca			beq 	_WVWriteTOS 				; if so write TOS to it.
.b1b8	80 52		bra $b20c			bra 	_WVTypeError 				; not, then can't do anything.
.b1ba					_WVNoIdentifier:
.b1ba	5a		phy				phy 								; get current line number
.b1bb	a0 01		ldy #$01			ldy 	#1
.b1bd	b1 10		lda ($10),y			lda 	(codePtr),y
.b1bf	c8		iny				iny
.b1c0	11 10		ora ($10),y			ora 	(codePtr),y
.b1c2	f0 2e		beq $b1f2			beq 	_WVCantCreate 				; if zero (command line) no new vars
.b1c4	7a		ply				ply
.b1c5	a9 56		lda #$56			lda 	#IDT_VARIABLE 				; create identifier
.b1c7	20 be a4	jsr $a4be			jsr 	IdentifierCreate 			; try to find it
.b1ca					_WVWriteTOS:
.b1ca	88		dey				dey 								; skip over identifier.
.b1cb					_WVSkipIdentifier:
.b1cb	b1 10		lda ($10),y			lda 	(codePtr),y
.b1cd	c8		iny				iny
.b1ce	c9 e0		cmp #$e0			cmp 	#$E0
.b1d0	90 f9		bcc $b1cb			bcc 	_WVSkipIdentifier
.b1d2	20 1a b2	jsr $b21a			jsr 	IndexCheck 					; check index/subscript
.b1d5	5a		phy				phy									; copy TOS in
.b1d6	a0 00		ldy #$00			ldy 	#0
.b1d8	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b1db	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1dd	c8		iny				iny
.b1de	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b1e1	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1e3	c8		iny				iny
.b1e4	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b1e7	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1e9	c8		iny				iny
.b1ea	bd 00 0f	lda $0f00,x			lda 	stack3,x
.b1ed	91 22		sta ($22),y			sta 	(idDataAddr),y
.b1ef	7a		ply				ply
.b1f0	ca		dex				dex 								; drop
.b1f1	60		rts				rts									; go back and execute again.
.b1f2					_WVCantCreate:
.b1f2	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b1f5	43 41 4e 4e 4f 54 20 43				.text 	"CANNOT CREATE VARIABLE",0
>b1fd	52 45 41 54 45 20 56 41 52 49 41 42 4c 45 00
.b20c					_WVTypeError:
.b20c	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b20f	57 52 4f 4e 47 20 54 59				.text 	"WRONG TYPE",0
>b217	50 45 00

;******  Return to file: main.asm


;******  Processing file: miscellany/indexing.asm

.b21a					IndexCheck:
.b21a	b1 10		lda ($10),y			lda 	(codePtr),y 				; check next character
.b21c	c9 4b		cmp #$4b			cmp 	#KWD_LSQPAREN 				; is it [ ?
.b21e	d0 10		bne $b230			bne 	_ICExit
.b220	c8		iny				iny
.b221	b1 10		lda ($10),y			lda 	(codePtr),y 				; next is ] ?
.b223	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN
.b225	f0 23		beq $b24a			beq 	_ICArrayAccess
.b227	29 c0		and #$c0			and 	#$C0 						; is it a constant
.b229	c9 80		cmp #$80			cmp 	#$80
.b22b	f0 04		beq $b231			beq 	_ICConstAccess
.b22d					_ICSyntax:
.b22d	4c d9 a5	jmp $a5d9			jmp 	SyntaxError
.b230					_ICExit:
.b230	60		rts				rts
.b231					_ICConstAccess:
.b231	b1 10		lda ($10),y			lda 	(codePtr),y 				; get constant, copy in.
.b233	29 3f		and #$3f			and 	#$3F 						; to subscript in zTemp1
.b235	85 16		sta $16				sta 	zTemp1
.b237	64 17		stz $17				stz 	zTemp1+1
.b239	c8		iny				iny
.b23a	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b23c	c8		iny				iny
.b23d	c9 4e		cmp #$4e			cmp 	#KWD_CONSTANT_PLUS 			; ok if K+
.b23f	d0 ec		bne $b22d			bne 	_ICSyntax
.b241	b1 10		lda ($10),y			lda 	(codePtr),y 				; get next
.b243	c8		iny				iny
.b244	c9 4c		cmp #$4c			cmp 	#KWD_RSQPAREN 				; ok if ]
.b246	d0 e5		bne $b22d			bne 	_ICSyntax
.b248	80 0c		bra $b256			bra 	_ICAddSubscript
.b24a					_ICArrayAccess:
.b24a	c8		iny				iny 								; point to next
.b24b	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy TOS to zTemp1
.b24e	85 16		sta $16				sta 	zTemp1 						; no point in the rest !
.b250	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b253	85 17		sta $17				sta 	zTemp1+1
.b255	ca		dex				dex
.b256					_ICAddSubscript:
.b256	06 16		asl $16				asl 	zTemp1 						; subscript x 4
.b258	26 17		rol $17				rol 	zTemp1+1
.b25a	06 16		asl $16				asl 	zTemp1
.b25c	26 17		rol $17				rol 	zTemp1+1
.b25e	5a		phy				phy
.b25f	b2 22		lda ($22)			lda 	(idDataAddr)				; check indirecting through 0
.b261	a0 01		ldy #$01			ldy 	#1
.b263	11 22		ora ($22),y			ora 	(idDataAddr),y 				; probably means uninitialised
.b265	c8		iny				iny
.b266	11 22		ora ($22),y			ora 	(idDataAddr),y
.b268	c8		iny				iny
.b269	11 22		ora ($22),y			ora 	(idDataAddr),y
.b26b	f0 17		beq $b284			beq 	_ICZero
.b26d	18		clc				clc									; add zTemp1 to value at (idDataAddr)
.b26e	b2 22		lda ($22)			lda 	(idDataAddr)
.b270	65 16		adc $16				adc 	zTemp1
.b272	48		pha				pha
.b273	a0 01		ldy #$01			ldy 	#1
.b275	b1 22		lda ($22),y			lda 	(idDataAddr),y
.b277	65 17		adc $17				adc 	zTemp1+1
.b279	85 23		sta $23				sta 	idDataAddr+1 				; write it out
.b27b	68		pla				pla
.b27c	85 22		sta $22				sta 	idDataAddr
.b27e	64 24		stz $24				stz 	idDataAddr+2 				; extend to 32 bits
.b280	64 25		stz $25				stz 	idDataAddr+3
.b282	7a		ply				ply
.b283	60		rts				rts
.b284					_ICZero:
.b284	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b287	55 4e 49 4e 49 54 49 41				.text 	"UNINITIALISED ARRAY",0
>b28f	4c 49 53 45 44 20 41 52 52 41 59 00

;******  Return to file: main.asm


;******  Processing file: structures/if.asm

.b29b					Struct_IF:
.b29b	ca		dex				dex 								; drop TOS
.b29c	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check TOS
.b29f	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b2a2	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b2a5	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b2a8	f0 01		beq $b2ab			beq 	_SIFSkipForward
.b2aa	60		rts				rts
.b2ab					_SIFSkipForward:
.b2ab	a9 2c		lda #$2c			lda 	#KWD_ELSE
.b2ad	4c b6 b2	jmp $b2b6			jmp 	StructSkipForward
.b2b0					Struct_ELSE:
.b2b0	a9 2e		lda #$2e			lda 	#KWD_ENDIF
.b2b2	4c b6 b2	jmp $b2b6			jmp 	StructSkipForward
.b2b5					Struct_ENDIF:
.b2b5	60		rts				rts
.b2b6					StructSkipForward:
.b2b6	85 14		sta $14				sta 	zTemp0 						; 2nd match
.b2b8					_SSFLoop:
.b2b8	b1 10		lda ($10),y			lda 	(codePtr),y 				; read it
.b2ba	f0 14		beq $b2d0			beq 	_SSFExit 					; if EOL then exit
.b2bc	c8		iny				iny 								; advance past it
.b2bd	c9 2e		cmp #$2e			cmp 	#KWD_ENDIF 					; exit if ENDIF or 2nd match
.b2bf	f0 0f		beq $b2d0			beq 	_SSFExit
.b2c1	c5 14		cmp $14				cmp 	zTemp0
.b2c3	f0 0b		beq $b2d0			beq 	_SSFExit
.b2c5	c9 03		cmp #$03			cmp 	#3 							; if not 1,2 go round again
.b2c7	b0 ef		bcs $b2b8			bcs 	_SSFLoop
.b2c9	98		tya				tya 								; add length offset
.b2ca	3a		dec a				dec 	a
.b2cb	71 10		adc ($10),y			adc 	(codePtr),y
.b2cd	a8		tay				tay
.b2ce	80 e8		bra $b2b8			bra 	_SSFLoop
.b2d0					_SSFExit:
.b2d0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/fornext.asm

.b2d1					Command_For:
.b2d1	20 d6 b3	jsr $b3d6			jsr 	StructPushCurrent 			; push current on the stack.
.b2d4	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; check zero
.b2d7	1d 00 0d	ora $0d00,x			ora 	stack1,x
.b2da	1d 00 0e	ora $0e00,x			ora 	stack2,x
.b2dd	1d 00 0f	ora $0f00,x			ora 	stack3,x
.b2e0	f0 34		beq $b316			beq 	_CFZero
.b2e2	bd 00 0f	lda $0f00,x			lda 	stack3,x 					; push 1's complement of index on
.b2e5	49 ff		eor #$ff			eor 	#$FF 						; structure stack.
.b2e7	c6 12		dec $12				dec 	StructSP
.b2e9	92 12		sta ($12)			sta 	(StructSP)
.b2eb	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b2ee	49 ff		eor #$ff			eor 	#$FF
.b2f0	c6 12		dec $12				dec 	StructSP
.b2f2	92 12		sta ($12)			sta 	(StructSP)
.b2f4	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b2f7	49 ff		eor #$ff			eor 	#$FF
.b2f9	c6 12		dec $12				dec 	StructSP
.b2fb	92 12		sta ($12)			sta 	(StructSP)
.b2fd	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b300	49 ff		eor #$ff			eor 	#$FF
.b302	c6 12		dec $12				dec 	StructSP
.b304	92 12		sta ($12)			sta 	(StructSP)
.b306	ca		dex				dex 								; pop stack value
.b307	a9 46		lda #$46			lda 	#STM_FOR 					; push FOR marker
.b309	c6 12		dec $12				dec 	StructSP
.b30b	92 12		sta ($12)			sta 	(StructSP)
.b30d	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b30f	85 24		sta $24				sta 	ForAddr
.b311	a5 13		lda $13				lda 	StructSP+1
.b313	85 25		sta $25				sta 	ForAddr+1
.b315	60		rts				rts
.b316					_CFZero:
.b316	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b319	46 4f 52 20 43 4f 55 4e				.text 	"FOR COUNT ZERO",0
>b321	54 20 5a 45 52 4f 00
.b328					Command_Next:
.b328	b2 12		lda ($12)			lda 	(StructSP)					; check it's FOR.
.b32a	c9 46		cmp #$46			cmp 	#STM_FOR
.b32c	d0 30		bne $b35e			bne 	_CNNoFor
.b32e	5a		phy				phy
.b32f	a0 00		ldy #$00			ldy 	#0
.b331					_CNIncrement:
.b331	c8		iny				iny
.b332	b1 12		lda ($12),y			lda 	(StructSP),y 				; increment the index
.b334	1a		inc a				inc 	a
.b335	91 12		sta ($12),y			sta 	(StructSP),y
.b337	f0 f8		beq $b331			beq		_CNIncrement 				; carry out.
.b339	a0 01		ldy #$01			ldy 	#1 							; now and all the counts together
.b33b	b1 12		lda ($12),y			lda 	(StructSP),y 				; on the last time round they
.b33d	c8		iny				iny 								; will all be $FF
.b33e	31 12		and ($12),y			and 	(StructSP),y
.b340	c8		iny				iny
.b341	31 12		and ($12),y			and 	(StructSP),y
.b343	c8		iny				iny
.b344	31 12		and ($12),y			and 	(StructSP),y
.b346	7a		ply				ply 								; restore Y
.b347	1a		inc a				inc 	a 							; so this will be zero last time round
.b348	d0 06		bne $b350			bne 	_CNLoop 					; loop back if non-zero
.b34a	a9 09		lda #$09			lda 	#9 							; pop 9 elements off structure stack.
.b34c	20 d0 b3	jsr $b3d0			jsr 	StructPopCount
.b34f	60		rts				rts
.b350					_CNLoop:
.b350	a5 12		lda $12				lda 	StructSP 					; copy current so it can access it.
.b352	85 24		sta $24				sta 	ForAddr
.b354	a5 13		lda $13				lda 	StructSP+1
.b356	85 25		sta $25				sta 	ForAddr+1
.b358	a0 05		ldy #$05			ldy 	#5 							; restore the position
.b35a	20 0a b4	jsr $b40a			jsr 	StructPopCurrent
.b35d	60		rts				rts
.b35e					_CNNoFor:
.b35e	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b361	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>b369	46 4f 52 00
.b36d					Command_Index:
.b36d	5a		phy				phy
.b36e	a0 01		ldy #$01			ldy 	#1 							; get the stack position of
.b370	e8		inx				inx
.b371	38		sec				sec
.b372	a9 fe		lda #$fe			lda 	#$FE
.b374	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b376	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b379	c8		iny				iny
.b37a	a9 ff		lda #$ff			lda 	#$FF
.b37c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b37e	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b381	c8		iny				iny
.b382	a9 ff		lda #$ff			lda 	#$FF
.b384	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b386	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b389	c8		iny				iny
.b38a	a9 ff		lda #$ff			lda 	#$FF
.b38c	f1 24		sbc ($24),y			sbc 	(ForAddr),y
.b38e	9d 00 0f	sta $0f00,x			sta 	stack3,x
.b391	7a		ply				ply
.b392	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: structures/repeat.asm

.b393					Command_Repeat:
.b393	20 d6 b3	jsr $b3d6			jsr 	StructPushCurrent 			; push current on the stack.
.b396	a9 52		lda #$52			lda 	#STM_REPEAT 				; push marker
.b398	c6 12		dec $12				dec 	StructSP
.b39a	92 12		sta ($12)			sta 	(StructSP)
.b39c	60		rts				rts
.b39d					Command_Until:
.b39d	b2 12		lda ($12)			lda 	(StructSP)					; check it's REPEAT
.b39f	c9 52		cmp #$52			cmp 	#STM_REPEAT
.b3a1	d0 1b		bne $b3be			bne 	_CUNoRepeat
.b3a3	ca		dex				dex 								; pop
.b3a4	bd 01 0c	lda $0c01,x			lda 	stack0+1,x 					; check old TOS zero
.b3a7	1d 01 0d	ora $0d01,x			ora 	stack1+1,x
.b3aa	1d 01 0e	ora $0e01,x			ora 	stack2+1,x
.b3ad	1d 01 0f	ora $0f01,x			ora 	stack3+1,x
.b3b0	f0 06		beq $b3b8			beq 	_CULoop
.b3b2	a9 05		lda #$05			lda 	#5 							; pop 5 elements off structure stack.
.b3b4	20 d0 b3	jsr $b3d0			jsr 	StructPopCount
.b3b7	60		rts				rts
.b3b8					_CULoop:
.b3b8	a0 01		ldy #$01			ldy 	#1 							; restore the position
.b3ba	20 0a b4	jsr $b40a			jsr 	StructPopCurrent
.b3bd	60		rts				rts
.b3be					_CUNoRepeat:
.b3be	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b3c1	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>b3c9	52 45 50 45 41 54 00

;******  Return to file: main.asm


;******  Processing file: structures/structures.asm

.b3d0					StructPopCount:
.b3d0	18		clc				clc
.b3d1	65 12		adc $12				adc 	StructSP
.b3d3	85 12		sta $12				sta 	StructSP
.b3d5	60		rts				rts
.b3d6					StructPushCurrent:
.b3d6	a5 12		lda $12				lda 	StructSP 					; check space for more
.b3d8	c9 0a		cmp #$0a			cmp 	#10
.b3da	90 18		bcc $b3f4			bcc 	_SPCSpace
.b3dc	a9 00		lda #$00			lda 	#0							; push bank
.b3de	c6 12		dec $12				dec 	StructSP
.b3e0	92 12		sta ($12)			sta 	(StructSP)
.b3e2	98		tya				tya									; y Offset
.b3e3	c6 12		dec $12				dec 	StructSP
.b3e5	92 12		sta ($12)			sta 	(StructSP)
.b3e7	a5 11		lda $11				lda 	codePtr+1 					; codeptr high
.b3e9	c6 12		dec $12				dec 	StructSP
.b3eb	92 12		sta ($12)			sta 	(StructSP)
.b3ed	a5 10		lda $10				lda 	codePtr 					; codeptr low
.b3ef	c6 12		dec $12				dec 	StructSP
.b3f1	92 12		sta ($12)			sta 	(StructSP)
.b3f3	60		rts				rts
.b3f4					_SPCSpace:
.b3f4	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b3f7	52 45 54 55 52 4e 20 53				.text 	"RETURN STACK SPACE",0
>b3ff	54 41 43 4b 20 53 50 41 43 45 00
.b40a					StructPopCurrent:
.b40a	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr low
.b40c	85 10		sta $10				sta 	codePtr
.b40e	c8		iny				iny
.b40f	b1 12		lda ($12),y			lda 	(StructSP),y 				; codeptr high
.b411	85 11		sta $11				sta 	codePtr+1
.b413	c8		iny				iny
.b414	b1 12		lda ($12),y			lda 	(StructSP),y				; y offset
.b416	a8		tay				tay
.b417	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/hashes.inc

.b418					libfunc_1000:
>b418	00 00					.word 0
>b41a	fa b5 00 00				.dword Vera_Sprite
>b41e	22 b4					.word libfunc_1000_name
>b420	00 43					.byte 0,'C'
.b422					libfunc_1000_name:
>b422	d5 c4 d1 c0 df f2			.byte $d5,$c4,$d1,$c0,$df,$f2
.b428					libfunc_1001:
>b428	00 00					.word 0
>b42a	05 b5 00 00				.dword System_Random
>b42e	32 b4					.word libfunc_1001_name
>b430	00 43					.byte 0,'C'
.b432					libfunc_1001_name:
>b432	d1 cd e3				.byte $d1,$cd,$e3
.b435					libfunc_1002:
>b435	28 b4					.word libfunc_1001
>b437	a5 b5 00 00				.dword Vera_SetAddress
>b43b	3f b4					.word libfunc_1002_name
>b43d	00 43					.byte 0,'C'
.b43f					libfunc_1002_name:
>b43f	d5 c4 d1 c0 df d2 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$d2,$c4,$f3
.b447					libfunc_1003:
>b447	35 b4					.word libfunc_1002
>b449	bf b5 00 00				.dword Vera_GetAddress
>b44d	51 b4					.word libfunc_1003_name
>b44f	00 43					.byte 0,'C'
.b451					libfunc_1003_name:
>b451	d5 c4 d1 c0 df c6 c4 f3			.byte $d5,$c4,$d1,$c0,$df,$c6,$c4,$f3
.b459					libfunc_1004:
>b459	00 00					.word 0
>b45b	d6 b5 00 00				.dword Vera_SetPalette
>b45f	63 b4					.word libfunc_1004_name
>b461	00 43					.byte 0,'C'
.b463					libfunc_1004_name:
>b463	d5 c4 d1 c0 df cf c0 cb			.byte $d5,$c4,$d1,$c0,$df,$cf,$c0,$cb,$c4,$d3,$d3,$e4
>b46b	c4 d3 d3 e4
.b46f					libfunc_1005:
>b46f	59 b4					.word libfunc_1004
>b471	24 b6 00 00				.dword Vera_SpriteMove
>b475	79 b4					.word libfunc_1005_name
>b477	00 43					.byte 0,'C'
.b479					libfunc_1005_name:
>b479	d5 c4 d1 c0 df d2 df cc			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$cc,$ce,$d5,$e4
>b481	ce d5 e4
.b484					libfunc_1006:
>b484	6f b4					.word libfunc_1005
>b486	6e b6 00 00				.dword Vera_SetSize
>b48a	8e b4					.word libfunc_1006_name
>b48c	00 43					.byte 0,'C'
.b48e					libfunc_1006_name:
>b48e	d5 c4 d1 c0 df d2 df d2			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4
>b496	c8 d9 e4
.b499					libfunc_1007:
>b499	00 00					.word 0
>b49b	08 b6 00 00				.dword Vera_SpriteDisable
>b49f	a3 b4					.word libfunc_1007_name
>b4a1	00 43					.byte 0,'C'
.b4a3					libfunc_1007_name:
>b4a3	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$c5,$e5
>b4ab	c5 e5
.b4ad					libfunc_1008:
>b4ad	00 00					.word 0
>b4af	3c b6 00 00				.dword Vera_SpriteSetup
>b4b3	b7 b4					.word libfunc_1008_name
>b4b5	00 43					.byte 0,'C'
.b4b7					libfunc_1008_name:
>b4b7	d5 c4 d1 c0 df d2 df c6			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7
>b4bf	c5 f7
.b4c1					libfunc_1009:
>b4c1	00 00					.word 0
>b4c3	72 b5 00 00				.dword String_Len
>b4c7	cb b4					.word libfunc_1009_name
>b4c9	00 43					.byte 0,'C'
.b4cb					libfunc_1009_name:
>b4cb	d2 d3 d1 df cb c4 ed			.byte $d2,$d3,$d1,$df,$cb,$c4,$ed
.b4d2					libfunc_1010:
>b4d2	c1 b4					.word libfunc_1009
>b4d4	04 b6 00 00				.dword Vera_SpriteEnable
>b4d8	dc b4					.word libfunc_1010_name
>b4da	00 43					.byte 0,'C'
.b4dc					libfunc_1010_name:
>b4dc	d5 c4 d1 c0 df d2 df ce			.byte $d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed
>b4e4	ed
.b4e5					DefaultHashTable:
>b4e5	00 00					.word 0
>b4e7	00 00					.word 0
>b4e9	18 b4					.word libfunc_1000
>b4eb	47 b4					.word libfunc_1003
>b4ed	84 b4					.word libfunc_1006
>b4ef	99 b4					.word libfunc_1007
>b4f1	00 00					.word 0
>b4f3	ad b4					.word libfunc_1008
>b4f5	00 00					.word 0
>b4f7	00 00					.word 0
>b4f9	00 00					.word 0
>b4fb	00 00					.word 0
>b4fd	00 00					.word 0
>b4ff	d2 b4					.word libfunc_1010
>b501	00 00					.word 0
>b503	00 00					.word 0

;******  Return to file: main.asm


;******  Processing file: generated/library.inc

.0826					RandomSeed:
>0826							.dword 		?
.b505					System_Random:
.b505	ad 26 08	lda $0826		lda 	RandomSeed
.b508	0d 27 08	ora $0827		ora 	RandomSeed+1
.b50b	0d 28 08	ora $0828		ora 	RandomSeed+2
.b50e	0d 29 08	ora $0829		ora 	RandomSeed+3
.b511	d0 09		bne $b51c		bne 	_SRSeeded
.b513	ee 27 08	inc $0827		inc 	RandomSeed+1
.b516	ce 29 08	dec $0829		dec 	RandomSeed+3
.b519	20 05 b5	jsr $b505		jsr 	System_Random
.b51c					_SRSeeded:
.b51c	5a		phy			phy
.b51d	ac 28 08	ldy $0828		ldy RandomSeed+2 ; will move to RandomSeed+3 at the end
.b520	ad 27 08	lda $0827		lda RandomSeed+1
.b523	8d 28 08	sta $0828		sta RandomSeed+2
.b526	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b529	4a		lsr a			lsr
.b52a	8d 27 08	sta $0827		sta RandomSeed+1 ; reverse: 100011
.b52d	4a		lsr a			lsr
.b52e	4a		lsr a			lsr
.b52f	4a		lsr a			lsr
.b530	4a		lsr a			lsr
.b531	4d 27 08	eor $0827		eor RandomSeed+1
.b534	4a		lsr a			lsr
.b535	4d 27 08	eor $0827		eor RandomSeed+1
.b538	4d 26 08	eor $0826		eor RandomSeed+0 ; combine with original low byte
.b53b	8d 27 08	sta $0827		sta RandomSeed+1
.b53e	ad 29 08	lda $0829		lda RandomSeed+3 ; original high byte
.b541	0a		asl a			asl
.b542	4d 29 08	eor $0829		eor RandomSeed+3
.b545	0a		asl a			asl
.b546	0a		asl a			asl
.b547	0a		asl a			asl
.b548	0a		asl a			asl
.b549	4d 29 08	eor $0829		eor RandomSeed+3
.b54c	0a		asl a			asl
.b54d	0a		asl a			asl
.b54e	4d 29 08	eor $0829		eor RandomSeed+3
.b551	8c 29 08	sty $0829		sty RandomSeed+3 ; finish rotating byte 2 into 3
.b554	8d 26 08	sta $0826		sta RandomSeed+0
.b557	e8		inx			inx
.b558	ad 26 08	lda $0826		lda	RandomSeed+0
.b55b	9d 00 0c	sta $0c00,x		sta stack0,x
.b55e	ad 27 08	lda $0827		lda	RandomSeed+1
.b561	9d 00 0d	sta $0d00,x		sta stack1,x
.b564	ad 28 08	lda $0828		lda	RandomSeed+2
.b567	9d 00 0e	sta $0e00,x		sta stack2,x
.b56a	ad 29 08	lda $0829		lda	RandomSeed+3
.b56d	9d 00 0f	sta $0f00,x		sta stack3,x
.b570	7a		ply			ply
.b571	60		rts			rts
.b572					String_Len:
.b572	bd 00 0c	lda $0c00,x			lda 	stack0,x 					; copy string address
.b575	85 14		sta $14				sta 	zTemp0
.b577	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b57a	85 15		sta $15				sta 	zTemp0+1
.b57c	5a		phy				phy
.b57d	a0 ff		ldy #$ff			ldy 	#255 						; find string length
.b57f	c8		iny		_SLLoop:iny
.b580	c0 ff		cpy #$ff			cpy 	#255 						; cant find EOS.
.b582	f0 13		beq $b597			beq 	_SLFail
.b584	b1 14		lda ($14),y			lda 	(zTemp0),y
.b586	d0 f7		bne $b57f			bne 	_SLLoop
.b588	98		tya				tya
.b589	7a		ply				ply
.b58a	9d 00 0c	sta $0c00,x			sta 	stack0,x 					; return string
.b58d	9e 00 0d	stz $0d00,x			stz 	stack1,x
.b590	9e 00 0e	stz $0e00,x			stz 	stack2,x
.b593	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b596	60		rts				rts
.b597					_SLFail:
.b597	20 fa a5	jsr $a5fa			jsr 	ErrorHandler
>b59a	4e 4f 54 20 53 54 52 49				.text 	"NOT STRING",0
>b5a2	4e 47 00
=$9f20					Vera_Base = $9F20
.082a					veraCurrentLayer:
>082a							.byte 		? 						; current layer (0-1)
.082b					veraCurrentSprite:
>082b							.byte 		?						; current sprite (0-127)
.082c					veraSpriteMode:
>082c							.byte 		? 						; 0 4 bit, 1 8 bit
.b5a5					Vera_SetAddress:
.b5a5	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5a8	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5ab	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5ae	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5b1	bd 00 0e	lda $0e00,x			lda 	stack2,x
.b5b4	c9 10		cmp #$10			cmp 	#16
.b5b6	b0 02		bcs $b5ba			bcs 	_VSASetInc
.b5b8	09 10		ora #$10			ora 	#16
.b5ba					_VSASetInc:
.b5ba	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5bd	ca		dex				dex
.b5be	60		rts				rts
.b5bf					Vera_GetAddress:
.b5bf	e8		inx				inx
.b5c0	ad 20 9f	lda $9f20			lda 	Vera_Base
.b5c3	9d 00 0c	sta $0c00,x			sta 	stack0,x
.b5c6	ad 21 9f	lda $9f21			lda 	Vera_Base+1
.b5c9	9d 00 0d	sta $0d00,x			sta 	stack1,x
.b5cc	ad 22 9f	lda $9f22			lda 	Vera_Base+2
.b5cf	9d 00 0e	sta $0e00,x			sta 	stack2,x
.b5d2	9e 00 0f	stz $0f00,x			stz 	stack3,x
.b5d5	60		rts				rts
.b5d6					Vera_SetPalette:
.b5d6	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5d9	8d 20 9f	sta $9f20			sta 	Vera_Base
.b5dc	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5df	29 01		and #$01			and 	#$01
.b5e1	09 10		ora #$10			ora 	#$10
.b5e3	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b5e6	a9 1f		lda #$1f			lda 	#$1F
.b5e8	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b5eb	ca		dex				dex
.b5ec	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5ef	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5f2	bd 00 0d	lda $0d00,x			lda 	stack1,x
.b5f5	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b5f8	ca		dex				dex
.b5f9	60		rts				rts
.b5fa					Vera_Sprite:
.b5fa	bd 00 0c	lda $0c00,x			lda 	stack0,x
.b5fd	29 7f		and #$7f			and 	#$7F
.b5ff	8d 2b 08	sta $082b			sta 	veraCurrentSprite
.b602	ca		dex				dex
.b603	60		rts				rts
.b604					Vera_SpriteEnable:
.b604	a9 01		lda #$01			lda 	#1
.b606	80 02		bra $b60a			bra 	Vera_SpriteControl
.b608					Vera_SpriteDisable:
.b608	a9 00		lda #$00			lda 	#0
.b60a					Vera_SpriteControl:
.b60a	48		pha				pha
.b60b	a9 00		lda #$00			lda 	#$00
.b60d	8d 20 9f	sta $9f20			sta 	Vera_Base
.b610	a9 40		lda #$40			lda 	#$40
.b612	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b615	a9 1f		lda #$1f			lda 	#$1F
.b617	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b61a	68		pla				pla
.b61b	29 01		and #$01			and 	#1
.b61d	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b620	9c 23 9f	stz $9f23			stz 	Vera_Base+3
.b623	60		rts				rts
.b624					Vera_SpriteMove:
.b624	a9 02		lda #$02			lda 	#2 							; physical position
.b626	20 8c b6	jsr $b68c			jsr 	Vera_CurrentSprite
.b629	20 2c b6	jsr $b62c			jsr 	_VSMOutPosition
.b62c					_VSMOutPosition:
.b62c	ca		dex				dex
.b62d	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b630	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b633	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b636	29 03		and #$03			and 	#$03
.b638	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b63b	60		rts				rts
.b63c					Vera_SpriteSetup:
.b63c	a9 00		lda #$00			lda 	#0
.b63e	20 8c b6	jsr $b68c			jsr 	Vera_CurrentSprite
.b641	ca		dex				dex
.b642	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b645	85 14		sta $14				sta 	zTemp0
.b647	bd 01 0d	lda $0d01,x			lda 	stack1+1,x
.b64a	85 15		sta $15				sta 	zTemp0+1
.b64c	bd 01 0e	lda $0e01,x			lda 	stack2+1,x
.b64f	85 16		sta $16				sta 	zTemp1
.b651	5a		phy				phy
.b652	a0 05		ldy #$05			ldy 	#5
.b654	46 16		lsr $16		_VSSS:	lsr 	zTemp1
.b656	66 15		ror $15				ror 	zTemp0+1
.b658	66 14		ror $14				ror 	zTemp0
.b65a	88		dey				dey
.b65b	d0 f7		bne $b654			bne 	_VSSS
.b65d	7a		ply				ply
.b65e	a5 14		lda $14				lda 	zTemp0
.b660	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b663	a5 15		lda $15				lda 	zTemp0+1
.b665	09 80		ora #$80			ora 	#128
.b667	0d 2c 08	ora $082c			ora 	veraSpriteMode
.b66a	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b66d	60		rts				rts
.b66e					Vera_SetSize:
.b66e	a9 06		lda #$06			lda 	#6
.b670	20 8c b6	jsr $b68c			jsr 	Vera_CurrentSprite
.b673	a9 1c		lda #$1c			lda 	#$1C
.b675	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b678	ca		dex				dex
.b679	bd 01 0c	lda $0c01,x			lda 	stack0+1,x
.b67c	29 03		and #$03			and 	#3
.b67e	85 14		sta $14				sta 	zTemp0
.b680	0a		asl a				asl 	a
.b681	0a		asl a				asl 	a
.b682	05 14		ora $14				ora 	zTemp0
.b684	0a		asl a				asl 	a
.b685	0a		asl a				asl 	a
.b686	0a		asl a				asl 	a
.b687	0a		asl a				asl 	a
.b688	8d 23 9f	sta $9f23			sta 	Vera_Base+3
.b68b	60		rts				rts
.b68c					Vera_CurrentSprite:
.b68c	48		pha				pha 								; save offset
.b68d	ad 2b 08	lda $082b			lda 	veraCurrentSprite 			; address in zTemp0
.b690	0a		asl a				asl 	a
.b691	85 14		sta $14				sta 	zTemp0		 				; sprite# x 2
.b693	64 15		stz $15				stz 	zTemp0+1
.b695	06 14		asl $14				asl 	zTemp0 						; x 8
.b697	26 15		rol $15				rol 	zTemp0+1
.b699	06 14		asl $14				asl 	zTemp0
.b69b	68		pla				pla 								; fix up address
.b69c	05 14		ora $14				ora 	zTemp0
.b69e	8d 20 9f	sta $9f20			sta  	Vera_Base+0
.b6a1	a5 15		lda $15				lda 	zTemp0+1
.b6a3	09 50		ora #$50			ora 	#$50
.b6a5	8d 21 9f	sta $9f21			sta 	Vera_Base+1
.b6a8	a9 1f		lda #$1f			lda 	#$1F
.b6aa	8d 22 9f	sta $9f22			sta 	Vera_Base+2
.b6ad	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/testcode.inc

>1100	15 64 00 02 11 20 74 65			.byte $15,$64,$00,$02,$11,$20,$74,$65,$73,$74,$20,$70,$72,$6f,$67,$72,$61,$6d,$20,$00,$00,$0c,$6e,$00,$81,$4e,$d5,$c4,$d1,$c0,$df,$f2,$00,$0d,$78,$00,$d5,$c4,$d1,$c0,$df,$d2,$df,$ce,$ed,$00,$12,$82,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$c6,$c5,$f7,$00,$11,$8c,$00,$83,$4e,$d5,$c4,$d1,$c0,$df,$d2,$df,$d2,$c8,$d9,$e4,$00,$1f,$96,$00,$90,$80,$80,$4e,$d5,$c4,$d1,$c0,$df,$d2,$c4,$f3,$02,$0f,$6c,$69,$6e,$65,$20,$63,$6f,$6d,$6d,$65,$6e,$74,$00,$00,$07,$a0,$00,$a0,$4e,$2f,$00,$11,$aa,$00,$81,$80,$4e,$2f,$31,$20,$20,$d5,$d6,$d1,$c8,$d3,$e4,$00,$0d,$b4,$00,$37,$37,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$06,$be,$00,$16,$2d,$00,$11,$c8,$00,$29,$d5,$d6,$d1,$c8,$d3,$e4,$89,$bc,$a3,$4e,$26,$18,$00,$0c,$d2,$00,$29,$c0,$cd,$c8,$cc,$c0,$d3,$e4,$00,$08,$dc,$00,$8f,$a8,$4e,$2f,$00,$08,$e6,$00,$83,$bf,$4e,$2f,$00,$05,$f0,$00,$37,$00,$06,$fa,$00,$37,$18,$00
>1108	73 74 20 70 72 6f 67 72 61 6d 20 00 00 0c 6e 00
>1118	81 4e d5 c4 d1 c0 df f2 00 0d 78 00 d5 c4 d1 c0
>1128	df d2 df ce ed 00 12 82 00 90 80 80 4e d5 c4 d1
>1138	c0 df d2 df c6 c5 f7 00 11 8c 00 83 4e d5 c4 d1
>1148	c0 df d2 df d2 c8 d9 e4 00 1f 96 00 90 80 80 4e
>1158	d5 c4 d1 c0 df d2 c4 f3 02 0f 6c 69 6e 65 20 63
>1168	6f 6d 6d 65 6e 74 00 00 07 a0 00 a0 4e 2f 00 11
>1178	aa 00 81 80 4e 2f 31 20 20 d5 d6 d1 c8 d3 e4 00
>1188	0d b4 00 37 37 c0 cd c8 cc c0 d3 e4 00 06 be 00
>1198	16 2d 00 11 c8 00 29 d5 d6 d1 c8 d3 e4 89 bc a3
>11a8	4e 26 18 00 0c d2 00 29 c0 cd c8 cc c0 d3 e4 00
>11b8	08 dc 00 8f a8 4e 2f 00 08 e6 00 83 bf 4e 2f 00
>11c8	05 f0 00 37 00 06 fa 00 37 18 00

;******  Return to file: main.asm

>11d3	00						.byte 	0

;******  End of listing
